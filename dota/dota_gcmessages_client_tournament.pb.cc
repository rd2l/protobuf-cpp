// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_tournament.proto

#include "dota_gcmessages_client_tournament.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ftournament_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATournamentInfo_News_dota_5fgcmessages_5fclient_5ftournament_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ftournament_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATournamentInfo_PhaseGroup_dota_5fgcmessages_5fclient_5ftournament_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ftournament_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATournamentInfo_Team_dota_5fgcmessages_5fclient_5ftournament_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ftournament_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATournamentInfo_UpcomingMatch_dota_5fgcmessages_5fclient_5ftournament_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ftournament_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATournamentStateChange_GameChange_dota_5fgcmessages_5fclient_5ftournament_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ftournament_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATournamentStateChange_TeamChange_dota_5fgcmessages_5fclient_5ftournament_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ftournament_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATournament_Game_dota_5fgcmessages_5fclient_5ftournament_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ftournament_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATournament_Node_dota_5fgcmessages_5fclient_5ftournament_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ftournament_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATournament_Team_dota_5fgcmessages_5fclient_5ftournament_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ftournament_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAWeekendTourneyParticipationDetails_Tier_dota_5fgcmessages_5fclient_5ftournament_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ftournament_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAWeekendTourneyPlayerHistory_Tournament_dota_5fgcmessages_5fclient_5ftournament_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ftournament_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAWeekendTourneyPlayerSkillLevelStats_dota_5fgcmessages_5fclient_5ftournament_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ftournament_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgWeekendTourneySchedule_Division_dota_5fgcmessages_5fclient_5ftournament_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ftournament_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTATournamentInfo_Phase_dota_5fgcmessages_5fclient_5ftournament_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ftournament_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAWeekendTourneyParticipationDetails_Division_dota_5fgcmessages_5fclient_5ftournament_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5ftournament_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_CMsgDOTATournament_dota_5fgcmessages_5fclient_5ftournament_2eproto;
namespace proto {
namespace dota {
class CMsgDOTATournamentInfo_PhaseGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournamentInfo_PhaseGroup> _instance;
} _CMsgDOTATournamentInfo_PhaseGroup_default_instance_;
class CMsgDOTATournamentInfo_PhaseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournamentInfo_Phase> _instance;
} _CMsgDOTATournamentInfo_Phase_default_instance_;
class CMsgDOTATournamentInfo_TeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournamentInfo_Team> _instance;
} _CMsgDOTATournamentInfo_Team_default_instance_;
class CMsgDOTATournamentInfo_UpcomingMatchDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournamentInfo_UpcomingMatch> _instance;
} _CMsgDOTATournamentInfo_UpcomingMatch_default_instance_;
class CMsgDOTATournamentInfo_NewsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournamentInfo_News> _instance;
} _CMsgDOTATournamentInfo_News_default_instance_;
class CMsgDOTATournamentInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournamentInfo> _instance;
} _CMsgDOTATournamentInfo_default_instance_;
class CMsgRequestWeekendTourneyScheduleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRequestWeekendTourneySchedule> _instance;
} _CMsgRequestWeekendTourneySchedule_default_instance_;
class CMsgWeekendTourneySchedule_DivisionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgWeekendTourneySchedule_Division> _instance;
} _CMsgWeekendTourneySchedule_Division_default_instance_;
class CMsgWeekendTourneyScheduleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgWeekendTourneySchedule> _instance;
} _CMsgWeekendTourneySchedule_default_instance_;
class CMsgWeekendTourneyOptsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgWeekendTourneyOpts> _instance;
} _CMsgWeekendTourneyOpts_default_instance_;
class CMsgWeekendTourneyLeaveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgWeekendTourneyLeave> _instance;
} _CMsgWeekendTourneyLeave_default_instance_;
class CMsgDOTATournament_TeamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournament_Team> _instance;
} _CMsgDOTATournament_Team_default_instance_;
class CMsgDOTATournament_GameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournament_Game> _instance;
} _CMsgDOTATournament_Game_default_instance_;
class CMsgDOTATournament_NodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournament_Node> _instance;
} _CMsgDOTATournament_Node_default_instance_;
class CMsgDOTATournamentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournament> _instance;
} _CMsgDOTATournament_default_instance_;
class CMsgDOTATournamentStateChange_GameChangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournamentStateChange_GameChange> _instance;
} _CMsgDOTATournamentStateChange_GameChange_default_instance_;
class CMsgDOTATournamentStateChange_TeamChangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournamentStateChange_TeamChange> _instance;
} _CMsgDOTATournamentStateChange_TeamChange_default_instance_;
class CMsgDOTATournamentStateChangeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournamentStateChange> _instance;
} _CMsgDOTATournamentStateChange_default_instance_;
class CMsgDOTATournamentRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournamentRequest> _instance;
} _CMsgDOTATournamentRequest_default_instance_;
class CMsgDOTATournamentResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTATournamentResponse> _instance;
} _CMsgDOTATournamentResponse_default_instance_;
class CMsgDOTAClearTournamentGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAClearTournamentGame> _instance;
} _CMsgDOTAClearTournamentGame_default_instance_;
class CMsgDOTAWeekendTourneyPlayerSkillLevelStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAWeekendTourneyPlayerSkillLevelStats> _instance;
} _CMsgDOTAWeekendTourneyPlayerSkillLevelStats_default_instance_;
class CMsgDOTAWeekendTourneyPlayerStatsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAWeekendTourneyPlayerStats> _instance;
} _CMsgDOTAWeekendTourneyPlayerStats_default_instance_;
class CMsgDOTAWeekendTourneyPlayerStatsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAWeekendTourneyPlayerStatsRequest> _instance;
} _CMsgDOTAWeekendTourneyPlayerStatsRequest_default_instance_;
class CMsgDOTAWeekendTourneyPlayerHistoryRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAWeekendTourneyPlayerHistoryRequest> _instance;
} _CMsgDOTAWeekendTourneyPlayerHistoryRequest_default_instance_;
class CMsgDOTAWeekendTourneyPlayerHistory_TournamentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAWeekendTourneyPlayerHistory_Tournament> _instance;
} _CMsgDOTAWeekendTourneyPlayerHistory_Tournament_default_instance_;
class CMsgDOTAWeekendTourneyPlayerHistoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAWeekendTourneyPlayerHistory> _instance;
} _CMsgDOTAWeekendTourneyPlayerHistory_default_instance_;
class CMsgDOTAWeekendTourneyParticipationDetails_TierDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAWeekendTourneyParticipationDetails_Tier> _instance;
} _CMsgDOTAWeekendTourneyParticipationDetails_Tier_default_instance_;
class CMsgDOTAWeekendTourneyParticipationDetails_DivisionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAWeekendTourneyParticipationDetails_Division> _instance;
} _CMsgDOTAWeekendTourneyParticipationDetails_Division_default_instance_;
class CMsgDOTAWeekendTourneyParticipationDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAWeekendTourneyParticipationDetails> _instance;
} _CMsgDOTAWeekendTourneyParticipationDetails_default_instance_;
}  // namespace dota
}  // namespace proto
static void InitDefaultsCMsgDOTATournamentInfo_PhaseGroup_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATournamentInfo_PhaseGroup_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATournamentInfo_PhaseGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATournamentInfo_PhaseGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATournamentInfo_PhaseGroup_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTATournamentInfo_PhaseGroup_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {}};

static void InitDefaultsCMsgDOTATournamentInfo_Phase_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATournamentInfo_Phase_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATournamentInfo_Phase();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATournamentInfo_Phase::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTATournamentInfo_Phase_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTATournamentInfo_Phase_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {
      &scc_info_CMsgDOTATournamentInfo_PhaseGroup_dota_5fgcmessages_5fclient_5ftournament_2eproto.base,}};

static void InitDefaultsCMsgDOTATournamentInfo_Team_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATournamentInfo_Team_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATournamentInfo_Team();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATournamentInfo_Team::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATournamentInfo_Team_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTATournamentInfo_Team_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {}};

static void InitDefaultsCMsgDOTATournamentInfo_UpcomingMatch_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATournamentInfo_UpcomingMatch_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATournamentInfo_UpcomingMatch_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTATournamentInfo_UpcomingMatch_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {}};

static void InitDefaultsCMsgDOTATournamentInfo_News_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATournamentInfo_News_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATournamentInfo_News();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATournamentInfo_News::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATournamentInfo_News_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTATournamentInfo_News_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {}};

static void InitDefaultsCMsgDOTATournamentInfo_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATournamentInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATournamentInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATournamentInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_CMsgDOTATournamentInfo_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsCMsgDOTATournamentInfo_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {
      &scc_info_CMsgDOTATournamentInfo_Phase_dota_5fgcmessages_5fclient_5ftournament_2eproto.base,
      &scc_info_CMsgDOTATournamentInfo_Team_dota_5fgcmessages_5fclient_5ftournament_2eproto.base,
      &scc_info_CMsgDOTATournamentInfo_UpcomingMatch_dota_5fgcmessages_5fclient_5ftournament_2eproto.base,
      &scc_info_CMsgDOTATournamentInfo_News_dota_5fgcmessages_5fclient_5ftournament_2eproto.base,}};

static void InitDefaultsCMsgRequestWeekendTourneySchedule_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgRequestWeekendTourneySchedule_default_instance_;
    new (ptr) ::proto::dota::CMsgRequestWeekendTourneySchedule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgRequestWeekendTourneySchedule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRequestWeekendTourneySchedule_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRequestWeekendTourneySchedule_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {}};

static void InitDefaultsCMsgWeekendTourneySchedule_Division_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgWeekendTourneySchedule_Division_default_instance_;
    new (ptr) ::proto::dota::CMsgWeekendTourneySchedule_Division();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgWeekendTourneySchedule_Division::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgWeekendTourneySchedule_Division_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgWeekendTourneySchedule_Division_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {}};

static void InitDefaultsCMsgWeekendTourneySchedule_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgWeekendTourneySchedule_default_instance_;
    new (ptr) ::proto::dota::CMsgWeekendTourneySchedule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgWeekendTourneySchedule::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgWeekendTourneySchedule_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgWeekendTourneySchedule_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {
      &scc_info_CMsgWeekendTourneySchedule_Division_dota_5fgcmessages_5fclient_5ftournament_2eproto.base,}};

static void InitDefaultsCMsgWeekendTourneyOpts_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgWeekendTourneyOpts_default_instance_;
    new (ptr) ::proto::dota::CMsgWeekendTourneyOpts();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgWeekendTourneyOpts::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgWeekendTourneyOpts_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgWeekendTourneyOpts_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {}};

static void InitDefaultsCMsgWeekendTourneyLeave_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgWeekendTourneyLeave_default_instance_;
    new (ptr) ::proto::dota::CMsgWeekendTourneyLeave();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgWeekendTourneyLeave::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgWeekendTourneyLeave_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgWeekendTourneyLeave_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {}};

static void InitDefaultsCMsgDOTATournament_Team_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATournament_Team_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATournament_Team();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATournament_Team::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATournament_Team_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTATournament_Team_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {}};

static void InitDefaultsCMsgDOTATournament_Game_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATournament_Game_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATournament_Game();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATournament_Game::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATournament_Game_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTATournament_Game_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {}};

static void InitDefaultsCMsgDOTATournament_Node_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATournament_Node_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATournament_Node();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATournament_Node::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATournament_Node_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTATournament_Node_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {}};

static void InitDefaultsCMsgDOTATournament_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATournament_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATournament();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATournament::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CMsgDOTATournament_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCMsgDOTATournament_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {
      &scc_info_CMsgDOTATournament_Team_dota_5fgcmessages_5fclient_5ftournament_2eproto.base,
      &scc_info_CMsgDOTATournament_Game_dota_5fgcmessages_5fclient_5ftournament_2eproto.base,
      &scc_info_CMsgDOTATournament_Node_dota_5fgcmessages_5fclient_5ftournament_2eproto.base,}};

static void InitDefaultsCMsgDOTATournamentStateChange_GameChange_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATournamentStateChange_GameChange_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATournamentStateChange_GameChange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATournamentStateChange_GameChange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATournamentStateChange_GameChange_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTATournamentStateChange_GameChange_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {}};

static void InitDefaultsCMsgDOTATournamentStateChange_TeamChange_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATournamentStateChange_TeamChange_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATournamentStateChange_TeamChange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATournamentStateChange_TeamChange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATournamentStateChange_TeamChange_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTATournamentStateChange_TeamChange_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {}};

static void InitDefaultsCMsgDOTATournamentStateChange_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATournamentStateChange_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATournamentStateChange();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATournamentStateChange::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgDOTATournamentStateChange_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgDOTATournamentStateChange_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {
      &scc_info_CMsgDOTATournamentStateChange_GameChange_dota_5fgcmessages_5fclient_5ftournament_2eproto.base,
      &scc_info_CMsgDOTATournamentStateChange_TeamChange_dota_5fgcmessages_5fclient_5ftournament_2eproto.base,}};

static void InitDefaultsCMsgDOTATournamentRequest_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATournamentRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATournamentRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATournamentRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTATournamentRequest_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTATournamentRequest_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {}};

static void InitDefaultsCMsgDOTATournamentResponse_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTATournamentResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTATournamentResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTATournamentResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTATournamentResponse_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTATournamentResponse_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {
      &scc_info_CMsgDOTATournament_dota_5fgcmessages_5fclient_5ftournament_2eproto.base,}};

static void InitDefaultsCMsgDOTAClearTournamentGame_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAClearTournamentGame_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAClearTournamentGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAClearTournamentGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAClearTournamentGame_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAClearTournamentGame_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {}};

static void InitDefaultsCMsgDOTAWeekendTourneyPlayerSkillLevelStats_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAWeekendTourneyPlayerSkillLevelStats_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAWeekendTourneyPlayerSkillLevelStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAWeekendTourneyPlayerSkillLevelStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAWeekendTourneyPlayerSkillLevelStats_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAWeekendTourneyPlayerSkillLevelStats_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {}};

static void InitDefaultsCMsgDOTAWeekendTourneyPlayerStats_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAWeekendTourneyPlayerStats_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAWeekendTourneyPlayerStats();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAWeekendTourneyPlayerStats::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAWeekendTourneyPlayerStats_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAWeekendTourneyPlayerStats_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {
      &scc_info_CMsgDOTAWeekendTourneyPlayerSkillLevelStats_dota_5fgcmessages_5fclient_5ftournament_2eproto.base,}};

static void InitDefaultsCMsgDOTAWeekendTourneyPlayerStatsRequest_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAWeekendTourneyPlayerStatsRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAWeekendTourneyPlayerStatsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAWeekendTourneyPlayerStatsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAWeekendTourneyPlayerStatsRequest_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAWeekendTourneyPlayerStatsRequest_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {}};

static void InitDefaultsCMsgDOTAWeekendTourneyPlayerHistoryRequest_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAWeekendTourneyPlayerHistoryRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAWeekendTourneyPlayerHistoryRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAWeekendTourneyPlayerHistoryRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAWeekendTourneyPlayerHistoryRequest_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAWeekendTourneyPlayerHistoryRequest_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {}};

static void InitDefaultsCMsgDOTAWeekendTourneyPlayerHistory_Tournament_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAWeekendTourneyPlayerHistory_Tournament_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory_Tournament();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory_Tournament::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAWeekendTourneyPlayerHistory_Tournament_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAWeekendTourneyPlayerHistory_Tournament_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {}};

static void InitDefaultsCMsgDOTAWeekendTourneyPlayerHistory_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAWeekendTourneyPlayerHistory_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAWeekendTourneyPlayerHistory_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAWeekendTourneyPlayerHistory_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {
      &scc_info_CMsgDOTAWeekendTourneyPlayerHistory_Tournament_dota_5fgcmessages_5fclient_5ftournament_2eproto.base,}};

static void InitDefaultsCMsgDOTAWeekendTourneyParticipationDetails_Tier_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAWeekendTourneyParticipationDetails_Tier_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Tier();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Tier::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAWeekendTourneyParticipationDetails_Tier_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAWeekendTourneyParticipationDetails_Tier_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {}};

static void InitDefaultsCMsgDOTAWeekendTourneyParticipationDetails_Division_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAWeekendTourneyParticipationDetails_Division_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Division();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Division::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAWeekendTourneyParticipationDetails_Division_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAWeekendTourneyParticipationDetails_Division_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {
      &scc_info_CMsgDOTAWeekendTourneyParticipationDetails_Tier_dota_5fgcmessages_5fclient_5ftournament_2eproto.base,}};

static void InitDefaultsCMsgDOTAWeekendTourneyParticipationDetails_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAWeekendTourneyParticipationDetails_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAWeekendTourneyParticipationDetails_dota_5fgcmessages_5fclient_5ftournament_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAWeekendTourneyParticipationDetails_dota_5fgcmessages_5fclient_5ftournament_2eproto}, {
      &scc_info_CMsgDOTAWeekendTourneyParticipationDetails_Division_dota_5fgcmessages_5fclient_5ftournament_2eproto.base,}};

void InitDefaults_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATournamentInfo_PhaseGroup_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATournamentInfo_Phase_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATournamentInfo_Team_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATournamentInfo_UpcomingMatch_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATournamentInfo_News_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATournamentInfo_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRequestWeekendTourneySchedule_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgWeekendTourneySchedule_Division_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgWeekendTourneySchedule_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgWeekendTourneyOpts_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgWeekendTourneyLeave_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATournament_Team_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATournament_Game_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATournament_Node_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATournament_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATournamentStateChange_GameChange_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATournamentStateChange_TeamChange_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATournamentStateChange_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATournamentRequest_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTATournamentResponse_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAClearTournamentGame_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAWeekendTourneyPlayerSkillLevelStats_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAWeekendTourneyPlayerStats_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAWeekendTourneyPlayerStatsRequest_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAWeekendTourneyPlayerHistoryRequest_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAWeekendTourneyPlayerHistory_Tournament_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAWeekendTourneyPlayerHistory_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAWeekendTourneyParticipationDetails_Tier_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAWeekendTourneyParticipationDetails_Division_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAWeekendTourneyParticipationDetails_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[30];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ftournament_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fclient_5ftournament_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_dota_5fgcmessages_5fclient_5ftournament_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_PhaseGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_PhaseGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_PhaseGroup, group_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_PhaseGroup, group_name_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_Phase, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_Phase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_Phase, phase_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_Phase, phase_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_Phase, type_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_Phase, iterations_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_Phase, min_start_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_Phase, max_start_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_Phase, group_list_),
  1,
  0,
  2,
  3,
  4,
  5,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_Team, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_Team, team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_Team, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_Team, tag_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_Team, team_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_Team, eliminated_),
  2,
  0,
  1,
  4,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, series_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, team1_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, team2_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, bo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, stage_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, start_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, winner_stage_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, loser_stage_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, team1_tag_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, team2_tag_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, team1_prev_opponent_tag_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, team2_prev_opponent_tag_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, team1_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, team2_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, team1_prev_opponent_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, team2_prev_opponent_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, team1_prev_opponent_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, team2_prev_opponent_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, team1_prev_match_score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, team1_prev_match_opponent_score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, team2_prev_match_score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, team2_prev_match_opponent_score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, phase_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, team1_score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, team2_score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch, phase_id_),
  7,
  8,
  9,
  10,
  0,
  11,
  1,
  2,
  3,
  4,
  5,
  6,
  13,
  14,
  15,
  16,
  12,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_News, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_News, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_News, link_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_News, title_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_News, image_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo_News, timestamp_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo, phase_list_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo, teams_list_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo, upcoming_matches_list_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentInfo, news_list_),
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgRequestWeekendTourneySchedule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgRequestWeekendTourneySchedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWeekendTourneySchedule_Division, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWeekendTourneySchedule_Division, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWeekendTourneySchedule_Division, division_code_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWeekendTourneySchedule_Division, time_window_open_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWeekendTourneySchedule_Division, time_window_close_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWeekendTourneySchedule_Division, time_window_open_next_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWeekendTourneySchedule_Division, trophy_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWeekendTourneySchedule_Division, free_weekend_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWeekendTourneySchedule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWeekendTourneySchedule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWeekendTourneySchedule, divisions_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWeekendTourneyOpts, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWeekendTourneyOpts, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWeekendTourneyOpts, participating_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWeekendTourneyOpts, division_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWeekendTourneyOpts, buyin_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWeekendTourneyOpts, skill_level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWeekendTourneyOpts, match_groups_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWeekendTourneyOpts, team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWeekendTourneyOpts, pickup_team_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWeekendTourneyOpts, pickup_team_logo_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWeekendTourneyLeave, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWeekendTourneyLeave, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament_Team, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament_Team, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament_Team, team_gid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament_Team, node_or_state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament_Team, players_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament_Team, player_buyin_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament_Team, player_skill_level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament_Team, match_group_mask_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament_Team, team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament_Team, team_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament_Team, team_base_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament_Team, team_ui_logo_),
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  6,
  3,
  0,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament_Game, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament_Game, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament_Game, node_idx_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament_Game, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament_Game, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament_Game, team_a_good_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament_Game, state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament_Game, start_time_),
  1,
  0,
  3,
  2,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament_Node, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament_Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament_Node, node_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament_Node, team_idx_a_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament_Node, team_idx_b_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament_Node, node_state_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament, tournament_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament, division_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament, schedule_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament, skill_level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament, tournament_template_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament, state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament, state_seq_num_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament, season_trophy_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament, teams_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament, games_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournament, nodes_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentStateChange_GameChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentStateChange_GameChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentStateChange_GameChange, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentStateChange_GameChange, new_state_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentStateChange_TeamChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentStateChange_TeamChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentStateChange_TeamChange, team_gid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentStateChange_TeamChange, new_node_or_state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentStateChange_TeamChange, old_node_or_state_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentStateChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentStateChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentStateChange, new_tournament_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentStateChange, event_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentStateChange, new_tournament_state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentStateChange, game_changes_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentStateChange, team_changes_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentStateChange, merged_tournament_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentStateChange, state_seq_num_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentRequest, tournament_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentRequest, client_tournament_gid_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTATournamentResponse, tournament_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAClearTournamentGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAClearTournamentGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAClearTournamentGame, tournament_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAClearTournamentGame, game_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerSkillLevelStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerSkillLevelStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerSkillLevelStats, skill_level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_won_0_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_won_1_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_won_2_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_won_3_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_bye_and_lost_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_bye_and_won_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerSkillLevelStats, times_unusual_champ_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerSkillLevelStats, total_games_won_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerSkillLevelStats, score_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  9,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerStats, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerStats, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerStats, season_trophy_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerStats, skill_levels_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerStats, current_tier_),
  0,
  1,
  ~0u,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerStatsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerStatsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerStatsRequest, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerStatsRequest, season_trophy_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerHistoryRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerHistoryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerHistoryRequest, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerHistoryRequest, season_trophy_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory_Tournament, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory_Tournament, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory_Tournament, tournament_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory_Tournament, start_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory_Tournament, tournament_tier_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory_Tournament, team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory_Tournament, team_date_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory_Tournament, team_result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory_Tournament, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory_Tournament, team_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory_Tournament, season_trophy_id_),
  1,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  0,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory, tournaments_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Tier, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Tier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Tier, tier_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Tier, players_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Tier, teams_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Tier, winning_teams_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Tier, players_streak_2_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Tier, players_streak_3_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Tier, players_streak_4_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Tier, players_streak_5_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Division, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Division, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Division, division_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Division, schedule_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Division, tiers_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails, divisions_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::proto::dota::CMsgDOTATournamentInfo_PhaseGroup)},
  { 9, 21, sizeof(::proto::dota::CMsgDOTATournamentInfo_Phase)},
  { 28, 38, sizeof(::proto::dota::CMsgDOTATournamentInfo_Team)},
  { 43, 74, sizeof(::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch)},
  { 100, 109, sizeof(::proto::dota::CMsgDOTATournamentInfo_News)},
  { 113, 123, sizeof(::proto::dota::CMsgDOTATournamentInfo)},
  { 128, 133, sizeof(::proto::dota::CMsgRequestWeekendTourneySchedule)},
  { 133, 144, sizeof(::proto::dota::CMsgWeekendTourneySchedule_Division)},
  { 150, 156, sizeof(::proto::dota::CMsgWeekendTourneySchedule)},
  { 157, 170, sizeof(::proto::dota::CMsgWeekendTourneyOpts)},
  { 178, 183, sizeof(::proto::dota::CMsgWeekendTourneyLeave)},
  { 183, 198, sizeof(::proto::dota::CMsgDOTATournament_Team)},
  { 208, 219, sizeof(::proto::dota::CMsgDOTATournament_Game)},
  { 225, 234, sizeof(::proto::dota::CMsgDOTATournament_Node)},
  { 238, 254, sizeof(::proto::dota::CMsgDOTATournament)},
  { 265, 272, sizeof(::proto::dota::CMsgDOTATournamentStateChange_GameChange)},
  { 274, 282, sizeof(::proto::dota::CMsgDOTATournamentStateChange_TeamChange)},
  { 285, 297, sizeof(::proto::dota::CMsgDOTATournamentStateChange)},
  { 304, 311, sizeof(::proto::dota::CMsgDOTATournamentRequest)},
  { 313, 320, sizeof(::proto::dota::CMsgDOTATournamentResponse)},
  { 322, 329, sizeof(::proto::dota::CMsgDOTAClearTournamentGame)},
  { 331, 346, sizeof(::proto::dota::CMsgDOTAWeekendTourneyPlayerSkillLevelStats)},
  { 356, 365, sizeof(::proto::dota::CMsgDOTAWeekendTourneyPlayerStats)},
  { 369, 376, sizeof(::proto::dota::CMsgDOTAWeekendTourneyPlayerStatsRequest)},
  { 378, 385, sizeof(::proto::dota::CMsgDOTAWeekendTourneyPlayerHistoryRequest)},
  { 387, 401, sizeof(::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory_Tournament)},
  { 410, 417, sizeof(::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory)},
  { 419, 432, sizeof(::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Tier)},
  { 440, 448, sizeof(::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Division)},
  { 451, 457, sizeof(::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATournamentInfo_PhaseGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATournamentInfo_Phase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATournamentInfo_Team_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATournamentInfo_UpcomingMatch_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATournamentInfo_News_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATournamentInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgRequestWeekendTourneySchedule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgWeekendTourneySchedule_Division_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgWeekendTourneySchedule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgWeekendTourneyOpts_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgWeekendTourneyLeave_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATournament_Team_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATournament_Game_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATournament_Node_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATournament_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATournamentStateChange_GameChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATournamentStateChange_TeamChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATournamentStateChange_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATournamentRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTATournamentResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAClearTournamentGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAWeekendTourneyPlayerSkillLevelStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAWeekendTourneyPlayerStats_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAWeekendTourneyPlayerStatsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAWeekendTourneyPlayerHistoryRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAWeekendTourneyPlayerHistory_Tournament_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAWeekendTourneyPlayerHistory_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAWeekendTourneyParticipationDetails_Tier_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAWeekendTourneyParticipationDetails_Division_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAWeekendTourneyParticipationDetails_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto = {
  {}, AddDescriptors_dota_5fgcmessages_5fclient_5ftournament_2eproto, "dota_gcmessages_client_tournament.proto", schemas,
  file_default_instances, TableStruct_dota_5fgcmessages_5fclient_5ftournament_2eproto::offsets,
  file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto, 30, file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ftournament_2eproto, file_level_service_descriptors_dota_5fgcmessages_5fclient_5ftournament_2eproto,
};

const char descriptor_table_protodef_dota_5fgcmessages_5fclient_5ftournament_2eproto[] =
  "\n\'dota_gcmessages_client_tournament.prot"
  "o\022\nproto.dota\032\027dota_client_enums.proto\"\357"
  "\n\n\026CMsgDOTATournamentInfo\022\021\n\tleague_id\030\001"
  " \001(\r\022<\n\nphase_list\030\002 \003(\0132(.proto.dota.CM"
  "sgDOTATournamentInfo.Phase\022;\n\nteams_list"
  "\030\003 \003(\0132\'.proto.dota.CMsgDOTATournamentIn"
  "fo.Team\022O\n\025upcoming_matches_list\030\004 \003(\01320"
  ".proto.dota.CMsgDOTATournamentInfo.Upcom"
  "ingMatch\022:\n\tnews_list\030\005 \003(\0132\'.proto.dota"
  ".CMsgDOTATournamentInfo.News\0322\n\nPhaseGro"
  "up\022\020\n\010group_id\030\001 \001(\r\022\022\n\ngroup_name\030\002 \001(\t"
  "\032\305\001\n\005Phase\022\020\n\010phase_id\030\001 \001(\r\022\022\n\nphase_na"
  "me\030\002 \001(\t\022\017\n\007type_id\030\003 \001(\r\022\022\n\niterations\030"
  "\004 \001(\r\022\026\n\016min_start_time\030\005 \001(\r\022\026\n\016max_sta"
  "rt_time\030\006 \001(\r\022A\n\ngroup_list\030\007 \003(\0132-.prot"
  "o.dota.CMsgDOTATournamentInfo.PhaseGroup"
  "\032Y\n\004Team\022\017\n\007team_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022"
  "\013\n\003tag\030\003 \001(\t\022\021\n\tteam_logo\030\004 \001(\004\022\022\n\nelimi"
  "nated\030\005 \001(\010\032\233\005\n\rUpcomingMatch\022\021\n\tseries_"
  "id\030\001 \001(\r\022\020\n\010team1_id\030\002 \001(\r\022\020\n\010team2_id\030\003"
  " \001(\r\022\n\n\002bo\030\004 \001(\r\022\022\n\nstage_name\030\005 \001(\t\022\022\n\n"
  "start_time\030\006 \001(\r\022\024\n\014winner_stage\030\007 \001(\t\022\023"
  "\n\013loser_stage\030\010 \001(\t\022\021\n\tteam1_tag\030\t \001(\t\022\021"
  "\n\tteam2_tag\030\n \001(\t\022\037\n\027team1_prev_opponent"
  "_tag\030\013 \001(\t\022\037\n\027team2_prev_opponent_tag\030\014 "
  "\001(\t\022\022\n\nteam1_logo\030\r \001(\004\022\022\n\nteam2_logo\030\016 "
  "\001(\004\022 \n\030team1_prev_opponent_logo\030\017 \001(\004\022 \n"
  "\030team2_prev_opponent_logo\030\020 \001(\004\022\036\n\026team1"
  "_prev_opponent_id\030\021 \001(\r\022\036\n\026team2_prev_op"
  "ponent_id\030\022 \001(\r\022\036\n\026team1_prev_match_scor"
  "e\030\023 \001(\r\022\'\n\037team1_prev_match_opponent_sco"
  "re\030\024 \001(\r\022\036\n\026team2_prev_match_score\030\025 \001(\r"
  "\022\'\n\037team2_prev_match_opponent_score\030\026 \001("
  "\r\022\022\n\nphase_type\030\027 \001(\r\022\023\n\013team1_score\030\030 \001"
  "(\r\022\023\n\013team2_score\030\031 \001(\r\022\020\n\010phase_id\030\032 \001("
  "\r\032E\n\004News\022\014\n\004link\030\001 \001(\t\022\r\n\005title\030\002 \001(\t\022\r"
  "\n\005image\030\003 \001(\t\022\021\n\ttimestamp\030\004 \001(\r\"#\n!CMsg"
  "RequestWeekendTourneySchedule\"\201\002\n\032CMsgWe"
  "ekendTourneySchedule\022B\n\tdivisions\030\001 \003(\0132"
  "/.proto.dota.CMsgWeekendTourneySchedule."
  "Division\032\236\001\n\010Division\022\025\n\rdivision_code\030\001"
  " \001(\r\022\030\n\020time_window_open\030\002 \001(\r\022\031\n\021time_w"
  "indow_close\030\003 \001(\r\022\035\n\025time_window_open_ne"
  "xt\030\004 \001(\r\022\021\n\ttrophy_id\030\005 \001(\r\022\024\n\014free_week"
  "end\030\006 \001(\010\"\303\001\n\026CMsgWeekendTourneyOpts\022\025\n\r"
  "participating\030\001 \001(\010\022\023\n\013division_id\030\002 \001(\r"
  "\022\r\n\005buyin\030\003 \001(\r\022\023\n\013skill_level\030\004 \001(\r\022\024\n\014"
  "match_groups\030\005 \001(\r\022\017\n\007team_id\030\006 \001(\r\022\030\n\020p"
  "ickup_team_name\030\007 \001(\t\022\030\n\020pickup_team_log"
  "o\030\010 \001(\004\"\031\n\027CMsgWeekendTourneyLeave\"\232\010\n\022C"
  "MsgDOTATournament\022\025\n\rtournament_id\030\001 \001(\r"
  "\022\023\n\013division_id\030\002 \001(\r\022\025\n\rschedule_time\030\003"
  " \001(\r\022\023\n\013skill_level\030\004 \001(\r\022X\n\023tournament_"
  "template\030\005 \001(\0162\037.proto.dota.ETournamentT"
  "emplate:\032k_ETournamentTemplate_None\022G\n\005s"
  "tate\030\006 \001(\0162\034.proto.dota.ETournamentState"
  ":\032k_ETournamentState_Unknown\022\025\n\rstate_se"
  "q_num\030\n \001(\r\022\030\n\020season_trophy_id\030\013 \001(\r\0222\n"
  "\005teams\030\007 \003(\0132#.proto.dota.CMsgDOTATourna"
  "ment.Team\0222\n\005games\030\010 \003(\0132#.proto.dota.CM"
  "sgDOTATournament.Game\0222\n\005nodes\030\t \003(\0132#.p"
  "roto.dota.CMsgDOTATournament.Node\032\352\001\n\004Te"
  "am\022\020\n\010team_gid\030\001 \001(\006\022\025\n\rnode_or_state\030\002 "
  "\001(\r\022\023\n\007players\030\003 \003(\rB\002\020\001\022\030\n\014player_buyin"
  "\030\t \003(\rB\002\020\001\022\036\n\022player_skill_level\030\n \003(\rB\002"
  "\020\001\022\030\n\020match_group_mask\030\014 \001(\r\022\017\n\007team_id\030"
  "\004 \001(\r\022\021\n\tteam_name\030\005 \001(\t\022\026\n\016team_base_lo"
  "go\030\007 \001(\004\022\024\n\014team_ui_logo\030\010 \001(\004\032\266\001\n\004Game\022"
  "\020\n\010node_idx\030\001 \001(\r\022\020\n\010lobby_id\030\002 \001(\006\022\020\n\010m"
  "atch_id\030\003 \001(\004\022\023\n\013team_a_good\030\004 \001(\010\022O\n\005st"
  "ate\030\005 \001(\0162 .proto.dota.ETournamentGameSt"
  "ate:\036k_ETournamentGameState_Unknown\022\022\n\ns"
  "tart_time\030\006 \001(\r\032\225\001\n\004Node\022\017\n\007node_id\030\001 \001("
  "\r\022\022\n\nteam_idx_a\030\002 \001(\r\022\022\n\nteam_idx_b\030\003 \001("
  "\r\022T\n\nnode_state\030\004 \001(\0162 .proto.dota.ETour"
  "namentNodeState:\036k_ETournamentNodeState_"
  "Unknown\"\365\004\n\035CMsgDOTATournamentStateChang"
  "e\022\031\n\021new_tournament_id\030\001 \001(\r\022D\n\005event\030\002 "
  "\001(\0162\034.proto.dota.ETournamentEvent:\027k_ETo"
  "urnamentEvent_None\022V\n\024new_tournament_sta"
  "te\030\003 \001(\0162\034.proto.dota.ETournamentState:\032"
  "k_ETournamentState_Unknown\022J\n\014game_chang"
  "es\030\004 \003(\01324.proto.dota.CMsgDOTATournament"
  "StateChange.GameChange\022J\n\014team_changes\030\005"
  " \003(\01324.proto.dota.CMsgDOTATournamentStat"
  "eChange.TeamChange\022!\n\025merged_tournament_"
  "ids\030\006 \003(\rB\002\020\001\022\025\n\rstate_seq_num\030\007 \001(\r\032s\n\n"
  "GameChange\022\020\n\010match_id\030\001 \001(\004\022S\n\tnew_stat"
  "e\030\002 \001(\0162 .proto.dota.ETournamentGameStat"
  "e:\036k_ETournamentGameState_Unknown\032T\n\nTea"
  "mChange\022\020\n\010team_gid\030\001 \001(\004\022\031\n\021new_node_or"
  "_state\030\002 \001(\r\022\031\n\021old_node_or_state\030\003 \001(\r\""
  "Q\n\031CMsgDOTATournamentRequest\022\025\n\rtourname"
  "nt_id\030\001 \001(\r\022\035\n\025client_tournament_gid\030\002 \001"
  "(\004\"c\n\032CMsgDOTATournamentResponse\022\021\n\006resu"
  "lt\030\001 \001(\r:\0012\0222\n\ntournament\030\002 \001(\0132\036.proto."
  "dota.CMsgDOTATournament\"E\n\033CMsgDOTAClear"
  "TournamentGame\022\025\n\rtournament_id\030\001 \001(\r\022\017\n"
  "\007game_id\030\002 \001(\r\"\222\002\n+CMsgDOTAWeekendTourne"
  "yPlayerSkillLevelStats\022\023\n\013skill_level\030\001 "
  "\001(\r\022\023\n\013times_won_0\030\002 \001(\r\022\023\n\013times_won_1\030"
  "\003 \001(\r\022\023\n\013times_won_2\030\004 \001(\r\022\023\n\013times_won_"
  "3\030\005 \001(\r\022\032\n\022times_bye_and_lost\030\006 \001(\r\022\031\n\021t"
  "imes_bye_and_won\030\007 \001(\r\022\033\n\023times_unusual_"
  "champ\030\n \001(\r\022\027\n\017total_games_won\030\010 \001(\r\022\r\n\005"
  "score\030\t \001(\r\"\266\001\n!CMsgDOTAWeekendTourneyPl"
  "ayerStats\022\022\n\naccount_id\030\001 \001(\r\022\030\n\020season_"
  "trophy_id\030\002 \001(\r\022M\n\014skill_levels\030\003 \003(\01327."
  "proto.dota.CMsgDOTAWeekendTourneyPlayerS"
  "killLevelStats\022\024\n\014current_tier\030\004 \001(\r\"X\n("
  "CMsgDOTAWeekendTourneyPlayerStatsRequest"
  "\022\022\n\naccount_id\030\001 \001(\r\022\030\n\020season_trophy_id"
  "\030\002 \001(\r\"Z\n*CMsgDOTAWeekendTourneyPlayerHi"
  "storyRequest\022\022\n\naccount_id\030\001 \001(\r\022\030\n\020seas"
  "on_trophy_id\030\002 \001(\r\"\327\002\n#CMsgDOTAWeekendTo"
  "urneyPlayerHistory\022\022\n\naccount_id\030\001 \001(\r\022O"
  "\n\013tournaments\030\003 \003(\0132:.proto.dota.CMsgDOT"
  "AWeekendTourneyPlayerHistory.Tournament\032"
  "\312\001\n\nTournament\022\025\n\rtournament_id\030\001 \001(\r\022\022\n"
  "\nstart_time\030\002 \001(\r\022\027\n\017tournament_tier\030\003 \001"
  "(\r\022\017\n\007team_id\030\004 \001(\r\022\021\n\tteam_date\030\005 \001(\r\022\023"
  "\n\013team_result\030\006 \001(\r\022\022\n\naccount_id\030\007 \003(\r\022"
  "\021\n\tteam_name\030\010 \001(\t\022\030\n\020season_trophy_id\030\t"
  " \001(\r\"\273\003\n*CMsgDOTAWeekendTourneyParticipa"
  "tionDetails\022R\n\tdivisions\030\001 \003(\0132\?.proto.d"
  "ota.CMsgDOTAWeekendTourneyParticipationD"
  "etails.Division\032\263\001\n\004Tier\022\014\n\004tier\030\001 \001(\r\022\017"
  "\n\007players\030\002 \001(\r\022\r\n\005teams\030\003 \001(\r\022\025\n\rwinnin"
  "g_teams\030\004 \001(\r\022\030\n\020players_streak_2\030\005 \001(\r\022"
  "\030\n\020players_streak_3\030\006 \001(\r\022\030\n\020players_str"
  "eak_4\030\007 \001(\r\022\030\n\020players_streak_5\030\010 \001(\r\032\202\001"
  "\n\010Division\022\023\n\013division_id\030\001 \001(\r\022\025\n\rsched"
  "ule_time\030\002 \001(\r\022J\n\005tiers\030\003 \003(\0132;.proto.do"
  "ta.CMsgDOTAWeekendTourneyParticipationDe"
  "tails.Tier*\266\004\n\020ETournamentEvent\022\033\n\027k_ETo"
  "urnamentEvent_None\020\000\022(\n$k_ETournamentEve"
  "nt_TournamentCreated\020\001\022(\n$k_ETournamentE"
  "vent_TournamentsMerged\020\002\022\"\n\036k_ETournamen"
  "tEvent_GameOutcome\020\003\022#\n\037k_ETournamentEve"
  "nt_TeamGivenBye\020\004\0220\n,k_ETournamentEvent_"
  "TournamentCanceledByAdmin\020\005\022$\n k_ETourna"
  "mentEvent_TeamAbandoned\020\006\022+\n\'k_ETourname"
  "ntEvent_ScheduledGameStarted\020\007\022\037\n\033k_ETou"
  "rnamentEvent_Canceled\020\010\022\?\n;k_ETournament"
  "Event_TeamParticipationTimedOut_EntryFee"
  "Refund\020\t\022@\n<k_ETournamentEvent_TeamParti"
  "cipationTimedOut_EntryFeeForfeit\020\n\022\?\n;k_"
  "ETournamentEvent_TeamParticipationTimedO"
  "ut_GrantedVictory\020\013B\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5ftournament_2eproto = {
  false, InitDefaults_dota_5fgcmessages_5fclient_5ftournament_2eproto, 
  descriptor_table_protodef_dota_5fgcmessages_5fclient_5ftournament_2eproto,
  "dota_gcmessages_client_tournament.proto", &assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto, 5946,
};

void AddDescriptors_dota_5fgcmessages_5fclient_5ftournament_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_dota_5fclient_5fenums_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5ftournament_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dota_5fgcmessages_5fclient_5ftournament_2eproto = []() { AddDescriptors_dota_5fgcmessages_5fclient_5ftournament_2eproto(); return true; }();
namespace proto {
namespace dota {
const ::google::protobuf::EnumDescriptor* ETournamentEvent_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5ftournament_2eproto[0];
}
bool ETournamentEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CMsgDOTATournamentInfo_PhaseGroup::InitAsDefaultInstance() {
}
class CMsgDOTATournamentInfo_PhaseGroup::HasBitSetters {
 public:
  static void set_has_group_id(CMsgDOTATournamentInfo_PhaseGroup* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_group_name(CMsgDOTATournamentInfo_PhaseGroup* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournamentInfo_PhaseGroup::kGroupIdFieldNumber;
const int CMsgDOTATournamentInfo_PhaseGroup::kGroupNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournamentInfo_PhaseGroup::CMsgDOTATournamentInfo_PhaseGroup()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
}
CMsgDOTATournamentInfo_PhaseGroup::CMsgDOTATournamentInfo_PhaseGroup(const CMsgDOTATournamentInfo_PhaseGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_group_name()) {
    group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_name_);
  }
  group_id_ = from.group_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
}

void CMsgDOTATournamentInfo_PhaseGroup::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTATournamentInfo_PhaseGroup_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_id_ = 0u;
}

CMsgDOTATournamentInfo_PhaseGroup::~CMsgDOTATournamentInfo_PhaseGroup() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
  SharedDtor();
}

void CMsgDOTATournamentInfo_PhaseGroup::SharedDtor() {
  group_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATournamentInfo_PhaseGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATournamentInfo_PhaseGroup& CMsgDOTATournamentInfo_PhaseGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATournamentInfo_PhaseGroup_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATournamentInfo_PhaseGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    group_name_.ClearNonDefaultToEmptyNoArena();
  }
  group_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATournamentInfo_PhaseGroup::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATournamentInfo_PhaseGroup*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 group_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_group_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string group_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATournamentInfo.PhaseGroup.group_name");
        object = msg->mutable_group_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATournamentInfo_PhaseGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_group_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string group_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_name().data(), static_cast<int>(this->group_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.PhaseGroup.group_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATournamentInfo_PhaseGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  // optional string group_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), static_cast<int>(this->group_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.PhaseGroup.group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->group_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
}

::google::protobuf::uint8* CMsgDOTATournamentInfo_PhaseGroup::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 group_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  // optional string group_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), static_cast<int>(this->group_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.PhaseGroup.group_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->group_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
  return target;
}

size_t CMsgDOTATournamentInfo_PhaseGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string group_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // optional uint32 group_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournamentInfo_PhaseGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentInfo_PhaseGroup* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATournamentInfo_PhaseGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentInfo_PhaseGroup::MergeFrom(const CMsgDOTATournamentInfo_PhaseGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      group_id_ = from.group_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentInfo_PhaseGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentInfo_PhaseGroup::CopyFrom(const CMsgDOTATournamentInfo_PhaseGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournamentInfo.PhaseGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentInfo_PhaseGroup::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentInfo_PhaseGroup::Swap(CMsgDOTATournamentInfo_PhaseGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournamentInfo_PhaseGroup::InternalSwap(CMsgDOTATournamentInfo_PhaseGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  group_name_.Swap(&other->group_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(group_id_, other->group_id_);
}

::google::protobuf::Metadata CMsgDOTATournamentInfo_PhaseGroup::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATournamentInfo_Phase::InitAsDefaultInstance() {
}
class CMsgDOTATournamentInfo_Phase::HasBitSetters {
 public:
  static void set_has_phase_id(CMsgDOTATournamentInfo_Phase* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_phase_name(CMsgDOTATournamentInfo_Phase* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_type_id(CMsgDOTATournamentInfo_Phase* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_iterations(CMsgDOTATournamentInfo_Phase* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_min_start_time(CMsgDOTATournamentInfo_Phase* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_max_start_time(CMsgDOTATournamentInfo_Phase* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournamentInfo_Phase::kPhaseIdFieldNumber;
const int CMsgDOTATournamentInfo_Phase::kPhaseNameFieldNumber;
const int CMsgDOTATournamentInfo_Phase::kTypeIdFieldNumber;
const int CMsgDOTATournamentInfo_Phase::kIterationsFieldNumber;
const int CMsgDOTATournamentInfo_Phase::kMinStartTimeFieldNumber;
const int CMsgDOTATournamentInfo_Phase::kMaxStartTimeFieldNumber;
const int CMsgDOTATournamentInfo_Phase::kGroupListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournamentInfo_Phase::CMsgDOTATournamentInfo_Phase()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournamentInfo.Phase)
}
CMsgDOTATournamentInfo_Phase::CMsgDOTATournamentInfo_Phase(const CMsgDOTATournamentInfo_Phase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      group_list_(from.group_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  phase_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_phase_name()) {
    phase_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phase_name_);
  }
  ::memcpy(&phase_id_, &from.phase_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_start_time_) -
    reinterpret_cast<char*>(&phase_id_)) + sizeof(max_start_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournamentInfo.Phase)
}

void CMsgDOTATournamentInfo_Phase::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTATournamentInfo_Phase_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  phase_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&phase_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_start_time_) -
      reinterpret_cast<char*>(&phase_id_)) + sizeof(max_start_time_));
}

CMsgDOTATournamentInfo_Phase::~CMsgDOTATournamentInfo_Phase() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournamentInfo.Phase)
  SharedDtor();
}

void CMsgDOTATournamentInfo_Phase::SharedDtor() {
  phase_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATournamentInfo_Phase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATournamentInfo_Phase& CMsgDOTATournamentInfo_Phase::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATournamentInfo_Phase_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATournamentInfo_Phase::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournamentInfo.Phase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    phase_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&phase_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_start_time_) -
        reinterpret_cast<char*>(&phase_id_)) + sizeof(max_start_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATournamentInfo_Phase::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATournamentInfo_Phase*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 phase_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_phase_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string phase_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATournamentInfo.Phase.phase_name");
        object = msg->mutable_phase_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 type_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_type_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 iterations = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_iterations(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 min_start_time = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_min_start_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 max_start_time = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_max_start_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTATournamentInfo.PhaseGroup group_list = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTATournamentInfo_PhaseGroup::_InternalParse;
          object = msg->add_group_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATournamentInfo_Phase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournamentInfo.Phase)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 phase_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_phase_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phase_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string phase_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phase_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phase_name().data(), static_cast<int>(this->phase_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.Phase.phase_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 type_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_type_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 iterations = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_iterations(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iterations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 min_start_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_min_start_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &min_start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_start_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_max_start_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTATournamentInfo.PhaseGroup group_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_group_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournamentInfo.Phase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournamentInfo.Phase)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATournamentInfo_Phase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournamentInfo.Phase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 phase_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->phase_id(), output);
  }

  // optional string phase_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phase_name().data(), static_cast<int>(this->phase_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.Phase.phase_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->phase_name(), output);
  }

  // optional uint32 type_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type_id(), output);
  }

  // optional uint32 iterations = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->iterations(), output);
  }

  // optional uint32 min_start_time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->min_start_time(), output);
  }

  // optional uint32 max_start_time = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->max_start_time(), output);
  }

  // repeated .proto.dota.CMsgDOTATournamentInfo.PhaseGroup group_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->group_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->group_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournamentInfo.Phase)
}

::google::protobuf::uint8* CMsgDOTATournamentInfo_Phase::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournamentInfo.Phase)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 phase_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->phase_id(), target);
  }

  // optional string phase_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phase_name().data(), static_cast<int>(this->phase_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.Phase.phase_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->phase_name(), target);
  }

  // optional uint32 type_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type_id(), target);
  }

  // optional uint32 iterations = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->iterations(), target);
  }

  // optional uint32 min_start_time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->min_start_time(), target);
  }

  // optional uint32 max_start_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->max_start_time(), target);
  }

  // repeated .proto.dota.CMsgDOTATournamentInfo.PhaseGroup group_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->group_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->group_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournamentInfo.Phase)
  return target;
}

size_t CMsgDOTATournamentInfo_Phase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournamentInfo.Phase)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTATournamentInfo.PhaseGroup group_list = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->group_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->group_list(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string phase_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phase_name());
    }

    // optional uint32 phase_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phase_id());
    }

    // optional uint32 type_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type_id());
    }

    // optional uint32 iterations = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iterations());
    }

    // optional uint32 min_start_time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->min_start_time());
    }

    // optional uint32 max_start_time = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_start_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournamentInfo_Phase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournamentInfo.Phase)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentInfo_Phase* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATournamentInfo_Phase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournamentInfo.Phase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournamentInfo.Phase)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentInfo_Phase::MergeFrom(const CMsgDOTATournamentInfo_Phase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournamentInfo.Phase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  group_list_.MergeFrom(from.group_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      phase_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.phase_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      phase_id_ = from.phase_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_id_ = from.type_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      iterations_ = from.iterations_;
    }
    if (cached_has_bits & 0x00000010u) {
      min_start_time_ = from.min_start_time_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_start_time_ = from.max_start_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentInfo_Phase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournamentInfo.Phase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentInfo_Phase::CopyFrom(const CMsgDOTATournamentInfo_Phase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournamentInfo.Phase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentInfo_Phase::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentInfo_Phase::Swap(CMsgDOTATournamentInfo_Phase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournamentInfo_Phase::InternalSwap(CMsgDOTATournamentInfo_Phase* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&group_list_)->InternalSwap(CastToBase(&other->group_list_));
  phase_name_.Swap(&other->phase_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(phase_id_, other->phase_id_);
  swap(type_id_, other->type_id_);
  swap(iterations_, other->iterations_);
  swap(min_start_time_, other->min_start_time_);
  swap(max_start_time_, other->max_start_time_);
}

::google::protobuf::Metadata CMsgDOTATournamentInfo_Phase::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATournamentInfo_Team::InitAsDefaultInstance() {
}
class CMsgDOTATournamentInfo_Team::HasBitSetters {
 public:
  static void set_has_team_id(CMsgDOTATournamentInfo_Team* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_name(CMsgDOTATournamentInfo_Team* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_tag(CMsgDOTATournamentInfo_Team* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_team_logo(CMsgDOTATournamentInfo_Team* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_eliminated(CMsgDOTATournamentInfo_Team* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournamentInfo_Team::kTeamIdFieldNumber;
const int CMsgDOTATournamentInfo_Team::kNameFieldNumber;
const int CMsgDOTATournamentInfo_Team::kTagFieldNumber;
const int CMsgDOTATournamentInfo_Team::kTeamLogoFieldNumber;
const int CMsgDOTATournamentInfo_Team::kEliminatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournamentInfo_Team::CMsgDOTATournamentInfo_Team()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournamentInfo.Team)
}
CMsgDOTATournamentInfo_Team::CMsgDOTATournamentInfo_Team(const CMsgDOTATournamentInfo_Team& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_tag()) {
    tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
  }
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_logo_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(team_logo_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournamentInfo.Team)
}

void CMsgDOTATournamentInfo_Team::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTATournamentInfo_Team_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_logo_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(team_logo_));
}

CMsgDOTATournamentInfo_Team::~CMsgDOTATournamentInfo_Team() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournamentInfo.Team)
  SharedDtor();
}

void CMsgDOTATournamentInfo_Team::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATournamentInfo_Team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATournamentInfo_Team& CMsgDOTATournamentInfo_Team::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATournamentInfo_Team_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATournamentInfo_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournamentInfo.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      tag_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_logo_) -
        reinterpret_cast<char*>(&team_id_)) + sizeof(team_logo_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATournamentInfo_Team::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATournamentInfo_Team*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATournamentInfo.Team.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string tag = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATournamentInfo.Team.tag");
        object = msg->mutable_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 team_logo = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_team_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool eliminated = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_eliminated(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATournamentInfo_Team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournamentInfo.Team)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.Team.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string tag = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tag().data(), static_cast<int>(this->tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.Team.tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team_logo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_team_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool eliminated = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_eliminated(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eliminated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournamentInfo.Team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournamentInfo.Team)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATournamentInfo_Team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournamentInfo.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.Team.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.Team.tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->tag(), output);
  }

  // optional uint64 team_logo = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->team_logo(), output);
  }

  // optional bool eliminated = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->eliminated(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournamentInfo.Team)
}

::google::protobuf::uint8* CMsgDOTATournamentInfo_Team::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournamentInfo.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.Team.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string tag = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tag().data(), static_cast<int>(this->tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.Team.tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->tag(), target);
  }

  // optional uint64 team_logo = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->team_logo(), target);
  }

  // optional bool eliminated = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->eliminated(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournamentInfo.Team)
  return target;
}

size_t CMsgDOTATournamentInfo_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournamentInfo.Team)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string tag = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tag());
    }

    // optional uint32 team_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional bool eliminated = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional uint64 team_logo = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_logo());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournamentInfo_Team::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournamentInfo.Team)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentInfo_Team* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATournamentInfo_Team>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournamentInfo.Team)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournamentInfo.Team)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentInfo_Team::MergeFrom(const CMsgDOTATournamentInfo_Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournamentInfo.Team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      eliminated_ = from.eliminated_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_logo_ = from.team_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentInfo_Team::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournamentInfo.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentInfo_Team::CopyFrom(const CMsgDOTATournamentInfo_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournamentInfo.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentInfo_Team::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentInfo_Team::Swap(CMsgDOTATournamentInfo_Team* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournamentInfo_Team::InternalSwap(CMsgDOTATournamentInfo_Team* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  tag_.Swap(&other->tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(team_id_, other->team_id_);
  swap(eliminated_, other->eliminated_);
  swap(team_logo_, other->team_logo_);
}

::google::protobuf::Metadata CMsgDOTATournamentInfo_Team::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATournamentInfo_UpcomingMatch::InitAsDefaultInstance() {
}
class CMsgDOTATournamentInfo_UpcomingMatch::HasBitSetters {
 public:
  static void set_has_series_id(CMsgDOTATournamentInfo_UpcomingMatch* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_team1_id(CMsgDOTATournamentInfo_UpcomingMatch* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_team2_id(CMsgDOTATournamentInfo_UpcomingMatch* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_bo(CMsgDOTATournamentInfo_UpcomingMatch* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_stage_name(CMsgDOTATournamentInfo_UpcomingMatch* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_start_time(CMsgDOTATournamentInfo_UpcomingMatch* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_winner_stage(CMsgDOTATournamentInfo_UpcomingMatch* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_loser_stage(CMsgDOTATournamentInfo_UpcomingMatch* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_team1_tag(CMsgDOTATournamentInfo_UpcomingMatch* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_team2_tag(CMsgDOTATournamentInfo_UpcomingMatch* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_team1_prev_opponent_tag(CMsgDOTATournamentInfo_UpcomingMatch* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_team2_prev_opponent_tag(CMsgDOTATournamentInfo_UpcomingMatch* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_team1_logo(CMsgDOTATournamentInfo_UpcomingMatch* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_team2_logo(CMsgDOTATournamentInfo_UpcomingMatch* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_team1_prev_opponent_logo(CMsgDOTATournamentInfo_UpcomingMatch* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_team2_prev_opponent_logo(CMsgDOTATournamentInfo_UpcomingMatch* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_team1_prev_opponent_id(CMsgDOTATournamentInfo_UpcomingMatch* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_team2_prev_opponent_id(CMsgDOTATournamentInfo_UpcomingMatch* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_team1_prev_match_score(CMsgDOTATournamentInfo_UpcomingMatch* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_team1_prev_match_opponent_score(CMsgDOTATournamentInfo_UpcomingMatch* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_team2_prev_match_score(CMsgDOTATournamentInfo_UpcomingMatch* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_team2_prev_match_opponent_score(CMsgDOTATournamentInfo_UpcomingMatch* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_phase_type(CMsgDOTATournamentInfo_UpcomingMatch* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_team1_score(CMsgDOTATournamentInfo_UpcomingMatch* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_team2_score(CMsgDOTATournamentInfo_UpcomingMatch* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static void set_has_phase_id(CMsgDOTATournamentInfo_UpcomingMatch* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournamentInfo_UpcomingMatch::kSeriesIdFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam1IdFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam2IdFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kBoFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kStageNameFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kStartTimeFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kWinnerStageFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kLoserStageFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam1TagFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam2TagFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam1PrevOpponentTagFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam2PrevOpponentTagFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam1LogoFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam2LogoFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam1PrevOpponentLogoFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam2PrevOpponentLogoFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam1PrevOpponentIdFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam2PrevOpponentIdFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam1PrevMatchScoreFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam1PrevMatchOpponentScoreFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam2PrevMatchScoreFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam2PrevMatchOpponentScoreFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kPhaseTypeFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam1ScoreFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kTeam2ScoreFieldNumber;
const int CMsgDOTATournamentInfo_UpcomingMatch::kPhaseIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournamentInfo_UpcomingMatch::CMsgDOTATournamentInfo_UpcomingMatch()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
}
CMsgDOTATournamentInfo_UpcomingMatch::CMsgDOTATournamentInfo_UpcomingMatch(const CMsgDOTATournamentInfo_UpcomingMatch& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stage_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stage_name()) {
    stage_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stage_name_);
  }
  winner_stage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_winner_stage()) {
    winner_stage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.winner_stage_);
  }
  loser_stage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_loser_stage()) {
    loser_stage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loser_stage_);
  }
  team1_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team1_tag()) {
    team1_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team1_tag_);
  }
  team2_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team2_tag()) {
    team2_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team2_tag_);
  }
  team1_prev_opponent_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team1_prev_opponent_tag()) {
    team1_prev_opponent_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team1_prev_opponent_tag_);
  }
  team2_prev_opponent_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team2_prev_opponent_tag()) {
    team2_prev_opponent_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team2_prev_opponent_tag_);
  }
  ::memcpy(&series_id_, &from.series_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&phase_id_) -
    reinterpret_cast<char*>(&series_id_)) + sizeof(phase_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
}

void CMsgDOTATournamentInfo_UpcomingMatch::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTATournamentInfo_UpcomingMatch_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  stage_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  winner_stage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loser_stage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team1_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team2_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team1_prev_opponent_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team2_prev_opponent_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&series_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&phase_id_) -
      reinterpret_cast<char*>(&series_id_)) + sizeof(phase_id_));
}

CMsgDOTATournamentInfo_UpcomingMatch::~CMsgDOTATournamentInfo_UpcomingMatch() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
  SharedDtor();
}

void CMsgDOTATournamentInfo_UpcomingMatch::SharedDtor() {
  stage_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  winner_stage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  loser_stage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team1_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team2_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team1_prev_opponent_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team2_prev_opponent_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATournamentInfo_UpcomingMatch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATournamentInfo_UpcomingMatch& CMsgDOTATournamentInfo_UpcomingMatch::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATournamentInfo_UpcomingMatch_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATournamentInfo_UpcomingMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      stage_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      winner_stage_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      loser_stage_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      team1_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      team2_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      team1_prev_opponent_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      team2_prev_opponent_tag_.ClearNonDefaultToEmptyNoArena();
    }
  }
  series_id_ = 0u;
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&team1_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team1_prev_opponent_logo_) -
        reinterpret_cast<char*>(&team1_id_)) + sizeof(team1_prev_opponent_logo_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&team2_prev_opponent_logo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team1_score_) -
        reinterpret_cast<char*>(&team2_prev_opponent_logo_)) + sizeof(team1_score_));
  }
  if (cached_has_bits & 0x03000000u) {
    ::memset(&team2_score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&phase_id_) -
        reinterpret_cast<char*>(&team2_score_)) + sizeof(phase_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATournamentInfo_UpcomingMatch::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATournamentInfo_UpcomingMatch*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 series_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_series_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team1_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_team1_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team2_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_team2_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 bo = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_bo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string stage_name = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.stage_name");
        object = msg->mutable_stage_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 start_time = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_start_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string winner_stage = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.winner_stage");
        object = msg->mutable_winner_stage();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string loser_stage = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.loser_stage");
        object = msg->mutable_loser_stage();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string team1_tag = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_tag");
        object = msg->mutable_team1_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string team2_tag = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_tag");
        object = msg->mutable_team2_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string team1_prev_opponent_tag = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_tag");
        object = msg->mutable_team1_prev_opponent_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string team2_prev_opponent_tag = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_tag");
        object = msg->mutable_team2_prev_opponent_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 team1_logo = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_team1_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 team2_logo = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_team2_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 team1_prev_opponent_logo = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_team1_prev_opponent_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 team2_prev_opponent_logo = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_team2_prev_opponent_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team1_prev_opponent_id = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_team1_prev_opponent_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team2_prev_opponent_id = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_team2_prev_opponent_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team1_prev_match_score = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_team1_prev_match_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team1_prev_match_opponent_score = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_team1_prev_match_opponent_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team2_prev_match_score = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_team2_prev_match_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team2_prev_match_opponent_score = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_team2_prev_match_opponent_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 phase_type = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_phase_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team1_score = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_team1_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team2_score = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_team2_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 phase_id = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_phase_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATournamentInfo_UpcomingMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 series_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_series_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team1_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_team1_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team2_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_team2_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_bo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string stage_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stage_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stage_name().data(), static_cast<int>(this->stage_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.stage_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_start_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string winner_stage = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_winner_stage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->winner_stage().data(), static_cast<int>(this->winner_stage().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.winner_stage");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string loser_stage = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loser_stage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loser_stage().data(), static_cast<int>(this->loser_stage().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.loser_stage");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team1_tag = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team1_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team1_tag().data(), static_cast<int>(this->team1_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team2_tag = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team2_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team2_tag().data(), static_cast<int>(this->team2_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team1_prev_opponent_tag = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team1_prev_opponent_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team1_prev_opponent_tag().data(), static_cast<int>(this->team1_prev_opponent_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team2_prev_opponent_tag = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team2_prev_opponent_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team2_prev_opponent_tag().data(), static_cast<int>(this->team2_prev_opponent_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team1_logo = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_team1_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team1_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team2_logo = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_team2_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team2_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team1_prev_opponent_logo = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_team1_prev_opponent_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team1_prev_opponent_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team2_prev_opponent_logo = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_team2_prev_opponent_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team2_prev_opponent_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team1_prev_opponent_id = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_team1_prev_opponent_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1_prev_opponent_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team2_prev_opponent_id = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_team2_prev_opponent_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2_prev_opponent_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team1_prev_match_score = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_team1_prev_match_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1_prev_match_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team1_prev_match_opponent_score = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_team1_prev_match_opponent_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1_prev_match_opponent_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team2_prev_match_score = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_team2_prev_match_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2_prev_match_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team2_prev_match_opponent_score = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          HasBitSetters::set_has_team2_prev_match_opponent_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2_prev_match_opponent_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 phase_type = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {
          HasBitSetters::set_has_phase_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phase_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team1_score = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {
          HasBitSetters::set_has_team1_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team1_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team2_score = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {
          HasBitSetters::set_has_team2_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team2_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 phase_id = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (208 & 0xFF)) {
          HasBitSetters::set_has_phase_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &phase_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATournamentInfo_UpcomingMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 series_id = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->series_id(), output);
  }

  // optional uint32 team1_id = 2;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team1_id(), output);
  }

  // optional uint32 team2_id = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team2_id(), output);
  }

  // optional uint32 bo = 4;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bo(), output);
  }

  // optional string stage_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage_name().data(), static_cast<int>(this->stage_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.stage_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->stage_name(), output);
  }

  // optional uint32 start_time = 6;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->start_time(), output);
  }

  // optional string winner_stage = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->winner_stage().data(), static_cast<int>(this->winner_stage().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.winner_stage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->winner_stage(), output);
  }

  // optional string loser_stage = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loser_stage().data(), static_cast<int>(this->loser_stage().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.loser_stage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->loser_stage(), output);
  }

  // optional string team1_tag = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team1_tag().data(), static_cast<int>(this->team1_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->team1_tag(), output);
  }

  // optional string team2_tag = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team2_tag().data(), static_cast<int>(this->team2_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->team2_tag(), output);
  }

  // optional string team1_prev_opponent_tag = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team1_prev_opponent_tag().data(), static_cast<int>(this->team1_prev_opponent_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->team1_prev_opponent_tag(), output);
  }

  // optional string team2_prev_opponent_tag = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team2_prev_opponent_tag().data(), static_cast<int>(this->team2_prev_opponent_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->team2_prev_opponent_tag(), output);
  }

  // optional uint64 team1_logo = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(13, this->team1_logo(), output);
  }

  // optional uint64 team2_logo = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->team2_logo(), output);
  }

  // optional uint64 team1_prev_opponent_logo = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(15, this->team1_prev_opponent_logo(), output);
  }

  // optional uint64 team2_prev_opponent_logo = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->team2_prev_opponent_logo(), output);
  }

  // optional uint32 team1_prev_opponent_id = 17;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->team1_prev_opponent_id(), output);
  }

  // optional uint32 team2_prev_opponent_id = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->team2_prev_opponent_id(), output);
  }

  // optional uint32 team1_prev_match_score = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->team1_prev_match_score(), output);
  }

  // optional uint32 team1_prev_match_opponent_score = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->team1_prev_match_opponent_score(), output);
  }

  // optional uint32 team2_prev_match_score = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->team2_prev_match_score(), output);
  }

  // optional uint32 team2_prev_match_opponent_score = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->team2_prev_match_opponent_score(), output);
  }

  // optional uint32 phase_type = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->phase_type(), output);
  }

  // optional uint32 team1_score = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->team1_score(), output);
  }

  // optional uint32 team2_score = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->team2_score(), output);
  }

  // optional uint32 phase_id = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->phase_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
}

::google::protobuf::uint8* CMsgDOTATournamentInfo_UpcomingMatch::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 series_id = 1;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->series_id(), target);
  }

  // optional uint32 team1_id = 2;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team1_id(), target);
  }

  // optional uint32 team2_id = 3;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team2_id(), target);
  }

  // optional uint32 bo = 4;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bo(), target);
  }

  // optional string stage_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stage_name().data(), static_cast<int>(this->stage_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.stage_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->stage_name(), target);
  }

  // optional uint32 start_time = 6;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->start_time(), target);
  }

  // optional string winner_stage = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->winner_stage().data(), static_cast<int>(this->winner_stage().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.winner_stage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->winner_stage(), target);
  }

  // optional string loser_stage = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loser_stage().data(), static_cast<int>(this->loser_stage().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.loser_stage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->loser_stage(), target);
  }

  // optional string team1_tag = 9;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team1_tag().data(), static_cast<int>(this->team1_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->team1_tag(), target);
  }

  // optional string team2_tag = 10;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team2_tag().data(), static_cast<int>(this->team2_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->team2_tag(), target);
  }

  // optional string team1_prev_opponent_tag = 11;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team1_prev_opponent_tag().data(), static_cast<int>(this->team1_prev_opponent_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team1_prev_opponent_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->team1_prev_opponent_tag(), target);
  }

  // optional string team2_prev_opponent_tag = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team2_prev_opponent_tag().data(), static_cast<int>(this->team2_prev_opponent_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.UpcomingMatch.team2_prev_opponent_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->team2_prev_opponent_tag(), target);
  }

  // optional uint64 team1_logo = 13;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(13, this->team1_logo(), target);
  }

  // optional uint64 team2_logo = 14;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->team2_logo(), target);
  }

  // optional uint64 team1_prev_opponent_logo = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(15, this->team1_prev_opponent_logo(), target);
  }

  // optional uint64 team2_prev_opponent_logo = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->team2_prev_opponent_logo(), target);
  }

  // optional uint32 team1_prev_opponent_id = 17;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->team1_prev_opponent_id(), target);
  }

  // optional uint32 team2_prev_opponent_id = 18;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->team2_prev_opponent_id(), target);
  }

  // optional uint32 team1_prev_match_score = 19;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->team1_prev_match_score(), target);
  }

  // optional uint32 team1_prev_match_opponent_score = 20;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->team1_prev_match_opponent_score(), target);
  }

  // optional uint32 team2_prev_match_score = 21;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->team2_prev_match_score(), target);
  }

  // optional uint32 team2_prev_match_opponent_score = 22;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->team2_prev_match_opponent_score(), target);
  }

  // optional uint32 phase_type = 23;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->phase_type(), target);
  }

  // optional uint32 team1_score = 24;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->team1_score(), target);
  }

  // optional uint32 team2_score = 25;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->team2_score(), target);
  }

  // optional uint32 phase_id = 26;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->phase_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
  return target;
}

size_t CMsgDOTATournamentInfo_UpcomingMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string stage_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stage_name());
    }

    // optional string winner_stage = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->winner_stage());
    }

    // optional string loser_stage = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loser_stage());
    }

    // optional string team1_tag = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team1_tag());
    }

    // optional string team2_tag = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team2_tag());
    }

    // optional string team1_prev_opponent_tag = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team1_prev_opponent_tag());
    }

    // optional string team2_prev_opponent_tag = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team2_prev_opponent_tag());
    }

    // optional uint32 series_id = 1;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 team1_id = 2;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1_id());
    }

    // optional uint32 team2_id = 3;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2_id());
    }

    // optional uint32 bo = 4;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bo());
    }

    // optional uint32 start_time = 6;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional uint32 team1_prev_opponent_id = 17;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1_prev_opponent_id());
    }

    // optional uint64 team1_logo = 13;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team1_logo());
    }

    // optional uint64 team2_logo = 14;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team2_logo());
    }

    // optional uint64 team1_prev_opponent_logo = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team1_prev_opponent_logo());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint64 team2_prev_opponent_logo = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team2_prev_opponent_logo());
    }

    // optional uint32 team2_prev_opponent_id = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2_prev_opponent_id());
    }

    // optional uint32 team1_prev_match_score = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1_prev_match_score());
    }

    // optional uint32 team1_prev_match_opponent_score = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1_prev_match_opponent_score());
    }

    // optional uint32 team2_prev_match_score = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2_prev_match_score());
    }

    // optional uint32 team2_prev_match_opponent_score = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2_prev_match_opponent_score());
    }

    // optional uint32 phase_type = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phase_type());
    }

    // optional uint32 team1_score = 24;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team1_score());
    }

  }
  if (cached_has_bits & 0x03000000u) {
    // optional uint32 team2_score = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team2_score());
    }

    // optional uint32 phase_id = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->phase_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournamentInfo_UpcomingMatch::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentInfo_UpcomingMatch* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATournamentInfo_UpcomingMatch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentInfo_UpcomingMatch::MergeFrom(const CMsgDOTATournamentInfo_UpcomingMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      stage_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stage_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      winner_stage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.winner_stage_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      loser_stage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.loser_stage_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      team1_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team1_tag_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      team2_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team2_tag_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      team1_prev_opponent_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team1_prev_opponent_tag_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      team2_prev_opponent_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team2_prev_opponent_tag_);
    }
    if (cached_has_bits & 0x00000080u) {
      series_id_ = from.series_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      team1_id_ = from.team1_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      team2_id_ = from.team2_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      bo_ = from.bo_;
    }
    if (cached_has_bits & 0x00000800u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00001000u) {
      team1_prev_opponent_id_ = from.team1_prev_opponent_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      team1_logo_ = from.team1_logo_;
    }
    if (cached_has_bits & 0x00004000u) {
      team2_logo_ = from.team2_logo_;
    }
    if (cached_has_bits & 0x00008000u) {
      team1_prev_opponent_logo_ = from.team1_prev_opponent_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      team2_prev_opponent_logo_ = from.team2_prev_opponent_logo_;
    }
    if (cached_has_bits & 0x00020000u) {
      team2_prev_opponent_id_ = from.team2_prev_opponent_id_;
    }
    if (cached_has_bits & 0x00040000u) {
      team1_prev_match_score_ = from.team1_prev_match_score_;
    }
    if (cached_has_bits & 0x00080000u) {
      team1_prev_match_opponent_score_ = from.team1_prev_match_opponent_score_;
    }
    if (cached_has_bits & 0x00100000u) {
      team2_prev_match_score_ = from.team2_prev_match_score_;
    }
    if (cached_has_bits & 0x00200000u) {
      team2_prev_match_opponent_score_ = from.team2_prev_match_opponent_score_;
    }
    if (cached_has_bits & 0x00400000u) {
      phase_type_ = from.phase_type_;
    }
    if (cached_has_bits & 0x00800000u) {
      team1_score_ = from.team1_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x03000000u) {
    if (cached_has_bits & 0x01000000u) {
      team2_score_ = from.team2_score_;
    }
    if (cached_has_bits & 0x02000000u) {
      phase_id_ = from.phase_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentInfo_UpcomingMatch::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentInfo_UpcomingMatch::CopyFrom(const CMsgDOTATournamentInfo_UpcomingMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournamentInfo.UpcomingMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentInfo_UpcomingMatch::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentInfo_UpcomingMatch::Swap(CMsgDOTATournamentInfo_UpcomingMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournamentInfo_UpcomingMatch::InternalSwap(CMsgDOTATournamentInfo_UpcomingMatch* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  stage_name_.Swap(&other->stage_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  winner_stage_.Swap(&other->winner_stage_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  loser_stage_.Swap(&other->loser_stage_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team1_tag_.Swap(&other->team1_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team2_tag_.Swap(&other->team2_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team1_prev_opponent_tag_.Swap(&other->team1_prev_opponent_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team2_prev_opponent_tag_.Swap(&other->team2_prev_opponent_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(series_id_, other->series_id_);
  swap(team1_id_, other->team1_id_);
  swap(team2_id_, other->team2_id_);
  swap(bo_, other->bo_);
  swap(start_time_, other->start_time_);
  swap(team1_prev_opponent_id_, other->team1_prev_opponent_id_);
  swap(team1_logo_, other->team1_logo_);
  swap(team2_logo_, other->team2_logo_);
  swap(team1_prev_opponent_logo_, other->team1_prev_opponent_logo_);
  swap(team2_prev_opponent_logo_, other->team2_prev_opponent_logo_);
  swap(team2_prev_opponent_id_, other->team2_prev_opponent_id_);
  swap(team1_prev_match_score_, other->team1_prev_match_score_);
  swap(team1_prev_match_opponent_score_, other->team1_prev_match_opponent_score_);
  swap(team2_prev_match_score_, other->team2_prev_match_score_);
  swap(team2_prev_match_opponent_score_, other->team2_prev_match_opponent_score_);
  swap(phase_type_, other->phase_type_);
  swap(team1_score_, other->team1_score_);
  swap(team2_score_, other->team2_score_);
  swap(phase_id_, other->phase_id_);
}

::google::protobuf::Metadata CMsgDOTATournamentInfo_UpcomingMatch::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATournamentInfo_News::InitAsDefaultInstance() {
}
class CMsgDOTATournamentInfo_News::HasBitSetters {
 public:
  static void set_has_link(CMsgDOTATournamentInfo_News* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_title(CMsgDOTATournamentInfo_News* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_image(CMsgDOTATournamentInfo_News* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_timestamp(CMsgDOTATournamentInfo_News* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournamentInfo_News::kLinkFieldNumber;
const int CMsgDOTATournamentInfo_News::kTitleFieldNumber;
const int CMsgDOTATournamentInfo_News::kImageFieldNumber;
const int CMsgDOTATournamentInfo_News::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournamentInfo_News::CMsgDOTATournamentInfo_News()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournamentInfo.News)
}
CMsgDOTATournamentInfo_News::CMsgDOTATournamentInfo_News(const CMsgDOTATournamentInfo_News& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_link()) {
    link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_);
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_image()) {
    image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournamentInfo.News)
}

void CMsgDOTATournamentInfo_News::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTATournamentInfo_News_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  link_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0u;
}

CMsgDOTATournamentInfo_News::~CMsgDOTATournamentInfo_News() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournamentInfo.News)
  SharedDtor();
}

void CMsgDOTATournamentInfo_News::SharedDtor() {
  link_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATournamentInfo_News::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATournamentInfo_News& CMsgDOTATournamentInfo_News::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATournamentInfo_News_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATournamentInfo_News::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournamentInfo.News)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      link_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      title_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      image_.ClearNonDefaultToEmptyNoArena();
    }
  }
  timestamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATournamentInfo_News::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATournamentInfo_News*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string link = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATournamentInfo.News.link");
        object = msg->mutable_link();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string title = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATournamentInfo.News.title");
        object = msg->mutable_title();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string image = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATournamentInfo.News.image");
        object = msg->mutable_image();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 timestamp = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATournamentInfo_News::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournamentInfo.News)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string link = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_link()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->link().data(), static_cast<int>(this->link().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.News.link");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.News.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string image = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image().data(), static_cast<int>(this->image().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournamentInfo.News.image");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournamentInfo.News)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournamentInfo.News)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATournamentInfo_News::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournamentInfo.News)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string link = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link().data(), static_cast<int>(this->link().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.News.link");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->link(), output);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.News.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string image = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.News.image");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->image(), output);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournamentInfo.News)
}

::google::protobuf::uint8* CMsgDOTATournamentInfo_News::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournamentInfo.News)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string link = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->link().data(), static_cast<int>(this->link().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.News.link");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->link(), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.News.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string image = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image().data(), static_cast<int>(this->image().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournamentInfo.News.image");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->image(), target);
  }

  // optional uint32 timestamp = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournamentInfo.News)
  return target;
}

size_t CMsgDOTATournamentInfo_News::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournamentInfo.News)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string link = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->link());
    }

    // optional string title = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string image = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image());
    }

    // optional uint32 timestamp = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournamentInfo_News::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournamentInfo.News)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentInfo_News* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATournamentInfo_News>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournamentInfo.News)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournamentInfo.News)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentInfo_News::MergeFrom(const CMsgDOTATournamentInfo_News& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournamentInfo.News)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      link_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.link_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      image_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.image_);
    }
    if (cached_has_bits & 0x00000008u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentInfo_News::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournamentInfo.News)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentInfo_News::CopyFrom(const CMsgDOTATournamentInfo_News& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournamentInfo.News)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentInfo_News::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentInfo_News::Swap(CMsgDOTATournamentInfo_News* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournamentInfo_News::InternalSwap(CMsgDOTATournamentInfo_News* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  link_.Swap(&other->link_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_.Swap(&other->image_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata CMsgDOTATournamentInfo_News::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATournamentInfo::InitAsDefaultInstance() {
}
class CMsgDOTATournamentInfo::HasBitSetters {
 public:
  static void set_has_league_id(CMsgDOTATournamentInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournamentInfo::kLeagueIdFieldNumber;
const int CMsgDOTATournamentInfo::kPhaseListFieldNumber;
const int CMsgDOTATournamentInfo::kTeamsListFieldNumber;
const int CMsgDOTATournamentInfo::kUpcomingMatchesListFieldNumber;
const int CMsgDOTATournamentInfo::kNewsListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournamentInfo::CMsgDOTATournamentInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournamentInfo)
}
CMsgDOTATournamentInfo::CMsgDOTATournamentInfo(const CMsgDOTATournamentInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      phase_list_(from.phase_list_),
      teams_list_(from.teams_list_),
      upcoming_matches_list_(from.upcoming_matches_list_),
      news_list_(from.news_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  league_id_ = from.league_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournamentInfo)
}

void CMsgDOTATournamentInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTATournamentInfo_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  league_id_ = 0u;
}

CMsgDOTATournamentInfo::~CMsgDOTATournamentInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournamentInfo)
  SharedDtor();
}

void CMsgDOTATournamentInfo::SharedDtor() {
}

void CMsgDOTATournamentInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATournamentInfo& CMsgDOTATournamentInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATournamentInfo_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATournamentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournamentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  phase_list_.Clear();
  teams_list_.Clear();
  upcoming_matches_list_.Clear();
  news_list_.Clear();
  league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATournamentInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATournamentInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTATournamentInfo.Phase phase_list = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTATournamentInfo_Phase::_InternalParse;
          object = msg->add_phase_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgDOTATournamentInfo.Team teams_list = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTATournamentInfo_Team::_InternalParse;
          object = msg->add_teams_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgDOTATournamentInfo.UpcomingMatch upcoming_matches_list = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch::_InternalParse;
          object = msg->add_upcoming_matches_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgDOTATournamentInfo.News news_list = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTATournamentInfo_News::_InternalParse;
          object = msg->add_news_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATournamentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournamentInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTATournamentInfo.Phase phase_list = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_phase_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTATournamentInfo.Team teams_list = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_teams_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTATournamentInfo.UpcomingMatch upcoming_matches_list = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_upcoming_matches_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTATournamentInfo.News news_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_news_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournamentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournamentInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATournamentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournamentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->league_id(), output);
  }

  // repeated .proto.dota.CMsgDOTATournamentInfo.Phase phase_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->phase_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->phase_list(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgDOTATournamentInfo.Team teams_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teams_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->teams_list(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgDOTATournamentInfo.UpcomingMatch upcoming_matches_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->upcoming_matches_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->upcoming_matches_list(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgDOTATournamentInfo.News news_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->news_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->news_list(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournamentInfo)
}

::google::protobuf::uint8* CMsgDOTATournamentInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournamentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->league_id(), target);
  }

  // repeated .proto.dota.CMsgDOTATournamentInfo.Phase phase_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->phase_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->phase_list(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgDOTATournamentInfo.Team teams_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teams_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->teams_list(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgDOTATournamentInfo.UpcomingMatch upcoming_matches_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->upcoming_matches_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->upcoming_matches_list(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgDOTATournamentInfo.News news_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->news_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->news_list(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournamentInfo)
  return target;
}

size_t CMsgDOTATournamentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournamentInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTATournamentInfo.Phase phase_list = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->phase_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->phase_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTATournamentInfo.Team teams_list = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->teams_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->teams_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTATournamentInfo.UpcomingMatch upcoming_matches_list = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->upcoming_matches_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->upcoming_matches_list(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTATournamentInfo.News news_list = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->news_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->news_list(static_cast<int>(i)));
    }
  }

  // optional uint32 league_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->league_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournamentInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournamentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATournamentInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournamentInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournamentInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentInfo::MergeFrom(const CMsgDOTATournamentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournamentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  phase_list_.MergeFrom(from.phase_list_);
  teams_list_.MergeFrom(from.teams_list_);
  upcoming_matches_list_.MergeFrom(from.upcoming_matches_list_);
  news_list_.MergeFrom(from.news_list_);
  if (from.has_league_id()) {
    set_league_id(from.league_id());
  }
}

void CMsgDOTATournamentInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournamentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentInfo::CopyFrom(const CMsgDOTATournamentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournamentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentInfo::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentInfo::Swap(CMsgDOTATournamentInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournamentInfo::InternalSwap(CMsgDOTATournamentInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&phase_list_)->InternalSwap(CastToBase(&other->phase_list_));
  CastToBase(&teams_list_)->InternalSwap(CastToBase(&other->teams_list_));
  CastToBase(&upcoming_matches_list_)->InternalSwap(CastToBase(&other->upcoming_matches_list_));
  CastToBase(&news_list_)->InternalSwap(CastToBase(&other->news_list_));
  swap(league_id_, other->league_id_);
}

::google::protobuf::Metadata CMsgDOTATournamentInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRequestWeekendTourneySchedule::InitAsDefaultInstance() {
}
class CMsgRequestWeekendTourneySchedule::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRequestWeekendTourneySchedule::CMsgRequestWeekendTourneySchedule()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgRequestWeekendTourneySchedule)
}
CMsgRequestWeekendTourneySchedule::CMsgRequestWeekendTourneySchedule(const CMsgRequestWeekendTourneySchedule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgRequestWeekendTourneySchedule)
}

void CMsgRequestWeekendTourneySchedule::SharedCtor() {
}

CMsgRequestWeekendTourneySchedule::~CMsgRequestWeekendTourneySchedule() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgRequestWeekendTourneySchedule)
  SharedDtor();
}

void CMsgRequestWeekendTourneySchedule::SharedDtor() {
}

void CMsgRequestWeekendTourneySchedule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRequestWeekendTourneySchedule& CMsgRequestWeekendTourneySchedule::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRequestWeekendTourneySchedule_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgRequestWeekendTourneySchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgRequestWeekendTourneySchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRequestWeekendTourneySchedule::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRequestWeekendTourneySchedule*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRequestWeekendTourneySchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgRequestWeekendTourneySchedule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgRequestWeekendTourneySchedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgRequestWeekendTourneySchedule)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRequestWeekendTourneySchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgRequestWeekendTourneySchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgRequestWeekendTourneySchedule)
}

::google::protobuf::uint8* CMsgRequestWeekendTourneySchedule::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgRequestWeekendTourneySchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgRequestWeekendTourneySchedule)
  return target;
}

size_t CMsgRequestWeekendTourneySchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgRequestWeekendTourneySchedule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRequestWeekendTourneySchedule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgRequestWeekendTourneySchedule)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRequestWeekendTourneySchedule* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRequestWeekendTourneySchedule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgRequestWeekendTourneySchedule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgRequestWeekendTourneySchedule)
    MergeFrom(*source);
  }
}

void CMsgRequestWeekendTourneySchedule::MergeFrom(const CMsgRequestWeekendTourneySchedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgRequestWeekendTourneySchedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgRequestWeekendTourneySchedule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgRequestWeekendTourneySchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestWeekendTourneySchedule::CopyFrom(const CMsgRequestWeekendTourneySchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgRequestWeekendTourneySchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestWeekendTourneySchedule::IsInitialized() const {
  return true;
}

void CMsgRequestWeekendTourneySchedule::Swap(CMsgRequestWeekendTourneySchedule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRequestWeekendTourneySchedule::InternalSwap(CMsgRequestWeekendTourneySchedule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgRequestWeekendTourneySchedule::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgWeekendTourneySchedule_Division::InitAsDefaultInstance() {
}
class CMsgWeekendTourneySchedule_Division::HasBitSetters {
 public:
  static void set_has_division_code(CMsgWeekendTourneySchedule_Division* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_time_window_open(CMsgWeekendTourneySchedule_Division* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_time_window_close(CMsgWeekendTourneySchedule_Division* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_time_window_open_next(CMsgWeekendTourneySchedule_Division* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_trophy_id(CMsgWeekendTourneySchedule_Division* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_free_weekend(CMsgWeekendTourneySchedule_Division* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgWeekendTourneySchedule_Division::kDivisionCodeFieldNumber;
const int CMsgWeekendTourneySchedule_Division::kTimeWindowOpenFieldNumber;
const int CMsgWeekendTourneySchedule_Division::kTimeWindowCloseFieldNumber;
const int CMsgWeekendTourneySchedule_Division::kTimeWindowOpenNextFieldNumber;
const int CMsgWeekendTourneySchedule_Division::kTrophyIdFieldNumber;
const int CMsgWeekendTourneySchedule_Division::kFreeWeekendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgWeekendTourneySchedule_Division::CMsgWeekendTourneySchedule_Division()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgWeekendTourneySchedule.Division)
}
CMsgWeekendTourneySchedule_Division::CMsgWeekendTourneySchedule_Division(const CMsgWeekendTourneySchedule_Division& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&division_code_, &from.division_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&free_weekend_) -
    reinterpret_cast<char*>(&division_code_)) + sizeof(free_weekend_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgWeekendTourneySchedule.Division)
}

void CMsgWeekendTourneySchedule_Division::SharedCtor() {
  ::memset(&division_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&free_weekend_) -
      reinterpret_cast<char*>(&division_code_)) + sizeof(free_weekend_));
}

CMsgWeekendTourneySchedule_Division::~CMsgWeekendTourneySchedule_Division() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgWeekendTourneySchedule.Division)
  SharedDtor();
}

void CMsgWeekendTourneySchedule_Division::SharedDtor() {
}

void CMsgWeekendTourneySchedule_Division::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgWeekendTourneySchedule_Division& CMsgWeekendTourneySchedule_Division::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgWeekendTourneySchedule_Division_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgWeekendTourneySchedule_Division::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgWeekendTourneySchedule.Division)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&division_code_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&free_weekend_) -
        reinterpret_cast<char*>(&division_code_)) + sizeof(free_weekend_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgWeekendTourneySchedule_Division::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgWeekendTourneySchedule_Division*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 division_code = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_division_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 time_window_open = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_time_window_open(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 time_window_close = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_time_window_close(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 time_window_open_next = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_time_window_open_next(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 trophy_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_trophy_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool free_weekend = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_free_weekend(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgWeekendTourneySchedule_Division::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgWeekendTourneySchedule.Division)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 division_code = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_division_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &division_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_window_open = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_time_window_open(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_window_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_window_close = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_time_window_close(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_window_close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_window_open_next = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_time_window_open_next(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_window_open_next_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 trophy_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_trophy_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trophy_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool free_weekend = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_free_weekend(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &free_weekend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgWeekendTourneySchedule.Division)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgWeekendTourneySchedule.Division)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgWeekendTourneySchedule_Division::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgWeekendTourneySchedule.Division)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 division_code = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->division_code(), output);
  }

  // optional uint32 time_window_open = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->time_window_open(), output);
  }

  // optional uint32 time_window_close = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_window_close(), output);
  }

  // optional uint32 time_window_open_next = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->time_window_open_next(), output);
  }

  // optional uint32 trophy_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->trophy_id(), output);
  }

  // optional bool free_weekend = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->free_weekend(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgWeekendTourneySchedule.Division)
}

::google::protobuf::uint8* CMsgWeekendTourneySchedule_Division::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgWeekendTourneySchedule.Division)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 division_code = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->division_code(), target);
  }

  // optional uint32 time_window_open = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->time_window_open(), target);
  }

  // optional uint32 time_window_close = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_window_close(), target);
  }

  // optional uint32 time_window_open_next = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->time_window_open_next(), target);
  }

  // optional uint32 trophy_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->trophy_id(), target);
  }

  // optional bool free_weekend = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->free_weekend(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgWeekendTourneySchedule.Division)
  return target;
}

size_t CMsgWeekendTourneySchedule_Division::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgWeekendTourneySchedule.Division)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 division_code = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->division_code());
    }

    // optional uint32 time_window_open = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_window_open());
    }

    // optional uint32 time_window_close = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_window_close());
    }

    // optional uint32 time_window_open_next = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_window_open_next());
    }

    // optional uint32 trophy_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trophy_id());
    }

    // optional bool free_weekend = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgWeekendTourneySchedule_Division::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgWeekendTourneySchedule.Division)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgWeekendTourneySchedule_Division* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgWeekendTourneySchedule_Division>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgWeekendTourneySchedule.Division)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgWeekendTourneySchedule.Division)
    MergeFrom(*source);
  }
}

void CMsgWeekendTourneySchedule_Division::MergeFrom(const CMsgWeekendTourneySchedule_Division& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgWeekendTourneySchedule.Division)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      division_code_ = from.division_code_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_window_open_ = from.time_window_open_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_window_close_ = from.time_window_close_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_window_open_next_ = from.time_window_open_next_;
    }
    if (cached_has_bits & 0x00000010u) {
      trophy_id_ = from.trophy_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      free_weekend_ = from.free_weekend_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgWeekendTourneySchedule_Division::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgWeekendTourneySchedule.Division)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWeekendTourneySchedule_Division::CopyFrom(const CMsgWeekendTourneySchedule_Division& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgWeekendTourneySchedule.Division)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWeekendTourneySchedule_Division::IsInitialized() const {
  return true;
}

void CMsgWeekendTourneySchedule_Division::Swap(CMsgWeekendTourneySchedule_Division* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgWeekendTourneySchedule_Division::InternalSwap(CMsgWeekendTourneySchedule_Division* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(division_code_, other->division_code_);
  swap(time_window_open_, other->time_window_open_);
  swap(time_window_close_, other->time_window_close_);
  swap(time_window_open_next_, other->time_window_open_next_);
  swap(trophy_id_, other->trophy_id_);
  swap(free_weekend_, other->free_weekend_);
}

::google::protobuf::Metadata CMsgWeekendTourneySchedule_Division::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgWeekendTourneySchedule::InitAsDefaultInstance() {
}
class CMsgWeekendTourneySchedule::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgWeekendTourneySchedule::kDivisionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgWeekendTourneySchedule::CMsgWeekendTourneySchedule()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgWeekendTourneySchedule)
}
CMsgWeekendTourneySchedule::CMsgWeekendTourneySchedule(const CMsgWeekendTourneySchedule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      divisions_(from.divisions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgWeekendTourneySchedule)
}

void CMsgWeekendTourneySchedule::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgWeekendTourneySchedule_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
}

CMsgWeekendTourneySchedule::~CMsgWeekendTourneySchedule() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgWeekendTourneySchedule)
  SharedDtor();
}

void CMsgWeekendTourneySchedule::SharedDtor() {
}

void CMsgWeekendTourneySchedule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgWeekendTourneySchedule& CMsgWeekendTourneySchedule::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgWeekendTourneySchedule_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgWeekendTourneySchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgWeekendTourneySchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  divisions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgWeekendTourneySchedule::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgWeekendTourneySchedule*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgWeekendTourneySchedule.Division divisions = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgWeekendTourneySchedule_Division::_InternalParse;
          object = msg->add_divisions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgWeekendTourneySchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgWeekendTourneySchedule)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgWeekendTourneySchedule.Division divisions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_divisions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgWeekendTourneySchedule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgWeekendTourneySchedule)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgWeekendTourneySchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgWeekendTourneySchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgWeekendTourneySchedule.Division divisions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->divisions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->divisions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgWeekendTourneySchedule)
}

::google::protobuf::uint8* CMsgWeekendTourneySchedule::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgWeekendTourneySchedule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgWeekendTourneySchedule.Division divisions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->divisions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->divisions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgWeekendTourneySchedule)
  return target;
}

size_t CMsgWeekendTourneySchedule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgWeekendTourneySchedule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgWeekendTourneySchedule.Division divisions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->divisions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->divisions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgWeekendTourneySchedule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgWeekendTourneySchedule)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgWeekendTourneySchedule* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgWeekendTourneySchedule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgWeekendTourneySchedule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgWeekendTourneySchedule)
    MergeFrom(*source);
  }
}

void CMsgWeekendTourneySchedule::MergeFrom(const CMsgWeekendTourneySchedule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgWeekendTourneySchedule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  divisions_.MergeFrom(from.divisions_);
}

void CMsgWeekendTourneySchedule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgWeekendTourneySchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWeekendTourneySchedule::CopyFrom(const CMsgWeekendTourneySchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgWeekendTourneySchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWeekendTourneySchedule::IsInitialized() const {
  return true;
}

void CMsgWeekendTourneySchedule::Swap(CMsgWeekendTourneySchedule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgWeekendTourneySchedule::InternalSwap(CMsgWeekendTourneySchedule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&divisions_)->InternalSwap(CastToBase(&other->divisions_));
}

::google::protobuf::Metadata CMsgWeekendTourneySchedule::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgWeekendTourneyOpts::InitAsDefaultInstance() {
}
class CMsgWeekendTourneyOpts::HasBitSetters {
 public:
  static void set_has_participating(CMsgWeekendTourneyOpts* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_division_id(CMsgWeekendTourneyOpts* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_buyin(CMsgWeekendTourneyOpts* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_skill_level(CMsgWeekendTourneyOpts* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_match_groups(CMsgWeekendTourneyOpts* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_team_id(CMsgWeekendTourneyOpts* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_pickup_team_name(CMsgWeekendTourneyOpts* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_pickup_team_logo(CMsgWeekendTourneyOpts* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgWeekendTourneyOpts::kParticipatingFieldNumber;
const int CMsgWeekendTourneyOpts::kDivisionIdFieldNumber;
const int CMsgWeekendTourneyOpts::kBuyinFieldNumber;
const int CMsgWeekendTourneyOpts::kSkillLevelFieldNumber;
const int CMsgWeekendTourneyOpts::kMatchGroupsFieldNumber;
const int CMsgWeekendTourneyOpts::kTeamIdFieldNumber;
const int CMsgWeekendTourneyOpts::kPickupTeamNameFieldNumber;
const int CMsgWeekendTourneyOpts::kPickupTeamLogoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgWeekendTourneyOpts::CMsgWeekendTourneyOpts()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgWeekendTourneyOpts)
}
CMsgWeekendTourneyOpts::CMsgWeekendTourneyOpts(const CMsgWeekendTourneyOpts& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pickup_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pickup_team_name()) {
    pickup_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pickup_team_name_);
  }
  ::memcpy(&participating_, &from.participating_,
    static_cast<size_t>(reinterpret_cast<char*>(&pickup_team_logo_) -
    reinterpret_cast<char*>(&participating_)) + sizeof(pickup_team_logo_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgWeekendTourneyOpts)
}

void CMsgWeekendTourneyOpts::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgWeekendTourneyOpts_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  pickup_team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&participating_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pickup_team_logo_) -
      reinterpret_cast<char*>(&participating_)) + sizeof(pickup_team_logo_));
}

CMsgWeekendTourneyOpts::~CMsgWeekendTourneyOpts() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgWeekendTourneyOpts)
  SharedDtor();
}

void CMsgWeekendTourneyOpts::SharedDtor() {
  pickup_team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgWeekendTourneyOpts::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgWeekendTourneyOpts& CMsgWeekendTourneyOpts::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgWeekendTourneyOpts_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgWeekendTourneyOpts::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgWeekendTourneyOpts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pickup_team_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&participating_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pickup_team_logo_) -
        reinterpret_cast<char*>(&participating_)) + sizeof(pickup_team_logo_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgWeekendTourneyOpts::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgWeekendTourneyOpts*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool participating = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_participating(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 division_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_division_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 buyin = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_buyin(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 skill_level = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_skill_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 match_groups = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_match_groups(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string pickup_team_name = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgWeekendTourneyOpts.pickup_team_name");
        object = msg->mutable_pickup_team_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 pickup_team_logo = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_pickup_team_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgWeekendTourneyOpts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgWeekendTourneyOpts)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool participating = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_participating(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &participating_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 division_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_division_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &division_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 buyin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_buyin(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buyin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 skill_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_skill_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 match_groups = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_match_groups(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_groups_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pickup_team_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pickup_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pickup_team_name().data(), static_cast<int>(this->pickup_team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgWeekendTourneyOpts.pickup_team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 pickup_team_logo = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_pickup_team_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pickup_team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgWeekendTourneyOpts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgWeekendTourneyOpts)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgWeekendTourneyOpts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgWeekendTourneyOpts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool participating = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->participating(), output);
  }

  // optional uint32 division_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->division_id(), output);
  }

  // optional uint32 buyin = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buyin(), output);
  }

  // optional uint32 skill_level = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skill_level(), output);
  }

  // optional uint32 match_groups = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->match_groups(), output);
  }

  // optional uint32 team_id = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->team_id(), output);
  }

  // optional string pickup_team_name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pickup_team_name().data(), static_cast<int>(this->pickup_team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgWeekendTourneyOpts.pickup_team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->pickup_team_name(), output);
  }

  // optional uint64 pickup_team_logo = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->pickup_team_logo(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgWeekendTourneyOpts)
}

::google::protobuf::uint8* CMsgWeekendTourneyOpts::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgWeekendTourneyOpts)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool participating = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->participating(), target);
  }

  // optional uint32 division_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->division_id(), target);
  }

  // optional uint32 buyin = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buyin(), target);
  }

  // optional uint32 skill_level = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skill_level(), target);
  }

  // optional uint32 match_groups = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->match_groups(), target);
  }

  // optional uint32 team_id = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->team_id(), target);
  }

  // optional string pickup_team_name = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pickup_team_name().data(), static_cast<int>(this->pickup_team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgWeekendTourneyOpts.pickup_team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->pickup_team_name(), target);
  }

  // optional uint64 pickup_team_logo = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->pickup_team_logo(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgWeekendTourneyOpts)
  return target;
}

size_t CMsgWeekendTourneyOpts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgWeekendTourneyOpts)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string pickup_team_name = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pickup_team_name());
    }

    // optional bool participating = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 division_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->division_id());
    }

    // optional uint32 buyin = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buyin());
    }

    // optional uint32 skill_level = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }

    // optional uint32 match_groups = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_groups());
    }

    // optional uint32 team_id = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint64 pickup_team_logo = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pickup_team_logo());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgWeekendTourneyOpts::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgWeekendTourneyOpts)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgWeekendTourneyOpts* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgWeekendTourneyOpts>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgWeekendTourneyOpts)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgWeekendTourneyOpts)
    MergeFrom(*source);
  }
}

void CMsgWeekendTourneyOpts::MergeFrom(const CMsgWeekendTourneyOpts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgWeekendTourneyOpts)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      pickup_team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pickup_team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      participating_ = from.participating_;
    }
    if (cached_has_bits & 0x00000004u) {
      division_id_ = from.division_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      buyin_ = from.buyin_;
    }
    if (cached_has_bits & 0x00000010u) {
      skill_level_ = from.skill_level_;
    }
    if (cached_has_bits & 0x00000020u) {
      match_groups_ = from.match_groups_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      pickup_team_logo_ = from.pickup_team_logo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgWeekendTourneyOpts::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgWeekendTourneyOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWeekendTourneyOpts::CopyFrom(const CMsgWeekendTourneyOpts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgWeekendTourneyOpts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWeekendTourneyOpts::IsInitialized() const {
  return true;
}

void CMsgWeekendTourneyOpts::Swap(CMsgWeekendTourneyOpts* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgWeekendTourneyOpts::InternalSwap(CMsgWeekendTourneyOpts* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  pickup_team_name_.Swap(&other->pickup_team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(participating_, other->participating_);
  swap(division_id_, other->division_id_);
  swap(buyin_, other->buyin_);
  swap(skill_level_, other->skill_level_);
  swap(match_groups_, other->match_groups_);
  swap(team_id_, other->team_id_);
  swap(pickup_team_logo_, other->pickup_team_logo_);
}

::google::protobuf::Metadata CMsgWeekendTourneyOpts::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgWeekendTourneyLeave::InitAsDefaultInstance() {
}
class CMsgWeekendTourneyLeave::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgWeekendTourneyLeave::CMsgWeekendTourneyLeave()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgWeekendTourneyLeave)
}
CMsgWeekendTourneyLeave::CMsgWeekendTourneyLeave(const CMsgWeekendTourneyLeave& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgWeekendTourneyLeave)
}

void CMsgWeekendTourneyLeave::SharedCtor() {
}

CMsgWeekendTourneyLeave::~CMsgWeekendTourneyLeave() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgWeekendTourneyLeave)
  SharedDtor();
}

void CMsgWeekendTourneyLeave::SharedDtor() {
}

void CMsgWeekendTourneyLeave::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgWeekendTourneyLeave& CMsgWeekendTourneyLeave::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgWeekendTourneyLeave_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgWeekendTourneyLeave::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgWeekendTourneyLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgWeekendTourneyLeave::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgWeekendTourneyLeave*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgWeekendTourneyLeave::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgWeekendTourneyLeave)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgWeekendTourneyLeave)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgWeekendTourneyLeave)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgWeekendTourneyLeave::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgWeekendTourneyLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgWeekendTourneyLeave)
}

::google::protobuf::uint8* CMsgWeekendTourneyLeave::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgWeekendTourneyLeave)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgWeekendTourneyLeave)
  return target;
}

size_t CMsgWeekendTourneyLeave::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgWeekendTourneyLeave)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgWeekendTourneyLeave::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgWeekendTourneyLeave)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgWeekendTourneyLeave* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgWeekendTourneyLeave>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgWeekendTourneyLeave)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgWeekendTourneyLeave)
    MergeFrom(*source);
  }
}

void CMsgWeekendTourneyLeave::MergeFrom(const CMsgWeekendTourneyLeave& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgWeekendTourneyLeave)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgWeekendTourneyLeave::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgWeekendTourneyLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWeekendTourneyLeave::CopyFrom(const CMsgWeekendTourneyLeave& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgWeekendTourneyLeave)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWeekendTourneyLeave::IsInitialized() const {
  return true;
}

void CMsgWeekendTourneyLeave::Swap(CMsgWeekendTourneyLeave* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgWeekendTourneyLeave::InternalSwap(CMsgWeekendTourneyLeave* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgWeekendTourneyLeave::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATournament_Team::InitAsDefaultInstance() {
}
class CMsgDOTATournament_Team::HasBitSetters {
 public:
  static void set_has_team_gid(CMsgDOTATournament_Team* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_node_or_state(CMsgDOTATournament_Team* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_match_group_mask(CMsgDOTATournament_Team* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_team_id(CMsgDOTATournament_Team* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_team_name(CMsgDOTATournament_Team* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_base_logo(CMsgDOTATournament_Team* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_team_ui_logo(CMsgDOTATournament_Team* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournament_Team::kTeamGidFieldNumber;
const int CMsgDOTATournament_Team::kNodeOrStateFieldNumber;
const int CMsgDOTATournament_Team::kPlayersFieldNumber;
const int CMsgDOTATournament_Team::kPlayerBuyinFieldNumber;
const int CMsgDOTATournament_Team::kPlayerSkillLevelFieldNumber;
const int CMsgDOTATournament_Team::kMatchGroupMaskFieldNumber;
const int CMsgDOTATournament_Team::kTeamIdFieldNumber;
const int CMsgDOTATournament_Team::kTeamNameFieldNumber;
const int CMsgDOTATournament_Team::kTeamBaseLogoFieldNumber;
const int CMsgDOTATournament_Team::kTeamUiLogoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournament_Team::CMsgDOTATournament_Team()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournament.Team)
}
CMsgDOTATournament_Team::CMsgDOTATournament_Team(const CMsgDOTATournament_Team& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      players_(from.players_),
      player_buyin_(from.player_buyin_),
      player_skill_level_(from.player_skill_level_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  ::memcpy(&team_gid_, &from.team_gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&match_group_mask_) -
    reinterpret_cast<char*>(&team_gid_)) + sizeof(match_group_mask_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournament.Team)
}

void CMsgDOTATournament_Team::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTATournament_Team_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&team_gid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&match_group_mask_) -
      reinterpret_cast<char*>(&team_gid_)) + sizeof(match_group_mask_));
}

CMsgDOTATournament_Team::~CMsgDOTATournament_Team() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournament.Team)
  SharedDtor();
}

void CMsgDOTATournament_Team::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTATournament_Team::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATournament_Team& CMsgDOTATournament_Team::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATournament_Team_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATournament_Team::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournament.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  player_buyin_.Clear();
  player_skill_level_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    team_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&team_gid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&match_group_mask_) -
        reinterpret_cast<char*>(&team_gid_)) + sizeof(match_group_mask_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATournament_Team::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATournament_Team*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 team_gid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_team_gid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 node_or_state = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_node_or_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 players = 3 [packed = true];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 26) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_players();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        do {
          msg->add_players(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
        break;
      }
      // optional uint32 team_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string team_name = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTATournament.Team.team_name");
        object = msg->mutable_team_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 team_base_logo = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_team_base_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 team_ui_logo = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_team_ui_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 player_buyin = 9 [packed = true];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) == 74) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_player_buyin();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        do {
          msg->add_player_buyin(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 72 && (ptr += 1));
        break;
      }
      // repeated uint32 player_skill_level = 10 [packed = true];
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) == 82) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_player_skill_level();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        do {
          msg->add_player_skill_level(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 80 && (ptr += 1));
        break;
      }
      // optional uint32 match_group_mask = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_match_group_mask(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATournament_Team::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournament.Team)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 team_gid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_team_gid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &team_gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 node_or_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_node_or_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_or_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 players = 3 [packed = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_players())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 26u, input, this->mutable_players())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), static_cast<int>(this->team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTATournament.Team.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team_base_logo = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_team_base_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_base_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team_ui_logo = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_team_ui_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_ui_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 player_buyin = 9 [packed = true];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_player_buyin())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 74u, input, this->mutable_player_buyin())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 player_skill_level = 10 [packed = true];
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_player_skill_level())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 82u, input, this->mutable_player_skill_level())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 match_group_mask = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_match_group_mask(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &match_group_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournament.Team)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournament.Team)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATournament_Team::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournament.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 team_gid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->team_gid(), output);
  }

  // optional uint32 node_or_state = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->node_or_state(), output);
  }

  // repeated uint32 players = 3 [packed = true];
  if (this->players_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_players_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->players_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->players(i), output);
  }

  // optional uint32 team_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team_id(), output);
  }

  // optional string team_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournament.Team.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->team_name(), output);
  }

  // optional uint64 team_base_logo = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->team_base_logo(), output);
  }

  // optional uint64 team_ui_logo = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->team_ui_logo(), output);
  }

  // repeated uint32 player_buyin = 9 [packed = true];
  if (this->player_buyin_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_player_buyin_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->player_buyin_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->player_buyin(i), output);
  }

  // repeated uint32 player_skill_level = 10 [packed = true];
  if (this->player_skill_level_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_player_skill_level_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->player_skill_level_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->player_skill_level(i), output);
  }

  // optional uint32 match_group_mask = 12;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->match_group_mask(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournament.Team)
}

::google::protobuf::uint8* CMsgDOTATournament_Team::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournament.Team)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 team_gid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->team_gid(), target);
  }

  // optional uint32 node_or_state = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->node_or_state(), target);
  }

  // repeated uint32 players = 3 [packed = true];
  if (this->players_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _players_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->players_, target);
  }

  // optional uint32 team_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team_id(), target);
  }

  // optional string team_name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTATournament.Team.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->team_name(), target);
  }

  // optional uint64 team_base_logo = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->team_base_logo(), target);
  }

  // optional uint64 team_ui_logo = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->team_ui_logo(), target);
  }

  // repeated uint32 player_buyin = 9 [packed = true];
  if (this->player_buyin_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _player_buyin_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->player_buyin_, target);
  }

  // repeated uint32 player_skill_level = 10 [packed = true];
  if (this->player_skill_level_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _player_skill_level_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->player_skill_level_, target);
  }

  // optional uint32 match_group_mask = 12;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->match_group_mask(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournament.Team)
  return target;
}

size_t CMsgDOTATournament_Team::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournament.Team)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 players = 3 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->players_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _players_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 player_buyin = 9 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->player_buyin_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _player_buyin_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 player_skill_level = 10 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->player_skill_level_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _player_skill_level_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string team_name = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional fixed64 team_gid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 node_or_state = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_or_state());
    }

    // optional uint32 team_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint64 team_base_logo = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_base_logo());
    }

    // optional uint64 team_ui_logo = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_ui_logo());
    }

    // optional uint32 match_group_mask = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->match_group_mask());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournament_Team::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournament.Team)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournament_Team* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATournament_Team>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournament.Team)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournament.Team)
    MergeFrom(*source);
  }
}

void CMsgDOTATournament_Team::MergeFrom(const CMsgDOTATournament_Team& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournament.Team)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  player_buyin_.MergeFrom(from.player_buyin_);
  player_skill_level_.MergeFrom(from.player_skill_level_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      team_gid_ = from.team_gid_;
    }
    if (cached_has_bits & 0x00000004u) {
      node_or_state_ = from.node_or_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_base_logo_ = from.team_base_logo_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_ui_logo_ = from.team_ui_logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      match_group_mask_ = from.match_group_mask_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournament_Team::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournament.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournament_Team::CopyFrom(const CMsgDOTATournament_Team& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournament.Team)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournament_Team::IsInitialized() const {
  return true;
}

void CMsgDOTATournament_Team::Swap(CMsgDOTATournament_Team* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournament_Team::InternalSwap(CMsgDOTATournament_Team* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  players_.InternalSwap(&other->players_);
  player_buyin_.InternalSwap(&other->player_buyin_);
  player_skill_level_.InternalSwap(&other->player_skill_level_);
  team_name_.Swap(&other->team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(team_gid_, other->team_gid_);
  swap(node_or_state_, other->node_or_state_);
  swap(team_id_, other->team_id_);
  swap(team_base_logo_, other->team_base_logo_);
  swap(team_ui_logo_, other->team_ui_logo_);
  swap(match_group_mask_, other->match_group_mask_);
}

::google::protobuf::Metadata CMsgDOTATournament_Team::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATournament_Game::InitAsDefaultInstance() {
}
class CMsgDOTATournament_Game::HasBitSetters {
 public:
  static void set_has_node_idx(CMsgDOTATournament_Game* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_lobby_id(CMsgDOTATournament_Game* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_match_id(CMsgDOTATournament_Game* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_team_a_good(CMsgDOTATournament_Game* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_state(CMsgDOTATournament_Game* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_start_time(CMsgDOTATournament_Game* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournament_Game::kNodeIdxFieldNumber;
const int CMsgDOTATournament_Game::kLobbyIdFieldNumber;
const int CMsgDOTATournament_Game::kMatchIdFieldNumber;
const int CMsgDOTATournament_Game::kTeamAGoodFieldNumber;
const int CMsgDOTATournament_Game::kStateFieldNumber;
const int CMsgDOTATournament_Game::kStartTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournament_Game::CMsgDOTATournament_Game()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournament.Game)
}
CMsgDOTATournament_Game::CMsgDOTATournament_Game(const CMsgDOTATournament_Game& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&start_time_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(start_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournament.Game)
}

void CMsgDOTATournament_Game::SharedCtor() {
  ::memset(&lobby_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&start_time_) -
      reinterpret_cast<char*>(&lobby_id_)) + sizeof(start_time_));
}

CMsgDOTATournament_Game::~CMsgDOTATournament_Game() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournament.Game)
  SharedDtor();
}

void CMsgDOTATournament_Game::SharedDtor() {
}

void CMsgDOTATournament_Game::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATournament_Game& CMsgDOTATournament_Game::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATournament_Game_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATournament_Game::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournament.Game)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_time_) -
        reinterpret_cast<char*>(&lobby_id_)) + sizeof(start_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATournament_Game::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATournament_Game*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 node_idx = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_node_idx(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 lobby_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_lobby_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint64 match_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool team_a_good = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_team_a_good(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.ETournamentGameState state = 5 [default = k_ETournamentGameState_Unknown];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ETournamentGameState_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(5, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_state(static_cast<::proto::dota::ETournamentGameState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 start_time = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_start_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATournament_Game::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournament.Game)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 node_idx = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_node_idx(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_idx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 lobby_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_lobby_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool team_a_good = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_team_a_good(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &team_a_good_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ETournamentGameState state = 5 [default = k_ETournamentGameState_Unknown];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ETournamentGameState_IsValid(value)) {
            set_state(static_cast< ::proto::dota::ETournamentGameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_time = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_start_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournament.Game)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournament.Game)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATournament_Game::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournament.Game)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 node_idx = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->node_idx(), output);
  }

  // optional fixed64 lobby_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->lobby_id(), output);
  }

  // optional uint64 match_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->match_id(), output);
  }

  // optional bool team_a_good = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->team_a_good(), output);
  }

  // optional .proto.dota.ETournamentGameState state = 5 [default = k_ETournamentGameState_Unknown];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->state(), output);
  }

  // optional uint32 start_time = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->start_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournament.Game)
}

::google::protobuf::uint8* CMsgDOTATournament_Game::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournament.Game)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 node_idx = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->node_idx(), target);
  }

  // optional fixed64 lobby_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->lobby_id(), target);
  }

  // optional uint64 match_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->match_id(), target);
  }

  // optional bool team_a_good = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->team_a_good(), target);
  }

  // optional .proto.dota.ETournamentGameState state = 5 [default = k_ETournamentGameState_Unknown];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->state(), target);
  }

  // optional uint32 start_time = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->start_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournament.Game)
  return target;
}

size_t CMsgDOTATournament_Game::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournament.Game)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional fixed64 lobby_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 node_idx = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_idx());
    }

    // optional bool team_a_good = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint64 match_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional .proto.dota.ETournamentGameState state = 5 [default = k_ETournamentGameState_Unknown];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 start_time = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournament_Game::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournament.Game)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournament_Game* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATournament_Game>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournament.Game)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournament.Game)
    MergeFrom(*source);
  }
}

void CMsgDOTATournament_Game::MergeFrom(const CMsgDOTATournament_Game& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournament.Game)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      node_idx_ = from.node_idx_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_a_good_ = from.team_a_good_;
    }
    if (cached_has_bits & 0x00000008u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000020u) {
      start_time_ = from.start_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournament_Game::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournament.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournament_Game::CopyFrom(const CMsgDOTATournament_Game& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournament.Game)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournament_Game::IsInitialized() const {
  return true;
}

void CMsgDOTATournament_Game::Swap(CMsgDOTATournament_Game* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournament_Game::InternalSwap(CMsgDOTATournament_Game* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lobby_id_, other->lobby_id_);
  swap(node_idx_, other->node_idx_);
  swap(team_a_good_, other->team_a_good_);
  swap(match_id_, other->match_id_);
  swap(state_, other->state_);
  swap(start_time_, other->start_time_);
}

::google::protobuf::Metadata CMsgDOTATournament_Game::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATournament_Node::InitAsDefaultInstance() {
}
class CMsgDOTATournament_Node::HasBitSetters {
 public:
  static void set_has_node_id(CMsgDOTATournament_Node* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_idx_a(CMsgDOTATournament_Node* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_team_idx_b(CMsgDOTATournament_Node* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_node_state(CMsgDOTATournament_Node* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournament_Node::kNodeIdFieldNumber;
const int CMsgDOTATournament_Node::kTeamIdxAFieldNumber;
const int CMsgDOTATournament_Node::kTeamIdxBFieldNumber;
const int CMsgDOTATournament_Node::kNodeStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournament_Node::CMsgDOTATournament_Node()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournament.Node)
}
CMsgDOTATournament_Node::CMsgDOTATournament_Node(const CMsgDOTATournament_Node& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_state_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(node_state_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournament.Node)
}

void CMsgDOTATournament_Node::SharedCtor() {
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_state_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(node_state_));
}

CMsgDOTATournament_Node::~CMsgDOTATournament_Node() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournament.Node)
  SharedDtor();
}

void CMsgDOTATournament_Node::SharedDtor() {
}

void CMsgDOTATournament_Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATournament_Node& CMsgDOTATournament_Node::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATournament_Node_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATournament_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournament.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&node_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&node_state_) -
        reinterpret_cast<char*>(&node_id_)) + sizeof(node_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATournament_Node::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATournament_Node*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 node_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_node_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_idx_a = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_team_idx_a(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_idx_b = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_team_idx_b(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.ETournamentNodeState node_state = 4 [default = k_ETournamentNodeState_Unknown];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ETournamentNodeState_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_node_state(static_cast<::proto::dota::ETournamentNodeState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATournament_Node::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournament.Node)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_node_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_idx_a = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_team_idx_a(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_idx_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_idx_b = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_team_idx_b(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_idx_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ETournamentNodeState node_state = 4 [default = k_ETournamentNodeState_Unknown];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ETournamentNodeState_IsValid(value)) {
            set_node_state(static_cast< ::proto::dota::ETournamentNodeState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournament.Node)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournament.Node)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATournament_Node::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournament.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 node_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->node_id(), output);
  }

  // optional uint32 team_idx_a = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_idx_a(), output);
  }

  // optional uint32 team_idx_b = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team_idx_b(), output);
  }

  // optional .proto.dota.ETournamentNodeState node_state = 4 [default = k_ETournamentNodeState_Unknown];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->node_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournament.Node)
}

::google::protobuf::uint8* CMsgDOTATournament_Node::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournament.Node)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 node_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->node_id(), target);
  }

  // optional uint32 team_idx_a = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_idx_a(), target);
  }

  // optional uint32 team_idx_b = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team_idx_b(), target);
  }

  // optional .proto.dota.ETournamentNodeState node_state = 4 [default = k_ETournamentNodeState_Unknown];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->node_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournament.Node)
  return target;
}

size_t CMsgDOTATournament_Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournament.Node)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 node_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_id());
    }

    // optional uint32 team_idx_a = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_idx_a());
    }

    // optional uint32 team_idx_b = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_idx_b());
    }

    // optional .proto.dota.ETournamentNodeState node_state = 4 [default = k_ETournamentNodeState_Unknown];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->node_state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournament_Node::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournament.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournament_Node* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATournament_Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournament.Node)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournament.Node)
    MergeFrom(*source);
  }
}

void CMsgDOTATournament_Node::MergeFrom(const CMsgDOTATournament_Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournament.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      node_id_ = from.node_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      team_idx_a_ = from.team_idx_a_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_idx_b_ = from.team_idx_b_;
    }
    if (cached_has_bits & 0x00000008u) {
      node_state_ = from.node_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournament_Node::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournament.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournament_Node::CopyFrom(const CMsgDOTATournament_Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournament.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournament_Node::IsInitialized() const {
  return true;
}

void CMsgDOTATournament_Node::Swap(CMsgDOTATournament_Node* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournament_Node::InternalSwap(CMsgDOTATournament_Node* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(node_id_, other->node_id_);
  swap(team_idx_a_, other->team_idx_a_);
  swap(team_idx_b_, other->team_idx_b_);
  swap(node_state_, other->node_state_);
}

::google::protobuf::Metadata CMsgDOTATournament_Node::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATournament::InitAsDefaultInstance() {
}
class CMsgDOTATournament::HasBitSetters {
 public:
  static void set_has_tournament_id(CMsgDOTATournament* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_division_id(CMsgDOTATournament* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_schedule_time(CMsgDOTATournament* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_skill_level(CMsgDOTATournament* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_tournament_template(CMsgDOTATournament* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_state(CMsgDOTATournament* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_state_seq_num(CMsgDOTATournament* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_season_trophy_id(CMsgDOTATournament* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournament::kTournamentIdFieldNumber;
const int CMsgDOTATournament::kDivisionIdFieldNumber;
const int CMsgDOTATournament::kScheduleTimeFieldNumber;
const int CMsgDOTATournament::kSkillLevelFieldNumber;
const int CMsgDOTATournament::kTournamentTemplateFieldNumber;
const int CMsgDOTATournament::kStateFieldNumber;
const int CMsgDOTATournament::kStateSeqNumFieldNumber;
const int CMsgDOTATournament::kSeasonTrophyIdFieldNumber;
const int CMsgDOTATournament::kTeamsFieldNumber;
const int CMsgDOTATournament::kGamesFieldNumber;
const int CMsgDOTATournament::kNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournament::CMsgDOTATournament()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournament)
}
CMsgDOTATournament::CMsgDOTATournament(const CMsgDOTATournament& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      teams_(from.teams_),
      games_(from.games_),
      nodes_(from.nodes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tournament_id_, &from.tournament_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&season_trophy_id_) -
    reinterpret_cast<char*>(&tournament_id_)) + sizeof(season_trophy_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournament)
}

void CMsgDOTATournament::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTATournament_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::memset(&tournament_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&season_trophy_id_) -
      reinterpret_cast<char*>(&tournament_id_)) + sizeof(season_trophy_id_));
}

CMsgDOTATournament::~CMsgDOTATournament() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournament)
  SharedDtor();
}

void CMsgDOTATournament::SharedDtor() {
}

void CMsgDOTATournament::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATournament& CMsgDOTATournament::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATournament_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATournament::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournament)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teams_.Clear();
  games_.Clear();
  nodes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&tournament_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&season_trophy_id_) -
        reinterpret_cast<char*>(&tournament_id_)) + sizeof(season_trophy_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATournament::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATournament*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 tournament_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_tournament_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 division_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_division_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 schedule_time = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_schedule_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 skill_level = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_skill_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.ETournamentTemplate tournament_template = 5 [default = k_ETournamentTemplate_None];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ETournamentTemplate_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(5, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_tournament_template(static_cast<::proto::dota::ETournamentTemplate>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.ETournamentState state = 6 [default = k_ETournamentState_Unknown];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ETournamentState_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(6, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_state(static_cast<::proto::dota::ETournamentState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTATournament.Team teams = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTATournament_Team::_InternalParse;
          object = msg->add_teams();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgDOTATournament.Game games = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTATournament_Game::_InternalParse;
          object = msg->add_games();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 66 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgDOTATournament.Node nodes = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTATournament_Node::_InternalParse;
          object = msg->add_nodes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 74 && (ptr += 1));
        break;
      }
      // optional uint32 state_seq_num = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_state_seq_num(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 season_trophy_id = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_season_trophy_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATournament::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournament)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tournament_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_tournament_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 division_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_division_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &division_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 schedule_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_schedule_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schedule_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 skill_level = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_skill_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ETournamentTemplate tournament_template = 5 [default = k_ETournamentTemplate_None];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ETournamentTemplate_IsValid(value)) {
            set_tournament_template(static_cast< ::proto::dota::ETournamentTemplate >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ETournamentState state = 6 [default = k_ETournamentState_Unknown];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ETournamentState_IsValid(value)) {
            set_state(static_cast< ::proto::dota::ETournamentState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTATournament.Team teams = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_teams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTATournament.Game games = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_games()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTATournament.Node nodes = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 state_seq_num = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_state_seq_num(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_seq_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 season_trophy_id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_season_trophy_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_trophy_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournament)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournament)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATournament::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournament)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tournament_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tournament_id(), output);
  }

  // optional uint32 division_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->division_id(), output);
  }

  // optional uint32 schedule_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->schedule_time(), output);
  }

  // optional uint32 skill_level = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->skill_level(), output);
  }

  // optional .proto.dota.ETournamentTemplate tournament_template = 5 [default = k_ETournamentTemplate_None];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->tournament_template(), output);
  }

  // optional .proto.dota.ETournamentState state = 6 [default = k_ETournamentState_Unknown];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->state(), output);
  }

  // repeated .proto.dota.CMsgDOTATournament.Team teams = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teams_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->teams(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgDOTATournament.Game games = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->games_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8,
      this->games(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgDOTATournament.Node nodes = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->nodes(static_cast<int>(i)),
      output);
  }

  // optional uint32 state_seq_num = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->state_seq_num(), output);
  }

  // optional uint32 season_trophy_id = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->season_trophy_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournament)
}

::google::protobuf::uint8* CMsgDOTATournament::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournament)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tournament_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tournament_id(), target);
  }

  // optional uint32 division_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->division_id(), target);
  }

  // optional uint32 schedule_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->schedule_time(), target);
  }

  // optional uint32 skill_level = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->skill_level(), target);
  }

  // optional .proto.dota.ETournamentTemplate tournament_template = 5 [default = k_ETournamentTemplate_None];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->tournament_template(), target);
  }

  // optional .proto.dota.ETournamentState state = 6 [default = k_ETournamentState_Unknown];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->state(), target);
  }

  // repeated .proto.dota.CMsgDOTATournament.Team teams = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teams_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->teams(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgDOTATournament.Game games = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->games_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->games(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgDOTATournament.Node nodes = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->nodes(static_cast<int>(i)), target);
  }

  // optional uint32 state_seq_num = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->state_seq_num(), target);
  }

  // optional uint32 season_trophy_id = 11;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->season_trophy_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournament)
  return target;
}

size_t CMsgDOTATournament::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournament)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTATournament.Team teams = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->teams_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->teams(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTATournament.Game games = 8;
  {
    unsigned int count = static_cast<unsigned int>(this->games_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->games(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTATournament.Node nodes = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nodes(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 tournament_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 division_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->division_id());
    }

    // optional uint32 schedule_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->schedule_time());
    }

    // optional uint32 skill_level = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }

    // optional .proto.dota.ETournamentTemplate tournament_template = 5 [default = k_ETournamentTemplate_None];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tournament_template());
    }

    // optional .proto.dota.ETournamentState state = 6 [default = k_ETournamentState_Unknown];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
    }

    // optional uint32 state_seq_num = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state_seq_num());
    }

    // optional uint32 season_trophy_id = 11;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_trophy_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournament::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournament)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournament* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATournament>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournament)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournament)
    MergeFrom(*source);
  }
}

void CMsgDOTATournament::MergeFrom(const CMsgDOTATournament& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournament)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teams_.MergeFrom(from.teams_);
  games_.MergeFrom(from.games_);
  nodes_.MergeFrom(from.nodes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tournament_id_ = from.tournament_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      division_id_ = from.division_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      schedule_time_ = from.schedule_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      skill_level_ = from.skill_level_;
    }
    if (cached_has_bits & 0x00000010u) {
      tournament_template_ = from.tournament_template_;
    }
    if (cached_has_bits & 0x00000020u) {
      state_ = from.state_;
    }
    if (cached_has_bits & 0x00000040u) {
      state_seq_num_ = from.state_seq_num_;
    }
    if (cached_has_bits & 0x00000080u) {
      season_trophy_id_ = from.season_trophy_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournament::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournament)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournament::CopyFrom(const CMsgDOTATournament& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournament)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournament::IsInitialized() const {
  return true;
}

void CMsgDOTATournament::Swap(CMsgDOTATournament* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournament::InternalSwap(CMsgDOTATournament* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&teams_)->InternalSwap(CastToBase(&other->teams_));
  CastToBase(&games_)->InternalSwap(CastToBase(&other->games_));
  CastToBase(&nodes_)->InternalSwap(CastToBase(&other->nodes_));
  swap(tournament_id_, other->tournament_id_);
  swap(division_id_, other->division_id_);
  swap(schedule_time_, other->schedule_time_);
  swap(skill_level_, other->skill_level_);
  swap(tournament_template_, other->tournament_template_);
  swap(state_, other->state_);
  swap(state_seq_num_, other->state_seq_num_);
  swap(season_trophy_id_, other->season_trophy_id_);
}

::google::protobuf::Metadata CMsgDOTATournament::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATournamentStateChange_GameChange::InitAsDefaultInstance() {
}
class CMsgDOTATournamentStateChange_GameChange::HasBitSetters {
 public:
  static void set_has_match_id(CMsgDOTATournamentStateChange_GameChange* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_new_state(CMsgDOTATournamentStateChange_GameChange* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournamentStateChange_GameChange::kMatchIdFieldNumber;
const int CMsgDOTATournamentStateChange_GameChange::kNewStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournamentStateChange_GameChange::CMsgDOTATournamentStateChange_GameChange()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournamentStateChange.GameChange)
}
CMsgDOTATournamentStateChange_GameChange::CMsgDOTATournamentStateChange_GameChange(const CMsgDOTATournamentStateChange_GameChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_state_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(new_state_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournamentStateChange.GameChange)
}

void CMsgDOTATournamentStateChange_GameChange::SharedCtor() {
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_state_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(new_state_));
}

CMsgDOTATournamentStateChange_GameChange::~CMsgDOTATournamentStateChange_GameChange() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournamentStateChange.GameChange)
  SharedDtor();
}

void CMsgDOTATournamentStateChange_GameChange::SharedDtor() {
}

void CMsgDOTATournamentStateChange_GameChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATournamentStateChange_GameChange& CMsgDOTATournamentStateChange_GameChange::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATournamentStateChange_GameChange_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATournamentStateChange_GameChange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournamentStateChange.GameChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_state_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(new_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATournamentStateChange_GameChange::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATournamentStateChange_GameChange*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.ETournamentGameState new_state = 2 [default = k_ETournamentGameState_Unknown];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ETournamentGameState_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_new_state(static_cast<::proto::dota::ETournamentGameState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATournamentStateChange_GameChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournamentStateChange.GameChange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ETournamentGameState new_state = 2 [default = k_ETournamentGameState_Unknown];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ETournamentGameState_IsValid(value)) {
            set_new_state(static_cast< ::proto::dota::ETournamentGameState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournamentStateChange.GameChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournamentStateChange.GameChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATournamentStateChange_GameChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournamentStateChange.GameChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional .proto.dota.ETournamentGameState new_state = 2 [default = k_ETournamentGameState_Unknown];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->new_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournamentStateChange.GameChange)
}

::google::protobuf::uint8* CMsgDOTATournamentStateChange_GameChange::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournamentStateChange.GameChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional .proto.dota.ETournamentGameState new_state = 2 [default = k_ETournamentGameState_Unknown];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->new_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournamentStateChange.GameChange)
  return target;
}

size_t CMsgDOTATournamentStateChange_GameChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournamentStateChange.GameChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional .proto.dota.ETournamentGameState new_state = 2 [default = k_ETournamentGameState_Unknown];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->new_state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournamentStateChange_GameChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournamentStateChange.GameChange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentStateChange_GameChange* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATournamentStateChange_GameChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournamentStateChange.GameChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournamentStateChange.GameChange)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentStateChange_GameChange::MergeFrom(const CMsgDOTATournamentStateChange_GameChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournamentStateChange.GameChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      new_state_ = from.new_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentStateChange_GameChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournamentStateChange.GameChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentStateChange_GameChange::CopyFrom(const CMsgDOTATournamentStateChange_GameChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournamentStateChange.GameChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentStateChange_GameChange::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentStateChange_GameChange::Swap(CMsgDOTATournamentStateChange_GameChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournamentStateChange_GameChange::InternalSwap(CMsgDOTATournamentStateChange_GameChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(match_id_, other->match_id_);
  swap(new_state_, other->new_state_);
}

::google::protobuf::Metadata CMsgDOTATournamentStateChange_GameChange::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATournamentStateChange_TeamChange::InitAsDefaultInstance() {
}
class CMsgDOTATournamentStateChange_TeamChange::HasBitSetters {
 public:
  static void set_has_team_gid(CMsgDOTATournamentStateChange_TeamChange* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_new_node_or_state(CMsgDOTATournamentStateChange_TeamChange* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_old_node_or_state(CMsgDOTATournamentStateChange_TeamChange* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournamentStateChange_TeamChange::kTeamGidFieldNumber;
const int CMsgDOTATournamentStateChange_TeamChange::kNewNodeOrStateFieldNumber;
const int CMsgDOTATournamentStateChange_TeamChange::kOldNodeOrStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournamentStateChange_TeamChange::CMsgDOTATournamentStateChange_TeamChange()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
}
CMsgDOTATournamentStateChange_TeamChange::CMsgDOTATournamentStateChange_TeamChange(const CMsgDOTATournamentStateChange_TeamChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&team_gid_, &from.team_gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&old_node_or_state_) -
    reinterpret_cast<char*>(&team_gid_)) + sizeof(old_node_or_state_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
}

void CMsgDOTATournamentStateChange_TeamChange::SharedCtor() {
  ::memset(&team_gid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&old_node_or_state_) -
      reinterpret_cast<char*>(&team_gid_)) + sizeof(old_node_or_state_));
}

CMsgDOTATournamentStateChange_TeamChange::~CMsgDOTATournamentStateChange_TeamChange() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
  SharedDtor();
}

void CMsgDOTATournamentStateChange_TeamChange::SharedDtor() {
}

void CMsgDOTATournamentStateChange_TeamChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATournamentStateChange_TeamChange& CMsgDOTATournamentStateChange_TeamChange::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATournamentStateChange_TeamChange_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATournamentStateChange_TeamChange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&team_gid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&old_node_or_state_) -
        reinterpret_cast<char*>(&team_gid_)) + sizeof(old_node_or_state_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATournamentStateChange_TeamChange::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATournamentStateChange_TeamChange*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 team_gid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_team_gid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 new_node_or_state = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_new_node_or_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 old_node_or_state = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_old_node_or_state(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATournamentStateChange_TeamChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 team_gid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_team_gid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 new_node_or_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_new_node_or_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_node_or_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 old_node_or_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_old_node_or_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &old_node_or_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATournamentStateChange_TeamChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 team_gid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->team_gid(), output);
  }

  // optional uint32 new_node_or_state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->new_node_or_state(), output);
  }

  // optional uint32 old_node_or_state = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->old_node_or_state(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
}

::google::protobuf::uint8* CMsgDOTATournamentStateChange_TeamChange::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 team_gid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->team_gid(), target);
  }

  // optional uint32 new_node_or_state = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->new_node_or_state(), target);
  }

  // optional uint32 old_node_or_state = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->old_node_or_state(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
  return target;
}

size_t CMsgDOTATournamentStateChange_TeamChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 team_gid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_gid());
    }

    // optional uint32 new_node_or_state = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_node_or_state());
    }

    // optional uint32 old_node_or_state = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->old_node_or_state());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournamentStateChange_TeamChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentStateChange_TeamChange* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATournamentStateChange_TeamChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentStateChange_TeamChange::MergeFrom(const CMsgDOTATournamentStateChange_TeamChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      team_gid_ = from.team_gid_;
    }
    if (cached_has_bits & 0x00000002u) {
      new_node_or_state_ = from.new_node_or_state_;
    }
    if (cached_has_bits & 0x00000004u) {
      old_node_or_state_ = from.old_node_or_state_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentStateChange_TeamChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentStateChange_TeamChange::CopyFrom(const CMsgDOTATournamentStateChange_TeamChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournamentStateChange.TeamChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentStateChange_TeamChange::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentStateChange_TeamChange::Swap(CMsgDOTATournamentStateChange_TeamChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournamentStateChange_TeamChange::InternalSwap(CMsgDOTATournamentStateChange_TeamChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(team_gid_, other->team_gid_);
  swap(new_node_or_state_, other->new_node_or_state_);
  swap(old_node_or_state_, other->old_node_or_state_);
}

::google::protobuf::Metadata CMsgDOTATournamentStateChange_TeamChange::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATournamentStateChange::InitAsDefaultInstance() {
}
class CMsgDOTATournamentStateChange::HasBitSetters {
 public:
  static void set_has_new_tournament_id(CMsgDOTATournamentStateChange* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_event(CMsgDOTATournamentStateChange* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_new_tournament_state(CMsgDOTATournamentStateChange* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_state_seq_num(CMsgDOTATournamentStateChange* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournamentStateChange::kNewTournamentIdFieldNumber;
const int CMsgDOTATournamentStateChange::kEventFieldNumber;
const int CMsgDOTATournamentStateChange::kNewTournamentStateFieldNumber;
const int CMsgDOTATournamentStateChange::kGameChangesFieldNumber;
const int CMsgDOTATournamentStateChange::kTeamChangesFieldNumber;
const int CMsgDOTATournamentStateChange::kMergedTournamentIdsFieldNumber;
const int CMsgDOTATournamentStateChange::kStateSeqNumFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournamentStateChange::CMsgDOTATournamentStateChange()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournamentStateChange)
}
CMsgDOTATournamentStateChange::CMsgDOTATournamentStateChange(const CMsgDOTATournamentStateChange& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      game_changes_(from.game_changes_),
      team_changes_(from.team_changes_),
      merged_tournament_ids_(from.merged_tournament_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&new_tournament_id_, &from.new_tournament_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_seq_num_) -
    reinterpret_cast<char*>(&new_tournament_id_)) + sizeof(state_seq_num_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournamentStateChange)
}

void CMsgDOTATournamentStateChange::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTATournamentStateChange_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::memset(&new_tournament_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_seq_num_) -
      reinterpret_cast<char*>(&new_tournament_id_)) + sizeof(state_seq_num_));
}

CMsgDOTATournamentStateChange::~CMsgDOTATournamentStateChange() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournamentStateChange)
  SharedDtor();
}

void CMsgDOTATournamentStateChange::SharedDtor() {
}

void CMsgDOTATournamentStateChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATournamentStateChange& CMsgDOTATournamentStateChange::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATournamentStateChange_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATournamentStateChange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournamentStateChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_changes_.Clear();
  team_changes_.Clear();
  merged_tournament_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&new_tournament_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&state_seq_num_) -
        reinterpret_cast<char*>(&new_tournament_id_)) + sizeof(state_seq_num_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATournamentStateChange::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATournamentStateChange*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 new_tournament_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_new_tournament_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.ETournamentEvent event = 2 [default = k_ETournamentEvent_None];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ETournamentEvent_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_event(static_cast<::proto::dota::ETournamentEvent>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.ETournamentState new_tournament_state = 3 [default = k_ETournamentState_Unknown];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ETournamentState_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_new_tournament_state(static_cast<::proto::dota::ETournamentState>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTATournamentStateChange.GameChange game_changes = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTATournamentStateChange_GameChange::_InternalParse;
          object = msg->add_game_changes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgDOTATournamentStateChange.TeamChange team_changes = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTATournamentStateChange_TeamChange::_InternalParse;
          object = msg->add_team_changes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // repeated uint32 merged_tournament_ids = 6 [packed = true];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) == 50) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_merged_tournament_ids();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        do {
          msg->add_merged_tournament_ids(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 48 && (ptr += 1));
        break;
      }
      // optional uint32 state_seq_num = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_state_seq_num(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATournamentStateChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournamentStateChange)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 new_tournament_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_new_tournament_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ETournamentEvent event = 2 [default = k_ETournamentEvent_None];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ETournamentEvent_IsValid(value)) {
            set_event(static_cast< ::proto::dota::ETournamentEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ETournamentState new_tournament_state = 3 [default = k_ETournamentState_Unknown];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ETournamentState_IsValid(value)) {
            set_new_tournament_state(static_cast< ::proto::dota::ETournamentState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTATournamentStateChange.GameChange game_changes = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_game_changes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTATournamentStateChange.TeamChange team_changes = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_team_changes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 merged_tournament_ids = 6 [packed = true];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_merged_tournament_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 50u, input, this->mutable_merged_tournament_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 state_seq_num = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_state_seq_num(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_seq_num_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournamentStateChange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournamentStateChange)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATournamentStateChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournamentStateChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 new_tournament_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->new_tournament_id(), output);
  }

  // optional .proto.dota.ETournamentEvent event = 2 [default = k_ETournamentEvent_None];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->event(), output);
  }

  // optional .proto.dota.ETournamentState new_tournament_state = 3 [default = k_ETournamentState_Unknown];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->new_tournament_state(), output);
  }

  // repeated .proto.dota.CMsgDOTATournamentStateChange.GameChange game_changes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->game_changes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->game_changes(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgDOTATournamentStateChange.TeamChange team_changes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_changes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->team_changes(static_cast<int>(i)),
      output);
  }

  // repeated uint32 merged_tournament_ids = 6 [packed = true];
  if (this->merged_tournament_ids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_merged_tournament_ids_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->merged_tournament_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->merged_tournament_ids(i), output);
  }

  // optional uint32 state_seq_num = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->state_seq_num(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournamentStateChange)
}

::google::protobuf::uint8* CMsgDOTATournamentStateChange::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournamentStateChange)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 new_tournament_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->new_tournament_id(), target);
  }

  // optional .proto.dota.ETournamentEvent event = 2 [default = k_ETournamentEvent_None];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->event(), target);
  }

  // optional .proto.dota.ETournamentState new_tournament_state = 3 [default = k_ETournamentState_Unknown];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->new_tournament_state(), target);
  }

  // repeated .proto.dota.CMsgDOTATournamentStateChange.GameChange game_changes = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->game_changes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->game_changes(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgDOTATournamentStateChange.TeamChange team_changes = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_changes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->team_changes(static_cast<int>(i)), target);
  }

  // repeated uint32 merged_tournament_ids = 6 [packed = true];
  if (this->merged_tournament_ids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _merged_tournament_ids_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->merged_tournament_ids_, target);
  }

  // optional uint32 state_seq_num = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->state_seq_num(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournamentStateChange)
  return target;
}

size_t CMsgDOTATournamentStateChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournamentStateChange)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTATournamentStateChange.GameChange game_changes = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->game_changes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->game_changes(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTATournamentStateChange.TeamChange team_changes = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->team_changes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->team_changes(static_cast<int>(i)));
    }
  }

  // repeated uint32 merged_tournament_ids = 6 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->merged_tournament_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _merged_tournament_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 new_tournament_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_tournament_id());
    }

    // optional .proto.dota.ETournamentEvent event = 2 [default = k_ETournamentEvent_None];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
    }

    // optional .proto.dota.ETournamentState new_tournament_state = 3 [default = k_ETournamentState_Unknown];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->new_tournament_state());
    }

    // optional uint32 state_seq_num = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state_seq_num());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournamentStateChange::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournamentStateChange)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentStateChange* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATournamentStateChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournamentStateChange)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournamentStateChange)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentStateChange::MergeFrom(const CMsgDOTATournamentStateChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournamentStateChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_changes_.MergeFrom(from.game_changes_);
  team_changes_.MergeFrom(from.team_changes_);
  merged_tournament_ids_.MergeFrom(from.merged_tournament_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      new_tournament_id_ = from.new_tournament_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_ = from.event_;
    }
    if (cached_has_bits & 0x00000004u) {
      new_tournament_state_ = from.new_tournament_state_;
    }
    if (cached_has_bits & 0x00000008u) {
      state_seq_num_ = from.state_seq_num_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentStateChange::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournamentStateChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentStateChange::CopyFrom(const CMsgDOTATournamentStateChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournamentStateChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentStateChange::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentStateChange::Swap(CMsgDOTATournamentStateChange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournamentStateChange::InternalSwap(CMsgDOTATournamentStateChange* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&game_changes_)->InternalSwap(CastToBase(&other->game_changes_));
  CastToBase(&team_changes_)->InternalSwap(CastToBase(&other->team_changes_));
  merged_tournament_ids_.InternalSwap(&other->merged_tournament_ids_);
  swap(new_tournament_id_, other->new_tournament_id_);
  swap(event_, other->event_);
  swap(new_tournament_state_, other->new_tournament_state_);
  swap(state_seq_num_, other->state_seq_num_);
}

::google::protobuf::Metadata CMsgDOTATournamentStateChange::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATournamentRequest::InitAsDefaultInstance() {
}
class CMsgDOTATournamentRequest::HasBitSetters {
 public:
  static void set_has_tournament_id(CMsgDOTATournamentRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_client_tournament_gid(CMsgDOTATournamentRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournamentRequest::kTournamentIdFieldNumber;
const int CMsgDOTATournamentRequest::kClientTournamentGidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournamentRequest::CMsgDOTATournamentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournamentRequest)
}
CMsgDOTATournamentRequest::CMsgDOTATournamentRequest(const CMsgDOTATournamentRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&client_tournament_gid_, &from.client_tournament_gid_,
    static_cast<size_t>(reinterpret_cast<char*>(&tournament_id_) -
    reinterpret_cast<char*>(&client_tournament_gid_)) + sizeof(tournament_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournamentRequest)
}

void CMsgDOTATournamentRequest::SharedCtor() {
  ::memset(&client_tournament_gid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tournament_id_) -
      reinterpret_cast<char*>(&client_tournament_gid_)) + sizeof(tournament_id_));
}

CMsgDOTATournamentRequest::~CMsgDOTATournamentRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournamentRequest)
  SharedDtor();
}

void CMsgDOTATournamentRequest::SharedDtor() {
}

void CMsgDOTATournamentRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATournamentRequest& CMsgDOTATournamentRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATournamentRequest_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATournamentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournamentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&client_tournament_gid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tournament_id_) -
        reinterpret_cast<char*>(&client_tournament_gid_)) + sizeof(tournament_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATournamentRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATournamentRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 tournament_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_tournament_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 client_tournament_gid = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_client_tournament_gid(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATournamentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournamentRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tournament_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_tournament_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 client_tournament_gid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_client_tournament_gid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &client_tournament_gid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournamentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournamentRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATournamentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournamentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tournament_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tournament_id(), output);
  }

  // optional uint64 client_tournament_gid = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->client_tournament_gid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournamentRequest)
}

::google::protobuf::uint8* CMsgDOTATournamentRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournamentRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tournament_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tournament_id(), target);
  }

  // optional uint64 client_tournament_gid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->client_tournament_gid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournamentRequest)
  return target;
}

size_t CMsgDOTATournamentRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournamentRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 client_tournament_gid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->client_tournament_gid());
    }

    // optional uint32 tournament_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournamentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournamentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATournamentRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournamentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournamentRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentRequest::MergeFrom(const CMsgDOTATournamentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournamentRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      client_tournament_gid_ = from.client_tournament_gid_;
    }
    if (cached_has_bits & 0x00000002u) {
      tournament_id_ = from.tournament_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournamentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentRequest::CopyFrom(const CMsgDOTATournamentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournamentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentRequest::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentRequest::Swap(CMsgDOTATournamentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournamentRequest::InternalSwap(CMsgDOTATournamentRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(client_tournament_gid_, other->client_tournament_gid_);
  swap(tournament_id_, other->tournament_id_);
}

::google::protobuf::Metadata CMsgDOTATournamentRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTATournamentResponse::InitAsDefaultInstance() {
  ::proto::dota::_CMsgDOTATournamentResponse_default_instance_._instance.get_mutable()->tournament_ = const_cast< ::proto::dota::CMsgDOTATournament*>(
      ::proto::dota::CMsgDOTATournament::internal_default_instance());
}
class CMsgDOTATournamentResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgDOTATournamentResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CMsgDOTATournament& tournament(const CMsgDOTATournamentResponse* msg);
  static void set_has_tournament(CMsgDOTATournamentResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgDOTATournament&
CMsgDOTATournamentResponse::HasBitSetters::tournament(const CMsgDOTATournamentResponse* msg) {
  return *msg->tournament_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTATournamentResponse::kResultFieldNumber;
const int CMsgDOTATournamentResponse::kTournamentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTATournamentResponse::CMsgDOTATournamentResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTATournamentResponse)
}
CMsgDOTATournamentResponse::CMsgDOTATournamentResponse(const CMsgDOTATournamentResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_tournament()) {
    tournament_ = new ::proto::dota::CMsgDOTATournament(*from.tournament_);
  } else {
    tournament_ = nullptr;
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTATournamentResponse)
}

void CMsgDOTATournamentResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTATournamentResponse_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  tournament_ = nullptr;
  result_ = 2u;
}

CMsgDOTATournamentResponse::~CMsgDOTATournamentResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTATournamentResponse)
  SharedDtor();
}

void CMsgDOTATournamentResponse::SharedDtor() {
  if (this != internal_default_instance()) delete tournament_;
}

void CMsgDOTATournamentResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTATournamentResponse& CMsgDOTATournamentResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTATournamentResponse_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTATournamentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTATournamentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(tournament_ != nullptr);
      tournament_->Clear();
    }
    result_ = 2u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTATournamentResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTATournamentResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 result = 1 [default = 2];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_result(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgDOTATournament tournament = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTATournament::_InternalParse;
        object = msg->mutable_tournament();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTATournamentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTATournamentResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1 [default = 2];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_result(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTATournament tournament = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_tournament()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTATournamentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTATournamentResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTATournamentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTATournamentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // optional .proto.dota.CMsgDOTATournament tournament = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::tournament(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTATournamentResponse)
}

::google::protobuf::uint8* CMsgDOTATournamentResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTATournamentResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1 [default = 2];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // optional .proto.dota.CMsgDOTATournament tournament = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::tournament(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTATournamentResponse)
  return target;
}

size_t CMsgDOTATournamentResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTATournamentResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CMsgDOTATournament tournament = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *tournament_);
    }

    // optional uint32 result = 1 [default = 2];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTATournamentResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTATournamentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTATournamentResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTATournamentResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTATournamentResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTATournamentResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTATournamentResponse::MergeFrom(const CMsgDOTATournamentResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTATournamentResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_tournament()->::proto::dota::CMsgDOTATournament::MergeFrom(from.tournament());
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTATournamentResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTATournamentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTATournamentResponse::CopyFrom(const CMsgDOTATournamentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTATournamentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTATournamentResponse::IsInitialized() const {
  return true;
}

void CMsgDOTATournamentResponse::Swap(CMsgDOTATournamentResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTATournamentResponse::InternalSwap(CMsgDOTATournamentResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tournament_, other->tournament_);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTATournamentResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAClearTournamentGame::InitAsDefaultInstance() {
}
class CMsgDOTAClearTournamentGame::HasBitSetters {
 public:
  static void set_has_tournament_id(CMsgDOTAClearTournamentGame* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_game_id(CMsgDOTAClearTournamentGame* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAClearTournamentGame::kTournamentIdFieldNumber;
const int CMsgDOTAClearTournamentGame::kGameIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAClearTournamentGame::CMsgDOTAClearTournamentGame()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAClearTournamentGame)
}
CMsgDOTAClearTournamentGame::CMsgDOTAClearTournamentGame(const CMsgDOTAClearTournamentGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tournament_id_, &from.tournament_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_id_) -
    reinterpret_cast<char*>(&tournament_id_)) + sizeof(game_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAClearTournamentGame)
}

void CMsgDOTAClearTournamentGame::SharedCtor() {
  ::memset(&tournament_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_id_) -
      reinterpret_cast<char*>(&tournament_id_)) + sizeof(game_id_));
}

CMsgDOTAClearTournamentGame::~CMsgDOTAClearTournamentGame() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAClearTournamentGame)
  SharedDtor();
}

void CMsgDOTAClearTournamentGame::SharedDtor() {
}

void CMsgDOTAClearTournamentGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAClearTournamentGame& CMsgDOTAClearTournamentGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAClearTournamentGame_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAClearTournamentGame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAClearTournamentGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&tournament_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_id_) -
        reinterpret_cast<char*>(&tournament_id_)) + sizeof(game_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAClearTournamentGame::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAClearTournamentGame*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 tournament_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_tournament_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 game_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_game_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAClearTournamentGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAClearTournamentGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tournament_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_tournament_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAClearTournamentGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAClearTournamentGame)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAClearTournamentGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAClearTournamentGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tournament_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tournament_id(), output);
  }

  // optional uint32 game_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->game_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAClearTournamentGame)
}

::google::protobuf::uint8* CMsgDOTAClearTournamentGame::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAClearTournamentGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tournament_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tournament_id(), target);
  }

  // optional uint32 game_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->game_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAClearTournamentGame)
  return target;
}

size_t CMsgDOTAClearTournamentGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAClearTournamentGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 tournament_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 game_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAClearTournamentGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAClearTournamentGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAClearTournamentGame* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAClearTournamentGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAClearTournamentGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAClearTournamentGame)
    MergeFrom(*source);
  }
}

void CMsgDOTAClearTournamentGame::MergeFrom(const CMsgDOTAClearTournamentGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAClearTournamentGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tournament_id_ = from.tournament_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      game_id_ = from.game_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAClearTournamentGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAClearTournamentGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAClearTournamentGame::CopyFrom(const CMsgDOTAClearTournamentGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAClearTournamentGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAClearTournamentGame::IsInitialized() const {
  return true;
}

void CMsgDOTAClearTournamentGame::Swap(CMsgDOTAClearTournamentGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAClearTournamentGame::InternalSwap(CMsgDOTAClearTournamentGame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tournament_id_, other->tournament_id_);
  swap(game_id_, other->game_id_);
}

::google::protobuf::Metadata CMsgDOTAClearTournamentGame::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::InitAsDefaultInstance() {
}
class CMsgDOTAWeekendTourneyPlayerSkillLevelStats::HasBitSetters {
 public:
  static void set_has_skill_level(CMsgDOTAWeekendTourneyPlayerSkillLevelStats* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_times_won_0(CMsgDOTAWeekendTourneyPlayerSkillLevelStats* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_times_won_1(CMsgDOTAWeekendTourneyPlayerSkillLevelStats* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_times_won_2(CMsgDOTAWeekendTourneyPlayerSkillLevelStats* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_times_won_3(CMsgDOTAWeekendTourneyPlayerSkillLevelStats* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_times_bye_and_lost(CMsgDOTAWeekendTourneyPlayerSkillLevelStats* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_times_bye_and_won(CMsgDOTAWeekendTourneyPlayerSkillLevelStats* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_times_unusual_champ(CMsgDOTAWeekendTourneyPlayerSkillLevelStats* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_total_games_won(CMsgDOTAWeekendTourneyPlayerSkillLevelStats* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_score(CMsgDOTAWeekendTourneyPlayerSkillLevelStats* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kSkillLevelFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kTimesWon0FieldNumber;
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kTimesWon1FieldNumber;
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kTimesWon2FieldNumber;
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kTimesWon3FieldNumber;
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kTimesByeAndLostFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kTimesByeAndWonFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kTimesUnusualChampFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kTotalGamesWonFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerSkillLevelStats::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAWeekendTourneyPlayerSkillLevelStats::CMsgDOTAWeekendTourneyPlayerSkillLevelStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
}
CMsgDOTAWeekendTourneyPlayerSkillLevelStats::CMsgDOTAWeekendTourneyPlayerSkillLevelStats(const CMsgDOTAWeekendTourneyPlayerSkillLevelStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&skill_level_, &from.skill_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&times_unusual_champ_) -
    reinterpret_cast<char*>(&skill_level_)) + sizeof(times_unusual_champ_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::SharedCtor() {
  ::memset(&skill_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&times_unusual_champ_) -
      reinterpret_cast<char*>(&skill_level_)) + sizeof(times_unusual_champ_));
}

CMsgDOTAWeekendTourneyPlayerSkillLevelStats::~CMsgDOTAWeekendTourneyPlayerSkillLevelStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  SharedDtor();
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::SharedDtor() {
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAWeekendTourneyPlayerSkillLevelStats& CMsgDOTAWeekendTourneyPlayerSkillLevelStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAWeekendTourneyPlayerSkillLevelStats_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&skill_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_games_won_) -
        reinterpret_cast<char*>(&skill_level_)) + sizeof(total_games_won_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&score_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&times_unusual_champ_) -
        reinterpret_cast<char*>(&score_)) + sizeof(times_unusual_champ_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAWeekendTourneyPlayerSkillLevelStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 skill_level = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_skill_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 times_won_0 = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_times_won_0(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 times_won_1 = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_times_won_1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 times_won_2 = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_times_won_2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 times_won_3 = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_times_won_3(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 times_bye_and_lost = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_times_bye_and_lost(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 times_bye_and_won = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_times_bye_and_won(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 total_games_won = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_total_games_won(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 score = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 times_unusual_champ = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_times_unusual_champ(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skill_level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_skill_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skill_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 times_won_0 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_times_won_0(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_won_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 times_won_1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_times_won_1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_won_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 times_won_2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_times_won_2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_won_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 times_won_3 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_times_won_3(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_won_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 times_bye_and_lost = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_times_bye_and_lost(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_bye_and_lost_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 times_bye_and_won = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_times_bye_and_won(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_bye_and_won_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_games_won = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_total_games_won(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_games_won_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 score = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 times_unusual_champ = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_times_unusual_champ(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &times_unusual_champ_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 skill_level = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skill_level(), output);
  }

  // optional uint32 times_won_0 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->times_won_0(), output);
  }

  // optional uint32 times_won_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->times_won_1(), output);
  }

  // optional uint32 times_won_2 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->times_won_2(), output);
  }

  // optional uint32 times_won_3 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->times_won_3(), output);
  }

  // optional uint32 times_bye_and_lost = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->times_bye_and_lost(), output);
  }

  // optional uint32 times_bye_and_won = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->times_bye_and_won(), output);
  }

  // optional uint32 total_games_won = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->total_games_won(), output);
  }

  // optional uint32 score = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->score(), output);
  }

  // optional uint32 times_unusual_champ = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->times_unusual_champ(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
}

::google::protobuf::uint8* CMsgDOTAWeekendTourneyPlayerSkillLevelStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 skill_level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skill_level(), target);
  }

  // optional uint32 times_won_0 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->times_won_0(), target);
  }

  // optional uint32 times_won_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->times_won_1(), target);
  }

  // optional uint32 times_won_2 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->times_won_2(), target);
  }

  // optional uint32 times_won_3 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->times_won_3(), target);
  }

  // optional uint32 times_bye_and_lost = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->times_bye_and_lost(), target);
  }

  // optional uint32 times_bye_and_won = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->times_bye_and_won(), target);
  }

  // optional uint32 total_games_won = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->total_games_won(), target);
  }

  // optional uint32 score = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->score(), target);
  }

  // optional uint32 times_unusual_champ = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->times_unusual_champ(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  return target;
}

size_t CMsgDOTAWeekendTourneyPlayerSkillLevelStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 skill_level = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skill_level());
    }

    // optional uint32 times_won_0 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times_won_0());
    }

    // optional uint32 times_won_1 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times_won_1());
    }

    // optional uint32 times_won_2 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times_won_2());
    }

    // optional uint32 times_won_3 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times_won_3());
    }

    // optional uint32 times_bye_and_lost = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times_bye_and_lost());
    }

    // optional uint32 times_bye_and_won = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times_bye_and_won());
    }

    // optional uint32 total_games_won = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_games_won());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 score = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

    // optional uint32 times_unusual_champ = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->times_unusual_champ());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyPlayerSkillLevelStats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAWeekendTourneyPlayerSkillLevelStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::MergeFrom(const CMsgDOTAWeekendTourneyPlayerSkillLevelStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      skill_level_ = from.skill_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      times_won_0_ = from.times_won_0_;
    }
    if (cached_has_bits & 0x00000004u) {
      times_won_1_ = from.times_won_1_;
    }
    if (cached_has_bits & 0x00000008u) {
      times_won_2_ = from.times_won_2_;
    }
    if (cached_has_bits & 0x00000010u) {
      times_won_3_ = from.times_won_3_;
    }
    if (cached_has_bits & 0x00000020u) {
      times_bye_and_lost_ = from.times_bye_and_lost_;
    }
    if (cached_has_bits & 0x00000040u) {
      times_bye_and_won_ = from.times_bye_and_won_;
    }
    if (cached_has_bits & 0x00000080u) {
      total_games_won_ = from.total_games_won_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000200u) {
      times_unusual_champ_ = from.times_unusual_champ_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::CopyFrom(const CMsgDOTAWeekendTourneyPlayerSkillLevelStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyPlayerSkillLevelStats::IsInitialized() const {
  return true;
}

void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::Swap(CMsgDOTAWeekendTourneyPlayerSkillLevelStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAWeekendTourneyPlayerSkillLevelStats::InternalSwap(CMsgDOTAWeekendTourneyPlayerSkillLevelStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(skill_level_, other->skill_level_);
  swap(times_won_0_, other->times_won_0_);
  swap(times_won_1_, other->times_won_1_);
  swap(times_won_2_, other->times_won_2_);
  swap(times_won_3_, other->times_won_3_);
  swap(times_bye_and_lost_, other->times_bye_and_lost_);
  swap(times_bye_and_won_, other->times_bye_and_won_);
  swap(total_games_won_, other->total_games_won_);
  swap(score_, other->score_);
  swap(times_unusual_champ_, other->times_unusual_champ_);
}

::google::protobuf::Metadata CMsgDOTAWeekendTourneyPlayerSkillLevelStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAWeekendTourneyPlayerStats::InitAsDefaultInstance() {
}
class CMsgDOTAWeekendTourneyPlayerStats::HasBitSetters {
 public:
  static void set_has_account_id(CMsgDOTAWeekendTourneyPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_season_trophy_id(CMsgDOTAWeekendTourneyPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_current_tier(CMsgDOTAWeekendTourneyPlayerStats* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAWeekendTourneyPlayerStats::kAccountIdFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerStats::kSeasonTrophyIdFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerStats::kSkillLevelsFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerStats::kCurrentTierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAWeekendTourneyPlayerStats::CMsgDOTAWeekendTourneyPlayerStats()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
}
CMsgDOTAWeekendTourneyPlayerStats::CMsgDOTAWeekendTourneyPlayerStats(const CMsgDOTAWeekendTourneyPlayerStats& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      skill_levels_(from.skill_levels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&current_tier_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(current_tier_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
}

void CMsgDOTAWeekendTourneyPlayerStats::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAWeekendTourneyPlayerStats_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&current_tier_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(current_tier_));
}

CMsgDOTAWeekendTourneyPlayerStats::~CMsgDOTAWeekendTourneyPlayerStats() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
  SharedDtor();
}

void CMsgDOTAWeekendTourneyPlayerStats::SharedDtor() {
}

void CMsgDOTAWeekendTourneyPlayerStats::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAWeekendTourneyPlayerStats& CMsgDOTAWeekendTourneyPlayerStats::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAWeekendTourneyPlayerStats_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAWeekendTourneyPlayerStats::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  skill_levels_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&current_tier_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(current_tier_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAWeekendTourneyPlayerStats::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAWeekendTourneyPlayerStats*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 season_trophy_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_season_trophy_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats skill_levels = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAWeekendTourneyPlayerSkillLevelStats::_InternalParse;
          object = msg->add_skill_levels();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // optional uint32 current_tier = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_current_tier(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAWeekendTourneyPlayerStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 season_trophy_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_season_trophy_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_trophy_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats skill_levels = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_skill_levels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 current_tier = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_current_tier(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &current_tier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAWeekendTourneyPlayerStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 season_trophy_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->season_trophy_id(), output);
  }

  // repeated .proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats skill_levels = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skill_levels_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->skill_levels(static_cast<int>(i)),
      output);
  }

  // optional uint32 current_tier = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->current_tier(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
}

::google::protobuf::uint8* CMsgDOTAWeekendTourneyPlayerStats::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 season_trophy_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->season_trophy_id(), target);
  }

  // repeated .proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats skill_levels = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->skill_levels_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->skill_levels(static_cast<int>(i)), target);
  }

  // optional uint32 current_tier = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->current_tier(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
  return target;
}

size_t CMsgDOTAWeekendTourneyPlayerStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAWeekendTourneyPlayerSkillLevelStats skill_levels = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->skill_levels_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->skill_levels(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 season_trophy_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_trophy_id());
    }

    // optional uint32 current_tier = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->current_tier());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAWeekendTourneyPlayerStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyPlayerStats* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAWeekendTourneyPlayerStats>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyPlayerStats::MergeFrom(const CMsgDOTAWeekendTourneyPlayerStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  skill_levels_.MergeFrom(from.skill_levels_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      season_trophy_id_ = from.season_trophy_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      current_tier_ = from.current_tier_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAWeekendTourneyPlayerStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyPlayerStats::CopyFrom(const CMsgDOTAWeekendTourneyPlayerStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyPlayerStats::IsInitialized() const {
  return true;
}

void CMsgDOTAWeekendTourneyPlayerStats::Swap(CMsgDOTAWeekendTourneyPlayerStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAWeekendTourneyPlayerStats::InternalSwap(CMsgDOTAWeekendTourneyPlayerStats* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&skill_levels_)->InternalSwap(CastToBase(&other->skill_levels_));
  swap(account_id_, other->account_id_);
  swap(season_trophy_id_, other->season_trophy_id_);
  swap(current_tier_, other->current_tier_);
}

::google::protobuf::Metadata CMsgDOTAWeekendTourneyPlayerStats::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAWeekendTourneyPlayerStatsRequest::InitAsDefaultInstance() {
}
class CMsgDOTAWeekendTourneyPlayerStatsRequest::HasBitSetters {
 public:
  static void set_has_account_id(CMsgDOTAWeekendTourneyPlayerStatsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_season_trophy_id(CMsgDOTAWeekendTourneyPlayerStatsRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAWeekendTourneyPlayerStatsRequest::kAccountIdFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerStatsRequest::kSeasonTrophyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAWeekendTourneyPlayerStatsRequest::CMsgDOTAWeekendTourneyPlayerStatsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
}
CMsgDOTAWeekendTourneyPlayerStatsRequest::CMsgDOTAWeekendTourneyPlayerStatsRequest(const CMsgDOTAWeekendTourneyPlayerStatsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&season_trophy_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(season_trophy_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&season_trophy_id_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(season_trophy_id_));
}

CMsgDOTAWeekendTourneyPlayerStatsRequest::~CMsgDOTAWeekendTourneyPlayerStatsRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
  SharedDtor();
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::SharedDtor() {
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAWeekendTourneyPlayerStatsRequest& CMsgDOTAWeekendTourneyPlayerStatsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAWeekendTourneyPlayerStatsRequest_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAWeekendTourneyPlayerStatsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&season_trophy_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(season_trophy_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAWeekendTourneyPlayerStatsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAWeekendTourneyPlayerStatsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 season_trophy_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_season_trophy_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAWeekendTourneyPlayerStatsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 season_trophy_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_season_trophy_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_trophy_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAWeekendTourneyPlayerStatsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 season_trophy_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->season_trophy_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
}

::google::protobuf::uint8* CMsgDOTAWeekendTourneyPlayerStatsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 season_trophy_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->season_trophy_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
  return target;
}

size_t CMsgDOTAWeekendTourneyPlayerStatsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 season_trophy_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_trophy_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyPlayerStatsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAWeekendTourneyPlayerStatsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::MergeFrom(const CMsgDOTAWeekendTourneyPlayerStatsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      season_trophy_id_ = from.season_trophy_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::CopyFrom(const CMsgDOTAWeekendTourneyPlayerStatsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerStatsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyPlayerStatsRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAWeekendTourneyPlayerStatsRequest::Swap(CMsgDOTAWeekendTourneyPlayerStatsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAWeekendTourneyPlayerStatsRequest::InternalSwap(CMsgDOTAWeekendTourneyPlayerStatsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(season_trophy_id_, other->season_trophy_id_);
}

::google::protobuf::Metadata CMsgDOTAWeekendTourneyPlayerStatsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::InitAsDefaultInstance() {
}
class CMsgDOTAWeekendTourneyPlayerHistoryRequest::HasBitSetters {
 public:
  static void set_has_account_id(CMsgDOTAWeekendTourneyPlayerHistoryRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_season_trophy_id(CMsgDOTAWeekendTourneyPlayerHistoryRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAWeekendTourneyPlayerHistoryRequest::kAccountIdFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistoryRequest::kSeasonTrophyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAWeekendTourneyPlayerHistoryRequest::CMsgDOTAWeekendTourneyPlayerHistoryRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
}
CMsgDOTAWeekendTourneyPlayerHistoryRequest::CMsgDOTAWeekendTourneyPlayerHistoryRequest(const CMsgDOTAWeekendTourneyPlayerHistoryRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&season_trophy_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(season_trophy_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&season_trophy_id_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(season_trophy_id_));
}

CMsgDOTAWeekendTourneyPlayerHistoryRequest::~CMsgDOTAWeekendTourneyPlayerHistoryRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  SharedDtor();
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::SharedDtor() {
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAWeekendTourneyPlayerHistoryRequest& CMsgDOTAWeekendTourneyPlayerHistoryRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAWeekendTourneyPlayerHistoryRequest_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAWeekendTourneyPlayerHistoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&season_trophy_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(season_trophy_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAWeekendTourneyPlayerHistoryRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAWeekendTourneyPlayerHistoryRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 season_trophy_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_season_trophy_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAWeekendTourneyPlayerHistoryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 season_trophy_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_season_trophy_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_trophy_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 season_trophy_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->season_trophy_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
}

::google::protobuf::uint8* CMsgDOTAWeekendTourneyPlayerHistoryRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 season_trophy_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->season_trophy_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  return target;
}

size_t CMsgDOTAWeekendTourneyPlayerHistoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 season_trophy_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_trophy_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyPlayerHistoryRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAWeekendTourneyPlayerHistoryRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::MergeFrom(const CMsgDOTAWeekendTourneyPlayerHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      season_trophy_id_ = from.season_trophy_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::CopyFrom(const CMsgDOTAWeekendTourneyPlayerHistoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyPlayerHistoryRequest::IsInitialized() const {
  return true;
}

void CMsgDOTAWeekendTourneyPlayerHistoryRequest::Swap(CMsgDOTAWeekendTourneyPlayerHistoryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAWeekendTourneyPlayerHistoryRequest::InternalSwap(CMsgDOTAWeekendTourneyPlayerHistoryRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(season_trophy_id_, other->season_trophy_id_);
}

::google::protobuf::Metadata CMsgDOTAWeekendTourneyPlayerHistoryRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::InitAsDefaultInstance() {
}
class CMsgDOTAWeekendTourneyPlayerHistory_Tournament::HasBitSetters {
 public:
  static void set_has_tournament_id(CMsgDOTAWeekendTourneyPlayerHistory_Tournament* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_start_time(CMsgDOTAWeekendTourneyPlayerHistory_Tournament* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_tournament_tier(CMsgDOTAWeekendTourneyPlayerHistory_Tournament* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_team_id(CMsgDOTAWeekendTourneyPlayerHistory_Tournament* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_team_date(CMsgDOTAWeekendTourneyPlayerHistory_Tournament* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_team_result(CMsgDOTAWeekendTourneyPlayerHistory_Tournament* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_team_name(CMsgDOTAWeekendTourneyPlayerHistory_Tournament* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_season_trophy_id(CMsgDOTAWeekendTourneyPlayerHistory_Tournament* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::kTournamentIdFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::kStartTimeFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::kTournamentTierFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::kTeamIdFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::kTeamDateFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::kTeamResultFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::kAccountIdFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::kTeamNameFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistory_Tournament::kSeasonTrophyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAWeekendTourneyPlayerHistory_Tournament::CMsgDOTAWeekendTourneyPlayerHistory_Tournament()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
}
CMsgDOTAWeekendTourneyPlayerHistory_Tournament::CMsgDOTAWeekendTourneyPlayerHistory_Tournament(const CMsgDOTAWeekendTourneyPlayerHistory_Tournament& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      account_id_(from.account_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  ::memcpy(&tournament_id_, &from.tournament_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&season_trophy_id_) -
    reinterpret_cast<char*>(&tournament_id_)) + sizeof(season_trophy_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAWeekendTourneyPlayerHistory_Tournament_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tournament_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&season_trophy_id_) -
      reinterpret_cast<char*>(&tournament_id_)) + sizeof(season_trophy_id_));
}

CMsgDOTAWeekendTourneyPlayerHistory_Tournament::~CMsgDOTAWeekendTourneyPlayerHistory_Tournament() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  SharedDtor();
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAWeekendTourneyPlayerHistory_Tournament& CMsgDOTAWeekendTourneyPlayerHistory_Tournament::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAWeekendTourneyPlayerHistory_Tournament_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_id_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    team_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&tournament_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&season_trophy_id_) -
        reinterpret_cast<char*>(&tournament_id_)) + sizeof(season_trophy_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAWeekendTourneyPlayerHistory_Tournament*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 tournament_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_tournament_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 start_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_start_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 tournament_tier = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_tournament_tier(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_date = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_team_date(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_result = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_team_result(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 account_id = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) == 56) {
          do {
            msg->add_account_id(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 56 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_account_id();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional string team_name = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name");
        object = msg->mutable_team_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 season_trophy_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_season_trophy_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tournament_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_tournament_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_start_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tournament_tier = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_tournament_tier(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tournament_tier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_date = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_team_date(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_result = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_team_result(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 account_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 56u, input, this->mutable_account_id())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_account_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), static_cast<int>(this->team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 season_trophy_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_season_trophy_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &season_trophy_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tournament_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tournament_id(), output);
  }

  // optional uint32 start_time = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->start_time(), output);
  }

  // optional uint32 tournament_tier = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->tournament_tier(), output);
  }

  // optional uint32 team_id = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team_id(), output);
  }

  // optional uint32 team_date = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_date(), output);
  }

  // optional uint32 team_result = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->team_result(), output);
  }

  // repeated uint32 account_id = 7;
  for (int i = 0, n = this->account_id_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      7, this->account_id(i), output);
  }

  // optional string team_name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->team_name(), output);
  }

  // optional uint32 season_trophy_id = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->season_trophy_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
}

::google::protobuf::uint8* CMsgDOTAWeekendTourneyPlayerHistory_Tournament::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tournament_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tournament_id(), target);
  }

  // optional uint32 start_time = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->start_time(), target);
  }

  // optional uint32 tournament_tier = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->tournament_tier(), target);
  }

  // optional uint32 team_id = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team_id(), target);
  }

  // optional uint32 team_date = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_date(), target);
  }

  // optional uint32 team_result = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->team_result(), target);
  }

  // repeated uint32 account_id = 7;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(7, this->account_id_, target);

  // optional string team_name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->team_name(), target);
  }

  // optional uint32 season_trophy_id = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->season_trophy_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  return target;
}

size_t CMsgDOTAWeekendTourneyPlayerHistory_Tournament::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 account_id = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->account_id_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->account_id_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string team_name = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional uint32 tournament_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_id());
    }

    // optional uint32 start_time = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional uint32 tournament_tier = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tournament_tier());
    }

    // optional uint32 team_id = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint32 team_date = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_date());
    }

    // optional uint32 team_result = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_result());
    }

    // optional uint32 season_trophy_id = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->season_trophy_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyPlayerHistory_Tournament* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAWeekendTourneyPlayerHistory_Tournament>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::MergeFrom(const CMsgDOTAWeekendTourneyPlayerHistory_Tournament& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  account_id_.MergeFrom(from.account_id_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      tournament_id_ = from.tournament_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      tournament_tier_ = from.tournament_tier_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_date_ = from.team_date_;
    }
    if (cached_has_bits & 0x00000040u) {
      team_result_ = from.team_result_;
    }
    if (cached_has_bits & 0x00000080u) {
      season_trophy_id_ = from.season_trophy_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::CopyFrom(const CMsgDOTAWeekendTourneyPlayerHistory_Tournament& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyPlayerHistory_Tournament::IsInitialized() const {
  return true;
}

void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::Swap(CMsgDOTAWeekendTourneyPlayerHistory_Tournament* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAWeekendTourneyPlayerHistory_Tournament::InternalSwap(CMsgDOTAWeekendTourneyPlayerHistory_Tournament* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  account_id_.InternalSwap(&other->account_id_);
  team_name_.Swap(&other->team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tournament_id_, other->tournament_id_);
  swap(start_time_, other->start_time_);
  swap(tournament_tier_, other->tournament_tier_);
  swap(team_id_, other->team_id_);
  swap(team_date_, other->team_date_);
  swap(team_result_, other->team_result_);
  swap(season_trophy_id_, other->season_trophy_id_);
}

::google::protobuf::Metadata CMsgDOTAWeekendTourneyPlayerHistory_Tournament::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAWeekendTourneyPlayerHistory::InitAsDefaultInstance() {
}
class CMsgDOTAWeekendTourneyPlayerHistory::HasBitSetters {
 public:
  static void set_has_account_id(CMsgDOTAWeekendTourneyPlayerHistory* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAWeekendTourneyPlayerHistory::kAccountIdFieldNumber;
const int CMsgDOTAWeekendTourneyPlayerHistory::kTournamentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAWeekendTourneyPlayerHistory::CMsgDOTAWeekendTourneyPlayerHistory()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
}
CMsgDOTAWeekendTourneyPlayerHistory::CMsgDOTAWeekendTourneyPlayerHistory(const CMsgDOTAWeekendTourneyPlayerHistory& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tournaments_(from.tournaments_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  account_id_ = from.account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
}

void CMsgDOTAWeekendTourneyPlayerHistory::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAWeekendTourneyPlayerHistory_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  account_id_ = 0u;
}

CMsgDOTAWeekendTourneyPlayerHistory::~CMsgDOTAWeekendTourneyPlayerHistory() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
  SharedDtor();
}

void CMsgDOTAWeekendTourneyPlayerHistory::SharedDtor() {
}

void CMsgDOTAWeekendTourneyPlayerHistory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAWeekendTourneyPlayerHistory& CMsgDOTAWeekendTourneyPlayerHistory::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAWeekendTourneyPlayerHistory_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAWeekendTourneyPlayerHistory::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tournaments_.Clear();
  account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAWeekendTourneyPlayerHistory::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAWeekendTourneyPlayerHistory*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament tournaments = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory_Tournament::_InternalParse;
          object = msg->add_tournaments();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAWeekendTourneyPlayerHistory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament tournaments = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tournaments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAWeekendTourneyPlayerHistory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // repeated .proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament tournaments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tournaments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->tournaments(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
}

::google::protobuf::uint8* CMsgDOTAWeekendTourneyPlayerHistory::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // repeated .proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament tournaments = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tournaments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->tournaments(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
  return target;
}

size_t CMsgDOTAWeekendTourneyPlayerHistory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAWeekendTourneyPlayerHistory.Tournament tournaments = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->tournaments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tournaments(static_cast<int>(i)));
    }
  }

  // optional uint32 account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAWeekendTourneyPlayerHistory::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyPlayerHistory* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAWeekendTourneyPlayerHistory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyPlayerHistory::MergeFrom(const CMsgDOTAWeekendTourneyPlayerHistory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tournaments_.MergeFrom(from.tournaments_);
  if (from.has_account_id()) {
    set_account_id(from.account_id());
  }
}

void CMsgDOTAWeekendTourneyPlayerHistory::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyPlayerHistory::CopyFrom(const CMsgDOTAWeekendTourneyPlayerHistory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyPlayerHistory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyPlayerHistory::IsInitialized() const {
  return true;
}

void CMsgDOTAWeekendTourneyPlayerHistory::Swap(CMsgDOTAWeekendTourneyPlayerHistory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAWeekendTourneyPlayerHistory::InternalSwap(CMsgDOTAWeekendTourneyPlayerHistory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&tournaments_)->InternalSwap(CastToBase(&other->tournaments_));
  swap(account_id_, other->account_id_);
}

::google::protobuf::Metadata CMsgDOTAWeekendTourneyPlayerHistory::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::InitAsDefaultInstance() {
}
class CMsgDOTAWeekendTourneyParticipationDetails_Tier::HasBitSetters {
 public:
  static void set_has_tier(CMsgDOTAWeekendTourneyParticipationDetails_Tier* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_players(CMsgDOTAWeekendTourneyParticipationDetails_Tier* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_teams(CMsgDOTAWeekendTourneyParticipationDetails_Tier* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_winning_teams(CMsgDOTAWeekendTourneyParticipationDetails_Tier* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_players_streak_2(CMsgDOTAWeekendTourneyParticipationDetails_Tier* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_players_streak_3(CMsgDOTAWeekendTourneyParticipationDetails_Tier* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_players_streak_4(CMsgDOTAWeekendTourneyParticipationDetails_Tier* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_players_streak_5(CMsgDOTAWeekendTourneyParticipationDetails_Tier* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAWeekendTourneyParticipationDetails_Tier::kTierFieldNumber;
const int CMsgDOTAWeekendTourneyParticipationDetails_Tier::kPlayersFieldNumber;
const int CMsgDOTAWeekendTourneyParticipationDetails_Tier::kTeamsFieldNumber;
const int CMsgDOTAWeekendTourneyParticipationDetails_Tier::kWinningTeamsFieldNumber;
const int CMsgDOTAWeekendTourneyParticipationDetails_Tier::kPlayersStreak2FieldNumber;
const int CMsgDOTAWeekendTourneyParticipationDetails_Tier::kPlayersStreak3FieldNumber;
const int CMsgDOTAWeekendTourneyParticipationDetails_Tier::kPlayersStreak4FieldNumber;
const int CMsgDOTAWeekendTourneyParticipationDetails_Tier::kPlayersStreak5FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAWeekendTourneyParticipationDetails_Tier::CMsgDOTAWeekendTourneyParticipationDetails_Tier()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
}
CMsgDOTAWeekendTourneyParticipationDetails_Tier::CMsgDOTAWeekendTourneyParticipationDetails_Tier(const CMsgDOTAWeekendTourneyParticipationDetails_Tier& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tier_, &from.tier_,
    static_cast<size_t>(reinterpret_cast<char*>(&players_streak_5_) -
    reinterpret_cast<char*>(&tier_)) + sizeof(players_streak_5_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::SharedCtor() {
  ::memset(&tier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&players_streak_5_) -
      reinterpret_cast<char*>(&tier_)) + sizeof(players_streak_5_));
}

CMsgDOTAWeekendTourneyParticipationDetails_Tier::~CMsgDOTAWeekendTourneyParticipationDetails_Tier() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  SharedDtor();
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::SharedDtor() {
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAWeekendTourneyParticipationDetails_Tier& CMsgDOTAWeekendTourneyParticipationDetails_Tier::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAWeekendTourneyParticipationDetails_Tier_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAWeekendTourneyParticipationDetails_Tier::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&tier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&players_streak_5_) -
        reinterpret_cast<char*>(&tier_)) + sizeof(players_streak_5_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAWeekendTourneyParticipationDetails_Tier::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAWeekendTourneyParticipationDetails_Tier*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 tier = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_tier(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 players = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_players(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 teams = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_teams(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 winning_teams = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_winning_teams(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 players_streak_2 = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_players_streak_2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 players_streak_3 = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_players_streak_3(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 players_streak_4 = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_players_streak_4(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 players_streak_5 = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_players_streak_5(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 tier = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_tier(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 players = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_players(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 teams = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_teams(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teams_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 winning_teams = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_winning_teams(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winning_teams_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 players_streak_2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_players_streak_2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_streak_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 players_streak_3 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_players_streak_3(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_streak_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 players_streak_4 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_players_streak_4(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_streak_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 players_streak_5 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_players_streak_5(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &players_streak_5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tier = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tier(), output);
  }

  // optional uint32 players = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->players(), output);
  }

  // optional uint32 teams = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->teams(), output);
  }

  // optional uint32 winning_teams = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->winning_teams(), output);
  }

  // optional uint32 players_streak_2 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->players_streak_2(), output);
  }

  // optional uint32 players_streak_3 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->players_streak_3(), output);
  }

  // optional uint32 players_streak_4 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->players_streak_4(), output);
  }

  // optional uint32 players_streak_5 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->players_streak_5(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
}

::google::protobuf::uint8* CMsgDOTAWeekendTourneyParticipationDetails_Tier::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 tier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tier(), target);
  }

  // optional uint32 players = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->players(), target);
  }

  // optional uint32 teams = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->teams(), target);
  }

  // optional uint32 winning_teams = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->winning_teams(), target);
  }

  // optional uint32 players_streak_2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->players_streak_2(), target);
  }

  // optional uint32 players_streak_3 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->players_streak_3(), target);
  }

  // optional uint32 players_streak_4 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->players_streak_4(), target);
  }

  // optional uint32 players_streak_5 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->players_streak_5(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  return target;
}

size_t CMsgDOTAWeekendTourneyParticipationDetails_Tier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 tier = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tier());
    }

    // optional uint32 players = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players());
    }

    // optional uint32 teams = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teams());
    }

    // optional uint32 winning_teams = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winning_teams());
    }

    // optional uint32 players_streak_2 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players_streak_2());
    }

    // optional uint32 players_streak_3 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players_streak_3());
    }

    // optional uint32 players_streak_4 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players_streak_4());
    }

    // optional uint32 players_streak_5 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->players_streak_5());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyParticipationDetails_Tier* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAWeekendTourneyParticipationDetails_Tier>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::MergeFrom(const CMsgDOTAWeekendTourneyParticipationDetails_Tier& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tier_ = from.tier_;
    }
    if (cached_has_bits & 0x00000002u) {
      players_ = from.players_;
    }
    if (cached_has_bits & 0x00000004u) {
      teams_ = from.teams_;
    }
    if (cached_has_bits & 0x00000008u) {
      winning_teams_ = from.winning_teams_;
    }
    if (cached_has_bits & 0x00000010u) {
      players_streak_2_ = from.players_streak_2_;
    }
    if (cached_has_bits & 0x00000020u) {
      players_streak_3_ = from.players_streak_3_;
    }
    if (cached_has_bits & 0x00000040u) {
      players_streak_4_ = from.players_streak_4_;
    }
    if (cached_has_bits & 0x00000080u) {
      players_streak_5_ = from.players_streak_5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::CopyFrom(const CMsgDOTAWeekendTourneyParticipationDetails_Tier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyParticipationDetails_Tier::IsInitialized() const {
  return true;
}

void CMsgDOTAWeekendTourneyParticipationDetails_Tier::Swap(CMsgDOTAWeekendTourneyParticipationDetails_Tier* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAWeekendTourneyParticipationDetails_Tier::InternalSwap(CMsgDOTAWeekendTourneyParticipationDetails_Tier* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tier_, other->tier_);
  swap(players_, other->players_);
  swap(teams_, other->teams_);
  swap(winning_teams_, other->winning_teams_);
  swap(players_streak_2_, other->players_streak_2_);
  swap(players_streak_3_, other->players_streak_3_);
  swap(players_streak_4_, other->players_streak_4_);
  swap(players_streak_5_, other->players_streak_5_);
}

::google::protobuf::Metadata CMsgDOTAWeekendTourneyParticipationDetails_Tier::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAWeekendTourneyParticipationDetails_Division::InitAsDefaultInstance() {
}
class CMsgDOTAWeekendTourneyParticipationDetails_Division::HasBitSetters {
 public:
  static void set_has_division_id(CMsgDOTAWeekendTourneyParticipationDetails_Division* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_schedule_time(CMsgDOTAWeekendTourneyParticipationDetails_Division* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAWeekendTourneyParticipationDetails_Division::kDivisionIdFieldNumber;
const int CMsgDOTAWeekendTourneyParticipationDetails_Division::kScheduleTimeFieldNumber;
const int CMsgDOTAWeekendTourneyParticipationDetails_Division::kTiersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAWeekendTourneyParticipationDetails_Division::CMsgDOTAWeekendTourneyParticipationDetails_Division()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
}
CMsgDOTAWeekendTourneyParticipationDetails_Division::CMsgDOTAWeekendTourneyParticipationDetails_Division(const CMsgDOTAWeekendTourneyParticipationDetails_Division& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tiers_(from.tiers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&division_id_, &from.division_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&schedule_time_) -
    reinterpret_cast<char*>(&division_id_)) + sizeof(schedule_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAWeekendTourneyParticipationDetails_Division_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  ::memset(&division_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&schedule_time_) -
      reinterpret_cast<char*>(&division_id_)) + sizeof(schedule_time_));
}

CMsgDOTAWeekendTourneyParticipationDetails_Division::~CMsgDOTAWeekendTourneyParticipationDetails_Division() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
  SharedDtor();
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::SharedDtor() {
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAWeekendTourneyParticipationDetails_Division& CMsgDOTAWeekendTourneyParticipationDetails_Division::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAWeekendTourneyParticipationDetails_Division_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAWeekendTourneyParticipationDetails_Division::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tiers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&division_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&schedule_time_) -
        reinterpret_cast<char*>(&division_id_)) + sizeof(schedule_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAWeekendTourneyParticipationDetails_Division::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAWeekendTourneyParticipationDetails_Division*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 division_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_division_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 schedule_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_schedule_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier tiers = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Tier::_InternalParse;
          object = msg->add_tiers();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAWeekendTourneyParticipationDetails_Division::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 division_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_division_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &division_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 schedule_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_schedule_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &schedule_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier tiers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tiers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAWeekendTourneyParticipationDetails_Division::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 division_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->division_id(), output);
  }

  // optional uint32 schedule_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->schedule_time(), output);
  }

  // repeated .proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier tiers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tiers_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->tiers(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
}

::google::protobuf::uint8* CMsgDOTAWeekendTourneyParticipationDetails_Division::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 division_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->division_id(), target);
  }

  // optional uint32 schedule_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->schedule_time(), target);
  }

  // repeated .proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier tiers = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tiers_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->tiers(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
  return target;
}

size_t CMsgDOTAWeekendTourneyParticipationDetails_Division::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Tier tiers = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->tiers_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tiers(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 division_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->division_id());
    }

    // optional uint32 schedule_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->schedule_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyParticipationDetails_Division* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAWeekendTourneyParticipationDetails_Division>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::MergeFrom(const CMsgDOTAWeekendTourneyParticipationDetails_Division& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tiers_.MergeFrom(from.tiers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      division_id_ = from.division_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      schedule_time_ = from.schedule_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::CopyFrom(const CMsgDOTAWeekendTourneyParticipationDetails_Division& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyParticipationDetails_Division::IsInitialized() const {
  return true;
}

void CMsgDOTAWeekendTourneyParticipationDetails_Division::Swap(CMsgDOTAWeekendTourneyParticipationDetails_Division* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAWeekendTourneyParticipationDetails_Division::InternalSwap(CMsgDOTAWeekendTourneyParticipationDetails_Division* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&tiers_)->InternalSwap(CastToBase(&other->tiers_));
  swap(division_id_, other->division_id_);
  swap(schedule_time_, other->schedule_time_);
}

::google::protobuf::Metadata CMsgDOTAWeekendTourneyParticipationDetails_Division::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAWeekendTourneyParticipationDetails::InitAsDefaultInstance() {
}
class CMsgDOTAWeekendTourneyParticipationDetails::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAWeekendTourneyParticipationDetails::kDivisionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAWeekendTourneyParticipationDetails::CMsgDOTAWeekendTourneyParticipationDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
}
CMsgDOTAWeekendTourneyParticipationDetails::CMsgDOTAWeekendTourneyParticipationDetails(const CMsgDOTAWeekendTourneyParticipationDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      divisions_(from.divisions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
}

void CMsgDOTAWeekendTourneyParticipationDetails::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAWeekendTourneyParticipationDetails_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
}

CMsgDOTAWeekendTourneyParticipationDetails::~CMsgDOTAWeekendTourneyParticipationDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
  SharedDtor();
}

void CMsgDOTAWeekendTourneyParticipationDetails::SharedDtor() {
}

void CMsgDOTAWeekendTourneyParticipationDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAWeekendTourneyParticipationDetails& CMsgDOTAWeekendTourneyParticipationDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAWeekendTourneyParticipationDetails_dota_5fgcmessages_5fclient_5ftournament_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAWeekendTourneyParticipationDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  divisions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAWeekendTourneyParticipationDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAWeekendTourneyParticipationDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division divisions = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Division::_InternalParse;
          object = msg->add_divisions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAWeekendTourneyParticipationDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division divisions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_divisions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAWeekendTourneyParticipationDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division divisions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->divisions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->divisions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
}

::google::protobuf::uint8* CMsgDOTAWeekendTourneyParticipationDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division divisions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->divisions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->divisions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
  return target;
}

size_t CMsgDOTAWeekendTourneyParticipationDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAWeekendTourneyParticipationDetails.Division divisions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->divisions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->divisions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAWeekendTourneyParticipationDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAWeekendTourneyParticipationDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAWeekendTourneyParticipationDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTAWeekendTourneyParticipationDetails::MergeFrom(const CMsgDOTAWeekendTourneyParticipationDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  divisions_.MergeFrom(from.divisions_);
}

void CMsgDOTAWeekendTourneyParticipationDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAWeekendTourneyParticipationDetails::CopyFrom(const CMsgDOTAWeekendTourneyParticipationDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAWeekendTourneyParticipationDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAWeekendTourneyParticipationDetails::IsInitialized() const {
  return true;
}

void CMsgDOTAWeekendTourneyParticipationDetails::Swap(CMsgDOTAWeekendTourneyParticipationDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAWeekendTourneyParticipationDetails::InternalSwap(CMsgDOTAWeekendTourneyParticipationDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&divisions_)->InternalSwap(CastToBase(&other->divisions_));
}

::google::protobuf::Metadata CMsgDOTAWeekendTourneyParticipationDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5ftournament_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5ftournament_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATournamentInfo_PhaseGroup* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATournamentInfo_PhaseGroup >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATournamentInfo_PhaseGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATournamentInfo_Phase* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATournamentInfo_Phase >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATournamentInfo_Phase >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATournamentInfo_Team* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATournamentInfo_Team >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATournamentInfo_Team >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATournamentInfo_UpcomingMatch >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATournamentInfo_News* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATournamentInfo_News >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATournamentInfo_News >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATournamentInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATournamentInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATournamentInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgRequestWeekendTourneySchedule* Arena::CreateMaybeMessage< ::proto::dota::CMsgRequestWeekendTourneySchedule >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgRequestWeekendTourneySchedule >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgWeekendTourneySchedule_Division* Arena::CreateMaybeMessage< ::proto::dota::CMsgWeekendTourneySchedule_Division >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgWeekendTourneySchedule_Division >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgWeekendTourneySchedule* Arena::CreateMaybeMessage< ::proto::dota::CMsgWeekendTourneySchedule >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgWeekendTourneySchedule >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgWeekendTourneyOpts* Arena::CreateMaybeMessage< ::proto::dota::CMsgWeekendTourneyOpts >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgWeekendTourneyOpts >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgWeekendTourneyLeave* Arena::CreateMaybeMessage< ::proto::dota::CMsgWeekendTourneyLeave >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgWeekendTourneyLeave >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATournament_Team* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATournament_Team >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATournament_Team >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATournament_Game* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATournament_Game >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATournament_Game >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATournament_Node* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATournament_Node >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATournament_Node >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATournament* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATournament >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATournament >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATournamentStateChange_GameChange* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATournamentStateChange_GameChange >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATournamentStateChange_GameChange >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATournamentStateChange_TeamChange* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATournamentStateChange_TeamChange >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATournamentStateChange_TeamChange >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATournamentStateChange* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATournamentStateChange >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATournamentStateChange >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATournamentRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATournamentRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATournamentRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTATournamentResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTATournamentResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTATournamentResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAClearTournamentGame* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAClearTournamentGame >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAClearTournamentGame >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAWeekendTourneyPlayerSkillLevelStats* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAWeekendTourneyPlayerSkillLevelStats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAWeekendTourneyPlayerSkillLevelStats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAWeekendTourneyPlayerStats* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAWeekendTourneyPlayerStats >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAWeekendTourneyPlayerStats >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAWeekendTourneyPlayerStatsRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAWeekendTourneyPlayerStatsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAWeekendTourneyPlayerStatsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAWeekendTourneyPlayerHistoryRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAWeekendTourneyPlayerHistoryRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAWeekendTourneyPlayerHistoryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory_Tournament* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory_Tournament >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory_Tournament >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAWeekendTourneyPlayerHistory >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Tier* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Tier >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Tier >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Division* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Division >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails_Division >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAWeekendTourneyParticipationDetails >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
