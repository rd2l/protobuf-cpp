// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: c_peer2peer_netmessages.proto

#include "c_peer2peer_netmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_c_5fpeer2peer_5fnetmessages_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CP2P_VRAvatarPosition_COrientation_c_5fpeer2peer_5fnetmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_netmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgVoiceAudio_netmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_networkbasetypes_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgQAngle_networkbasetypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_networkbasetypes_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgVector_networkbasetypes_2eproto;
namespace proto {
namespace dota {
class CP2P_TextMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CP2P_TextMessage> _instance;
} _CP2P_TextMessage_default_instance_;
class CSteam_Voice_EncodingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSteam_Voice_Encoding> _instance;
} _CSteam_Voice_Encoding_default_instance_;
class CP2P_VoiceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CP2P_Voice> _instance;
} _CP2P_Voice_default_instance_;
class CP2P_PingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CP2P_Ping> _instance;
} _CP2P_Ping_default_instance_;
class CP2P_VRAvatarPosition_COrientationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CP2P_VRAvatarPosition_COrientation> _instance;
} _CP2P_VRAvatarPosition_COrientation_default_instance_;
class CP2P_VRAvatarPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CP2P_VRAvatarPosition> _instance;
} _CP2P_VRAvatarPosition_default_instance_;
class CP2P_WatchSynchronizationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CP2P_WatchSynchronization> _instance;
} _CP2P_WatchSynchronization_default_instance_;
}  // namespace dota
}  // namespace proto
static void InitDefaultsCP2P_TextMessage_c_5fpeer2peer_5fnetmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CP2P_TextMessage_default_instance_;
    new (ptr) ::proto::dota::CP2P_TextMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CP2P_TextMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CP2P_TextMessage_c_5fpeer2peer_5fnetmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCP2P_TextMessage_c_5fpeer2peer_5fnetmessages_2eproto}, {}};

static void InitDefaultsCSteam_Voice_Encoding_c_5fpeer2peer_5fnetmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSteam_Voice_Encoding_default_instance_;
    new (ptr) ::proto::dota::CSteam_Voice_Encoding();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSteam_Voice_Encoding::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSteam_Voice_Encoding_c_5fpeer2peer_5fnetmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSteam_Voice_Encoding_c_5fpeer2peer_5fnetmessages_2eproto}, {}};

static void InitDefaultsCP2P_Voice_c_5fpeer2peer_5fnetmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CP2P_Voice_default_instance_;
    new (ptr) ::proto::dota::CP2P_Voice();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CP2P_Voice::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CP2P_Voice_c_5fpeer2peer_5fnetmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCP2P_Voice_c_5fpeer2peer_5fnetmessages_2eproto}, {
      &scc_info_CMsgVoiceAudio_netmessages_2eproto.base,}};

static void InitDefaultsCP2P_Ping_c_5fpeer2peer_5fnetmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CP2P_Ping_default_instance_;
    new (ptr) ::proto::dota::CP2P_Ping();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CP2P_Ping::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CP2P_Ping_c_5fpeer2peer_5fnetmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCP2P_Ping_c_5fpeer2peer_5fnetmessages_2eproto}, {}};

static void InitDefaultsCP2P_VRAvatarPosition_COrientation_c_5fpeer2peer_5fnetmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CP2P_VRAvatarPosition_COrientation_default_instance_;
    new (ptr) ::proto::dota::CP2P_VRAvatarPosition_COrientation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CP2P_VRAvatarPosition_COrientation::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CP2P_VRAvatarPosition_COrientation_c_5fpeer2peer_5fnetmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCP2P_VRAvatarPosition_COrientation_c_5fpeer2peer_5fnetmessages_2eproto}, {
      &scc_info_CMsgVector_networkbasetypes_2eproto.base,
      &scc_info_CMsgQAngle_networkbasetypes_2eproto.base,}};

static void InitDefaultsCP2P_VRAvatarPosition_c_5fpeer2peer_5fnetmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CP2P_VRAvatarPosition_default_instance_;
    new (ptr) ::proto::dota::CP2P_VRAvatarPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CP2P_VRAvatarPosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CP2P_VRAvatarPosition_c_5fpeer2peer_5fnetmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCP2P_VRAvatarPosition_c_5fpeer2peer_5fnetmessages_2eproto}, {
      &scc_info_CP2P_VRAvatarPosition_COrientation_c_5fpeer2peer_5fnetmessages_2eproto.base,}};

static void InitDefaultsCP2P_WatchSynchronization_c_5fpeer2peer_5fnetmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CP2P_WatchSynchronization_default_instance_;
    new (ptr) ::proto::dota::CP2P_WatchSynchronization();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CP2P_WatchSynchronization::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CP2P_WatchSynchronization_c_5fpeer2peer_5fnetmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCP2P_WatchSynchronization_c_5fpeer2peer_5fnetmessages_2eproto}, {}};

void InitDefaults_c_5fpeer2peer_5fnetmessages_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CP2P_TextMessage_c_5fpeer2peer_5fnetmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSteam_Voice_Encoding_c_5fpeer2peer_5fnetmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CP2P_Voice_c_5fpeer2peer_5fnetmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CP2P_Ping_c_5fpeer2peer_5fnetmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CP2P_VRAvatarPosition_COrientation_c_5fpeer2peer_5fnetmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CP2P_VRAvatarPosition_c_5fpeer2peer_5fnetmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CP2P_WatchSynchronization_c_5fpeer2peer_5fnetmessages_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_c_5fpeer2peer_5fnetmessages_2eproto[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_c_5fpeer2peer_5fnetmessages_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_c_5fpeer2peer_5fnetmessages_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_c_5fpeer2peer_5fnetmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_TextMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_TextMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_TextMessage, text_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSteam_Voice_Encoding, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSteam_Voice_Encoding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSteam_Voice_Encoding, voice_data_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_Voice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_Voice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_Voice, audio_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_Voice, broadcast_group_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_Ping, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_Ping, send_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_Ping, is_reply_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_VRAvatarPosition_COrientation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_VRAvatarPosition_COrientation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_VRAvatarPosition_COrientation, pos_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_VRAvatarPosition_COrientation, ang_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_VRAvatarPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_VRAvatarPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_VRAvatarPosition, body_parts_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_VRAvatarPosition, hat_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_VRAvatarPosition, scene_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_VRAvatarPosition, world_scale_),
  ~0u,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_WatchSynchronization, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_WatchSynchronization, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_WatchSynchronization, demo_tick_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_WatchSynchronization, paused_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_WatchSynchronization, tv_listen_voice_indices_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_WatchSynchronization, dota_spectator_mode_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_WatchSynchronization, dota_spectator_watching_broadcaster_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_WatchSynchronization, dota_spectator_hero_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_WatchSynchronization, dota_spectator_autospeed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CP2P_WatchSynchronization, dota_replay_speed_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::proto::dota::CP2P_TextMessage)},
  { 7, 13, sizeof(::proto::dota::CSteam_Voice_Encoding)},
  { 14, 21, sizeof(::proto::dota::CP2P_Voice)},
  { 23, 30, sizeof(::proto::dota::CP2P_Ping)},
  { 32, 39, sizeof(::proto::dota::CP2P_VRAvatarPosition_COrientation)},
  { 41, 50, sizeof(::proto::dota::CP2P_VRAvatarPosition)},
  { 54, 67, sizeof(::proto::dota::CP2P_WatchSynchronization)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CP2P_TextMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSteam_Voice_Encoding_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CP2P_Voice_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CP2P_Ping_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CP2P_VRAvatarPosition_COrientation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CP2P_VRAvatarPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CP2P_WatchSynchronization_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_c_5fpeer2peer_5fnetmessages_2eproto = {
  {}, AddDescriptors_c_5fpeer2peer_5fnetmessages_2eproto, "c_peer2peer_netmessages.proto", schemas,
  file_default_instances, TableStruct_c_5fpeer2peer_5fnetmessages_2eproto::offsets,
  file_level_metadata_c_5fpeer2peer_5fnetmessages_2eproto, 7, file_level_enum_descriptors_c_5fpeer2peer_5fnetmessages_2eproto, file_level_service_descriptors_c_5fpeer2peer_5fnetmessages_2eproto,
};

const char descriptor_table_protodef_c_5fpeer2peer_5fnetmessages_2eproto[] =
  "\n\035c_peer2peer_netmessages.proto\022\nproto.d"
  "ota\032\021netmessages.proto\032\026networkbasetypes"
  ".proto\" \n\020CP2P_TextMessage\022\014\n\004text\030\001 \001(\014"
  "\"+\n\025CSteam_Voice_Encoding\022\022\n\nvoice_data\030"
  "\001 \001(\014\"s\n\nCP2P_Voice\022)\n\005audio\030\001 \001(\0132\032.pro"
  "to.dota.CMsgVoiceAudio\022\027\n\017broadcast_grou"
  "p\030\002 \001(\r\"!\n\rHandler_Flags\022\020\n\014Played_Audio"
  "\020\001\"0\n\tCP2P_Ping\022\021\n\tsend_time\030\001 \002(\004\022\020\n\010is"
  "_reply\030\002 \002(\010\"\354\001\n\025CP2P_VRAvatarPosition\022B"
  "\n\nbody_parts\030\001 \003(\0132..proto.dota.CP2P_VRA"
  "vatarPosition.COrientation\022\016\n\006hat_id\030\002 \001"
  "(\005\022\020\n\010scene_id\030\003 \001(\005\022\023\n\013world_scale\030\004 \001("
  "\005\032X\n\014COrientation\022#\n\003pos\030\001 \001(\0132\026.proto.d"
  "ota.CMsgVector\022#\n\003ang\030\002 \001(\0132\026.proto.dota"
  ".CMsgQAngle\"\211\002\n\031CP2P_WatchSynchronizatio"
  "n\022\021\n\tdemo_tick\030\001 \001(\005\022\016\n\006paused\030\002 \001(\010\022\037\n\027"
  "tv_listen_voice_indices\030\003 \001(\005\022\033\n\023dota_sp"
  "ectator_mode\030\004 \001(\005\022+\n#dota_spectator_wat"
  "ching_broadcaster\030\005 \001(\005\022!\n\031dota_spectato"
  "r_hero_index\030\006 \001(\005\022 \n\030dota_spectator_aut"
  "ospeed\030\007 \001(\005\022\031\n\021dota_replay_speed\030\010 \001(\005*"
  "}\n\014P2P_Messages\022\024\n\017p2p_TextMessage\020\200\002\022\016\n"
  "\tp2p_Voice\020\201\002\022\r\n\010p2p_Ping\020\202\002\022\031\n\024p2p_VRAv"
  "atarPosition\020\203\002\022\035\n\030p2p_WatchSynchronizat"
  "ion\020\204\002B\003\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto = {
  false, InitDefaults_c_5fpeer2peer_5fnetmessages_2eproto, 
  descriptor_table_protodef_c_5fpeer2peer_5fnetmessages_2eproto,
  "c_peer2peer_netmessages.proto", &assign_descriptors_table_c_5fpeer2peer_5fnetmessages_2eproto, 971,
};

void AddDescriptors_c_5fpeer2peer_5fnetmessages_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_netmessages_2eproto,
    ::AddDescriptors_networkbasetypes_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_c_5fpeer2peer_5fnetmessages_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_c_5fpeer2peer_5fnetmessages_2eproto = []() { AddDescriptors_c_5fpeer2peer_5fnetmessages_2eproto(); return true; }();
namespace proto {
namespace dota {
const ::google::protobuf::EnumDescriptor* CP2P_Voice_Handler_Flags_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_c_5fpeer2peer_5fnetmessages_2eproto);
  return file_level_enum_descriptors_c_5fpeer2peer_5fnetmessages_2eproto[0];
}
bool CP2P_Voice_Handler_Flags_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CP2P_Voice_Handler_Flags CP2P_Voice::Played_Audio;
const CP2P_Voice_Handler_Flags CP2P_Voice::Handler_Flags_MIN;
const CP2P_Voice_Handler_Flags CP2P_Voice::Handler_Flags_MAX;
const int CP2P_Voice::Handler_Flags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* P2P_Messages_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_c_5fpeer2peer_5fnetmessages_2eproto);
  return file_level_enum_descriptors_c_5fpeer2peer_5fnetmessages_2eproto[1];
}
bool P2P_Messages_IsValid(int value) {
  switch (value) {
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CP2P_TextMessage::InitAsDefaultInstance() {
}
class CP2P_TextMessage::HasBitSetters {
 public:
  static void set_has_text(CP2P_TextMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CP2P_TextMessage::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CP2P_TextMessage::CP2P_TextMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CP2P_TextMessage)
}
CP2P_TextMessage::CP2P_TextMessage(const CP2P_TextMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CP2P_TextMessage)
}

void CP2P_TextMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CP2P_TextMessage_c_5fpeer2peer_5fnetmessages_2eproto.base);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CP2P_TextMessage::~CP2P_TextMessage() {
  // @@protoc_insertion_point(destructor:proto.dota.CP2P_TextMessage)
  SharedDtor();
}

void CP2P_TextMessage::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CP2P_TextMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CP2P_TextMessage& CP2P_TextMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CP2P_TextMessage_c_5fpeer2peer_5fnetmessages_2eproto.base);
  return *internal_default_instance();
}


void CP2P_TextMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CP2P_TextMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CP2P_TextMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CP2P_TextMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes text = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CP2P_TextMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CP2P_TextMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CP2P_TextMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CP2P_TextMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CP2P_TextMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CP2P_TextMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CP2P_TextMessage)
}

::google::protobuf::uint8* CP2P_TextMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CP2P_TextMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes text = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CP2P_TextMessage)
  return target;
}

size_t CP2P_TextMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CP2P_TextMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes text = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CP2P_TextMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CP2P_TextMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CP2P_TextMessage* source =
      ::google::protobuf::DynamicCastToGenerated<CP2P_TextMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CP2P_TextMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CP2P_TextMessage)
    MergeFrom(*source);
  }
}

void CP2P_TextMessage::MergeFrom(const CP2P_TextMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CP2P_TextMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_text()) {
    _has_bits_[0] |= 0x00000001u;
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void CP2P_TextMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CP2P_TextMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CP2P_TextMessage::CopyFrom(const CP2P_TextMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CP2P_TextMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_TextMessage::IsInitialized() const {
  return true;
}

void CP2P_TextMessage::Swap(CP2P_TextMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CP2P_TextMessage::InternalSwap(CP2P_TextMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CP2P_TextMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_c_5fpeer2peer_5fnetmessages_2eproto);
  return ::file_level_metadata_c_5fpeer2peer_5fnetmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CSteam_Voice_Encoding::InitAsDefaultInstance() {
}
class CSteam_Voice_Encoding::HasBitSetters {
 public:
  static void set_has_voice_data(CSteam_Voice_Encoding* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSteam_Voice_Encoding::kVoiceDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSteam_Voice_Encoding::CSteam_Voice_Encoding()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSteam_Voice_Encoding)
}
CSteam_Voice_Encoding::CSteam_Voice_Encoding(const CSteam_Voice_Encoding& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  voice_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_voice_data()) {
    voice_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.voice_data_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSteam_Voice_Encoding)
}

void CSteam_Voice_Encoding::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CSteam_Voice_Encoding_c_5fpeer2peer_5fnetmessages_2eproto.base);
  voice_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CSteam_Voice_Encoding::~CSteam_Voice_Encoding() {
  // @@protoc_insertion_point(destructor:proto.dota.CSteam_Voice_Encoding)
  SharedDtor();
}

void CSteam_Voice_Encoding::SharedDtor() {
  voice_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSteam_Voice_Encoding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSteam_Voice_Encoding& CSteam_Voice_Encoding::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSteam_Voice_Encoding_c_5fpeer2peer_5fnetmessages_2eproto.base);
  return *internal_default_instance();
}


void CSteam_Voice_Encoding::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSteam_Voice_Encoding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    voice_data_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSteam_Voice_Encoding::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSteam_Voice_Encoding*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes voice_data = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_voice_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSteam_Voice_Encoding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSteam_Voice_Encoding)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes voice_data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_voice_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSteam_Voice_Encoding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSteam_Voice_Encoding)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSteam_Voice_Encoding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSteam_Voice_Encoding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes voice_data = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->voice_data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSteam_Voice_Encoding)
}

::google::protobuf::uint8* CSteam_Voice_Encoding::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSteam_Voice_Encoding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes voice_data = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->voice_data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSteam_Voice_Encoding)
  return target;
}

size_t CSteam_Voice_Encoding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSteam_Voice_Encoding)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes voice_data = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->voice_data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSteam_Voice_Encoding::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSteam_Voice_Encoding)
  GOOGLE_DCHECK_NE(&from, this);
  const CSteam_Voice_Encoding* source =
      ::google::protobuf::DynamicCastToGenerated<CSteam_Voice_Encoding>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSteam_Voice_Encoding)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSteam_Voice_Encoding)
    MergeFrom(*source);
  }
}

void CSteam_Voice_Encoding::MergeFrom(const CSteam_Voice_Encoding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSteam_Voice_Encoding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_voice_data()) {
    _has_bits_[0] |= 0x00000001u;
    voice_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.voice_data_);
  }
}

void CSteam_Voice_Encoding::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSteam_Voice_Encoding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSteam_Voice_Encoding::CopyFrom(const CSteam_Voice_Encoding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSteam_Voice_Encoding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSteam_Voice_Encoding::IsInitialized() const {
  return true;
}

void CSteam_Voice_Encoding::Swap(CSteam_Voice_Encoding* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSteam_Voice_Encoding::InternalSwap(CSteam_Voice_Encoding* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  voice_data_.Swap(&other->voice_data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CSteam_Voice_Encoding::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_c_5fpeer2peer_5fnetmessages_2eproto);
  return ::file_level_metadata_c_5fpeer2peer_5fnetmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CP2P_Voice::InitAsDefaultInstance() {
  ::proto::dota::_CP2P_Voice_default_instance_._instance.get_mutable()->audio_ = const_cast< ::proto::dota::CMsgVoiceAudio*>(
      ::proto::dota::CMsgVoiceAudio::internal_default_instance());
}
class CP2P_Voice::HasBitSetters {
 public:
  static const ::proto::dota::CMsgVoiceAudio& audio(const CP2P_Voice* msg);
  static void set_has_audio(CP2P_Voice* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_broadcast_group(CP2P_Voice* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::proto::dota::CMsgVoiceAudio&
CP2P_Voice::HasBitSetters::audio(const CP2P_Voice* msg) {
  return *msg->audio_;
}
void CP2P_Voice::clear_audio() {
  if (audio_ != nullptr) audio_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CP2P_Voice::kAudioFieldNumber;
const int CP2P_Voice::kBroadcastGroupFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CP2P_Voice::CP2P_Voice()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CP2P_Voice)
}
CP2P_Voice::CP2P_Voice(const CP2P_Voice& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_audio()) {
    audio_ = new ::proto::dota::CMsgVoiceAudio(*from.audio_);
  } else {
    audio_ = nullptr;
  }
  broadcast_group_ = from.broadcast_group_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CP2P_Voice)
}

void CP2P_Voice::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CP2P_Voice_c_5fpeer2peer_5fnetmessages_2eproto.base);
  ::memset(&audio_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&broadcast_group_) -
      reinterpret_cast<char*>(&audio_)) + sizeof(broadcast_group_));
}

CP2P_Voice::~CP2P_Voice() {
  // @@protoc_insertion_point(destructor:proto.dota.CP2P_Voice)
  SharedDtor();
}

void CP2P_Voice::SharedDtor() {
  if (this != internal_default_instance()) delete audio_;
}

void CP2P_Voice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CP2P_Voice& CP2P_Voice::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CP2P_Voice_c_5fpeer2peer_5fnetmessages_2eproto.base);
  return *internal_default_instance();
}


void CP2P_Voice::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CP2P_Voice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(audio_ != nullptr);
    audio_->Clear();
  }
  broadcast_group_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CP2P_Voice::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CP2P_Voice*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgVoiceAudio audio = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgVoiceAudio::_InternalParse;
        object = msg->mutable_audio();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 broadcast_group = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_broadcast_group(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CP2P_Voice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CP2P_Voice)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVoiceAudio audio = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_audio()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 broadcast_group = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_broadcast_group(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &broadcast_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CP2P_Voice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CP2P_Voice)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CP2P_Voice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CP2P_Voice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVoiceAudio audio = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::audio(this), output);
  }

  // optional uint32 broadcast_group = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->broadcast_group(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CP2P_Voice)
}

::google::protobuf::uint8* CP2P_Voice::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CP2P_Voice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVoiceAudio audio = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::audio(this), target);
  }

  // optional uint32 broadcast_group = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->broadcast_group(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CP2P_Voice)
  return target;
}

size_t CP2P_Voice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CP2P_Voice)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CMsgVoiceAudio audio = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *audio_);
    }

    // optional uint32 broadcast_group = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->broadcast_group());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CP2P_Voice::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CP2P_Voice)
  GOOGLE_DCHECK_NE(&from, this);
  const CP2P_Voice* source =
      ::google::protobuf::DynamicCastToGenerated<CP2P_Voice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CP2P_Voice)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CP2P_Voice)
    MergeFrom(*source);
  }
}

void CP2P_Voice::MergeFrom(const CP2P_Voice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CP2P_Voice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_audio()->::proto::dota::CMsgVoiceAudio::MergeFrom(from.audio());
    }
    if (cached_has_bits & 0x00000002u) {
      broadcast_group_ = from.broadcast_group_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CP2P_Voice::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CP2P_Voice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CP2P_Voice::CopyFrom(const CP2P_Voice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CP2P_Voice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_Voice::IsInitialized() const {
  return true;
}

void CP2P_Voice::Swap(CP2P_Voice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CP2P_Voice::InternalSwap(CP2P_Voice* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(audio_, other->audio_);
  swap(broadcast_group_, other->broadcast_group_);
}

::google::protobuf::Metadata CP2P_Voice::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_c_5fpeer2peer_5fnetmessages_2eproto);
  return ::file_level_metadata_c_5fpeer2peer_5fnetmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CP2P_Ping::InitAsDefaultInstance() {
}
class CP2P_Ping::HasBitSetters {
 public:
  static void set_has_send_time(CP2P_Ping* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_is_reply(CP2P_Ping* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CP2P_Ping::kSendTimeFieldNumber;
const int CP2P_Ping::kIsReplyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CP2P_Ping::CP2P_Ping()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CP2P_Ping)
}
CP2P_Ping::CP2P_Ping(const CP2P_Ping& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&send_time_, &from.send_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_reply_) -
    reinterpret_cast<char*>(&send_time_)) + sizeof(is_reply_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CP2P_Ping)
}

void CP2P_Ping::SharedCtor() {
  ::memset(&send_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_reply_) -
      reinterpret_cast<char*>(&send_time_)) + sizeof(is_reply_));
}

CP2P_Ping::~CP2P_Ping() {
  // @@protoc_insertion_point(destructor:proto.dota.CP2P_Ping)
  SharedDtor();
}

void CP2P_Ping::SharedDtor() {
}

void CP2P_Ping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CP2P_Ping& CP2P_Ping::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CP2P_Ping_c_5fpeer2peer_5fnetmessages_2eproto.base);
  return *internal_default_instance();
}


void CP2P_Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CP2P_Ping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&send_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_reply_) -
        reinterpret_cast<char*>(&send_time_)) + sizeof(is_reply_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CP2P_Ping::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CP2P_Ping*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint64 send_time = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_send_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required bool is_reply = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_is_reply(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CP2P_Ping::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CP2P_Ping)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 send_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_send_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &send_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_reply = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_is_reply(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_reply_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CP2P_Ping)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CP2P_Ping)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CP2P_Ping::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CP2P_Ping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 send_time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->send_time(), output);
  }

  // required bool is_reply = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_reply(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CP2P_Ping)
}

::google::protobuf::uint8* CP2P_Ping::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CP2P_Ping)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 send_time = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->send_time(), target);
  }

  // required bool is_reply = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_reply(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CP2P_Ping)
  return target;
}

size_t CP2P_Ping::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.dota.CP2P_Ping)
  size_t total_size = 0;

  if (has_send_time()) {
    // required uint64 send_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->send_time());
  }

  if (has_is_reply()) {
    // required bool is_reply = 2;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t CP2P_Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CP2P_Ping)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 send_time = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->send_time());

    // required bool is_reply = 2;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CP2P_Ping::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CP2P_Ping)
  GOOGLE_DCHECK_NE(&from, this);
  const CP2P_Ping* source =
      ::google::protobuf::DynamicCastToGenerated<CP2P_Ping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CP2P_Ping)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CP2P_Ping)
    MergeFrom(*source);
  }
}

void CP2P_Ping::MergeFrom(const CP2P_Ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CP2P_Ping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      send_time_ = from.send_time_;
    }
    if (cached_has_bits & 0x00000002u) {
      is_reply_ = from.is_reply_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CP2P_Ping::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CP2P_Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CP2P_Ping::CopyFrom(const CP2P_Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CP2P_Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_Ping::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CP2P_Ping::Swap(CP2P_Ping* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CP2P_Ping::InternalSwap(CP2P_Ping* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(send_time_, other->send_time_);
  swap(is_reply_, other->is_reply_);
}

::google::protobuf::Metadata CP2P_Ping::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_c_5fpeer2peer_5fnetmessages_2eproto);
  return ::file_level_metadata_c_5fpeer2peer_5fnetmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CP2P_VRAvatarPosition_COrientation::InitAsDefaultInstance() {
  ::proto::dota::_CP2P_VRAvatarPosition_COrientation_default_instance_._instance.get_mutable()->pos_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  ::proto::dota::_CP2P_VRAvatarPosition_COrientation_default_instance_._instance.get_mutable()->ang_ = const_cast< ::proto::dota::CMsgQAngle*>(
      ::proto::dota::CMsgQAngle::internal_default_instance());
}
class CP2P_VRAvatarPosition_COrientation::HasBitSetters {
 public:
  static const ::proto::dota::CMsgVector& pos(const CP2P_VRAvatarPosition_COrientation* msg);
  static void set_has_pos(CP2P_VRAvatarPosition_COrientation* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::dota::CMsgQAngle& ang(const CP2P_VRAvatarPosition_COrientation* msg);
  static void set_has_ang(CP2P_VRAvatarPosition_COrientation* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::proto::dota::CMsgVector&
CP2P_VRAvatarPosition_COrientation::HasBitSetters::pos(const CP2P_VRAvatarPosition_COrientation* msg) {
  return *msg->pos_;
}
const ::proto::dota::CMsgQAngle&
CP2P_VRAvatarPosition_COrientation::HasBitSetters::ang(const CP2P_VRAvatarPosition_COrientation* msg) {
  return *msg->ang_;
}
void CP2P_VRAvatarPosition_COrientation::clear_pos() {
  if (pos_ != nullptr) pos_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CP2P_VRAvatarPosition_COrientation::clear_ang() {
  if (ang_ != nullptr) ang_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CP2P_VRAvatarPosition_COrientation::kPosFieldNumber;
const int CP2P_VRAvatarPosition_COrientation::kAngFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CP2P_VRAvatarPosition_COrientation::CP2P_VRAvatarPosition_COrientation()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CP2P_VRAvatarPosition.COrientation)
}
CP2P_VRAvatarPosition_COrientation::CP2P_VRAvatarPosition_COrientation(const CP2P_VRAvatarPosition_COrientation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::proto::dota::CMsgVector(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from.has_ang()) {
    ang_ = new ::proto::dota::CMsgQAngle(*from.ang_);
  } else {
    ang_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CP2P_VRAvatarPosition.COrientation)
}

void CP2P_VRAvatarPosition_COrientation::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CP2P_VRAvatarPosition_COrientation_c_5fpeer2peer_5fnetmessages_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ang_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(ang_));
}

CP2P_VRAvatarPosition_COrientation::~CP2P_VRAvatarPosition_COrientation() {
  // @@protoc_insertion_point(destructor:proto.dota.CP2P_VRAvatarPosition.COrientation)
  SharedDtor();
}

void CP2P_VRAvatarPosition_COrientation::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete ang_;
}

void CP2P_VRAvatarPosition_COrientation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CP2P_VRAvatarPosition_COrientation& CP2P_VRAvatarPosition_COrientation::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CP2P_VRAvatarPosition_COrientation_c_5fpeer2peer_5fnetmessages_2eproto.base);
  return *internal_default_instance();
}


void CP2P_VRAvatarPosition_COrientation::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CP2P_VRAvatarPosition.COrientation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pos_ != nullptr);
      pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(ang_ != nullptr);
      ang_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CP2P_VRAvatarPosition_COrientation::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CP2P_VRAvatarPosition_COrientation*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgVector pos = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgVector::_InternalParse;
        object = msg->mutable_pos();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgQAngle ang = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgQAngle::_InternalParse;
        object = msg->mutable_ang();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CP2P_VRAvatarPosition_COrientation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CP2P_VRAvatarPosition.COrientation)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgQAngle ang = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ang()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CP2P_VRAvatarPosition.COrientation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CP2P_VRAvatarPosition.COrientation)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CP2P_VRAvatarPosition_COrientation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CP2P_VRAvatarPosition.COrientation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector pos = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::pos(this), output);
  }

  // optional .proto.dota.CMsgQAngle ang = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::ang(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CP2P_VRAvatarPosition.COrientation)
}

::google::protobuf::uint8* CP2P_VRAvatarPosition_COrientation::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CP2P_VRAvatarPosition.COrientation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::pos(this), target);
  }

  // optional .proto.dota.CMsgQAngle ang = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::ang(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CP2P_VRAvatarPosition.COrientation)
  return target;
}

size_t CP2P_VRAvatarPosition_COrientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CP2P_VRAvatarPosition.COrientation)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CMsgVector pos = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *pos_);
    }

    // optional .proto.dota.CMsgQAngle ang = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ang_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CP2P_VRAvatarPosition_COrientation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CP2P_VRAvatarPosition.COrientation)
  GOOGLE_DCHECK_NE(&from, this);
  const CP2P_VRAvatarPosition_COrientation* source =
      ::google::protobuf::DynamicCastToGenerated<CP2P_VRAvatarPosition_COrientation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CP2P_VRAvatarPosition.COrientation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CP2P_VRAvatarPosition.COrientation)
    MergeFrom(*source);
  }
}

void CP2P_VRAvatarPosition_COrientation::MergeFrom(const CP2P_VRAvatarPosition_COrientation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CP2P_VRAvatarPosition.COrientation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pos()->::proto::dota::CMsgVector::MergeFrom(from.pos());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_ang()->::proto::dota::CMsgQAngle::MergeFrom(from.ang());
    }
  }
}

void CP2P_VRAvatarPosition_COrientation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CP2P_VRAvatarPosition.COrientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CP2P_VRAvatarPosition_COrientation::CopyFrom(const CP2P_VRAvatarPosition_COrientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CP2P_VRAvatarPosition.COrientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_VRAvatarPosition_COrientation::IsInitialized() const {
  return true;
}

void CP2P_VRAvatarPosition_COrientation::Swap(CP2P_VRAvatarPosition_COrientation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CP2P_VRAvatarPosition_COrientation::InternalSwap(CP2P_VRAvatarPosition_COrientation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pos_, other->pos_);
  swap(ang_, other->ang_);
}

::google::protobuf::Metadata CP2P_VRAvatarPosition_COrientation::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_c_5fpeer2peer_5fnetmessages_2eproto);
  return ::file_level_metadata_c_5fpeer2peer_5fnetmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CP2P_VRAvatarPosition::InitAsDefaultInstance() {
}
class CP2P_VRAvatarPosition::HasBitSetters {
 public:
  static void set_has_hat_id(CP2P_VRAvatarPosition* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_scene_id(CP2P_VRAvatarPosition* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_world_scale(CP2P_VRAvatarPosition* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CP2P_VRAvatarPosition::kBodyPartsFieldNumber;
const int CP2P_VRAvatarPosition::kHatIdFieldNumber;
const int CP2P_VRAvatarPosition::kSceneIdFieldNumber;
const int CP2P_VRAvatarPosition::kWorldScaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CP2P_VRAvatarPosition::CP2P_VRAvatarPosition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CP2P_VRAvatarPosition)
}
CP2P_VRAvatarPosition::CP2P_VRAvatarPosition(const CP2P_VRAvatarPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      body_parts_(from.body_parts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hat_id_, &from.hat_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&world_scale_) -
    reinterpret_cast<char*>(&hat_id_)) + sizeof(world_scale_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CP2P_VRAvatarPosition)
}

void CP2P_VRAvatarPosition::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CP2P_VRAvatarPosition_c_5fpeer2peer_5fnetmessages_2eproto.base);
  ::memset(&hat_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&world_scale_) -
      reinterpret_cast<char*>(&hat_id_)) + sizeof(world_scale_));
}

CP2P_VRAvatarPosition::~CP2P_VRAvatarPosition() {
  // @@protoc_insertion_point(destructor:proto.dota.CP2P_VRAvatarPosition)
  SharedDtor();
}

void CP2P_VRAvatarPosition::SharedDtor() {
}

void CP2P_VRAvatarPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CP2P_VRAvatarPosition& CP2P_VRAvatarPosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CP2P_VRAvatarPosition_c_5fpeer2peer_5fnetmessages_2eproto.base);
  return *internal_default_instance();
}


void CP2P_VRAvatarPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CP2P_VRAvatarPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  body_parts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&hat_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&world_scale_) -
        reinterpret_cast<char*>(&hat_id_)) + sizeof(world_scale_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CP2P_VRAvatarPosition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CP2P_VRAvatarPosition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CP2P_VRAvatarPosition.COrientation body_parts = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CP2P_VRAvatarPosition_COrientation::_InternalParse;
          object = msg->add_body_parts();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional int32 hat_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_hat_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 scene_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_scene_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 world_scale = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_world_scale(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CP2P_VRAvatarPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CP2P_VRAvatarPosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CP2P_VRAvatarPosition.COrientation body_parts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_body_parts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hat_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_hat_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hat_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 scene_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_scene_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &scene_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 world_scale = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_world_scale(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &world_scale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CP2P_VRAvatarPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CP2P_VRAvatarPosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CP2P_VRAvatarPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CP2P_VRAvatarPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CP2P_VRAvatarPosition.COrientation body_parts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->body_parts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->body_parts(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 hat_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hat_id(), output);
  }

  // optional int32 scene_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->scene_id(), output);
  }

  // optional int32 world_scale = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->world_scale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CP2P_VRAvatarPosition)
}

::google::protobuf::uint8* CP2P_VRAvatarPosition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CP2P_VRAvatarPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CP2P_VRAvatarPosition.COrientation body_parts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->body_parts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->body_parts(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 hat_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hat_id(), target);
  }

  // optional int32 scene_id = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->scene_id(), target);
  }

  // optional int32 world_scale = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->world_scale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CP2P_VRAvatarPosition)
  return target;
}

size_t CP2P_VRAvatarPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CP2P_VRAvatarPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CP2P_VRAvatarPosition.COrientation body_parts = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->body_parts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->body_parts(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 hat_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hat_id());
    }

    // optional int32 scene_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->scene_id());
    }

    // optional int32 world_scale = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->world_scale());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CP2P_VRAvatarPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CP2P_VRAvatarPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CP2P_VRAvatarPosition* source =
      ::google::protobuf::DynamicCastToGenerated<CP2P_VRAvatarPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CP2P_VRAvatarPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CP2P_VRAvatarPosition)
    MergeFrom(*source);
  }
}

void CP2P_VRAvatarPosition::MergeFrom(const CP2P_VRAvatarPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CP2P_VRAvatarPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  body_parts_.MergeFrom(from.body_parts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hat_id_ = from.hat_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      scene_id_ = from.scene_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      world_scale_ = from.world_scale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CP2P_VRAvatarPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CP2P_VRAvatarPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CP2P_VRAvatarPosition::CopyFrom(const CP2P_VRAvatarPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CP2P_VRAvatarPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_VRAvatarPosition::IsInitialized() const {
  return true;
}

void CP2P_VRAvatarPosition::Swap(CP2P_VRAvatarPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CP2P_VRAvatarPosition::InternalSwap(CP2P_VRAvatarPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&body_parts_)->InternalSwap(CastToBase(&other->body_parts_));
  swap(hat_id_, other->hat_id_);
  swap(scene_id_, other->scene_id_);
  swap(world_scale_, other->world_scale_);
}

::google::protobuf::Metadata CP2P_VRAvatarPosition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_c_5fpeer2peer_5fnetmessages_2eproto);
  return ::file_level_metadata_c_5fpeer2peer_5fnetmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CP2P_WatchSynchronization::InitAsDefaultInstance() {
}
class CP2P_WatchSynchronization::HasBitSetters {
 public:
  static void set_has_demo_tick(CP2P_WatchSynchronization* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_paused(CP2P_WatchSynchronization* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_tv_listen_voice_indices(CP2P_WatchSynchronization* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_dota_spectator_mode(CP2P_WatchSynchronization* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_dota_spectator_watching_broadcaster(CP2P_WatchSynchronization* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_dota_spectator_hero_index(CP2P_WatchSynchronization* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_dota_spectator_autospeed(CP2P_WatchSynchronization* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_dota_replay_speed(CP2P_WatchSynchronization* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CP2P_WatchSynchronization::kDemoTickFieldNumber;
const int CP2P_WatchSynchronization::kPausedFieldNumber;
const int CP2P_WatchSynchronization::kTvListenVoiceIndicesFieldNumber;
const int CP2P_WatchSynchronization::kDotaSpectatorModeFieldNumber;
const int CP2P_WatchSynchronization::kDotaSpectatorWatchingBroadcasterFieldNumber;
const int CP2P_WatchSynchronization::kDotaSpectatorHeroIndexFieldNumber;
const int CP2P_WatchSynchronization::kDotaSpectatorAutospeedFieldNumber;
const int CP2P_WatchSynchronization::kDotaReplaySpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CP2P_WatchSynchronization::CP2P_WatchSynchronization()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CP2P_WatchSynchronization)
}
CP2P_WatchSynchronization::CP2P_WatchSynchronization(const CP2P_WatchSynchronization& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&demo_tick_, &from.demo_tick_,
    static_cast<size_t>(reinterpret_cast<char*>(&dota_replay_speed_) -
    reinterpret_cast<char*>(&demo_tick_)) + sizeof(dota_replay_speed_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CP2P_WatchSynchronization)
}

void CP2P_WatchSynchronization::SharedCtor() {
  ::memset(&demo_tick_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dota_replay_speed_) -
      reinterpret_cast<char*>(&demo_tick_)) + sizeof(dota_replay_speed_));
}

CP2P_WatchSynchronization::~CP2P_WatchSynchronization() {
  // @@protoc_insertion_point(destructor:proto.dota.CP2P_WatchSynchronization)
  SharedDtor();
}

void CP2P_WatchSynchronization::SharedDtor() {
}

void CP2P_WatchSynchronization::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CP2P_WatchSynchronization& CP2P_WatchSynchronization::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CP2P_WatchSynchronization_c_5fpeer2peer_5fnetmessages_2eproto.base);
  return *internal_default_instance();
}


void CP2P_WatchSynchronization::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CP2P_WatchSynchronization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&demo_tick_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dota_replay_speed_) -
        reinterpret_cast<char*>(&demo_tick_)) + sizeof(dota_replay_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CP2P_WatchSynchronization::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CP2P_WatchSynchronization*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 demo_tick = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_demo_tick(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool paused = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_paused(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 tv_listen_voice_indices = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_tv_listen_voice_indices(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 dota_spectator_mode = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_dota_spectator_mode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 dota_spectator_watching_broadcaster = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_dota_spectator_watching_broadcaster(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 dota_spectator_hero_index = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_dota_spectator_hero_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 dota_spectator_autospeed = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_dota_spectator_autospeed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 dota_replay_speed = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_dota_replay_speed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CP2P_WatchSynchronization::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CP2P_WatchSynchronization)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 demo_tick = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_demo_tick(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &demo_tick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool paused = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_paused(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &paused_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tv_listen_voice_indices = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_tv_listen_voice_indices(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tv_listen_voice_indices_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dota_spectator_mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_dota_spectator_mode(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dota_spectator_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dota_spectator_watching_broadcaster = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_dota_spectator_watching_broadcaster(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dota_spectator_watching_broadcaster_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dota_spectator_hero_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_dota_spectator_hero_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dota_spectator_hero_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dota_spectator_autospeed = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_dota_spectator_autospeed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dota_spectator_autospeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 dota_replay_speed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_dota_replay_speed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dota_replay_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CP2P_WatchSynchronization)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CP2P_WatchSynchronization)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CP2P_WatchSynchronization::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CP2P_WatchSynchronization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 demo_tick = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->demo_tick(), output);
  }

  // optional bool paused = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->paused(), output);
  }

  // optional int32 tv_listen_voice_indices = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tv_listen_voice_indices(), output);
  }

  // optional int32 dota_spectator_mode = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dota_spectator_mode(), output);
  }

  // optional int32 dota_spectator_watching_broadcaster = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dota_spectator_watching_broadcaster(), output);
  }

  // optional int32 dota_spectator_hero_index = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dota_spectator_hero_index(), output);
  }

  // optional int32 dota_spectator_autospeed = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->dota_spectator_autospeed(), output);
  }

  // optional int32 dota_replay_speed = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->dota_replay_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CP2P_WatchSynchronization)
}

::google::protobuf::uint8* CP2P_WatchSynchronization::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CP2P_WatchSynchronization)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 demo_tick = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->demo_tick(), target);
  }

  // optional bool paused = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->paused(), target);
  }

  // optional int32 tv_listen_voice_indices = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tv_listen_voice_indices(), target);
  }

  // optional int32 dota_spectator_mode = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dota_spectator_mode(), target);
  }

  // optional int32 dota_spectator_watching_broadcaster = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dota_spectator_watching_broadcaster(), target);
  }

  // optional int32 dota_spectator_hero_index = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->dota_spectator_hero_index(), target);
  }

  // optional int32 dota_spectator_autospeed = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->dota_spectator_autospeed(), target);
  }

  // optional int32 dota_replay_speed = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->dota_replay_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CP2P_WatchSynchronization)
  return target;
}

size_t CP2P_WatchSynchronization::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CP2P_WatchSynchronization)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional int32 demo_tick = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->demo_tick());
    }

    // optional bool paused = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional int32 tv_listen_voice_indices = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tv_listen_voice_indices());
    }

    // optional int32 dota_spectator_mode = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dota_spectator_mode());
    }

    // optional int32 dota_spectator_watching_broadcaster = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dota_spectator_watching_broadcaster());
    }

    // optional int32 dota_spectator_hero_index = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dota_spectator_hero_index());
    }

    // optional int32 dota_spectator_autospeed = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dota_spectator_autospeed());
    }

    // optional int32 dota_replay_speed = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dota_replay_speed());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CP2P_WatchSynchronization::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CP2P_WatchSynchronization)
  GOOGLE_DCHECK_NE(&from, this);
  const CP2P_WatchSynchronization* source =
      ::google::protobuf::DynamicCastToGenerated<CP2P_WatchSynchronization>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CP2P_WatchSynchronization)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CP2P_WatchSynchronization)
    MergeFrom(*source);
  }
}

void CP2P_WatchSynchronization::MergeFrom(const CP2P_WatchSynchronization& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CP2P_WatchSynchronization)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      demo_tick_ = from.demo_tick_;
    }
    if (cached_has_bits & 0x00000002u) {
      paused_ = from.paused_;
    }
    if (cached_has_bits & 0x00000004u) {
      tv_listen_voice_indices_ = from.tv_listen_voice_indices_;
    }
    if (cached_has_bits & 0x00000008u) {
      dota_spectator_mode_ = from.dota_spectator_mode_;
    }
    if (cached_has_bits & 0x00000010u) {
      dota_spectator_watching_broadcaster_ = from.dota_spectator_watching_broadcaster_;
    }
    if (cached_has_bits & 0x00000020u) {
      dota_spectator_hero_index_ = from.dota_spectator_hero_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      dota_spectator_autospeed_ = from.dota_spectator_autospeed_;
    }
    if (cached_has_bits & 0x00000080u) {
      dota_replay_speed_ = from.dota_replay_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CP2P_WatchSynchronization::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CP2P_WatchSynchronization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CP2P_WatchSynchronization::CopyFrom(const CP2P_WatchSynchronization& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CP2P_WatchSynchronization)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CP2P_WatchSynchronization::IsInitialized() const {
  return true;
}

void CP2P_WatchSynchronization::Swap(CP2P_WatchSynchronization* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CP2P_WatchSynchronization::InternalSwap(CP2P_WatchSynchronization* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(demo_tick_, other->demo_tick_);
  swap(paused_, other->paused_);
  swap(tv_listen_voice_indices_, other->tv_listen_voice_indices_);
  swap(dota_spectator_mode_, other->dota_spectator_mode_);
  swap(dota_spectator_watching_broadcaster_, other->dota_spectator_watching_broadcaster_);
  swap(dota_spectator_hero_index_, other->dota_spectator_hero_index_);
  swap(dota_spectator_autospeed_, other->dota_spectator_autospeed_);
  swap(dota_replay_speed_, other->dota_replay_speed_);
}

::google::protobuf::Metadata CP2P_WatchSynchronization::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_c_5fpeer2peer_5fnetmessages_2eproto);
  return ::file_level_metadata_c_5fpeer2peer_5fnetmessages_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::dota::CP2P_TextMessage* Arena::CreateMaybeMessage< ::proto::dota::CP2P_TextMessage >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CP2P_TextMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CSteam_Voice_Encoding* Arena::CreateMaybeMessage< ::proto::dota::CSteam_Voice_Encoding >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSteam_Voice_Encoding >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CP2P_Voice* Arena::CreateMaybeMessage< ::proto::dota::CP2P_Voice >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CP2P_Voice >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CP2P_Ping* Arena::CreateMaybeMessage< ::proto::dota::CP2P_Ping >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CP2P_Ping >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CP2P_VRAvatarPosition_COrientation* Arena::CreateMaybeMessage< ::proto::dota::CP2P_VRAvatarPosition_COrientation >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CP2P_VRAvatarPosition_COrientation >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CP2P_VRAvatarPosition* Arena::CreateMaybeMessage< ::proto::dota::CP2P_VRAvatarPosition >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CP2P_VRAvatarPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CP2P_WatchSynchronization* Arena::CreateMaybeMessage< ::proto::dota::CP2P_WatchSynchronization >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CP2P_WatchSynchronization >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
