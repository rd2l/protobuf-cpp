// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clientmessages.proto

#include "clientmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

namespace proto {
namespace dota {
class CClientMsg_CustomGameEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CClientMsg_CustomGameEvent> _instance;
} _CClientMsg_CustomGameEvent_default_instance_;
class CClientMsg_CustomGameEventBounceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CClientMsg_CustomGameEventBounce> _instance;
} _CClientMsg_CustomGameEventBounce_default_instance_;
class CClientMsg_ClientUIEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CClientMsg_ClientUIEvent> _instance;
} _CClientMsg_ClientUIEvent_default_instance_;
class CClientMsg_DevPaletteVisibilityChangedEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CClientMsg_DevPaletteVisibilityChangedEvent> _instance;
} _CClientMsg_DevPaletteVisibilityChangedEvent_default_instance_;
class CClientMsg_WorldUIControllerHasPanelChangedEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CClientMsg_WorldUIControllerHasPanelChangedEvent> _instance;
} _CClientMsg_WorldUIControllerHasPanelChangedEvent_default_instance_;
class CClientMsg_RotateAnchorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CClientMsg_RotateAnchor> _instance;
} _CClientMsg_RotateAnchor_default_instance_;
}  // namespace dota
}  // namespace proto
static void InitDefaultsCClientMsg_CustomGameEvent_clientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CClientMsg_CustomGameEvent_default_instance_;
    new (ptr) ::proto::dota::CClientMsg_CustomGameEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CClientMsg_CustomGameEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CClientMsg_CustomGameEvent_clientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCClientMsg_CustomGameEvent_clientmessages_2eproto}, {}};

static void InitDefaultsCClientMsg_CustomGameEventBounce_clientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CClientMsg_CustomGameEventBounce_default_instance_;
    new (ptr) ::proto::dota::CClientMsg_CustomGameEventBounce();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CClientMsg_CustomGameEventBounce::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CClientMsg_CustomGameEventBounce_clientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCClientMsg_CustomGameEventBounce_clientmessages_2eproto}, {}};

static void InitDefaultsCClientMsg_ClientUIEvent_clientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CClientMsg_ClientUIEvent_default_instance_;
    new (ptr) ::proto::dota::CClientMsg_ClientUIEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CClientMsg_ClientUIEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CClientMsg_ClientUIEvent_clientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCClientMsg_ClientUIEvent_clientmessages_2eproto}, {}};

static void InitDefaultsCClientMsg_DevPaletteVisibilityChangedEvent_clientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CClientMsg_DevPaletteVisibilityChangedEvent_default_instance_;
    new (ptr) ::proto::dota::CClientMsg_DevPaletteVisibilityChangedEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CClientMsg_DevPaletteVisibilityChangedEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CClientMsg_DevPaletteVisibilityChangedEvent_clientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCClientMsg_DevPaletteVisibilityChangedEvent_clientmessages_2eproto}, {}};

static void InitDefaultsCClientMsg_WorldUIControllerHasPanelChangedEvent_clientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CClientMsg_WorldUIControllerHasPanelChangedEvent_default_instance_;
    new (ptr) ::proto::dota::CClientMsg_WorldUIControllerHasPanelChangedEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CClientMsg_WorldUIControllerHasPanelChangedEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CClientMsg_WorldUIControllerHasPanelChangedEvent_clientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCClientMsg_WorldUIControllerHasPanelChangedEvent_clientmessages_2eproto}, {}};

static void InitDefaultsCClientMsg_RotateAnchor_clientmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CClientMsg_RotateAnchor_default_instance_;
    new (ptr) ::proto::dota::CClientMsg_RotateAnchor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CClientMsg_RotateAnchor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CClientMsg_RotateAnchor_clientmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCClientMsg_RotateAnchor_clientmessages_2eproto}, {}};

void InitDefaults_clientmessages_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CClientMsg_CustomGameEvent_clientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CClientMsg_CustomGameEventBounce_clientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CClientMsg_ClientUIEvent_clientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CClientMsg_DevPaletteVisibilityChangedEvent_clientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CClientMsg_WorldUIControllerHasPanelChangedEvent_clientmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CClientMsg_RotateAnchor_clientmessages_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_clientmessages_2eproto[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_clientmessages_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_clientmessages_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_clientmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::dota::CClientMsg_CustomGameEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CClientMsg_CustomGameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CClientMsg_CustomGameEvent, event_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CClientMsg_CustomGameEvent, data_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CClientMsg_CustomGameEventBounce, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CClientMsg_CustomGameEventBounce, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CClientMsg_CustomGameEventBounce, event_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CClientMsg_CustomGameEventBounce, data_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CClientMsg_CustomGameEventBounce, player_index_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CClientMsg_ClientUIEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CClientMsg_ClientUIEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CClientMsg_ClientUIEvent, event_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CClientMsg_ClientUIEvent, ent_ehandle_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CClientMsg_ClientUIEvent, client_ehandle_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CClientMsg_ClientUIEvent, data1_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CClientMsg_ClientUIEvent, data2_),
  2,
  3,
  4,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CClientMsg_DevPaletteVisibilityChangedEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CClientMsg_DevPaletteVisibilityChangedEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CClientMsg_DevPaletteVisibilityChangedEvent, visible_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CClientMsg_WorldUIControllerHasPanelChangedEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CClientMsg_WorldUIControllerHasPanelChangedEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CClientMsg_WorldUIControllerHasPanelChangedEvent, has_panel_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CClientMsg_WorldUIControllerHasPanelChangedEvent, client_ehandle_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CClientMsg_WorldUIControllerHasPanelChangedEvent, literal_hand_type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CClientMsg_RotateAnchor, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CClientMsg_RotateAnchor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CClientMsg_RotateAnchor, angle_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::proto::dota::CClientMsg_CustomGameEvent)},
  { 9, 17, sizeof(::proto::dota::CClientMsg_CustomGameEventBounce)},
  { 20, 30, sizeof(::proto::dota::CClientMsg_ClientUIEvent)},
  { 35, 41, sizeof(::proto::dota::CClientMsg_DevPaletteVisibilityChangedEvent)},
  { 42, 50, sizeof(::proto::dota::CClientMsg_WorldUIControllerHasPanelChangedEvent)},
  { 53, 59, sizeof(::proto::dota::CClientMsg_RotateAnchor)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CClientMsg_CustomGameEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CClientMsg_CustomGameEventBounce_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CClientMsg_ClientUIEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CClientMsg_DevPaletteVisibilityChangedEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CClientMsg_WorldUIControllerHasPanelChangedEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CClientMsg_RotateAnchor_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_clientmessages_2eproto = {
  {}, AddDescriptors_clientmessages_2eproto, "clientmessages.proto", schemas,
  file_default_instances, TableStruct_clientmessages_2eproto::offsets,
  file_level_metadata_clientmessages_2eproto, 6, file_level_enum_descriptors_clientmessages_2eproto, file_level_service_descriptors_clientmessages_2eproto,
};

const char descriptor_table_protodef_clientmessages_2eproto[] =
  "\n\024clientmessages.proto\022\nproto.dota\">\n\032CC"
  "lientMsg_CustomGameEvent\022\022\n\nevent_name\030\001"
  " \001(\t\022\014\n\004data\030\002 \001(\014\"Z\n CClientMsg_CustomG"
  "ameEventBounce\022\022\n\nevent_name\030\001 \001(\t\022\014\n\004da"
  "ta\030\002 \001(\014\022\024\n\014player_index\030\003 \001(\005\"\250\001\n\030CClie"
  "ntMsg_ClientUIEvent\022A\n\005event\030\001 \001(\0162\032.pro"
  "to.dota.EClientUIEvent:\026EClientUIEvent_I"
  "nvalid\022\023\n\013ent_ehandle\030\002 \001(\r\022\026\n\016client_eh"
  "andle\030\003 \001(\r\022\r\n\005data1\030\004 \001(\t\022\r\n\005data2\030\005 \001("
  "\t\">\n+CClientMsg_DevPaletteVisibilityChan"
  "gedEvent\022\017\n\007visible\030\001 \001(\010\"x\n0CClientMsg_"
  "WorldUIControllerHasPanelChangedEvent\022\021\n"
  "\thas_panel\030\001 \001(\010\022\026\n\016client_ehandle\030\002 \001(\r"
  "\022\031\n\021literal_hand_type\030\003 \001(\r\"(\n\027CClientMs"
  "g_RotateAnchor\022\r\n\005angle\030\001 \001(\002*\333\001\n\023EBaseC"
  "lientMessages\022\027\n\022CM_CustomGameEvent\020\230\002\022\035"
  "\n\030CM_CustomGameEventBounce\020\231\002\022\025\n\020CM_Clie"
  "ntUIEvent\020\232\002\022#\n\036CM_DevPaletteVisibilityC"
  "hanged\020\233\002\022(\n#CM_WorldUIControllerHasPane"
  "lChanged\020\234\002\022\024\n\017CM_RotateAnchor\020\235\002\022\020\n\013CM_"
  "MAX_BASE\020\254\002*n\n\016EClientUIEvent\022\032\n\026EClient"
  "UIEvent_Invalid\020\000\022!\n\035EClientUIEvent_Dial"
  "ogFinished\020\001\022\035\n\031EClientUIEvent_FireOutpu"
  "t\020\002B\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_clientmessages_2eproto = {
  false, InitDefaults_clientmessages_2eproto, 
  descriptor_table_protodef_clientmessages_2eproto,
  "clientmessages.proto", &assign_descriptors_table_clientmessages_2eproto, 930,
};

void AddDescriptors_clientmessages_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_clientmessages_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_clientmessages_2eproto = []() { AddDescriptors_clientmessages_2eproto(); return true; }();
namespace proto {
namespace dota {
const ::google::protobuf::EnumDescriptor* EBaseClientMessages_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_clientmessages_2eproto);
  return file_level_enum_descriptors_clientmessages_2eproto[0];
}
bool EBaseClientMessages_IsValid(int value) {
  switch (value) {
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 300:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EClientUIEvent_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_clientmessages_2eproto);
  return file_level_enum_descriptors_clientmessages_2eproto[1];
}
bool EClientUIEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CClientMsg_CustomGameEvent::InitAsDefaultInstance() {
}
class CClientMsg_CustomGameEvent::HasBitSetters {
 public:
  static void set_has_event_name(CClientMsg_CustomGameEvent* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_data(CClientMsg_CustomGameEvent* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CClientMsg_CustomGameEvent::kEventNameFieldNumber;
const int CClientMsg_CustomGameEvent::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CClientMsg_CustomGameEvent::CClientMsg_CustomGameEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CClientMsg_CustomGameEvent)
}
CClientMsg_CustomGameEvent::CClientMsg_CustomGameEvent(const CClientMsg_CustomGameEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_name()) {
    event_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_name_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CClientMsg_CustomGameEvent)
}

void CClientMsg_CustomGameEvent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CClientMsg_CustomGameEvent_clientmessages_2eproto.base);
  event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CClientMsg_CustomGameEvent::~CClientMsg_CustomGameEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CClientMsg_CustomGameEvent)
  SharedDtor();
}

void CClientMsg_CustomGameEvent::SharedDtor() {
  event_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CClientMsg_CustomGameEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CClientMsg_CustomGameEvent& CClientMsg_CustomGameEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CClientMsg_CustomGameEvent_clientmessages_2eproto.base);
  return *internal_default_instance();
}


void CClientMsg_CustomGameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CClientMsg_CustomGameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      event_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CClientMsg_CustomGameEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CClientMsg_CustomGameEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string event_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CClientMsg_CustomGameEvent.event_name");
        object = msg->mutable_event_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CClientMsg_CustomGameEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CClientMsg_CustomGameEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string event_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_name().data(), static_cast<int>(this->event_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CClientMsg_CustomGameEvent.event_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CClientMsg_CustomGameEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CClientMsg_CustomGameEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CClientMsg_CustomGameEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CClientMsg_CustomGameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string event_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), static_cast<int>(this->event_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CClientMsg_CustomGameEvent.event_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_name(), output);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CClientMsg_CustomGameEvent)
}

::google::protobuf::uint8* CClientMsg_CustomGameEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CClientMsg_CustomGameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string event_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), static_cast<int>(this->event_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CClientMsg_CustomGameEvent.event_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->event_name(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CClientMsg_CustomGameEvent)
  return target;
}

size_t CClientMsg_CustomGameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CClientMsg_CustomGameEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string event_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_name());
    }

    // optional bytes data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CClientMsg_CustomGameEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CClientMsg_CustomGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CClientMsg_CustomGameEvent* source =
      ::google::protobuf::DynamicCastToGenerated<CClientMsg_CustomGameEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CClientMsg_CustomGameEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CClientMsg_CustomGameEvent)
    MergeFrom(*source);
  }
}

void CClientMsg_CustomGameEvent::MergeFrom(const CClientMsg_CustomGameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CClientMsg_CustomGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      event_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
}

void CClientMsg_CustomGameEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CClientMsg_CustomGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClientMsg_CustomGameEvent::CopyFrom(const CClientMsg_CustomGameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CClientMsg_CustomGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMsg_CustomGameEvent::IsInitialized() const {
  return true;
}

void CClientMsg_CustomGameEvent::Swap(CClientMsg_CustomGameEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CClientMsg_CustomGameEvent::InternalSwap(CClientMsg_CustomGameEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  event_name_.Swap(&other->event_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CClientMsg_CustomGameEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_clientmessages_2eproto);
  return ::file_level_metadata_clientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CClientMsg_CustomGameEventBounce::InitAsDefaultInstance() {
}
class CClientMsg_CustomGameEventBounce::HasBitSetters {
 public:
  static void set_has_event_name(CClientMsg_CustomGameEventBounce* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_data(CClientMsg_CustomGameEventBounce* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_player_index(CClientMsg_CustomGameEventBounce* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CClientMsg_CustomGameEventBounce::kEventNameFieldNumber;
const int CClientMsg_CustomGameEventBounce::kDataFieldNumber;
const int CClientMsg_CustomGameEventBounce::kPlayerIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CClientMsg_CustomGameEventBounce::CClientMsg_CustomGameEventBounce()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CClientMsg_CustomGameEventBounce)
}
CClientMsg_CustomGameEventBounce::CClientMsg_CustomGameEventBounce(const CClientMsg_CustomGameEventBounce& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_name()) {
    event_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_name_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  player_index_ = from.player_index_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CClientMsg_CustomGameEventBounce)
}

void CClientMsg_CustomGameEventBounce::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CClientMsg_CustomGameEventBounce_clientmessages_2eproto.base);
  event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  player_index_ = 0;
}

CClientMsg_CustomGameEventBounce::~CClientMsg_CustomGameEventBounce() {
  // @@protoc_insertion_point(destructor:proto.dota.CClientMsg_CustomGameEventBounce)
  SharedDtor();
}

void CClientMsg_CustomGameEventBounce::SharedDtor() {
  event_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CClientMsg_CustomGameEventBounce::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CClientMsg_CustomGameEventBounce& CClientMsg_CustomGameEventBounce::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CClientMsg_CustomGameEventBounce_clientmessages_2eproto.base);
  return *internal_default_instance();
}


void CClientMsg_CustomGameEventBounce::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CClientMsg_CustomGameEventBounce)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      event_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
  }
  player_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CClientMsg_CustomGameEventBounce::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CClientMsg_CustomGameEventBounce*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string event_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CClientMsg_CustomGameEventBounce.event_name");
        object = msg->mutable_event_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 player_index = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_player_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CClientMsg_CustomGameEventBounce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CClientMsg_CustomGameEventBounce)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string event_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_name().data(), static_cast<int>(this->event_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CClientMsg_CustomGameEventBounce.event_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 player_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_player_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CClientMsg_CustomGameEventBounce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CClientMsg_CustomGameEventBounce)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CClientMsg_CustomGameEventBounce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CClientMsg_CustomGameEventBounce)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string event_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), static_cast<int>(this->event_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CClientMsg_CustomGameEventBounce.event_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_name(), output);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // optional int32 player_index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->player_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CClientMsg_CustomGameEventBounce)
}

::google::protobuf::uint8* CClientMsg_CustomGameEventBounce::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CClientMsg_CustomGameEventBounce)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string event_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), static_cast<int>(this->event_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CClientMsg_CustomGameEventBounce.event_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->event_name(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  // optional int32 player_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->player_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CClientMsg_CustomGameEventBounce)
  return target;
}

size_t CClientMsg_CustomGameEventBounce::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CClientMsg_CustomGameEventBounce)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string event_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_name());
    }

    // optional bytes data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 player_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CClientMsg_CustomGameEventBounce::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CClientMsg_CustomGameEventBounce)
  GOOGLE_DCHECK_NE(&from, this);
  const CClientMsg_CustomGameEventBounce* source =
      ::google::protobuf::DynamicCastToGenerated<CClientMsg_CustomGameEventBounce>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CClientMsg_CustomGameEventBounce)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CClientMsg_CustomGameEventBounce)
    MergeFrom(*source);
  }
}

void CClientMsg_CustomGameEventBounce::MergeFrom(const CClientMsg_CustomGameEventBounce& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CClientMsg_CustomGameEventBounce)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      event_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000004u) {
      player_index_ = from.player_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CClientMsg_CustomGameEventBounce::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CClientMsg_CustomGameEventBounce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClientMsg_CustomGameEventBounce::CopyFrom(const CClientMsg_CustomGameEventBounce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CClientMsg_CustomGameEventBounce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMsg_CustomGameEventBounce::IsInitialized() const {
  return true;
}

void CClientMsg_CustomGameEventBounce::Swap(CClientMsg_CustomGameEventBounce* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CClientMsg_CustomGameEventBounce::InternalSwap(CClientMsg_CustomGameEventBounce* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  event_name_.Swap(&other->event_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_index_, other->player_index_);
}

::google::protobuf::Metadata CClientMsg_CustomGameEventBounce::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_clientmessages_2eproto);
  return ::file_level_metadata_clientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CClientMsg_ClientUIEvent::InitAsDefaultInstance() {
}
class CClientMsg_ClientUIEvent::HasBitSetters {
 public:
  static void set_has_event(CClientMsg_ClientUIEvent* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_ent_ehandle(CClientMsg_ClientUIEvent* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_client_ehandle(CClientMsg_ClientUIEvent* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_data1(CClientMsg_ClientUIEvent* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_data2(CClientMsg_ClientUIEvent* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CClientMsg_ClientUIEvent::kEventFieldNumber;
const int CClientMsg_ClientUIEvent::kEntEhandleFieldNumber;
const int CClientMsg_ClientUIEvent::kClientEhandleFieldNumber;
const int CClientMsg_ClientUIEvent::kData1FieldNumber;
const int CClientMsg_ClientUIEvent::kData2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CClientMsg_ClientUIEvent::CClientMsg_ClientUIEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CClientMsg_ClientUIEvent)
}
CClientMsg_ClientUIEvent::CClientMsg_ClientUIEvent(const CClientMsg_ClientUIEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data1()) {
    data1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data1_);
  }
  data2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data2()) {
    data2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data2_);
  }
  ::memcpy(&event_, &from.event_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_ehandle_) -
    reinterpret_cast<char*>(&event_)) + sizeof(client_ehandle_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CClientMsg_ClientUIEvent)
}

void CClientMsg_ClientUIEvent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CClientMsg_ClientUIEvent_clientmessages_2eproto.base);
  data1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&event_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_ehandle_) -
      reinterpret_cast<char*>(&event_)) + sizeof(client_ehandle_));
}

CClientMsg_ClientUIEvent::~CClientMsg_ClientUIEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CClientMsg_ClientUIEvent)
  SharedDtor();
}

void CClientMsg_ClientUIEvent::SharedDtor() {
  data1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CClientMsg_ClientUIEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CClientMsg_ClientUIEvent& CClientMsg_ClientUIEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CClientMsg_ClientUIEvent_clientmessages_2eproto.base);
  return *internal_default_instance();
}


void CClientMsg_ClientUIEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CClientMsg_ClientUIEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      data1_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      data2_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&event_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_ehandle_) -
        reinterpret_cast<char*>(&event_)) + sizeof(client_ehandle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CClientMsg_ClientUIEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CClientMsg_ClientUIEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.EClientUIEvent event = 1 [default = EClientUIEvent_Invalid];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EClientUIEvent_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_event(static_cast<::proto::dota::EClientUIEvent>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 ent_ehandle = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_ent_ehandle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 client_ehandle = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_client_ehandle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string data1 = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CClientMsg_ClientUIEvent.data1");
        object = msg->mutable_data1();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string data2 = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CClientMsg_ClientUIEvent.data2");
        object = msg->mutable_data2();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CClientMsg_ClientUIEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CClientMsg_ClientUIEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.EClientUIEvent event = 1 [default = EClientUIEvent_Invalid];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EClientUIEvent_IsValid(value)) {
            set_event(static_cast< ::proto::dota::EClientUIEvent >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ent_ehandle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_ent_ehandle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ent_ehandle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_ehandle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_client_ehandle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_ehandle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data1().data(), static_cast<int>(this->data1().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CClientMsg_ClientUIEvent.data1");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string data2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->data2().data(), static_cast<int>(this->data2().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CClientMsg_ClientUIEvent.data2");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CClientMsg_ClientUIEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CClientMsg_ClientUIEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CClientMsg_ClientUIEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CClientMsg_ClientUIEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EClientUIEvent event = 1 [default = EClientUIEvent_Invalid];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->event(), output);
  }

  // optional uint32 ent_ehandle = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ent_ehandle(), output);
  }

  // optional uint32 client_ehandle = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_ehandle(), output);
  }

  // optional string data1 = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data1().data(), static_cast<int>(this->data1().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CClientMsg_ClientUIEvent.data1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->data1(), output);
  }

  // optional string data2 = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data2().data(), static_cast<int>(this->data2().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CClientMsg_ClientUIEvent.data2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->data2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CClientMsg_ClientUIEvent)
}

::google::protobuf::uint8* CClientMsg_ClientUIEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CClientMsg_ClientUIEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.EClientUIEvent event = 1 [default = EClientUIEvent_Invalid];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->event(), target);
  }

  // optional uint32 ent_ehandle = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ent_ehandle(), target);
  }

  // optional uint32 client_ehandle = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_ehandle(), target);
  }

  // optional string data1 = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data1().data(), static_cast<int>(this->data1().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CClientMsg_ClientUIEvent.data1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->data1(), target);
  }

  // optional string data2 = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->data2().data(), static_cast<int>(this->data2().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CClientMsg_ClientUIEvent.data2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->data2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CClientMsg_ClientUIEvent)
  return target;
}

size_t CClientMsg_ClientUIEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CClientMsg_ClientUIEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string data1 = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data1());
    }

    // optional string data2 = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data2());
    }

    // optional .proto.dota.EClientUIEvent event = 1 [default = EClientUIEvent_Invalid];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->event());
    }

    // optional uint32 ent_ehandle = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ent_ehandle());
    }

    // optional uint32 client_ehandle = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_ehandle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CClientMsg_ClientUIEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CClientMsg_ClientUIEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CClientMsg_ClientUIEvent* source =
      ::google::protobuf::DynamicCastToGenerated<CClientMsg_ClientUIEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CClientMsg_ClientUIEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CClientMsg_ClientUIEvent)
    MergeFrom(*source);
  }
}

void CClientMsg_ClientUIEvent::MergeFrom(const CClientMsg_ClientUIEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CClientMsg_ClientUIEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data1_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      data2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data2_);
    }
    if (cached_has_bits & 0x00000004u) {
      event_ = from.event_;
    }
    if (cached_has_bits & 0x00000008u) {
      ent_ehandle_ = from.ent_ehandle_;
    }
    if (cached_has_bits & 0x00000010u) {
      client_ehandle_ = from.client_ehandle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CClientMsg_ClientUIEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CClientMsg_ClientUIEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClientMsg_ClientUIEvent::CopyFrom(const CClientMsg_ClientUIEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CClientMsg_ClientUIEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMsg_ClientUIEvent::IsInitialized() const {
  return true;
}

void CClientMsg_ClientUIEvent::Swap(CClientMsg_ClientUIEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CClientMsg_ClientUIEvent::InternalSwap(CClientMsg_ClientUIEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data1_.Swap(&other->data1_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data2_.Swap(&other->data2_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(event_, other->event_);
  swap(ent_ehandle_, other->ent_ehandle_);
  swap(client_ehandle_, other->client_ehandle_);
}

::google::protobuf::Metadata CClientMsg_ClientUIEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_clientmessages_2eproto);
  return ::file_level_metadata_clientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CClientMsg_DevPaletteVisibilityChangedEvent::InitAsDefaultInstance() {
}
class CClientMsg_DevPaletteVisibilityChangedEvent::HasBitSetters {
 public:
  static void set_has_visible(CClientMsg_DevPaletteVisibilityChangedEvent* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CClientMsg_DevPaletteVisibilityChangedEvent::kVisibleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CClientMsg_DevPaletteVisibilityChangedEvent::CClientMsg_DevPaletteVisibilityChangedEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
}
CClientMsg_DevPaletteVisibilityChangedEvent::CClientMsg_DevPaletteVisibilityChangedEvent(const CClientMsg_DevPaletteVisibilityChangedEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  visible_ = from.visible_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
}

void CClientMsg_DevPaletteVisibilityChangedEvent::SharedCtor() {
  visible_ = false;
}

CClientMsg_DevPaletteVisibilityChangedEvent::~CClientMsg_DevPaletteVisibilityChangedEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
  SharedDtor();
}

void CClientMsg_DevPaletteVisibilityChangedEvent::SharedDtor() {
}

void CClientMsg_DevPaletteVisibilityChangedEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CClientMsg_DevPaletteVisibilityChangedEvent& CClientMsg_DevPaletteVisibilityChangedEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CClientMsg_DevPaletteVisibilityChangedEvent_clientmessages_2eproto.base);
  return *internal_default_instance();
}


void CClientMsg_DevPaletteVisibilityChangedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  visible_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CClientMsg_DevPaletteVisibilityChangedEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CClientMsg_DevPaletteVisibilityChangedEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool visible = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_visible(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CClientMsg_DevPaletteVisibilityChangedEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool visible = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_visible(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &visible_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CClientMsg_DevPaletteVisibilityChangedEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool visible = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->visible(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
}

::google::protobuf::uint8* CClientMsg_DevPaletteVisibilityChangedEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool visible = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->visible(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
  return target;
}

size_t CClientMsg_DevPaletteVisibilityChangedEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool visible = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CClientMsg_DevPaletteVisibilityChangedEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CClientMsg_DevPaletteVisibilityChangedEvent* source =
      ::google::protobuf::DynamicCastToGenerated<CClientMsg_DevPaletteVisibilityChangedEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
    MergeFrom(*source);
  }
}

void CClientMsg_DevPaletteVisibilityChangedEvent::MergeFrom(const CClientMsg_DevPaletteVisibilityChangedEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_visible()) {
    set_visible(from.visible());
  }
}

void CClientMsg_DevPaletteVisibilityChangedEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClientMsg_DevPaletteVisibilityChangedEvent::CopyFrom(const CClientMsg_DevPaletteVisibilityChangedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CClientMsg_DevPaletteVisibilityChangedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMsg_DevPaletteVisibilityChangedEvent::IsInitialized() const {
  return true;
}

void CClientMsg_DevPaletteVisibilityChangedEvent::Swap(CClientMsg_DevPaletteVisibilityChangedEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CClientMsg_DevPaletteVisibilityChangedEvent::InternalSwap(CClientMsg_DevPaletteVisibilityChangedEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(visible_, other->visible_);
}

::google::protobuf::Metadata CClientMsg_DevPaletteVisibilityChangedEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_clientmessages_2eproto);
  return ::file_level_metadata_clientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CClientMsg_WorldUIControllerHasPanelChangedEvent::InitAsDefaultInstance() {
}
class CClientMsg_WorldUIControllerHasPanelChangedEvent::HasBitSetters {
 public:
  static void set_has_has_panel(CClientMsg_WorldUIControllerHasPanelChangedEvent* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_client_ehandle(CClientMsg_WorldUIControllerHasPanelChangedEvent* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_literal_hand_type(CClientMsg_WorldUIControllerHasPanelChangedEvent* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CClientMsg_WorldUIControllerHasPanelChangedEvent::kHasPanelFieldNumber;
const int CClientMsg_WorldUIControllerHasPanelChangedEvent::kClientEhandleFieldNumber;
const int CClientMsg_WorldUIControllerHasPanelChangedEvent::kLiteralHandTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CClientMsg_WorldUIControllerHasPanelChangedEvent::CClientMsg_WorldUIControllerHasPanelChangedEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
}
CClientMsg_WorldUIControllerHasPanelChangedEvent::CClientMsg_WorldUIControllerHasPanelChangedEvent(const CClientMsg_WorldUIControllerHasPanelChangedEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&has_panel_, &from.has_panel_,
    static_cast<size_t>(reinterpret_cast<char*>(&literal_hand_type_) -
    reinterpret_cast<char*>(&has_panel_)) + sizeof(literal_hand_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
}

void CClientMsg_WorldUIControllerHasPanelChangedEvent::SharedCtor() {
  ::memset(&has_panel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&literal_hand_type_) -
      reinterpret_cast<char*>(&has_panel_)) + sizeof(literal_hand_type_));
}

CClientMsg_WorldUIControllerHasPanelChangedEvent::~CClientMsg_WorldUIControllerHasPanelChangedEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
  SharedDtor();
}

void CClientMsg_WorldUIControllerHasPanelChangedEvent::SharedDtor() {
}

void CClientMsg_WorldUIControllerHasPanelChangedEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CClientMsg_WorldUIControllerHasPanelChangedEvent& CClientMsg_WorldUIControllerHasPanelChangedEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CClientMsg_WorldUIControllerHasPanelChangedEvent_clientmessages_2eproto.base);
  return *internal_default_instance();
}


void CClientMsg_WorldUIControllerHasPanelChangedEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&has_panel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&literal_hand_type_) -
        reinterpret_cast<char*>(&has_panel_)) + sizeof(literal_hand_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CClientMsg_WorldUIControllerHasPanelChangedEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CClientMsg_WorldUIControllerHasPanelChangedEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool has_panel = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_has_panel(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 client_ehandle = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_client_ehandle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 literal_hand_type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_literal_hand_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CClientMsg_WorldUIControllerHasPanelChangedEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool has_panel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_has_panel(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_panel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_ehandle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_client_ehandle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_ehandle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 literal_hand_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_literal_hand_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &literal_hand_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CClientMsg_WorldUIControllerHasPanelChangedEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_panel = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->has_panel(), output);
  }

  // optional uint32 client_ehandle = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_ehandle(), output);
  }

  // optional uint32 literal_hand_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->literal_hand_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
}

::google::protobuf::uint8* CClientMsg_WorldUIControllerHasPanelChangedEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool has_panel = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->has_panel(), target);
  }

  // optional uint32 client_ehandle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_ehandle(), target);
  }

  // optional uint32 literal_hand_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->literal_hand_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
  return target;
}

size_t CClientMsg_WorldUIControllerHasPanelChangedEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bool has_panel = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 client_ehandle = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_ehandle());
    }

    // optional uint32 literal_hand_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->literal_hand_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CClientMsg_WorldUIControllerHasPanelChangedEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CClientMsg_WorldUIControllerHasPanelChangedEvent* source =
      ::google::protobuf::DynamicCastToGenerated<CClientMsg_WorldUIControllerHasPanelChangedEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
    MergeFrom(*source);
  }
}

void CClientMsg_WorldUIControllerHasPanelChangedEvent::MergeFrom(const CClientMsg_WorldUIControllerHasPanelChangedEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      has_panel_ = from.has_panel_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_ehandle_ = from.client_ehandle_;
    }
    if (cached_has_bits & 0x00000004u) {
      literal_hand_type_ = from.literal_hand_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CClientMsg_WorldUIControllerHasPanelChangedEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClientMsg_WorldUIControllerHasPanelChangedEvent::CopyFrom(const CClientMsg_WorldUIControllerHasPanelChangedEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CClientMsg_WorldUIControllerHasPanelChangedEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMsg_WorldUIControllerHasPanelChangedEvent::IsInitialized() const {
  return true;
}

void CClientMsg_WorldUIControllerHasPanelChangedEvent::Swap(CClientMsg_WorldUIControllerHasPanelChangedEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CClientMsg_WorldUIControllerHasPanelChangedEvent::InternalSwap(CClientMsg_WorldUIControllerHasPanelChangedEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(has_panel_, other->has_panel_);
  swap(client_ehandle_, other->client_ehandle_);
  swap(literal_hand_type_, other->literal_hand_type_);
}

::google::protobuf::Metadata CClientMsg_WorldUIControllerHasPanelChangedEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_clientmessages_2eproto);
  return ::file_level_metadata_clientmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CClientMsg_RotateAnchor::InitAsDefaultInstance() {
}
class CClientMsg_RotateAnchor::HasBitSetters {
 public:
  static void set_has_angle(CClientMsg_RotateAnchor* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CClientMsg_RotateAnchor::kAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CClientMsg_RotateAnchor::CClientMsg_RotateAnchor()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CClientMsg_RotateAnchor)
}
CClientMsg_RotateAnchor::CClientMsg_RotateAnchor(const CClientMsg_RotateAnchor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  angle_ = from.angle_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CClientMsg_RotateAnchor)
}

void CClientMsg_RotateAnchor::SharedCtor() {
  angle_ = 0;
}

CClientMsg_RotateAnchor::~CClientMsg_RotateAnchor() {
  // @@protoc_insertion_point(destructor:proto.dota.CClientMsg_RotateAnchor)
  SharedDtor();
}

void CClientMsg_RotateAnchor::SharedDtor() {
}

void CClientMsg_RotateAnchor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CClientMsg_RotateAnchor& CClientMsg_RotateAnchor::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CClientMsg_RotateAnchor_clientmessages_2eproto.base);
  return *internal_default_instance();
}


void CClientMsg_RotateAnchor::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CClientMsg_RotateAnchor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  angle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CClientMsg_RotateAnchor::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CClientMsg_RotateAnchor*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional float angle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_angle(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CClientMsg_RotateAnchor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CClientMsg_RotateAnchor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float angle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_angle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CClientMsg_RotateAnchor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CClientMsg_RotateAnchor)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CClientMsg_RotateAnchor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CClientMsg_RotateAnchor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float angle = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->angle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CClientMsg_RotateAnchor)
}

::google::protobuf::uint8* CClientMsg_RotateAnchor::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CClientMsg_RotateAnchor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float angle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->angle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CClientMsg_RotateAnchor)
  return target;
}

size_t CClientMsg_RotateAnchor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CClientMsg_RotateAnchor)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float angle = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CClientMsg_RotateAnchor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CClientMsg_RotateAnchor)
  GOOGLE_DCHECK_NE(&from, this);
  const CClientMsg_RotateAnchor* source =
      ::google::protobuf::DynamicCastToGenerated<CClientMsg_RotateAnchor>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CClientMsg_RotateAnchor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CClientMsg_RotateAnchor)
    MergeFrom(*source);
  }
}

void CClientMsg_RotateAnchor::MergeFrom(const CClientMsg_RotateAnchor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CClientMsg_RotateAnchor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_angle()) {
    set_angle(from.angle());
  }
}

void CClientMsg_RotateAnchor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CClientMsg_RotateAnchor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CClientMsg_RotateAnchor::CopyFrom(const CClientMsg_RotateAnchor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CClientMsg_RotateAnchor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CClientMsg_RotateAnchor::IsInitialized() const {
  return true;
}

void CClientMsg_RotateAnchor::Swap(CClientMsg_RotateAnchor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CClientMsg_RotateAnchor::InternalSwap(CClientMsg_RotateAnchor* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(angle_, other->angle_);
}

::google::protobuf::Metadata CClientMsg_RotateAnchor::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_clientmessages_2eproto);
  return ::file_level_metadata_clientmessages_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::dota::CClientMsg_CustomGameEvent* Arena::CreateMaybeMessage< ::proto::dota::CClientMsg_CustomGameEvent >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CClientMsg_CustomGameEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CClientMsg_CustomGameEventBounce* Arena::CreateMaybeMessage< ::proto::dota::CClientMsg_CustomGameEventBounce >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CClientMsg_CustomGameEventBounce >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CClientMsg_ClientUIEvent* Arena::CreateMaybeMessage< ::proto::dota::CClientMsg_ClientUIEvent >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CClientMsg_ClientUIEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CClientMsg_DevPaletteVisibilityChangedEvent* Arena::CreateMaybeMessage< ::proto::dota::CClientMsg_DevPaletteVisibilityChangedEvent >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CClientMsg_DevPaletteVisibilityChangedEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CClientMsg_WorldUIControllerHasPanelChangedEvent* Arena::CreateMaybeMessage< ::proto::dota::CClientMsg_WorldUIControllerHasPanelChangedEvent >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CClientMsg_WorldUIControllerHasPanelChangedEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CClientMsg_RotateAnchor* Arena::CreateMaybeMessage< ::proto::dota::CClientMsg_RotateAnchor >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CClientMsg_RotateAnchor >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
