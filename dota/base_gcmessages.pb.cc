// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base_gcmessages.proto

#include "base_gcmessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_base_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CGCStorePurchaseInit_LineItem_base_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAddItemToSocketData_base_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPingData_base_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgConVarValue_base_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgCustomGameInstallStatus_base_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCClientMarketDataEntry_base_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRecipeComponent_base_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSetItemPositions_ItemPosition_base_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CSOEconItemAttribute_base_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CSOEconItemEquipped_base_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CSOItemCriteriaCondition_base_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CSOItemCriteria_base_5fgcmessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_base_5fgcmessages_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CSOEconItem_base_5fgcmessages_2eproto;
namespace proto {
namespace dota {
class CGCStorePurchaseInit_LineItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CGCStorePurchaseInit_LineItem> _instance;
} _CGCStorePurchaseInit_LineItem_default_instance_;
class CMsgGCStorePurchaseInitDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCStorePurchaseInit> _instance;
} _CMsgGCStorePurchaseInit_default_instance_;
class CMsgGCStorePurchaseInitResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCStorePurchaseInitResponse> _instance;
} _CMsgGCStorePurchaseInitResponse_default_instance_;
class CMsgSystemBroadcastDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSystemBroadcast> _instance;
} _CMsgSystemBroadcast_default_instance_;
class CMsgClientPingDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientPingData> _instance;
} _CMsgClientPingData_default_instance_;
class CMsgInviteToPartyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgInviteToParty> _instance;
} _CMsgInviteToParty_default_instance_;
class CMsgInviteToLobbyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgInviteToLobby> _instance;
} _CMsgInviteToLobby_default_instance_;
class CMsgInvitationCreatedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgInvitationCreated> _instance;
} _CMsgInvitationCreated_default_instance_;
class CMsgPartyInviteResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPartyInviteResponse> _instance;
} _CMsgPartyInviteResponse_default_instance_;
class CMsgLobbyInviteResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgLobbyInviteResponse> _instance;
} _CMsgLobbyInviteResponse_default_instance_;
class CMsgKickFromPartyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgKickFromParty> _instance;
} _CMsgKickFromParty_default_instance_;
class CMsgLeavePartyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgLeaveParty> _instance;
} _CMsgLeaveParty_default_instance_;
class CMsgCustomGameInstallStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgCustomGameInstallStatus> _instance;
} _CMsgCustomGameInstallStatus_default_instance_;
class CMsgServerAvailableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgServerAvailable> _instance;
} _CMsgServerAvailable_default_instance_;
class CMsgLANServerAvailableDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgLANServerAvailable> _instance;
} _CMsgLANServerAvailable_default_instance_;
class CSOEconGameAccountClientDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSOEconGameAccountClient> _instance;
} _CSOEconGameAccountClient_default_instance_;
class CSOItemCriteriaConditionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSOItemCriteriaCondition> _instance;
} _CSOItemCriteriaCondition_default_instance_;
class CSOItemCriteriaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSOItemCriteria> _instance;
} _CSOItemCriteria_default_instance_;
class CSOItemRecipeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSOItemRecipe> _instance;
} _CSOItemRecipe_default_instance_;
class CMsgApplyStrangePartDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgApplyStrangePart> _instance;
} _CMsgApplyStrangePart_default_instance_;
class CMsgApplyPennantUpgradeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgApplyPennantUpgrade> _instance;
} _CMsgApplyPennantUpgrade_default_instance_;
class CMsgApplyEggEssenceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgApplyEggEssence> _instance;
} _CMsgApplyEggEssence_default_instance_;
class CSOEconItemAttributeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSOEconItemAttribute> _instance;
} _CSOEconItemAttribute_default_instance_;
class CSOEconItemEquippedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSOEconItemEquipped> _instance;
} _CSOEconItemEquipped_default_instance_;
class CSOEconItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSOEconItem> _instance;
} _CSOEconItem_default_instance_;
class CMsgSortItemsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSortItems> _instance;
} _CMsgSortItems_default_instance_;
class CSOEconClaimCodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSOEconClaimCode> _instance;
} _CSOEconClaimCode_default_instance_;
class CMsgUpdateItemSchemaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgUpdateItemSchema> _instance;
} _CMsgUpdateItemSchema_default_instance_;
class CMsgGCErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCError> _instance;
} _CMsgGCError_default_instance_;
class CMsgRequestInventoryRefreshDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRequestInventoryRefresh> _instance;
} _CMsgRequestInventoryRefresh_default_instance_;
class CMsgConVarValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgConVarValue> _instance;
} _CMsgConVarValue_default_instance_;
class CMsgReplicateConVarsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgReplicateConVars> _instance;
} _CMsgReplicateConVars_default_instance_;
class CMsgItemAcknowledgedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgItemAcknowledged> _instance;
} _CMsgItemAcknowledged_default_instance_;
class CMsgSetItemPositions_ItemPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetItemPositions_ItemPosition> _instance;
} _CMsgSetItemPositions_ItemPosition_default_instance_;
class CMsgSetItemPositionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSetItemPositions> _instance;
} _CMsgSetItemPositions_default_instance_;
class CMsgGCNameItemNotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCNameItemNotification> _instance;
} _CMsgGCNameItemNotification_default_instance_;
class CMsgGCClientDisplayNotificationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCClientDisplayNotification> _instance;
} _CMsgGCClientDisplayNotification_default_instance_;
class CMsgGCShowItemsPickedUpDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCShowItemsPickedUp> _instance;
} _CMsgGCShowItemsPickedUp_default_instance_;
class CMsgGCIncrementKillCountResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCIncrementKillCountResponse> _instance;
} _CMsgGCIncrementKillCountResponse_default_instance_;
class CSOEconItemDropRateBonusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSOEconItemDropRateBonus> _instance;
} _CSOEconItemDropRateBonus_default_instance_;
class CSOEconItemLeagueViewPassDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSOEconItemLeagueViewPass> _instance;
} _CSOEconItemLeagueViewPass_default_instance_;
class CSOEconItemEventTicketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSOEconItemEventTicket> _instance;
} _CSOEconItemEventTicket_default_instance_;
class CSOEconItemTournamentPassportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSOEconItemTournamentPassport> _instance;
} _CSOEconItemTournamentPassport_default_instance_;
class CMsgGCStorePurchaseCancelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCStorePurchaseCancel> _instance;
} _CMsgGCStorePurchaseCancel_default_instance_;
class CMsgGCStorePurchaseCancelResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCStorePurchaseCancelResponse> _instance;
} _CMsgGCStorePurchaseCancelResponse_default_instance_;
class CMsgGCStorePurchaseFinalizeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCStorePurchaseFinalize> _instance;
} _CMsgGCStorePurchaseFinalize_default_instance_;
class CMsgGCStorePurchaseFinalizeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCStorePurchaseFinalizeResponse> _instance;
} _CMsgGCStorePurchaseFinalizeResponse_default_instance_;
class CMsgGCToGCBannedWordListUpdatedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCBannedWordListUpdated> _instance;
} _CMsgGCToGCBannedWordListUpdated_default_instance_;
class CMsgGCToGCDirtySDOCacheDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCDirtySDOCache> _instance;
} _CMsgGCToGCDirtySDOCache_default_instance_;
class CMsgGCToGCDirtyMultipleSDOCacheDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCDirtyMultipleSDOCache> _instance;
} _CMsgGCToGCDirtyMultipleSDOCache_default_instance_;
class CMsgGCToGCApplyLocalizationDiffDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCApplyLocalizationDiff> _instance;
} _CMsgGCToGCApplyLocalizationDiff_default_instance_;
class CMsgGCToGCApplyLocalizationDiffResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCApplyLocalizationDiffResponse> _instance;
} _CMsgGCToGCApplyLocalizationDiffResponse_default_instance_;
class CMsgGCCollectItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCCollectItem> _instance;
} _CMsgGCCollectItem_default_instance_;
class CMsgSDONoMemcachedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSDONoMemcached> _instance;
} _CMsgSDONoMemcached_default_instance_;
class CMsgGCToGCUpdateSQLKeyValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCUpdateSQLKeyValue> _instance;
} _CMsgGCToGCUpdateSQLKeyValue_default_instance_;
class CMsgGCServerVersionUpdatedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCServerVersionUpdated> _instance;
} _CMsgGCServerVersionUpdated_default_instance_;
class CMsgGCClientVersionUpdatedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCClientVersionUpdated> _instance;
} _CMsgGCClientVersionUpdated_default_instance_;
class CMsgGCToGCWebAPIAccountChangedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCWebAPIAccountChanged> _instance;
} _CMsgGCToGCWebAPIAccountChanged_default_instance_;
class CMsgRecipeComponentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgRecipeComponent> _instance;
} _CMsgRecipeComponent_default_instance_;
class CMsgFulfillDynamicRecipeComponentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgFulfillDynamicRecipeComponent> _instance;
} _CMsgFulfillDynamicRecipeComponent_default_instance_;
class CMsgGCClientMarketDataRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCClientMarketDataRequest> _instance;
} _CMsgGCClientMarketDataRequest_default_instance_;
class CMsgGCClientMarketDataEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCClientMarketDataEntry> _instance;
} _CMsgGCClientMarketDataEntry_default_instance_;
class CMsgGCClientMarketDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCClientMarketData> _instance;
} _CMsgGCClientMarketData_default_instance_;
class CMsgExtractGemsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgExtractGems> _instance;
} _CMsgExtractGems_default_instance_;
class CMsgExtractGemsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgExtractGemsResponse> _instance;
} _CMsgExtractGemsResponse_default_instance_;
class CMsgAddSocketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAddSocket> _instance;
} _CMsgAddSocket_default_instance_;
class CMsgAddSocketResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAddSocketResponse> _instance;
} _CMsgAddSocketResponse_default_instance_;
class CMsgAddItemToSocketDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAddItemToSocketData> _instance;
} _CMsgAddItemToSocketData_default_instance_;
class CMsgAddItemToSocketDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAddItemToSocket> _instance;
} _CMsgAddItemToSocket_default_instance_;
class CMsgAddItemToSocketResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgAddItemToSocketResponse> _instance;
} _CMsgAddItemToSocketResponse_default_instance_;
class CMsgResetStrangeGemCountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgResetStrangeGemCount> _instance;
} _CMsgResetStrangeGemCount_default_instance_;
class CMsgResetStrangeGemCountResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgResetStrangeGemCountResponse> _instance;
} _CMsgResetStrangeGemCountResponse_default_instance_;
class CMsgGCToClientPollFileRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientPollFileRequest> _instance;
} _CMsgGCToClientPollFileRequest_default_instance_;
class CMsgGCToClientPollFileResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientPollFileResponse> _instance;
} _CMsgGCToClientPollFileResponse_default_instance_;
class CMsgGCToGCPerformManualOpDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCPerformManualOp> _instance;
} _CMsgGCToGCPerformManualOp_default_instance_;
class CMsgGCToGCPerformManualOpCompletedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCPerformManualOpCompleted> _instance;
} _CMsgGCToGCPerformManualOpCompleted_default_instance_;
class CMsgGCToGCReloadServerRegionSettingsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToGCReloadServerRegionSettings> _instance;
} _CMsgGCToGCReloadServerRegionSettings_default_instance_;
}  // namespace dota
}  // namespace proto
static void InitDefaultsCGCStorePurchaseInit_LineItem_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CGCStorePurchaseInit_LineItem_default_instance_;
    new (ptr) ::proto::dota::CGCStorePurchaseInit_LineItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CGCStorePurchaseInit_LineItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CGCStorePurchaseInit_LineItem_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCGCStorePurchaseInit_LineItem_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCStorePurchaseInit_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCStorePurchaseInit_default_instance_;
    new (ptr) ::proto::dota::CMsgGCStorePurchaseInit();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCStorePurchaseInit::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCStorePurchaseInit_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCStorePurchaseInit_base_5fgcmessages_2eproto}, {
      &scc_info_CGCStorePurchaseInit_LineItem_base_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgGCStorePurchaseInitResponse_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCStorePurchaseInitResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGCStorePurchaseInitResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCStorePurchaseInitResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCStorePurchaseInitResponse_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCStorePurchaseInitResponse_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgSystemBroadcast_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSystemBroadcast_default_instance_;
    new (ptr) ::proto::dota::CMsgSystemBroadcast();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSystemBroadcast::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSystemBroadcast_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSystemBroadcast_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgClientPingData_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgClientPingData_default_instance_;
    new (ptr) ::proto::dota::CMsgClientPingData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgClientPingData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientPingData_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientPingData_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgInviteToParty_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgInviteToParty_default_instance_;
    new (ptr) ::proto::dota::CMsgInviteToParty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgInviteToParty::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgInviteToParty_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgInviteToParty_base_5fgcmessages_2eproto}, {
      &scc_info_CMsgClientPingData_base_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgInviteToLobby_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgInviteToLobby_default_instance_;
    new (ptr) ::proto::dota::CMsgInviteToLobby();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgInviteToLobby::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgInviteToLobby_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgInviteToLobby_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgInvitationCreated_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgInvitationCreated_default_instance_;
    new (ptr) ::proto::dota::CMsgInvitationCreated();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgInvitationCreated::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgInvitationCreated_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgInvitationCreated_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgPartyInviteResponse_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPartyInviteResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgPartyInviteResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPartyInviteResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgPartyInviteResponse_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgPartyInviteResponse_base_5fgcmessages_2eproto}, {
      &scc_info_CMsgClientPingData_base_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgLobbyInviteResponse_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgLobbyInviteResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgLobbyInviteResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgLobbyInviteResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgLobbyInviteResponse_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgLobbyInviteResponse_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgKickFromParty_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgKickFromParty_default_instance_;
    new (ptr) ::proto::dota::CMsgKickFromParty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgKickFromParty::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgKickFromParty_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgKickFromParty_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgLeaveParty_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgLeaveParty_default_instance_;
    new (ptr) ::proto::dota::CMsgLeaveParty();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgLeaveParty::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgLeaveParty_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgLeaveParty_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgCustomGameInstallStatus_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgCustomGameInstallStatus_default_instance_;
    new (ptr) ::proto::dota::CMsgCustomGameInstallStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgCustomGameInstallStatus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgCustomGameInstallStatus_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgCustomGameInstallStatus_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgServerAvailable_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgServerAvailable_default_instance_;
    new (ptr) ::proto::dota::CMsgServerAvailable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgServerAvailable::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgServerAvailable_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgServerAvailable_base_5fgcmessages_2eproto}, {
      &scc_info_CMsgCustomGameInstallStatus_base_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgLANServerAvailable_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgLANServerAvailable_default_instance_;
    new (ptr) ::proto::dota::CMsgLANServerAvailable();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgLANServerAvailable::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgLANServerAvailable_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgLANServerAvailable_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCSOEconGameAccountClient_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSOEconGameAccountClient_default_instance_;
    new (ptr) ::proto::dota::CSOEconGameAccountClient();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSOEconGameAccountClient::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSOEconGameAccountClient_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSOEconGameAccountClient_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCSOItemCriteriaCondition_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSOItemCriteriaCondition_default_instance_;
    new (ptr) ::proto::dota::CSOItemCriteriaCondition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSOItemCriteriaCondition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSOItemCriteriaCondition_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSOItemCriteriaCondition_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCSOItemCriteria_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSOItemCriteria_default_instance_;
    new (ptr) ::proto::dota::CSOItemCriteria();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSOItemCriteria::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CSOItemCriteria_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCSOItemCriteria_base_5fgcmessages_2eproto}, {
      &scc_info_CSOItemCriteriaCondition_base_5fgcmessages_2eproto.base,}};

static void InitDefaultsCSOItemRecipe_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSOItemRecipe_default_instance_;
    new (ptr) ::proto::dota::CSOItemRecipe();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSOItemRecipe::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CSOItemRecipe_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCSOItemRecipe_base_5fgcmessages_2eproto}, {
      &scc_info_CSOItemCriteria_base_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgApplyStrangePart_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgApplyStrangePart_default_instance_;
    new (ptr) ::proto::dota::CMsgApplyStrangePart();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgApplyStrangePart::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgApplyStrangePart_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgApplyStrangePart_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgApplyPennantUpgrade_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgApplyPennantUpgrade_default_instance_;
    new (ptr) ::proto::dota::CMsgApplyPennantUpgrade();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgApplyPennantUpgrade::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgApplyPennantUpgrade_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgApplyPennantUpgrade_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgApplyEggEssence_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgApplyEggEssence_default_instance_;
    new (ptr) ::proto::dota::CMsgApplyEggEssence();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgApplyEggEssence::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgApplyEggEssence_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgApplyEggEssence_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCSOEconItemAttribute_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSOEconItemAttribute_default_instance_;
    new (ptr) ::proto::dota::CSOEconItemAttribute();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSOEconItemAttribute::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSOEconItemAttribute_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSOEconItemAttribute_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCSOEconItemEquipped_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSOEconItemEquipped_default_instance_;
    new (ptr) ::proto::dota::CSOEconItemEquipped();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSOEconItemEquipped::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSOEconItemEquipped_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSOEconItemEquipped_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCSOEconItem_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSOEconItem_default_instance_;
    new (ptr) ::proto::dota::CSOEconItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSOEconItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CSOEconItem_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCSOEconItem_base_5fgcmessages_2eproto}, {
      &scc_info_CSOEconItemAttribute_base_5fgcmessages_2eproto.base,
      &scc_info_CSOEconItemEquipped_base_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgSortItems_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSortItems_default_instance_;
    new (ptr) ::proto::dota::CMsgSortItems();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSortItems::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSortItems_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSortItems_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCSOEconClaimCode_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSOEconClaimCode_default_instance_;
    new (ptr) ::proto::dota::CSOEconClaimCode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSOEconClaimCode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSOEconClaimCode_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSOEconClaimCode_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgUpdateItemSchema_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgUpdateItemSchema_default_instance_;
    new (ptr) ::proto::dota::CMsgUpdateItemSchema();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgUpdateItemSchema::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgUpdateItemSchema_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgUpdateItemSchema_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCError_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCError_default_instance_;
    new (ptr) ::proto::dota::CMsgGCError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCError_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCError_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgRequestInventoryRefresh_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgRequestInventoryRefresh_default_instance_;
    new (ptr) ::proto::dota::CMsgRequestInventoryRefresh();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgRequestInventoryRefresh::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRequestInventoryRefresh_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRequestInventoryRefresh_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgConVarValue_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgConVarValue_default_instance_;
    new (ptr) ::proto::dota::CMsgConVarValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgConVarValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgConVarValue_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgConVarValue_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgReplicateConVars_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgReplicateConVars_default_instance_;
    new (ptr) ::proto::dota::CMsgReplicateConVars();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgReplicateConVars::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgReplicateConVars_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgReplicateConVars_base_5fgcmessages_2eproto}, {
      &scc_info_CMsgConVarValue_base_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgItemAcknowledged_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgItemAcknowledged_default_instance_;
    new (ptr) ::proto::dota::CMsgItemAcknowledged();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgItemAcknowledged::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgItemAcknowledged_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgItemAcknowledged_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgSetItemPositions_ItemPosition_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSetItemPositions_ItemPosition_default_instance_;
    new (ptr) ::proto::dota::CMsgSetItemPositions_ItemPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSetItemPositions_ItemPosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSetItemPositions_ItemPosition_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSetItemPositions_ItemPosition_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgSetItemPositions_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSetItemPositions_default_instance_;
    new (ptr) ::proto::dota::CMsgSetItemPositions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSetItemPositions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgSetItemPositions_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgSetItemPositions_base_5fgcmessages_2eproto}, {
      &scc_info_CMsgSetItemPositions_ItemPosition_base_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgGCNameItemNotification_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCNameItemNotification_default_instance_;
    new (ptr) ::proto::dota::CMsgGCNameItemNotification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCNameItemNotification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCNameItemNotification_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCNameItemNotification_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCClientDisplayNotification_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCClientDisplayNotification_default_instance_;
    new (ptr) ::proto::dota::CMsgGCClientDisplayNotification();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCClientDisplayNotification::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCClientDisplayNotification_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCClientDisplayNotification_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCShowItemsPickedUp_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCShowItemsPickedUp_default_instance_;
    new (ptr) ::proto::dota::CMsgGCShowItemsPickedUp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCShowItemsPickedUp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCShowItemsPickedUp_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCShowItemsPickedUp_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCIncrementKillCountResponse_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCIncrementKillCountResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGCIncrementKillCountResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCIncrementKillCountResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCIncrementKillCountResponse_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCIncrementKillCountResponse_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCSOEconItemDropRateBonus_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSOEconItemDropRateBonus_default_instance_;
    new (ptr) ::proto::dota::CSOEconItemDropRateBonus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSOEconItemDropRateBonus::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSOEconItemDropRateBonus_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSOEconItemDropRateBonus_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCSOEconItemLeagueViewPass_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSOEconItemLeagueViewPass_default_instance_;
    new (ptr) ::proto::dota::CSOEconItemLeagueViewPass();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSOEconItemLeagueViewPass::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSOEconItemLeagueViewPass_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSOEconItemLeagueViewPass_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCSOEconItemEventTicket_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSOEconItemEventTicket_default_instance_;
    new (ptr) ::proto::dota::CSOEconItemEventTicket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSOEconItemEventTicket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSOEconItemEventTicket_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSOEconItemEventTicket_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCSOEconItemTournamentPassport_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSOEconItemTournamentPassport_default_instance_;
    new (ptr) ::proto::dota::CSOEconItemTournamentPassport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSOEconItemTournamentPassport::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSOEconItemTournamentPassport_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSOEconItemTournamentPassport_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCStorePurchaseCancel_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCStorePurchaseCancel_default_instance_;
    new (ptr) ::proto::dota::CMsgGCStorePurchaseCancel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCStorePurchaseCancel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCStorePurchaseCancel_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCStorePurchaseCancel_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCStorePurchaseCancelResponse_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCStorePurchaseCancelResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGCStorePurchaseCancelResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCStorePurchaseCancelResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCStorePurchaseCancelResponse_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCStorePurchaseCancelResponse_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCStorePurchaseFinalize_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCStorePurchaseFinalize_default_instance_;
    new (ptr) ::proto::dota::CMsgGCStorePurchaseFinalize();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCStorePurchaseFinalize::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCStorePurchaseFinalize_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCStorePurchaseFinalize_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCStorePurchaseFinalizeResponse_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCStorePurchaseFinalizeResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGCStorePurchaseFinalizeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCStorePurchaseFinalizeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCStorePurchaseFinalizeResponse_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCStorePurchaseFinalizeResponse_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCToGCBannedWordListUpdated_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCBannedWordListUpdated_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCBannedWordListUpdated();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCBannedWordListUpdated::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToGCBannedWordListUpdated_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToGCBannedWordListUpdated_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCToGCDirtySDOCache_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCDirtySDOCache_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCDirtySDOCache();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCDirtySDOCache::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToGCDirtySDOCache_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToGCDirtySDOCache_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCToGCDirtyMultipleSDOCache_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCDirtyMultipleSDOCache_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCDirtyMultipleSDOCache();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCDirtyMultipleSDOCache::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToGCDirtyMultipleSDOCache_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToGCDirtyMultipleSDOCache_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCToGCApplyLocalizationDiff_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCApplyLocalizationDiff_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCApplyLocalizationDiff();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCApplyLocalizationDiff::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToGCApplyLocalizationDiff_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToGCApplyLocalizationDiff_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCToGCApplyLocalizationDiffResponse_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCApplyLocalizationDiffResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCApplyLocalizationDiffResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCApplyLocalizationDiffResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToGCApplyLocalizationDiffResponse_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToGCApplyLocalizationDiffResponse_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCCollectItem_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCCollectItem_default_instance_;
    new (ptr) ::proto::dota::CMsgGCCollectItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCCollectItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCCollectItem_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCCollectItem_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgSDONoMemcached_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSDONoMemcached_default_instance_;
    new (ptr) ::proto::dota::CMsgSDONoMemcached();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSDONoMemcached::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSDONoMemcached_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSDONoMemcached_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCToGCUpdateSQLKeyValue_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCUpdateSQLKeyValue_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCUpdateSQLKeyValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCUpdateSQLKeyValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToGCUpdateSQLKeyValue_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToGCUpdateSQLKeyValue_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCServerVersionUpdated_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCServerVersionUpdated_default_instance_;
    new (ptr) ::proto::dota::CMsgGCServerVersionUpdated();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCServerVersionUpdated::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCServerVersionUpdated_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCServerVersionUpdated_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCClientVersionUpdated_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCClientVersionUpdated_default_instance_;
    new (ptr) ::proto::dota::CMsgGCClientVersionUpdated();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCClientVersionUpdated::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCClientVersionUpdated_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCClientVersionUpdated_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCToGCWebAPIAccountChanged_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCWebAPIAccountChanged_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCWebAPIAccountChanged();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCWebAPIAccountChanged::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToGCWebAPIAccountChanged_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToGCWebAPIAccountChanged_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgRecipeComponent_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgRecipeComponent_default_instance_;
    new (ptr) ::proto::dota::CMsgRecipeComponent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgRecipeComponent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgRecipeComponent_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgRecipeComponent_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgFulfillDynamicRecipeComponent_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgFulfillDynamicRecipeComponent_default_instance_;
    new (ptr) ::proto::dota::CMsgFulfillDynamicRecipeComponent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgFulfillDynamicRecipeComponent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgFulfillDynamicRecipeComponent_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgFulfillDynamicRecipeComponent_base_5fgcmessages_2eproto}, {
      &scc_info_CMsgRecipeComponent_base_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgGCClientMarketDataRequest_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCClientMarketDataRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgGCClientMarketDataRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCClientMarketDataRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCClientMarketDataRequest_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCClientMarketDataRequest_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCClientMarketDataEntry_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCClientMarketDataEntry_default_instance_;
    new (ptr) ::proto::dota::CMsgGCClientMarketDataEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCClientMarketDataEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCClientMarketDataEntry_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCClientMarketDataEntry_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCClientMarketData_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCClientMarketData_default_instance_;
    new (ptr) ::proto::dota::CMsgGCClientMarketData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCClientMarketData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCClientMarketData_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCClientMarketData_base_5fgcmessages_2eproto}, {
      &scc_info_CMsgGCClientMarketDataEntry_base_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgExtractGems_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgExtractGems_default_instance_;
    new (ptr) ::proto::dota::CMsgExtractGems();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgExtractGems::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgExtractGems_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgExtractGems_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgExtractGemsResponse_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgExtractGemsResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgExtractGemsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgExtractGemsResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgExtractGemsResponse_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgExtractGemsResponse_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgAddSocket_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgAddSocket_default_instance_;
    new (ptr) ::proto::dota::CMsgAddSocket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgAddSocket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAddSocket_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgAddSocket_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgAddSocketResponse_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgAddSocketResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgAddSocketResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgAddSocketResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAddSocketResponse_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgAddSocketResponse_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgAddItemToSocketData_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgAddItemToSocketData_default_instance_;
    new (ptr) ::proto::dota::CMsgAddItemToSocketData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgAddItemToSocketData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAddItemToSocketData_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgAddItemToSocketData_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgAddItemToSocket_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgAddItemToSocket_default_instance_;
    new (ptr) ::proto::dota::CMsgAddItemToSocket();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgAddItemToSocket::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgAddItemToSocket_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgAddItemToSocket_base_5fgcmessages_2eproto}, {
      &scc_info_CMsgAddItemToSocketData_base_5fgcmessages_2eproto.base,}};

static void InitDefaultsCMsgAddItemToSocketResponse_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgAddItemToSocketResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgAddItemToSocketResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgAddItemToSocketResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgAddItemToSocketResponse_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgAddItemToSocketResponse_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgResetStrangeGemCount_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgResetStrangeGemCount_default_instance_;
    new (ptr) ::proto::dota::CMsgResetStrangeGemCount();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgResetStrangeGemCount::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgResetStrangeGemCount_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgResetStrangeGemCount_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgResetStrangeGemCountResponse_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgResetStrangeGemCountResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgResetStrangeGemCountResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgResetStrangeGemCountResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgResetStrangeGemCountResponse_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgResetStrangeGemCountResponse_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCToClientPollFileRequest_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToClientPollFileRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToClientPollFileRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToClientPollFileRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToClientPollFileRequest_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToClientPollFileRequest_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCToClientPollFileResponse_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToClientPollFileResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToClientPollFileResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToClientPollFileResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToClientPollFileResponse_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToClientPollFileResponse_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCToGCPerformManualOp_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCPerformManualOp_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCPerformManualOp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCPerformManualOp::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToGCPerformManualOp_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToGCPerformManualOp_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCToGCPerformManualOpCompleted_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCPerformManualOpCompleted_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCPerformManualOpCompleted();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCPerformManualOpCompleted::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToGCPerformManualOpCompleted_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToGCPerformManualOpCompleted_base_5fgcmessages_2eproto}, {}};

static void InitDefaultsCMsgGCToGCReloadServerRegionSettings_base_5fgcmessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToGCReloadServerRegionSettings_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToGCReloadServerRegionSettings();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToGCReloadServerRegionSettings::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToGCReloadServerRegionSettings_base_5fgcmessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToGCReloadServerRegionSettings_base_5fgcmessages_2eproto}, {}};

void InitDefaults_base_5fgcmessages_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CGCStorePurchaseInit_LineItem_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCStorePurchaseInit_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCStorePurchaseInitResponse_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSystemBroadcast_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientPingData_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgInviteToParty_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgInviteToLobby_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgInvitationCreated_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPartyInviteResponse_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgLobbyInviteResponse_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgKickFromParty_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgLeaveParty_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgCustomGameInstallStatus_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgServerAvailable_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgLANServerAvailable_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSOEconGameAccountClient_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSOItemCriteriaCondition_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSOItemCriteria_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSOItemRecipe_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgApplyStrangePart_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgApplyPennantUpgrade_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgApplyEggEssence_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSOEconItemAttribute_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSOEconItemEquipped_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSOEconItem_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSortItems_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSOEconClaimCode_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgUpdateItemSchema_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCError_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRequestInventoryRefresh_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgConVarValue_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgReplicateConVars_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgItemAcknowledged_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSetItemPositions_ItemPosition_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSetItemPositions_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCNameItemNotification_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCClientDisplayNotification_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCShowItemsPickedUp_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCIncrementKillCountResponse_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSOEconItemDropRateBonus_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSOEconItemLeagueViewPass_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSOEconItemEventTicket_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSOEconItemTournamentPassport_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCStorePurchaseCancel_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCStorePurchaseCancelResponse_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCStorePurchaseFinalize_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCStorePurchaseFinalizeResponse_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCBannedWordListUpdated_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCDirtySDOCache_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCDirtyMultipleSDOCache_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCApplyLocalizationDiff_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCApplyLocalizationDiffResponse_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCCollectItem_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSDONoMemcached_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCUpdateSQLKeyValue_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCServerVersionUpdated_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCClientVersionUpdated_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCWebAPIAccountChanged_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgRecipeComponent_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgFulfillDynamicRecipeComponent_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCClientMarketDataRequest_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCClientMarketDataEntry_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCClientMarketData_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgExtractGems_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgExtractGemsResponse_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAddSocket_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAddSocketResponse_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAddItemToSocketData_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAddItemToSocket_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgAddItemToSocketResponse_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgResetStrangeGemCount_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgResetStrangeGemCountResponse_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToClientPollFileRequest_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToClientPollFileResponse_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCPerformManualOp_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCPerformManualOpCompleted_base_5fgcmessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToGCReloadServerRegionSettings_base_5fgcmessages_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_base_5fgcmessages_2eproto[77];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_base_5fgcmessages_2eproto[7];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_base_5fgcmessages_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_base_5fgcmessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCStorePurchaseInit_LineItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCStorePurchaseInit_LineItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCStorePurchaseInit_LineItem, item_def_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCStorePurchaseInit_LineItem, quantity_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCStorePurchaseInit_LineItem, cost_in_local_currency_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCStorePurchaseInit_LineItem, purchase_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CGCStorePurchaseInit_LineItem, source_reference_id_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCStorePurchaseInit, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCStorePurchaseInit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCStorePurchaseInit, country_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCStorePurchaseInit, language_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCStorePurchaseInit, currency_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCStorePurchaseInit, line_items_),
  0,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCStorePurchaseInitResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCStorePurchaseInitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCStorePurchaseInitResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCStorePurchaseInitResponse, txn_id_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSystemBroadcast, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSystemBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSystemBroadcast, message_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientPingData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientPingData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientPingData, relay_codes_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientPingData, relay_pings_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientPingData, region_codes_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientPingData, region_pings_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientPingData, region_ping_failed_bitmask_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgInviteToParty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgInviteToParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgInviteToParty, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgInviteToParty, client_version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgInviteToParty, team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgInviteToParty, as_coach_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgInviteToParty, ping_data_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgInviteToLobby, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgInviteToLobby, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgInviteToLobby, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgInviteToLobby, client_version_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgInvitationCreated, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgInvitationCreated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgInvitationCreated, group_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgInvitationCreated, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgInvitationCreated, user_offline_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPartyInviteResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPartyInviteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPartyInviteResponse, party_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPartyInviteResponse, accept_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPartyInviteResponse, client_version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPartyInviteResponse, ping_data_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyInviteResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyInviteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyInviteResponse, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyInviteResponse, accept_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyInviteResponse, client_version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyInviteResponse, custom_game_crc_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLobbyInviteResponse, custom_game_timestamp_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgKickFromParty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgKickFromParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgKickFromParty, steam_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLeaveParty, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLeaveParty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgCustomGameInstallStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgCustomGameInstallStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgCustomGameInstallStatus, status_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgCustomGameInstallStatus, message_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgCustomGameInstallStatus, latest_timestamp_from_steam_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerAvailable, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerAvailable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgServerAvailable, custom_game_install_status_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLANServerAvailable, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLANServerAvailable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgLANServerAvailable, lobby_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconGameAccountClient, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconGameAccountClient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconGameAccountClient, additional_backpack_slots_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconGameAccountClient, trial_account_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconGameAccountClient, eligible_for_online_play_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconGameAccountClient, need_to_choose_most_helpful_friend_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconGameAccountClient, in_coaches_list_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconGameAccountClient, trade_ban_expiration_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconGameAccountClient, duel_ban_expiration_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconGameAccountClient, made_first_purchase_),
  0,
  1,
  7,
  2,
  3,
  5,
  6,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemCriteriaCondition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemCriteriaCondition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemCriteriaCondition, op_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemCriteriaCondition, field_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemCriteriaCondition, required_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemCriteriaCondition, float_value_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemCriteriaCondition, string_value_),
  2,
  0,
  3,
  4,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemCriteria, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemCriteria, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemCriteria, item_level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemCriteria, item_quality_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemCriteria, item_level_set_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemCriteria, item_quality_set_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemCriteria, initial_inventory_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemCriteria, initial_quantity_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemCriteria, ignore_enabled_flag_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemCriteria, conditions_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemCriteria, recent_only_),
  0,
  1,
  4,
  5,
  2,
  3,
  6,
  ~0u,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemRecipe, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemRecipe, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemRecipe, def_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemRecipe, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemRecipe, n_a_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemRecipe, desc_inputs_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemRecipe, desc_outputs_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemRecipe, di_a_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemRecipe, di_b_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemRecipe, di_c_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemRecipe, do_a_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemRecipe, do_b_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemRecipe, do_c_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemRecipe, requires_all_same_class_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemRecipe, requires_all_same_slot_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemRecipe, class_usage_for_output_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemRecipe, slot_usage_for_output_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemRecipe, set_for_output_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemRecipe, input_items_criteria_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemRecipe, output_items_criteria_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOItemRecipe, input_item_dupe_counts_),
  10,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  11,
  12,
  13,
  14,
  15,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgApplyStrangePart, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgApplyStrangePart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgApplyStrangePart, strange_part_item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgApplyStrangePart, item_item_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgApplyPennantUpgrade, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgApplyPennantUpgrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgApplyPennantUpgrade, upgrade_item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgApplyPennantUpgrade, pennant_item_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgApplyEggEssence, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgApplyEggEssence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgApplyEggEssence, essence_item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgApplyEggEssence, egg_item_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemAttribute, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemAttribute, def_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemAttribute, value_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemAttribute, value_bytes_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemEquipped, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemEquipped, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemEquipped, new_class_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemEquipped, new_slot_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItem, id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItem, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItem, inventory_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItem, def_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItem, quantity_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItem, level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItem, quality_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItem, flags_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItem, origin_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItem, attribute_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItem, interior_item_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItem, style_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItem, original_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItem, equipped_state_),
  1,
  2,
  3,
  4,
  10,
  11,
  9,
  5,
  6,
  ~0u,
  0,
  7,
  8,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSortItems, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSortItems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSortItems, sort_type_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconClaimCode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconClaimCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconClaimCode, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconClaimCode, code_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconClaimCode, time_acquired_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconClaimCode, code_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgUpdateItemSchema, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgUpdateItemSchema, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgUpdateItemSchema, items_game_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgUpdateItemSchema, item_schema_version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgUpdateItemSchema, items_game_url_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCError, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCError, error_text_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgRequestInventoryRefresh, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgRequestInventoryRefresh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConVarValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConVarValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConVarValue, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgConVarValue, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgReplicateConVars, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgReplicateConVars, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgReplicateConVars, convars_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgItemAcknowledged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgItemAcknowledged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgItemAcknowledged, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgItemAcknowledged, inventory_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgItemAcknowledged, def_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgItemAcknowledged, quality_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgItemAcknowledged, rarity_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgItemAcknowledged, origin_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSetItemPositions_ItemPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSetItemPositions_ItemPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSetItemPositions_ItemPosition, item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSetItemPositions_ItemPosition, position_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSetItemPositions, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSetItemPositions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSetItemPositions, item_positions_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCNameItemNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCNameItemNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCNameItemNotification, player_steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCNameItemNotification, item_def_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCNameItemNotification, item_name_custom_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCClientDisplayNotification, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCClientDisplayNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCClientDisplayNotification, notification_title_localization_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCClientDisplayNotification, notification_body_localization_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCClientDisplayNotification, body_substring_keys_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCClientDisplayNotification, body_substring_values_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCShowItemsPickedUp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCShowItemsPickedUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCShowItemsPickedUp, player_steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCIncrementKillCountResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCIncrementKillCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCIncrementKillCountResponse, killer_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCIncrementKillCountResponse, num_kills_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCIncrementKillCountResponse, item_def_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCIncrementKillCountResponse, level_type_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemDropRateBonus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemDropRateBonus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemDropRateBonus, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemDropRateBonus, expiration_date_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemDropRateBonus, bonus_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemDropRateBonus, bonus_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemDropRateBonus, item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemDropRateBonus, def_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemDropRateBonus, seconds_left_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemDropRateBonus, booster_type_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemLeagueViewPass, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemLeagueViewPass, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemLeagueViewPass, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemLeagueViewPass, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemLeagueViewPass, itemindex_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemLeagueViewPass, grant_reason_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemEventTicket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemEventTicket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemEventTicket, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemEventTicket, event_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemEventTicket, item_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemTournamentPassport, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemTournamentPassport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemTournamentPassport, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemTournamentPassport, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemTournamentPassport, item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemTournamentPassport, original_purchaser_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemTournamentPassport, passports_bought_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemTournamentPassport, version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemTournamentPassport, def_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSOEconItemTournamentPassport, reward_flags_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCStorePurchaseCancel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCStorePurchaseCancel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCStorePurchaseCancel, txn_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCStorePurchaseCancelResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCStorePurchaseCancelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCStorePurchaseCancelResponse, result_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCStorePurchaseFinalize, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCStorePurchaseFinalize, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCStorePurchaseFinalize, txn_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCStorePurchaseFinalizeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCStorePurchaseFinalizeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCStorePurchaseFinalizeResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCStorePurchaseFinalizeResponse, item_ids_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCBannedWordListUpdated, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCBannedWordListUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCBannedWordListUpdated, group_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCDirtySDOCache, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCDirtySDOCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCDirtySDOCache, sdo_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCDirtySDOCache, key_uint64_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCDirtyMultipleSDOCache, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCDirtyMultipleSDOCache, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCDirtyMultipleSDOCache, sdo_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCDirtyMultipleSDOCache, key_uint64_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCApplyLocalizationDiff, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCApplyLocalizationDiff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCApplyLocalizationDiff, language_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCApplyLocalizationDiff, packed_diff_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCApplyLocalizationDiffResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCApplyLocalizationDiffResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCApplyLocalizationDiffResponse, success_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCCollectItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCCollectItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCCollectItem, collection_item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCCollectItem, subject_item_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSDONoMemcached, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSDONoMemcached, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCUpdateSQLKeyValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCUpdateSQLKeyValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCUpdateSQLKeyValue, key_name_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCServerVersionUpdated, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCServerVersionUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCServerVersionUpdated, server_version_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCClientVersionUpdated, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCClientVersionUpdated, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCClientVersionUpdated, client_version_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCWebAPIAccountChanged, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCWebAPIAccountChanged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgRecipeComponent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgRecipeComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgRecipeComponent, subject_item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgRecipeComponent, attribute_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgFulfillDynamicRecipeComponent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgFulfillDynamicRecipeComponent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgFulfillDynamicRecipeComponent, tool_item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgFulfillDynamicRecipeComponent, consumption_components_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCClientMarketDataRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCClientMarketDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCClientMarketDataRequest, user_currency_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCClientMarketDataEntry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCClientMarketDataEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCClientMarketDataEntry, item_def_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCClientMarketDataEntry, item_quality_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCClientMarketDataEntry, item_sell_listings_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCClientMarketDataEntry, price_in_local_currency_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCClientMarketData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCClientMarketData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCClientMarketData, entries_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgExtractGems, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgExtractGems, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgExtractGems, tool_item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgExtractGems, item_item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgExtractGems, item_socket_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgExtractGemsResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgExtractGemsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgExtractGemsResponse, item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgExtractGemsResponse, response_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAddSocket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAddSocket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAddSocket, tool_item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAddSocket, item_item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAddSocket, unusual_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAddSocketResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAddSocketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAddSocketResponse, item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAddSocketResponse, updated_socket_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAddSocketResponse, response_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAddItemToSocketData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAddItemToSocketData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAddItemToSocketData, gem_item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAddItemToSocketData, socket_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAddItemToSocket, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAddItemToSocket, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAddItemToSocket, item_item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAddItemToSocket, gems_to_socket_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAddItemToSocketResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAddItemToSocketResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAddItemToSocketResponse, item_item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAddItemToSocketResponse, updated_socket_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgAddItemToSocketResponse, response_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgResetStrangeGemCount, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgResetStrangeGemCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgResetStrangeGemCount, item_item_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgResetStrangeGemCount, socket_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgResetStrangeGemCountResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgResetStrangeGemCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgResetStrangeGemCountResponse, response_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPollFileRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPollFileRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPollFileRequest, file_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPollFileRequest, client_version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPollFileRequest, poll_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPollFileResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPollFileResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPollFileResponse, poll_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPollFileResponse, file_size_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCPerformManualOp, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCPerformManualOp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCPerformManualOp, op_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCPerformManualOp, group_code_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCPerformManualOpCompleted, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCPerformManualOpCompleted, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCPerformManualOpCompleted, success_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCPerformManualOpCompleted, source_gc_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCReloadServerRegionSettings, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToGCReloadServerRegionSettings, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::proto::dota::CGCStorePurchaseInit_LineItem)},
  { 15, 24, sizeof(::proto::dota::CMsgGCStorePurchaseInit)},
  { 28, 35, sizeof(::proto::dota::CMsgGCStorePurchaseInitResponse)},
  { 37, 43, sizeof(::proto::dota::CMsgSystemBroadcast)},
  { 44, 54, sizeof(::proto::dota::CMsgClientPingData)},
  { 59, 69, sizeof(::proto::dota::CMsgInviteToParty)},
  { 74, 81, sizeof(::proto::dota::CMsgInviteToLobby)},
  { 83, 91, sizeof(::proto::dota::CMsgInvitationCreated)},
  { 94, 103, sizeof(::proto::dota::CMsgPartyInviteResponse)},
  { 107, 117, sizeof(::proto::dota::CMsgLobbyInviteResponse)},
  { 122, 128, sizeof(::proto::dota::CMsgKickFromParty)},
  { 129, 134, sizeof(::proto::dota::CMsgLeaveParty)},
  { 134, 142, sizeof(::proto::dota::CMsgCustomGameInstallStatus)},
  { 145, 151, sizeof(::proto::dota::CMsgServerAvailable)},
  { 152, 158, sizeof(::proto::dota::CMsgLANServerAvailable)},
  { 159, 172, sizeof(::proto::dota::CSOEconGameAccountClient)},
  { 180, 190, sizeof(::proto::dota::CSOItemCriteriaCondition)},
  { 195, 209, sizeof(::proto::dota::CSOItemCriteria)},
  { 218, 242, sizeof(::proto::dota::CSOItemRecipe)},
  { 261, 268, sizeof(::proto::dota::CMsgApplyStrangePart)},
  { 270, 277, sizeof(::proto::dota::CMsgApplyPennantUpgrade)},
  { 279, 286, sizeof(::proto::dota::CMsgApplyEggEssence)},
  { 288, 296, sizeof(::proto::dota::CSOEconItemAttribute)},
  { 299, 306, sizeof(::proto::dota::CSOEconItemEquipped)},
  { 308, 327, sizeof(::proto::dota::CSOEconItem)},
  { 341, 347, sizeof(::proto::dota::CMsgSortItems)},
  { 348, 357, sizeof(::proto::dota::CSOEconClaimCode)},
  { 361, 369, sizeof(::proto::dota::CMsgUpdateItemSchema)},
  { 372, 378, sizeof(::proto::dota::CMsgGCError)},
  { 379, 384, sizeof(::proto::dota::CMsgRequestInventoryRefresh)},
  { 384, 391, sizeof(::proto::dota::CMsgConVarValue)},
  { 393, 399, sizeof(::proto::dota::CMsgReplicateConVars)},
  { 400, 411, sizeof(::proto::dota::CMsgItemAcknowledged)},
  { 417, 424, sizeof(::proto::dota::CMsgSetItemPositions_ItemPosition)},
  { 426, 432, sizeof(::proto::dota::CMsgSetItemPositions)},
  { 433, 441, sizeof(::proto::dota::CMsgGCNameItemNotification)},
  { 444, 453, sizeof(::proto::dota::CMsgGCClientDisplayNotification)},
  { 457, 463, sizeof(::proto::dota::CMsgGCShowItemsPickedUp)},
  { 464, 473, sizeof(::proto::dota::CMsgGCIncrementKillCountResponse)},
  { 477, 490, sizeof(::proto::dota::CSOEconItemDropRateBonus)},
  { 498, 507, sizeof(::proto::dota::CSOEconItemLeagueViewPass)},
  { 511, 519, sizeof(::proto::dota::CSOEconItemEventTicket)},
  { 522, 535, sizeof(::proto::dota::CSOEconItemTournamentPassport)},
  { 543, 549, sizeof(::proto::dota::CMsgGCStorePurchaseCancel)},
  { 550, 556, sizeof(::proto::dota::CMsgGCStorePurchaseCancelResponse)},
  { 557, 563, sizeof(::proto::dota::CMsgGCStorePurchaseFinalize)},
  { 564, 571, sizeof(::proto::dota::CMsgGCStorePurchaseFinalizeResponse)},
  { 573, 579, sizeof(::proto::dota::CMsgGCToGCBannedWordListUpdated)},
  { 580, 587, sizeof(::proto::dota::CMsgGCToGCDirtySDOCache)},
  { 589, 596, sizeof(::proto::dota::CMsgGCToGCDirtyMultipleSDOCache)},
  { 598, 605, sizeof(::proto::dota::CMsgGCToGCApplyLocalizationDiff)},
  { 607, 613, sizeof(::proto::dota::CMsgGCToGCApplyLocalizationDiffResponse)},
  { 614, 621, sizeof(::proto::dota::CMsgGCCollectItem)},
  { 623, 628, sizeof(::proto::dota::CMsgSDONoMemcached)},
  { 628, 634, sizeof(::proto::dota::CMsgGCToGCUpdateSQLKeyValue)},
  { 635, 641, sizeof(::proto::dota::CMsgGCServerVersionUpdated)},
  { 642, 648, sizeof(::proto::dota::CMsgGCClientVersionUpdated)},
  { 649, 654, sizeof(::proto::dota::CMsgGCToGCWebAPIAccountChanged)},
  { 654, 661, sizeof(::proto::dota::CMsgRecipeComponent)},
  { 663, 670, sizeof(::proto::dota::CMsgFulfillDynamicRecipeComponent)},
  { 672, 678, sizeof(::proto::dota::CMsgGCClientMarketDataRequest)},
  { 679, 688, sizeof(::proto::dota::CMsgGCClientMarketDataEntry)},
  { 692, 698, sizeof(::proto::dota::CMsgGCClientMarketData)},
  { 699, 707, sizeof(::proto::dota::CMsgExtractGems)},
  { 710, 717, sizeof(::proto::dota::CMsgExtractGemsResponse)},
  { 719, 727, sizeof(::proto::dota::CMsgAddSocket)},
  { 730, 738, sizeof(::proto::dota::CMsgAddSocketResponse)},
  { 741, 748, sizeof(::proto::dota::CMsgAddItemToSocketData)},
  { 750, 757, sizeof(::proto::dota::CMsgAddItemToSocket)},
  { 759, 767, sizeof(::proto::dota::CMsgAddItemToSocketResponse)},
  { 770, 777, sizeof(::proto::dota::CMsgResetStrangeGemCount)},
  { 779, 785, sizeof(::proto::dota::CMsgResetStrangeGemCountResponse)},
  { 786, 794, sizeof(::proto::dota::CMsgGCToClientPollFileRequest)},
  { 797, 804, sizeof(::proto::dota::CMsgGCToClientPollFileResponse)},
  { 806, 813, sizeof(::proto::dota::CMsgGCToGCPerformManualOp)},
  { 815, 822, sizeof(::proto::dota::CMsgGCToGCPerformManualOpCompleted)},
  { 824, 829, sizeof(::proto::dota::CMsgGCToGCReloadServerRegionSettings)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CGCStorePurchaseInit_LineItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCStorePurchaseInit_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCStorePurchaseInitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSystemBroadcast_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgClientPingData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgInviteToParty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgInviteToLobby_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgInvitationCreated_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPartyInviteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgLobbyInviteResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgKickFromParty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgLeaveParty_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgCustomGameInstallStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgServerAvailable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgLANServerAvailable_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSOEconGameAccountClient_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSOItemCriteriaCondition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSOItemCriteria_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSOItemRecipe_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgApplyStrangePart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgApplyPennantUpgrade_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgApplyEggEssence_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSOEconItemAttribute_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSOEconItemEquipped_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSOEconItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSortItems_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSOEconClaimCode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgUpdateItemSchema_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCError_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgRequestInventoryRefresh_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgConVarValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgReplicateConVars_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgItemAcknowledged_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSetItemPositions_ItemPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSetItemPositions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCNameItemNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCClientDisplayNotification_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCShowItemsPickedUp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCIncrementKillCountResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSOEconItemDropRateBonus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSOEconItemLeagueViewPass_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSOEconItemEventTicket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSOEconItemTournamentPassport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCStorePurchaseCancel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCStorePurchaseCancelResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCStorePurchaseFinalize_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCStorePurchaseFinalizeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCBannedWordListUpdated_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCDirtySDOCache_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCDirtyMultipleSDOCache_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCApplyLocalizationDiff_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCApplyLocalizationDiffResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCCollectItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSDONoMemcached_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCUpdateSQLKeyValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCServerVersionUpdated_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCClientVersionUpdated_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCWebAPIAccountChanged_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgRecipeComponent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgFulfillDynamicRecipeComponent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCClientMarketDataRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCClientMarketDataEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCClientMarketData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgExtractGems_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgExtractGemsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgAddSocket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgAddSocketResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgAddItemToSocketData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgAddItemToSocket_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgAddItemToSocketResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgResetStrangeGemCount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgResetStrangeGemCountResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToClientPollFileRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToClientPollFileResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCPerformManualOp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCPerformManualOpCompleted_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToGCReloadServerRegionSettings_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_base_5fgcmessages_2eproto = {
  {}, AddDescriptors_base_5fgcmessages_2eproto, "base_gcmessages.proto", schemas,
  file_default_instances, TableStruct_base_5fgcmessages_2eproto::offsets,
  file_level_metadata_base_5fgcmessages_2eproto, 77, file_level_enum_descriptors_base_5fgcmessages_2eproto, file_level_service_descriptors_base_5fgcmessages_2eproto,
};

const char descriptor_table_protodef_base_5fgcmessages_2eproto[] =
  "\n\025base_gcmessages.proto\022\nproto.dota\032\023ste"
  "ammessages.proto\"\232\001\n\035CGCStorePurchaseIni"
  "t_LineItem\022\023\n\013item_def_id\030\001 \001(\r\022\020\n\010quant"
  "ity\030\002 \001(\r\022\036\n\026cost_in_local_currency\030\003 \001("
  "\r\022\025\n\rpurchase_type\030\004 \001(\r\022\033\n\023source_refer"
  "ence_id\030\005 \001(\004\"\215\001\n\027CMsgGCStorePurchaseIni"
  "t\022\017\n\007country\030\001 \001(\t\022\020\n\010language\030\002 \001(\005\022\020\n\010"
  "currency\030\003 \001(\005\022=\n\nline_items\030\004 \003(\0132).pro"
  "to.dota.CGCStorePurchaseInit_LineItem\"A\n"
  "\037CMsgGCStorePurchaseInitResponse\022\016\n\006resu"
  "lt\030\001 \001(\005\022\016\n\006txn_id\030\002 \001(\004\"&\n\023CMsgSystemBr"
  "oadcast\022\017\n\007message\030\001 \001(\t\"\236\001\n\022CMsgClientP"
  "ingData\022\027\n\013relay_codes\030\004 \003(\007B\002\020\001\022\027\n\013rela"
  "y_pings\030\005 \003(\rB\002\020\001\022\030\n\014region_codes\030\010 \003(\rB"
  "\002\020\001\022\030\n\014region_pings\030\t \003(\rB\002\020\001\022\"\n\032region_"
  "ping_failed_bitmask\030\n \001(\r\"\223\001\n\021CMsgInvite"
  "ToParty\022\020\n\010steam_id\030\001 \001(\006\022\026\n\016client_vers"
  "ion\030\002 \001(\r\022\017\n\007team_id\030\003 \001(\r\022\020\n\010as_coach\030\004"
  " \001(\010\0221\n\tping_data\030\005 \001(\0132\036.proto.dota.CMs"
  "gClientPingData\"=\n\021CMsgInviteToLobby\022\020\n\010"
  "steam_id\030\001 \001(\006\022\026\n\016client_version\030\002 \001(\r\"Q"
  "\n\025CMsgInvitationCreated\022\020\n\010group_id\030\001 \001("
  "\004\022\020\n\010steam_id\030\002 \001(\006\022\024\n\014user_offline\030\003 \001("
  "\010\"\206\001\n\027CMsgPartyInviteResponse\022\020\n\010party_i"
  "d\030\001 \001(\004\022\016\n\006accept\030\002 \001(\010\022\026\n\016client_versio"
  "n\030\003 \001(\r\0221\n\tping_data\030\010 \001(\0132\036.proto.dota."
  "CMsgClientPingData\"\213\001\n\027CMsgLobbyInviteRe"
  "sponse\022\020\n\010lobby_id\030\001 \001(\006\022\016\n\006accept\030\002 \001(\010"
  "\022\026\n\016client_version\030\003 \001(\r\022\027\n\017custom_game_"
  "crc\030\006 \001(\006\022\035\n\025custom_game_timestamp\030\007 \001(\007"
  "\"%\n\021CMsgKickFromParty\022\020\n\010steam_id\030\001 \001(\006\""
  "\020\n\016CMsgLeaveParty\"\255\001\n\033CMsgCustomGameInst"
  "allStatus\022X\n\006status\030\001 \001(\0162$.proto.dota.E"
  "CustomGameInstallStatus:\"k_ECustomGameIn"
  "stallStatus_Unknown\022\017\n\007message\030\002 \001(\t\022#\n\033"
  "latest_timestamp_from_steam\030\003 \001(\007\"b\n\023CMs"
  "gServerAvailable\022K\n\032custom_game_install_"
  "status\030\001 \001(\0132\'.proto.dota.CMsgCustomGame"
  "InstallStatus\"*\n\026CMsgLANServerAvailable\022"
  "\020\n\010lobby_id\030\001 \001(\006\"\252\002\n\030CSOEconGameAccount"
  "Client\022$\n\031additional_backpack_slots\030\001 \001("
  "\r:\0010\022\034\n\rtrial_account\030\002 \001(\010:\005false\022&\n\030el"
  "igible_for_online_play\030\003 \001(\010:\004true\022*\n\"ne"
  "ed_to_choose_most_helpful_friend\030\004 \001(\010\022\027"
  "\n\017in_coaches_list\030\005 \001(\010\022\034\n\024trade_ban_exp"
  "iration\030\006 \001(\007\022\033\n\023duel_ban_expiration\030\007 \001"
  "(\007\022\"\n\023made_first_purchase\030\t \001(\010:\005false\"r"
  "\n\030CSOItemCriteriaCondition\022\n\n\002op\030\001 \001(\005\022\r"
  "\n\005field\030\002 \001(\t\022\020\n\010required\030\003 \001(\010\022\023\n\013float"
  "_value\030\004 \001(\002\022\024\n\014string_value\030\005 \001(\t\"\216\002\n\017C"
  "SOItemCriteria\022\022\n\nitem_level\030\001 \001(\r\022\024\n\014it"
  "em_quality\030\002 \001(\005\022\026\n\016item_level_set\030\003 \001(\010"
  "\022\030\n\020item_quality_set\030\004 \001(\010\022\031\n\021initial_in"
  "ventory\030\005 \001(\r\022\030\n\020initial_quantity\030\006 \001(\r\022"
  "\033\n\023ignore_enabled_flag\030\010 \001(\010\0228\n\nconditio"
  "ns\030\t \003(\0132$.proto.dota.CSOItemCriteriaCon"
  "dition\022\023\n\013recent_only\030\n \001(\010\"\353\003\n\rCSOItemR"
  "ecipe\022\021\n\tdef_index\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\013"
  "\n\003n_a\030\003 \001(\t\022\023\n\013desc_inputs\030\004 \001(\t\022\024\n\014desc"
  "_outputs\030\005 \001(\t\022\014\n\004di_a\030\006 \001(\t\022\014\n\004di_b\030\007 \001"
  "(\t\022\014\n\004di_c\030\010 \001(\t\022\014\n\004do_a\030\t \001(\t\022\014\n\004do_b\030\n"
  " \001(\t\022\014\n\004do_c\030\013 \001(\t\022\037\n\027requires_all_same_"
  "class\030\014 \001(\010\022\036\n\026requires_all_same_slot\030\r "
  "\001(\010\022\036\n\026class_usage_for_output\030\016 \001(\005\022\035\n\025s"
  "lot_usage_for_output\030\017 \001(\005\022\026\n\016set_for_ou"
  "tput\030\020 \001(\005\0229\n\024input_items_criteria\030\024 \003(\013"
  "2\033.proto.dota.CSOItemCriteria\022:\n\025output_"
  "items_criteria\030\025 \003(\0132\033.proto.dota.CSOIte"
  "mCriteria\022\036\n\026input_item_dupe_counts\030\026 \003("
  "\r\"J\n\024CMsgApplyStrangePart\022\034\n\024strange_par"
  "t_item_id\030\001 \001(\004\022\024\n\014item_item_id\030\002 \001(\004\"K\n"
  "\027CMsgApplyPennantUpgrade\022\027\n\017upgrade_item"
  "_id\030\001 \001(\004\022\027\n\017pennant_item_id\030\002 \001(\004\"C\n\023CM"
  "sgApplyEggEssence\022\027\n\017essence_item_id\030\001 \001"
  "(\004\022\023\n\013egg_item_id\030\002 \001(\004\"M\n\024CSOEconItemAt"
  "tribute\022\021\n\tdef_index\030\001 \001(\r\022\r\n\005value\030\002 \001("
  "\r\022\023\n\013value_bytes\030\003 \001(\014\":\n\023CSOEconItemEqu"
  "ipped\022\021\n\tnew_class\030\001 \001(\r\022\020\n\010new_slot\030\002 \001"
  "(\r\"\373\002\n\013CSOEconItem\022\n\n\002id\030\001 \001(\004\022\022\n\naccoun"
  "t_id\030\002 \001(\r\022\021\n\tinventory\030\003 \001(\r\022\021\n\tdef_ind"
  "ex\030\004 \001(\r\022\023\n\010quantity\030\005 \001(\r:\0011\022\020\n\005level\030\006"
  " \001(\r:\0011\022\022\n\007quality\030\007 \001(\r:\0014\022\020\n\005flags\030\010 \001"
  "(\r:\0010\022\021\n\006origin\030\t \001(\r:\0010\0223\n\tattribute\030\014 "
  "\003(\0132 .proto.dota.CSOEconItemAttribute\022.\n"
  "\rinterior_item\030\r \001(\0132\027.proto.dota.CSOEco"
  "nItem\022\020\n\005style\030\017 \001(\r:\0010\022\026\n\013original_id\030\020"
  " \001(\004:\0010\0227\n\016equipped_state\030\022 \003(\0132\037.proto."
  "dota.CSOEconItemEquipped\"\"\n\rCMsgSortItem"
  "s\022\021\n\tsort_type\030\001 \001(\r\"^\n\020CSOEconClaimCode"
  "\022\022\n\naccount_id\030\001 \001(\r\022\021\n\tcode_type\030\002 \001(\r\022"
  "\025\n\rtime_acquired\030\003 \001(\r\022\014\n\004code\030\004 \001(\t\"_\n\024"
  "CMsgUpdateItemSchema\022\022\n\nitems_game\030\001 \001(\014"
  "\022\033\n\023item_schema_version\030\002 \001(\007\022\026\n\016items_g"
  "ame_url\030\003 \001(\t\"!\n\013CMsgGCError\022\022\n\nerror_te"
  "xt\030\001 \001(\t\"\035\n\033CMsgRequestInventoryRefresh\""
  ".\n\017CMsgConVarValue\022\014\n\004name\030\001 \001(\t\022\r\n\005valu"
  "e\030\002 \001(\t\"D\n\024CMsgReplicateConVars\022,\n\007conva"
  "rs\030\001 \003(\0132\033.proto.dota.CMsgConVarValue\"\201\001"
  "\n\024CMsgItemAcknowledged\022\022\n\naccount_id\030\001 \001"
  "(\r\022\021\n\tinventory\030\002 \001(\r\022\021\n\tdef_index\030\003 \001(\r"
  "\022\017\n\007quality\030\004 \001(\r\022\016\n\006rarity\030\005 \001(\r\022\016\n\006ori"
  "gin\030\006 \001(\r\"\220\001\n\024CMsgSetItemPositions\022E\n\016it"
  "em_positions\030\001 \003(\0132-.proto.dota.CMsgSetI"
  "temPositions.ItemPosition\0321\n\014ItemPositio"
  "n\022\017\n\007item_id\030\001 \001(\004\022\020\n\010position\030\002 \001(\r\"f\n\032"
  "CMsgGCNameItemNotification\022\026\n\016player_ste"
  "amid\030\001 \001(\006\022\026\n\016item_def_index\030\002 \001(\r\022\030\n\020it"
  "em_name_custom\030\003 \001(\t\"\266\001\n\037CMsgGCClientDis"
  "playNotification\022+\n#notification_title_l"
  "ocalization_key\030\001 \001(\t\022*\n\"notification_bo"
  "dy_localization_key\030\002 \001(\t\022\033\n\023body_substr"
  "ing_keys\030\003 \003(\t\022\035\n\025body_substring_values\030"
  "\004 \003(\t\"1\n\027CMsgGCShowItemsPickedUp\022\026\n\016play"
  "er_steamid\030\001 \001(\006\"|\n CMsgGCIncrementKillC"
  "ountResponse\022\037\n\021killer_account_id\030\001 \001(\rB"
  "\004\200\246\035\001\022\021\n\tnum_kills\030\002 \001(\r\022\020\n\010item_def\030\003 \001"
  "(\r\022\022\n\nlevel_type\030\004 \001(\r\"\315\001\n\030CSOEconItemDr"
  "opRateBonus\022\030\n\naccount_id\030\001 \001(\rB\004\200\246\035\001\022\027\n"
  "\017expiration_date\030\002 \001(\007\022\023\n\005bonus\030\003 \001(\002B\004\200"
  "\246\035\001\022\023\n\013bonus_count\030\004 \001(\r\022\017\n\007item_id\030\005 \001("
  "\004\022\021\n\tdef_index\030\006 \001(\r\022\024\n\014seconds_left\030\007 \001"
  "(\r\022\032\n\014booster_type\030\010 \001(\rB\004\200\246\035\001\"w\n\031CSOEco"
  "nItemLeagueViewPass\022\030\n\naccount_id\030\001 \001(\rB"
  "\004\200\246\035\001\022\027\n\tleague_id\030\002 \001(\rB\004\200\246\035\001\022\021\n\titemin"
  "dex\030\004 \001(\r\022\024\n\014grant_reason\030\005 \001(\r\"O\n\026CSOEc"
  "onItemEventTicket\022\022\n\naccount_id\030\001 \001(\r\022\020\n"
  "\010event_id\030\002 \001(\r\022\017\n\007item_id\030\003 \001(\004\"\312\001\n\035CSO"
  "EconItemTournamentPassport\022\022\n\naccount_id"
  "\030\001 \001(\r\022\021\n\tleague_id\030\002 \001(\r\022\017\n\007item_id\030\003 \001"
  "(\004\022\035\n\025original_purchaser_id\030\004 \001(\r\022\030\n\020pas"
  "sports_bought\030\005 \001(\r\022\017\n\007version\030\006 \001(\r\022\021\n\t"
  "def_index\030\007 \001(\r\022\024\n\014reward_flags\030\010 \001(\r\"+\n"
  "\031CMsgGCStorePurchaseCancel\022\016\n\006txn_id\030\001 \001"
  "(\004\"3\n!CMsgGCStorePurchaseCancelResponse\022"
  "\016\n\006result\030\001 \001(\r\"-\n\033CMsgGCStorePurchaseFi"
  "nalize\022\016\n\006txn_id\030\001 \001(\004\"G\n#CMsgGCStorePur"
  "chaseFinalizeResponse\022\016\n\006result\030\001 \001(\r\022\020\n"
  "\010item_ids\030\002 \003(\004\"3\n\037CMsgGCToGCBannedWordL"
  "istUpdated\022\020\n\010group_id\030\001 \001(\r\"\?\n\027CMsgGCTo"
  "GCDirtySDOCache\022\020\n\010sdo_type\030\001 \001(\r\022\022\n\nkey"
  "_uint64\030\002 \001(\004\"G\n\037CMsgGCToGCDirtyMultiple"
  "SDOCache\022\020\n\010sdo_type\030\001 \001(\r\022\022\n\nkey_uint64"
  "\030\002 \003(\004\"H\n\037CMsgGCToGCApplyLocalizationDif"
  "f\022\020\n\010language\030\001 \001(\r\022\023\n\013packed_diff\030\002 \001(\t"
  "\":\n\'CMsgGCToGCApplyLocalizationDiffRespo"
  "nse\022\017\n\007success\030\001 \001(\010\"H\n\021CMsgGCCollectIte"
  "m\022\032\n\022collection_item_id\030\001 \001(\004\022\027\n\017subject"
  "_item_id\030\002 \001(\004\"\024\n\022CMsgSDONoMemcached\"/\n\033"
  "CMsgGCToGCUpdateSQLKeyValue\022\020\n\010key_name\030"
  "\001 \001(\t\"4\n\032CMsgGCServerVersionUpdated\022\026\n\016s"
  "erver_version\030\001 \001(\r\"4\n\032CMsgGCClientVersi"
  "onUpdated\022\026\n\016client_version\030\001 \001(\r\" \n\036CMs"
  "gGCToGCWebAPIAccountChanged\"G\n\023CMsgRecip"
  "eComponent\022\027\n\017subject_item_id\030\001 \001(\004\022\027\n\017a"
  "ttribute_index\030\002 \001(\004\"z\n!CMsgFulfillDynam"
  "icRecipeComponent\022\024\n\014tool_item_id\030\001 \001(\004\022"
  "\?\n\026consumption_components\030\002 \003(\0132\037.proto."
  "dota.CMsgRecipeComponent\"6\n\035CMsgGCClient"
  "MarketDataRequest\022\025\n\ruser_currency\030\001 \001(\r"
  "\"\210\001\n\033CMsgGCClientMarketDataEntry\022\026\n\016item"
  "_def_index\030\001 \001(\r\022\024\n\014item_quality\030\002 \001(\r\022\032"
  "\n\022item_sell_listings\030\003 \001(\r\022\037\n\027price_in_l"
  "ocal_currency\030\004 \001(\r\"R\n\026CMsgGCClientMarke"
  "tData\0228\n\007entries\030\001 \003(\0132\'.proto.dota.CMsg"
  "GCClientMarketDataEntry\"\\\n\017CMsgExtractGe"
  "ms\022\024\n\014tool_item_id\030\001 \001(\004\022\024\n\014item_item_id"
  "\030\002 \001(\004\022\035\n\016item_socket_id\030\003 \001(\r:\00565535\"\337\002"
  "\n\027CMsgExtractGemsResponse\022\017\n\007item_id\030\001 \001"
  "(\004\022[\n\010response\030\002 \001(\01620.proto.dota.CMsgEx"
  "tractGemsResponse.EExtractGems:\027k_Extrac"
  "tGems_Succeeded\"\325\001\n\014EExtractGems\022\033\n\027k_Ex"
  "tractGems_Succeeded\020\000\022&\n\"k_ExtractGems_F"
  "ailed_ToolIsInvalid\020\001\022&\n\"k_ExtractGems_F"
  "ailed_ItemIsInvalid\020\002\022,\n(k_ExtractGems_F"
  "ailed_ToolCannotRemoveGem\020\003\022*\n&k_Extract"
  "Gems_Failed_FailedToRemoveGem\020\004\"L\n\rCMsgA"
  "ddSocket\022\024\n\014tool_item_id\030\001 \001(\004\022\024\n\014item_i"
  "tem_id\030\002 \001(\004\022\017\n\007unusual\030\003 \001(\010\"\304\002\n\025CMsgAd"
  "dSocketResponse\022\017\n\007item_id\030\001 \001(\004\022\034\n\024upda"
  "ted_socket_index\030\002 \003(\r\022U\n\010response\030\003 \001(\016"
  "2,.proto.dota.CMsgAddSocketResponse.EAdd"
  "Socket:\025k_AddSocket_Succeeded\"\244\001\n\nEAddSo"
  "cket\022\031\n\025k_AddSocket_Succeeded\020\000\022$\n k_Add"
  "Socket_Failed_ToolIsInvalid\020\001\022+\n\'k_AddSo"
  "cket_Failed_ItemCannotBeSocketed\020\002\022(\n$k_"
  "AddSocket_Failed_FailedToAddSocket\020\003\"D\n\027"
  "CMsgAddItemToSocketData\022\023\n\013gem_item_id\030\001"
  " \001(\004\022\024\n\014socket_index\030\002 \001(\r\"h\n\023CMsgAddIte"
  "mToSocket\022\024\n\014item_item_id\030\001 \001(\004\022;\n\016gems_"
  "to_socket\030\002 \003(\0132#.proto.dota.CMsgAddItem"
  "ToSocketData\"\352\003\n\033CMsgAddItemToSocketResp"
  "onse\022\024\n\014item_item_id\030\001 \001(\004\022\034\n\024updated_so"
  "cket_index\030\002 \003(\r\022U\n\010response\030\003 \001(\0162/.pro"
  "to.dota.CMsgAddItemToSocketResponse.EAdd"
  "Gem:\022k_AddGem_Succeeded\"\277\002\n\007EAddGem\022\026\n\022k"
  "_AddGem_Succeeded\020\000\022 \n\034k_AddGem_Failed_G"
  "emIsInvalid\020\001\022!\n\035k_AddGem_Failed_ItemIsI"
  "nvalid\020\002\022\"\n\036k_AddGem_Failed_FailedToAddG"
  "em\020\003\022+\n\'k_AddGem_Failed_InvalidGemTypeFo"
  "rSocket\020\004\022)\n%k_AddGem_Failed_InvalidGemT"
  "ypeForHero\020\005\022)\n%k_AddGem_Failed_InvalidG"
  "emTypeForSlot\020\006\0220\n,k_AddGem_Failed_Socke"
  "tContainsUnremovableGem\020\007\"F\n\030CMsgResetSt"
  "rangeGemCount\022\024\n\014item_item_id\030\001 \001(\004\022\024\n\014s"
  "ocket_index\030\002 \001(\r\"\311\002\n CMsgResetStrangeGe"
  "mCountResponse\022^\n\010response\030\001 \001(\01626.proto"
  ".dota.CMsgResetStrangeGemCountResponse.E"
  "ResetGem:\024k_ResetGem_Succeeded\"\304\001\n\tERese"
  "tGem\022\030\n\024k_ResetGem_Succeeded\020\000\022&\n\"k_Rese"
  "tGem_Failed_FailedToResetGem\020\001\022#\n\037k_Rese"
  "tGem_Failed_ItemIsInvalid\020\002\022%\n!k_ResetGe"
  "m_Failed_InvalidSocketId\020\003\022)\n%k_ResetGem"
  "_Failed_SocketCannotBeReset\020\004\"[\n\035CMsgGCT"
  "oClientPollFileRequest\022\021\n\tfile_name\030\001 \001("
  "\t\022\026\n\016client_version\030\002 \001(\r\022\017\n\007poll_id\030\003 \001"
  "(\r\"D\n\036CMsgGCToClientPollFileResponse\022\017\n\007"
  "poll_id\030\001 \001(\r\022\021\n\tfile_size\030\002 \001(\r\">\n\031CMsg"
  "GCToGCPerformManualOp\022\r\n\005op_id\030\001 \001(\004\022\022\n\n"
  "group_code\030\002 \001(\r\"H\n\"CMsgGCToGCPerformMan"
  "ualOpCompleted\022\017\n\007success\030\001 \001(\010\022\021\n\tsourc"
  "e_gc\030\002 \001(\r\"&\n$CMsgGCToGCReloadServerRegi"
  "onSettings*\217\005\n\nEGCBaseMsg\022\032\n\025k_EMsgGCSys"
  "temMessage\020\241\037\022\035\n\030k_EMsgGCReplicateConVar"
  "s\020\242\037\022\032\n\025k_EMsgGCConVarUpdated\020\243\037\022\032\n\025k_EM"
  "sgGCInviteToParty\020\225#\022\036\n\031k_EMsgGCInvitati"
  "onCreated\020\226#\022 \n\033k_EMsgGCPartyInviteRespo"
  "nse\020\227#\022\032\n\025k_EMsgGCKickFromParty\020\230#\022\027\n\022k_"
  "EMsgGCLeaveParty\020\231#\022\034\n\027k_EMsgGCServerAva"
  "ilable\020\232#\022\"\n\035k_EMsgGCClientConnectToServ"
  "er\020\233#\022\033\n\026k_EMsgGCGameServerInfo\020\234#\022\022\n\rk_"
  "EMsgGCError\020\235#\022\037\n\032k_EMsgGCLANServerAvail"
  "able\020\237#\022\032\n\025k_EMsgGCInviteToLobby\020\240#\022 \n\033k"
  "_EMsgGCLobbyInviteResponse\020\241#\022$\n\037k_EMsgG"
  "CToClientPollFileRequest\020\242#\022%\n k_EMsgGCT"
  "oClientPollFileResponse\020\243#\022 \n\033k_EMsgGCTo"
  "GCPerformManualOp\020\244#\022)\n$k_EMsgGCToGCPerf"
  "ormManualOpCompleted\020\245#\022+\n&k_EMsgGCToGCR"
  "eloadServerRegionSettings\020\246#*Y\n\027EGCBaseP"
  "rotoObjectTypes\022\036\n\031k_EProtoObjectPartyIn"
  "vite\020\351\007\022\036\n\031k_EProtoObjectLobbyInvite\020\352\007*"
  "\350\003\n\030ECustomGameInstallStatus\022&\n\"k_ECusto"
  "mGameInstallStatus_Unknown\020\000\022$\n k_ECusto"
  "mGameInstallStatus_Ready\020\001\022#\n\037k_ECustomG"
  "ameInstallStatus_Busy\020\002\022,\n(k_ECustomGame"
  "InstallStatus_FailedGeneric\020e\0222\n.k_ECust"
  "omGameInstallStatus_FailedInternalError\020"
  "f\0227\n3k_ECustomGameInstallStatus_Requeste"
  "dTimestampTooOld\020g\0227\n3k_ECustomGameInsta"
  "llStatus_RequestedTimestampTooNew\020h\022*\n&k"
  "_ECustomGameInstallStatus_CRCMismatch\020i\022"
  "*\n&k_ECustomGameInstallStatus_FailedStea"
  "m\020j\022-\n)k_ECustomGameInstallStatus_Failed"
  "Canceled\020kB\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_base_5fgcmessages_2eproto = {
  false, InitDefaults_base_5fgcmessages_2eproto, 
  descriptor_table_protodef_base_5fgcmessages_2eproto,
  "base_gcmessages.proto", &assign_descriptors_table_base_5fgcmessages_2eproto, 10097,
};

void AddDescriptors_base_5fgcmessages_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_steammessages_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_base_5fgcmessages_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_base_5fgcmessages_2eproto = []() { AddDescriptors_base_5fgcmessages_2eproto(); return true; }();
namespace proto {
namespace dota {
const ::google::protobuf::EnumDescriptor* CMsgExtractGemsResponse_EExtractGems_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_base_5fgcmessages_2eproto);
  return file_level_enum_descriptors_base_5fgcmessages_2eproto[0];
}
bool CMsgExtractGemsResponse_EExtractGems_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::k_ExtractGems_Succeeded;
const CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::k_ExtractGems_Failed_ToolIsInvalid;
const CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::k_ExtractGems_Failed_ItemIsInvalid;
const CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::k_ExtractGems_Failed_ToolCannotRemoveGem;
const CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::k_ExtractGems_Failed_FailedToRemoveGem;
const CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::EExtractGems_MIN;
const CMsgExtractGemsResponse_EExtractGems CMsgExtractGemsResponse::EExtractGems_MAX;
const int CMsgExtractGemsResponse::EExtractGems_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgAddSocketResponse_EAddSocket_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_base_5fgcmessages_2eproto);
  return file_level_enum_descriptors_base_5fgcmessages_2eproto[1];
}
bool CMsgAddSocketResponse_EAddSocket_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgAddSocketResponse_EAddSocket CMsgAddSocketResponse::k_AddSocket_Succeeded;
const CMsgAddSocketResponse_EAddSocket CMsgAddSocketResponse::k_AddSocket_Failed_ToolIsInvalid;
const CMsgAddSocketResponse_EAddSocket CMsgAddSocketResponse::k_AddSocket_Failed_ItemCannotBeSocketed;
const CMsgAddSocketResponse_EAddSocket CMsgAddSocketResponse::k_AddSocket_Failed_FailedToAddSocket;
const CMsgAddSocketResponse_EAddSocket CMsgAddSocketResponse::EAddSocket_MIN;
const CMsgAddSocketResponse_EAddSocket CMsgAddSocketResponse::EAddSocket_MAX;
const int CMsgAddSocketResponse::EAddSocket_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgAddItemToSocketResponse_EAddGem_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_base_5fgcmessages_2eproto);
  return file_level_enum_descriptors_base_5fgcmessages_2eproto[2];
}
bool CMsgAddItemToSocketResponse_EAddGem_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Succeeded;
const CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_GemIsInvalid;
const CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_ItemIsInvalid;
const CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_FailedToAddGem;
const CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_InvalidGemTypeForSocket;
const CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_InvalidGemTypeForHero;
const CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_InvalidGemTypeForSlot;
const CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::k_AddGem_Failed_SocketContainsUnremovableGem;
const CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::EAddGem_MIN;
const CMsgAddItemToSocketResponse_EAddGem CMsgAddItemToSocketResponse::EAddGem_MAX;
const int CMsgAddItemToSocketResponse::EAddGem_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgResetStrangeGemCountResponse_EResetGem_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_base_5fgcmessages_2eproto);
  return file_level_enum_descriptors_base_5fgcmessages_2eproto[3];
}
bool CMsgResetStrangeGemCountResponse_EResetGem_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::k_ResetGem_Succeeded;
const CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::k_ResetGem_Failed_FailedToResetGem;
const CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::k_ResetGem_Failed_ItemIsInvalid;
const CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::k_ResetGem_Failed_InvalidSocketId;
const CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::k_ResetGem_Failed_SocketCannotBeReset;
const CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::EResetGem_MIN;
const CMsgResetStrangeGemCountResponse_EResetGem CMsgResetStrangeGemCountResponse::EResetGem_MAX;
const int CMsgResetStrangeGemCountResponse::EResetGem_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* EGCBaseMsg_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_base_5fgcmessages_2eproto);
  return file_level_enum_descriptors_base_5fgcmessages_2eproto[4];
}
bool EGCBaseMsg_IsValid(int value) {
  switch (value) {
    case 4001:
    case 4002:
    case 4003:
    case 4501:
    case 4502:
    case 4503:
    case 4504:
    case 4505:
    case 4506:
    case 4507:
    case 4508:
    case 4509:
    case 4511:
    case 4512:
    case 4513:
    case 4514:
    case 4515:
    case 4516:
    case 4517:
    case 4518:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGCBaseProtoObjectTypes_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_base_5fgcmessages_2eproto);
  return file_level_enum_descriptors_base_5fgcmessages_2eproto[5];
}
bool EGCBaseProtoObjectTypes_IsValid(int value) {
  switch (value) {
    case 1001:
    case 1002:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ECustomGameInstallStatus_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_base_5fgcmessages_2eproto);
  return file_level_enum_descriptors_base_5fgcmessages_2eproto[6];
}
bool ECustomGameInstallStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CGCStorePurchaseInit_LineItem::InitAsDefaultInstance() {
}
class CGCStorePurchaseInit_LineItem::HasBitSetters {
 public:
  static void set_has_item_def_id(CGCStorePurchaseInit_LineItem* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_quantity(CGCStorePurchaseInit_LineItem* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_cost_in_local_currency(CGCStorePurchaseInit_LineItem* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_purchase_type(CGCStorePurchaseInit_LineItem* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_source_reference_id(CGCStorePurchaseInit_LineItem* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CGCStorePurchaseInit_LineItem::kItemDefIdFieldNumber;
const int CGCStorePurchaseInit_LineItem::kQuantityFieldNumber;
const int CGCStorePurchaseInit_LineItem::kCostInLocalCurrencyFieldNumber;
const int CGCStorePurchaseInit_LineItem::kPurchaseTypeFieldNumber;
const int CGCStorePurchaseInit_LineItem::kSourceReferenceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CGCStorePurchaseInit_LineItem::CGCStorePurchaseInit_LineItem()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CGCStorePurchaseInit_LineItem)
}
CGCStorePurchaseInit_LineItem::CGCStorePurchaseInit_LineItem(const CGCStorePurchaseInit_LineItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_def_id_, &from.item_def_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_reference_id_) -
    reinterpret_cast<char*>(&item_def_id_)) + sizeof(source_reference_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CGCStorePurchaseInit_LineItem)
}

void CGCStorePurchaseInit_LineItem::SharedCtor() {
  ::memset(&item_def_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_reference_id_) -
      reinterpret_cast<char*>(&item_def_id_)) + sizeof(source_reference_id_));
}

CGCStorePurchaseInit_LineItem::~CGCStorePurchaseInit_LineItem() {
  // @@protoc_insertion_point(destructor:proto.dota.CGCStorePurchaseInit_LineItem)
  SharedDtor();
}

void CGCStorePurchaseInit_LineItem::SharedDtor() {
}

void CGCStorePurchaseInit_LineItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CGCStorePurchaseInit_LineItem& CGCStorePurchaseInit_LineItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CGCStorePurchaseInit_LineItem_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CGCStorePurchaseInit_LineItem::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CGCStorePurchaseInit_LineItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&item_def_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_reference_id_) -
        reinterpret_cast<char*>(&item_def_id_)) + sizeof(source_reference_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CGCStorePurchaseInit_LineItem::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CGCStorePurchaseInit_LineItem*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 item_def_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_item_def_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 quantity = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_quantity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 cost_in_local_currency = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_cost_in_local_currency(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 purchase_type = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_purchase_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 source_reference_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_source_reference_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CGCStorePurchaseInit_LineItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CGCStorePurchaseInit_LineItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_def_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_item_def_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quantity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_quantity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 cost_in_local_currency = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_cost_in_local_currency(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cost_in_local_currency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 purchase_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_purchase_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &purchase_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 source_reference_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_source_reference_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &source_reference_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CGCStorePurchaseInit_LineItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CGCStorePurchaseInit_LineItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CGCStorePurchaseInit_LineItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CGCStorePurchaseInit_LineItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_def_id(), output);
  }

  // optional uint32 quantity = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->quantity(), output);
  }

  // optional uint32 cost_in_local_currency = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cost_in_local_currency(), output);
  }

  // optional uint32 purchase_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->purchase_type(), output);
  }

  // optional uint64 source_reference_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->source_reference_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CGCStorePurchaseInit_LineItem)
}

::google::protobuf::uint8* CGCStorePurchaseInit_LineItem::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CGCStorePurchaseInit_LineItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_def_id(), target);
  }

  // optional uint32 quantity = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->quantity(), target);
  }

  // optional uint32 cost_in_local_currency = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cost_in_local_currency(), target);
  }

  // optional uint32 purchase_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->purchase_type(), target);
  }

  // optional uint64 source_reference_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->source_reference_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CGCStorePurchaseInit_LineItem)
  return target;
}

size_t CGCStorePurchaseInit_LineItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CGCStorePurchaseInit_LineItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 item_def_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def_id());
    }

    // optional uint32 quantity = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantity());
    }

    // optional uint32 cost_in_local_currency = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cost_in_local_currency());
    }

    // optional uint32 purchase_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->purchase_type());
    }

    // optional uint64 source_reference_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->source_reference_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CGCStorePurchaseInit_LineItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CGCStorePurchaseInit_LineItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CGCStorePurchaseInit_LineItem* source =
      ::google::protobuf::DynamicCastToGenerated<CGCStorePurchaseInit_LineItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CGCStorePurchaseInit_LineItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CGCStorePurchaseInit_LineItem)
    MergeFrom(*source);
  }
}

void CGCStorePurchaseInit_LineItem::MergeFrom(const CGCStorePurchaseInit_LineItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CGCStorePurchaseInit_LineItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      item_def_id_ = from.item_def_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000004u) {
      cost_in_local_currency_ = from.cost_in_local_currency_;
    }
    if (cached_has_bits & 0x00000008u) {
      purchase_type_ = from.purchase_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      source_reference_id_ = from.source_reference_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CGCStorePurchaseInit_LineItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CGCStorePurchaseInit_LineItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CGCStorePurchaseInit_LineItem::CopyFrom(const CGCStorePurchaseInit_LineItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CGCStorePurchaseInit_LineItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CGCStorePurchaseInit_LineItem::IsInitialized() const {
  return true;
}

void CGCStorePurchaseInit_LineItem::Swap(CGCStorePurchaseInit_LineItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CGCStorePurchaseInit_LineItem::InternalSwap(CGCStorePurchaseInit_LineItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_def_id_, other->item_def_id_);
  swap(quantity_, other->quantity_);
  swap(cost_in_local_currency_, other->cost_in_local_currency_);
  swap(purchase_type_, other->purchase_type_);
  swap(source_reference_id_, other->source_reference_id_);
}

::google::protobuf::Metadata CGCStorePurchaseInit_LineItem::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCStorePurchaseInit::InitAsDefaultInstance() {
}
class CMsgGCStorePurchaseInit::HasBitSetters {
 public:
  static void set_has_country(CMsgGCStorePurchaseInit* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_language(CMsgGCStorePurchaseInit* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_currency(CMsgGCStorePurchaseInit* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCStorePurchaseInit::kCountryFieldNumber;
const int CMsgGCStorePurchaseInit::kLanguageFieldNumber;
const int CMsgGCStorePurchaseInit::kCurrencyFieldNumber;
const int CMsgGCStorePurchaseInit::kLineItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCStorePurchaseInit::CMsgGCStorePurchaseInit()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCStorePurchaseInit)
}
CMsgGCStorePurchaseInit::CMsgGCStorePurchaseInit(const CMsgGCStorePurchaseInit& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      line_items_(from.line_items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_country()) {
    country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
  }
  ::memcpy(&language_, &from.language_,
    static_cast<size_t>(reinterpret_cast<char*>(&currency_) -
    reinterpret_cast<char*>(&language_)) + sizeof(currency_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCStorePurchaseInit)
}

void CMsgGCStorePurchaseInit::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCStorePurchaseInit_base_5fgcmessages_2eproto.base);
  country_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&language_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&currency_) -
      reinterpret_cast<char*>(&language_)) + sizeof(currency_));
}

CMsgGCStorePurchaseInit::~CMsgGCStorePurchaseInit() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCStorePurchaseInit)
  SharedDtor();
}

void CMsgGCStorePurchaseInit::SharedDtor() {
  country_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCStorePurchaseInit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCStorePurchaseInit& CMsgGCStorePurchaseInit::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCStorePurchaseInit_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCStorePurchaseInit::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCStorePurchaseInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  line_items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    country_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&language_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&currency_) -
        reinterpret_cast<char*>(&language_)) + sizeof(currency_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCStorePurchaseInit::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCStorePurchaseInit*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string country = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCStorePurchaseInit.country");
        object = msg->mutable_country();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 language = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_language(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 currency = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_currency(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CGCStorePurchaseInit_LineItem line_items = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CGCStorePurchaseInit_LineItem::_InternalParse;
          object = msg->add_line_items();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCStorePurchaseInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCStorePurchaseInit)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string country = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), static_cast<int>(this->country().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCStorePurchaseInit.country");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 language = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_language(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &language_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 currency = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_currency(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CGCStorePurchaseInit_LineItem line_items = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_line_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCStorePurchaseInit)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCStorePurchaseInit)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCStorePurchaseInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCStorePurchaseInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string country = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), static_cast<int>(this->country().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCStorePurchaseInit.country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->country(), output);
  }

  // optional int32 language = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->language(), output);
  }

  // optional int32 currency = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currency(), output);
  }

  // repeated .proto.dota.CGCStorePurchaseInit_LineItem line_items = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->line_items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->line_items(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCStorePurchaseInit)
}

::google::protobuf::uint8* CMsgGCStorePurchaseInit::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCStorePurchaseInit)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string country = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), static_cast<int>(this->country().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCStorePurchaseInit.country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->country(), target);
  }

  // optional int32 language = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->language(), target);
  }

  // optional int32 currency = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->currency(), target);
  }

  // repeated .proto.dota.CGCStorePurchaseInit_LineItem line_items = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->line_items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->line_items(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCStorePurchaseInit)
  return target;
}

size_t CMsgGCStorePurchaseInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCStorePurchaseInit)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CGCStorePurchaseInit_LineItem line_items = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->line_items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->line_items(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string country = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional int32 language = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->language());
    }

    // optional int32 currency = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currency());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCStorePurchaseInit::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCStorePurchaseInit)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCStorePurchaseInit* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCStorePurchaseInit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCStorePurchaseInit)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCStorePurchaseInit)
    MergeFrom(*source);
  }
}

void CMsgGCStorePurchaseInit::MergeFrom(const CMsgGCStorePurchaseInit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCStorePurchaseInit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  line_items_.MergeFrom(from.line_items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      country_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.country_);
    }
    if (cached_has_bits & 0x00000002u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x00000004u) {
      currency_ = from.currency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCStorePurchaseInit::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCStorePurchaseInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCStorePurchaseInit::CopyFrom(const CMsgGCStorePurchaseInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCStorePurchaseInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseInit::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseInit::Swap(CMsgGCStorePurchaseInit* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCStorePurchaseInit::InternalSwap(CMsgGCStorePurchaseInit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&line_items_)->InternalSwap(CastToBase(&other->line_items_));
  country_.Swap(&other->country_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(language_, other->language_);
  swap(currency_, other->currency_);
}

::google::protobuf::Metadata CMsgGCStorePurchaseInit::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCStorePurchaseInitResponse::InitAsDefaultInstance() {
}
class CMsgGCStorePurchaseInitResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgGCStorePurchaseInitResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_txn_id(CMsgGCStorePurchaseInitResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCStorePurchaseInitResponse::kResultFieldNumber;
const int CMsgGCStorePurchaseInitResponse::kTxnIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCStorePurchaseInitResponse::CMsgGCStorePurchaseInitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCStorePurchaseInitResponse)
}
CMsgGCStorePurchaseInitResponse::CMsgGCStorePurchaseInitResponse(const CMsgGCStorePurchaseInitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&txn_id_, &from.txn_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&txn_id_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCStorePurchaseInitResponse)
}

void CMsgGCStorePurchaseInitResponse::SharedCtor() {
  ::memset(&txn_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&txn_id_)) + sizeof(result_));
}

CMsgGCStorePurchaseInitResponse::~CMsgGCStorePurchaseInitResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCStorePurchaseInitResponse)
  SharedDtor();
}

void CMsgGCStorePurchaseInitResponse::SharedDtor() {
}

void CMsgGCStorePurchaseInitResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCStorePurchaseInitResponse& CMsgGCStorePurchaseInitResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCStorePurchaseInitResponse_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCStorePurchaseInitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCStorePurchaseInitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&txn_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&txn_id_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCStorePurchaseInitResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCStorePurchaseInitResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_result(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 txn_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_txn_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCStorePurchaseInitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCStorePurchaseInitResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_result(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 txn_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_txn_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txn_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCStorePurchaseInitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCStorePurchaseInitResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCStorePurchaseInitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCStorePurchaseInitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  // optional uint64 txn_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->txn_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCStorePurchaseInitResponse)
}

::google::protobuf::uint8* CMsgGCStorePurchaseInitResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCStorePurchaseInitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 result = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  // optional uint64 txn_id = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->txn_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCStorePurchaseInitResponse)
  return target;
}

size_t CMsgGCStorePurchaseInitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCStorePurchaseInitResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 txn_id = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->txn_id());
    }

    // optional int32 result = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCStorePurchaseInitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCStorePurchaseInitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCStorePurchaseInitResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCStorePurchaseInitResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCStorePurchaseInitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCStorePurchaseInitResponse)
    MergeFrom(*source);
  }
}

void CMsgGCStorePurchaseInitResponse::MergeFrom(const CMsgGCStorePurchaseInitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCStorePurchaseInitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      txn_id_ = from.txn_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCStorePurchaseInitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCStorePurchaseInitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCStorePurchaseInitResponse::CopyFrom(const CMsgGCStorePurchaseInitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCStorePurchaseInitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseInitResponse::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseInitResponse::Swap(CMsgGCStorePurchaseInitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCStorePurchaseInitResponse::InternalSwap(CMsgGCStorePurchaseInitResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(txn_id_, other->txn_id_);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgGCStorePurchaseInitResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSystemBroadcast::InitAsDefaultInstance() {
}
class CMsgSystemBroadcast::HasBitSetters {
 public:
  static void set_has_message(CMsgSystemBroadcast* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSystemBroadcast::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSystemBroadcast::CMsgSystemBroadcast()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSystemBroadcast)
}
CMsgSystemBroadcast::CMsgSystemBroadcast(const CMsgSystemBroadcast& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSystemBroadcast)
}

void CMsgSystemBroadcast::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSystemBroadcast_base_5fgcmessages_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgSystemBroadcast::~CMsgSystemBroadcast() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSystemBroadcast)
  SharedDtor();
}

void CMsgSystemBroadcast::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgSystemBroadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSystemBroadcast& CMsgSystemBroadcast::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSystemBroadcast_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSystemBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSystemBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSystemBroadcast::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSystemBroadcast*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string message = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgSystemBroadcast.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSystemBroadcast::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSystemBroadcast)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgSystemBroadcast.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSystemBroadcast)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSystemBroadcast)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSystemBroadcast::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSystemBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSystemBroadcast.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSystemBroadcast)
}

::google::protobuf::uint8* CMsgSystemBroadcast::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSystemBroadcast)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgSystemBroadcast.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSystemBroadcast)
  return target;
}

size_t CMsgSystemBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSystemBroadcast)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSystemBroadcast::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSystemBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSystemBroadcast* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSystemBroadcast>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSystemBroadcast)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSystemBroadcast)
    MergeFrom(*source);
  }
}

void CMsgSystemBroadcast::MergeFrom(const CMsgSystemBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSystemBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message()) {
    _has_bits_[0] |= 0x00000001u;
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void CMsgSystemBroadcast::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSystemBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSystemBroadcast::CopyFrom(const CMsgSystemBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSystemBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSystemBroadcast::IsInitialized() const {
  return true;
}

void CMsgSystemBroadcast::Swap(CMsgSystemBroadcast* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSystemBroadcast::InternalSwap(CMsgSystemBroadcast* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgSystemBroadcast::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientPingData::InitAsDefaultInstance() {
}
class CMsgClientPingData::HasBitSetters {
 public:
  static void set_has_region_ping_failed_bitmask(CMsgClientPingData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientPingData::kRelayCodesFieldNumber;
const int CMsgClientPingData::kRelayPingsFieldNumber;
const int CMsgClientPingData::kRegionCodesFieldNumber;
const int CMsgClientPingData::kRegionPingsFieldNumber;
const int CMsgClientPingData::kRegionPingFailedBitmaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientPingData::CMsgClientPingData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientPingData)
}
CMsgClientPingData::CMsgClientPingData(const CMsgClientPingData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      relay_codes_(from.relay_codes_),
      relay_pings_(from.relay_pings_),
      region_codes_(from.region_codes_),
      region_pings_(from.region_pings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  region_ping_failed_bitmask_ = from.region_ping_failed_bitmask_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientPingData)
}

void CMsgClientPingData::SharedCtor() {
  region_ping_failed_bitmask_ = 0u;
}

CMsgClientPingData::~CMsgClientPingData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientPingData)
  SharedDtor();
}

void CMsgClientPingData::SharedDtor() {
}

void CMsgClientPingData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientPingData& CMsgClientPingData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientPingData_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientPingData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientPingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  relay_codes_.Clear();
  relay_pings_.Clear();
  region_codes_.Clear();
  region_pings_.Clear();
  region_ping_failed_bitmask_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientPingData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientPingData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated fixed32 relay_codes = 4 [packed = true];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 34) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedFixed32Parser;
          object = msg->mutable_relay_codes();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        do {
          msg->add_relay_codes(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
          ptr += sizeof(::google::protobuf::uint32);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 37 && (ptr += 1));
        break;
      }
      // repeated uint32 relay_pings = 5 [packed = true];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 42) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_relay_pings();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        do {
          msg->add_relay_pings(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
        break;
      }
      // repeated uint32 region_codes = 8 [packed = true];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) == 66) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_region_codes();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        do {
          msg->add_region_codes(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 64 && (ptr += 1));
        break;
      }
      // repeated uint32 region_pings = 9 [packed = true];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) == 74) {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
          object = msg->mutable_region_pings();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          if (size) ptr = parser_till_end(ptr, newend, object, ctx);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        do {
          msg->add_region_pings(::google::protobuf::internal::ReadVarint(&ptr));
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 72 && (ptr += 1));
        break;
      }
      // optional uint32 region_ping_failed_bitmask = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_region_ping_failed_bitmask(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientPingData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientPingData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed32 relay_codes = 4 [packed = true];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, this->mutable_relay_codes())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 1, 34u, input, this->mutable_relay_codes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 relay_pings = 5 [packed = true];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_relay_pings())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42u, input, this->mutable_relay_pings())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 region_codes = 8 [packed = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_region_codes())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66u, input, this->mutable_region_codes())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 region_pings = 9 [packed = true];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_region_pings())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 74u, input, this->mutable_region_pings())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 region_ping_failed_bitmask = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_region_ping_failed_bitmask(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &region_ping_failed_bitmask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientPingData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientPingData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientPingData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientPingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 relay_codes = 4 [packed = true];
  if (this->relay_codes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_relay_codes_cached_byte_size_.load(
        std::memory_order_relaxed));
    ::google::protobuf::internal::WireFormatLite::WriteFixed32Array(
      this->relay_codes().data(), this->relay_codes_size(), output);
  }

  // repeated uint32 relay_pings = 5 [packed = true];
  if (this->relay_pings_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_relay_pings_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->relay_pings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->relay_pings(i), output);
  }

  // repeated uint32 region_codes = 8 [packed = true];
  if (this->region_codes_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_region_codes_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->region_codes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->region_codes(i), output);
  }

  // repeated uint32 region_pings = 9 [packed = true];
  if (this->region_pings_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_region_pings_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->region_pings_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->region_pings(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 region_ping_failed_bitmask = 10;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->region_ping_failed_bitmask(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientPingData)
}

::google::protobuf::uint8* CMsgClientPingData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientPingData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated fixed32 relay_codes = 4 [packed = true];
  if (this->relay_codes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _relay_codes_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFixed32NoTagToArray(this->relay_codes_, target);
  }

  // repeated uint32 relay_pings = 5 [packed = true];
  if (this->relay_pings_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _relay_pings_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->relay_pings_, target);
  }

  // repeated uint32 region_codes = 8 [packed = true];
  if (this->region_codes_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _region_codes_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->region_codes_, target);
  }

  // repeated uint32 region_pings = 9 [packed = true];
  if (this->region_pings_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        _region_pings_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->region_pings_, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional uint32 region_ping_failed_bitmask = 10;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->region_ping_failed_bitmask(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientPingData)
  return target;
}

size_t CMsgClientPingData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientPingData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed32 relay_codes = 4 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->relay_codes_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _relay_codes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 relay_pings = 5 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->relay_pings_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _relay_pings_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 region_codes = 8 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->region_codes_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _region_codes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 region_pings = 9 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->region_pings_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast<::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    _region_pings_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // optional uint32 region_ping_failed_bitmask = 10;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->region_ping_failed_bitmask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientPingData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientPingData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientPingData* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientPingData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientPingData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientPingData)
    MergeFrom(*source);
  }
}

void CMsgClientPingData::MergeFrom(const CMsgClientPingData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientPingData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  relay_codes_.MergeFrom(from.relay_codes_);
  relay_pings_.MergeFrom(from.relay_pings_);
  region_codes_.MergeFrom(from.region_codes_);
  region_pings_.MergeFrom(from.region_pings_);
  if (from.has_region_ping_failed_bitmask()) {
    set_region_ping_failed_bitmask(from.region_ping_failed_bitmask());
  }
}

void CMsgClientPingData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientPingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientPingData::CopyFrom(const CMsgClientPingData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientPingData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientPingData::IsInitialized() const {
  return true;
}

void CMsgClientPingData::Swap(CMsgClientPingData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientPingData::InternalSwap(CMsgClientPingData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  relay_codes_.InternalSwap(&other->relay_codes_);
  relay_pings_.InternalSwap(&other->relay_pings_);
  region_codes_.InternalSwap(&other->region_codes_);
  region_pings_.InternalSwap(&other->region_pings_);
  swap(region_ping_failed_bitmask_, other->region_ping_failed_bitmask_);
}

::google::protobuf::Metadata CMsgClientPingData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgInviteToParty::InitAsDefaultInstance() {
  ::proto::dota::_CMsgInviteToParty_default_instance_._instance.get_mutable()->ping_data_ = const_cast< ::proto::dota::CMsgClientPingData*>(
      ::proto::dota::CMsgClientPingData::internal_default_instance());
}
class CMsgInviteToParty::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgInviteToParty* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_client_version(CMsgInviteToParty* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_team_id(CMsgInviteToParty* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_as_coach(CMsgInviteToParty* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::proto::dota::CMsgClientPingData& ping_data(const CMsgInviteToParty* msg);
  static void set_has_ping_data(CMsgInviteToParty* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgClientPingData&
CMsgInviteToParty::HasBitSetters::ping_data(const CMsgInviteToParty* msg) {
  return *msg->ping_data_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgInviteToParty::kSteamIdFieldNumber;
const int CMsgInviteToParty::kClientVersionFieldNumber;
const int CMsgInviteToParty::kTeamIdFieldNumber;
const int CMsgInviteToParty::kAsCoachFieldNumber;
const int CMsgInviteToParty::kPingDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgInviteToParty::CMsgInviteToParty()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgInviteToParty)
}
CMsgInviteToParty::CMsgInviteToParty(const CMsgInviteToParty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ping_data()) {
    ping_data_ = new ::proto::dota::CMsgClientPingData(*from.ping_data_);
  } else {
    ping_data_ = nullptr;
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&as_coach_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(as_coach_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgInviteToParty)
}

void CMsgInviteToParty::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgInviteToParty_base_5fgcmessages_2eproto.base);
  ::memset(&ping_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&as_coach_) -
      reinterpret_cast<char*>(&ping_data_)) + sizeof(as_coach_));
}

CMsgInviteToParty::~CMsgInviteToParty() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgInviteToParty)
  SharedDtor();
}

void CMsgInviteToParty::SharedDtor() {
  if (this != internal_default_instance()) delete ping_data_;
}

void CMsgInviteToParty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgInviteToParty& CMsgInviteToParty::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgInviteToParty_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgInviteToParty::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgInviteToParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ping_data_ != nullptr);
    ping_data_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&as_coach_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(as_coach_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgInviteToParty::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgInviteToParty*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 client_version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_client_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool as_coach = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_as_coach(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgClientPingData ping_data = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgClientPingData::_InternalParse;
        object = msg->mutable_ping_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgInviteToParty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgInviteToParty)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_client_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool as_coach = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_as_coach(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &as_coach_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgClientPingData ping_data = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ping_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgInviteToParty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgInviteToParty)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgInviteToParty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgInviteToParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_version(), output);
  }

  // optional uint32 team_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team_id(), output);
  }

  // optional bool as_coach = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->as_coach(), output);
  }

  // optional .proto.dota.CMsgClientPingData ping_data = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::ping_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgInviteToParty)
}

::google::protobuf::uint8* CMsgInviteToParty::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgInviteToParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_version(), target);
  }

  // optional uint32 team_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team_id(), target);
  }

  // optional bool as_coach = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->as_coach(), target);
  }

  // optional .proto.dota.CMsgClientPingData ping_data = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::ping_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgInviteToParty)
  return target;
}

size_t CMsgInviteToParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgInviteToParty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .proto.dota.CMsgClientPingData ping_data = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ping_data_);
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 client_version = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional uint32 team_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional bool as_coach = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgInviteToParty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgInviteToParty)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgInviteToParty* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgInviteToParty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgInviteToParty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgInviteToParty)
    MergeFrom(*source);
  }
}

void CMsgInviteToParty::MergeFrom(const CMsgInviteToParty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgInviteToParty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ping_data()->::proto::dota::CMsgClientPingData::MergeFrom(from.ping_data());
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      as_coach_ = from.as_coach_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgInviteToParty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgInviteToParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgInviteToParty::CopyFrom(const CMsgInviteToParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgInviteToParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgInviteToParty::IsInitialized() const {
  return true;
}

void CMsgInviteToParty::Swap(CMsgInviteToParty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgInviteToParty::InternalSwap(CMsgInviteToParty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ping_data_, other->ping_data_);
  swap(steam_id_, other->steam_id_);
  swap(client_version_, other->client_version_);
  swap(team_id_, other->team_id_);
  swap(as_coach_, other->as_coach_);
}

::google::protobuf::Metadata CMsgInviteToParty::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgInviteToLobby::InitAsDefaultInstance() {
}
class CMsgInviteToLobby::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgInviteToLobby* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_client_version(CMsgInviteToLobby* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgInviteToLobby::kSteamIdFieldNumber;
const int CMsgInviteToLobby::kClientVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgInviteToLobby::CMsgInviteToLobby()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgInviteToLobby)
}
CMsgInviteToLobby::CMsgInviteToLobby(const CMsgInviteToLobby& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(client_version_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgInviteToLobby)
}

void CMsgInviteToLobby::SharedCtor() {
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_version_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(client_version_));
}

CMsgInviteToLobby::~CMsgInviteToLobby() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgInviteToLobby)
  SharedDtor();
}

void CMsgInviteToLobby::SharedDtor() {
}

void CMsgInviteToLobby::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgInviteToLobby& CMsgInviteToLobby::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgInviteToLobby_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgInviteToLobby::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgInviteToLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_version_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(client_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgInviteToLobby::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgInviteToLobby*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 client_version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_client_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgInviteToLobby::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgInviteToLobby)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_client_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgInviteToLobby)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgInviteToLobby)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgInviteToLobby::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgInviteToLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgInviteToLobby)
}

::google::protobuf::uint8* CMsgInviteToLobby::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgInviteToLobby)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgInviteToLobby)
  return target;
}

size_t CMsgInviteToLobby::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgInviteToLobby)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional uint32 client_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgInviteToLobby::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgInviteToLobby)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgInviteToLobby* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgInviteToLobby>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgInviteToLobby)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgInviteToLobby)
    MergeFrom(*source);
  }
}

void CMsgInviteToLobby::MergeFrom(const CMsgInviteToLobby& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgInviteToLobby)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      client_version_ = from.client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgInviteToLobby::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgInviteToLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgInviteToLobby::CopyFrom(const CMsgInviteToLobby& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgInviteToLobby)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgInviteToLobby::IsInitialized() const {
  return true;
}

void CMsgInviteToLobby::Swap(CMsgInviteToLobby* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgInviteToLobby::InternalSwap(CMsgInviteToLobby* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_, other->steam_id_);
  swap(client_version_, other->client_version_);
}

::google::protobuf::Metadata CMsgInviteToLobby::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgInvitationCreated::InitAsDefaultInstance() {
}
class CMsgInvitationCreated::HasBitSetters {
 public:
  static void set_has_group_id(CMsgInvitationCreated* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_steam_id(CMsgInvitationCreated* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_user_offline(CMsgInvitationCreated* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgInvitationCreated::kGroupIdFieldNumber;
const int CMsgInvitationCreated::kSteamIdFieldNumber;
const int CMsgInvitationCreated::kUserOfflineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgInvitationCreated::CMsgInvitationCreated()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgInvitationCreated)
}
CMsgInvitationCreated::CMsgInvitationCreated(const CMsgInvitationCreated& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&group_id_, &from.group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_offline_) -
    reinterpret_cast<char*>(&group_id_)) + sizeof(user_offline_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgInvitationCreated)
}

void CMsgInvitationCreated::SharedCtor() {
  ::memset(&group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_offline_) -
      reinterpret_cast<char*>(&group_id_)) + sizeof(user_offline_));
}

CMsgInvitationCreated::~CMsgInvitationCreated() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgInvitationCreated)
  SharedDtor();
}

void CMsgInvitationCreated::SharedDtor() {
}

void CMsgInvitationCreated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgInvitationCreated& CMsgInvitationCreated::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgInvitationCreated_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgInvitationCreated::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgInvitationCreated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&user_offline_) -
        reinterpret_cast<char*>(&group_id_)) + sizeof(user_offline_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgInvitationCreated::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgInvitationCreated*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 group_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_group_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 steam_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bool user_offline = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_user_offline(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgInvitationCreated::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgInvitationCreated)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_group_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool user_offline = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_user_offline(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &user_offline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgInvitationCreated)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgInvitationCreated)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgInvitationCreated::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgInvitationCreated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->group_id(), output);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id(), output);
  }

  // optional bool user_offline = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->user_offline(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgInvitationCreated)
}

::google::protobuf::uint8* CMsgInvitationCreated::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgInvitationCreated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->group_id(), target);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id(), target);
  }

  // optional bool user_offline = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->user_offline(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgInvitationCreated)
  return target;
}

size_t CMsgInvitationCreated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgInvitationCreated)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 group_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->group_id());
    }

    // optional fixed64 steam_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional bool user_offline = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgInvitationCreated::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgInvitationCreated)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgInvitationCreated* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgInvitationCreated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgInvitationCreated)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgInvitationCreated)
    MergeFrom(*source);
  }
}

void CMsgInvitationCreated::MergeFrom(const CMsgInvitationCreated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgInvitationCreated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      group_id_ = from.group_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      user_offline_ = from.user_offline_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgInvitationCreated::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgInvitationCreated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgInvitationCreated::CopyFrom(const CMsgInvitationCreated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgInvitationCreated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgInvitationCreated::IsInitialized() const {
  return true;
}

void CMsgInvitationCreated::Swap(CMsgInvitationCreated* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgInvitationCreated::InternalSwap(CMsgInvitationCreated* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(group_id_, other->group_id_);
  swap(steam_id_, other->steam_id_);
  swap(user_offline_, other->user_offline_);
}

::google::protobuf::Metadata CMsgInvitationCreated::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPartyInviteResponse::InitAsDefaultInstance() {
  ::proto::dota::_CMsgPartyInviteResponse_default_instance_._instance.get_mutable()->ping_data_ = const_cast< ::proto::dota::CMsgClientPingData*>(
      ::proto::dota::CMsgClientPingData::internal_default_instance());
}
class CMsgPartyInviteResponse::HasBitSetters {
 public:
  static void set_has_party_id(CMsgPartyInviteResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_accept(CMsgPartyInviteResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_client_version(CMsgPartyInviteResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::proto::dota::CMsgClientPingData& ping_data(const CMsgPartyInviteResponse* msg);
  static void set_has_ping_data(CMsgPartyInviteResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgClientPingData&
CMsgPartyInviteResponse::HasBitSetters::ping_data(const CMsgPartyInviteResponse* msg) {
  return *msg->ping_data_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPartyInviteResponse::kPartyIdFieldNumber;
const int CMsgPartyInviteResponse::kAcceptFieldNumber;
const int CMsgPartyInviteResponse::kClientVersionFieldNumber;
const int CMsgPartyInviteResponse::kPingDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPartyInviteResponse::CMsgPartyInviteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPartyInviteResponse)
}
CMsgPartyInviteResponse::CMsgPartyInviteResponse(const CMsgPartyInviteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_ping_data()) {
    ping_data_ = new ::proto::dota::CMsgClientPingData(*from.ping_data_);
  } else {
    ping_data_ = nullptr;
  }
  ::memcpy(&party_id_, &from.party_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&party_id_)) + sizeof(client_version_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPartyInviteResponse)
}

void CMsgPartyInviteResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgPartyInviteResponse_base_5fgcmessages_2eproto.base);
  ::memset(&ping_data_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_version_) -
      reinterpret_cast<char*>(&ping_data_)) + sizeof(client_version_));
}

CMsgPartyInviteResponse::~CMsgPartyInviteResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPartyInviteResponse)
  SharedDtor();
}

void CMsgPartyInviteResponse::SharedDtor() {
  if (this != internal_default_instance()) delete ping_data_;
}

void CMsgPartyInviteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPartyInviteResponse& CMsgPartyInviteResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPartyInviteResponse_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgPartyInviteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPartyInviteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(ping_data_ != nullptr);
    ping_data_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&party_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_version_) -
        reinterpret_cast<char*>(&party_id_)) + sizeof(client_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPartyInviteResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPartyInviteResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 party_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_party_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool accept = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_accept(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 client_version = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_client_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgClientPingData ping_data = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgClientPingData::_InternalParse;
        object = msg->mutable_ping_data();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPartyInviteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPartyInviteResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 party_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_party_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &party_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool accept = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_accept(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_client_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgClientPingData ping_data = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ping_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPartyInviteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPartyInviteResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPartyInviteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPartyInviteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 party_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->party_id(), output);
  }

  // optional bool accept = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->accept(), output);
  }

  // optional uint32 client_version = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_version(), output);
  }

  // optional .proto.dota.CMsgClientPingData ping_data = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::ping_data(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPartyInviteResponse)
}

::google::protobuf::uint8* CMsgPartyInviteResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPartyInviteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 party_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->party_id(), target);
  }

  // optional bool accept = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->accept(), target);
  }

  // optional uint32 client_version = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_version(), target);
  }

  // optional .proto.dota.CMsgClientPingData ping_data = 8;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::ping_data(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPartyInviteResponse)
  return target;
}

size_t CMsgPartyInviteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPartyInviteResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .proto.dota.CMsgClientPingData ping_data = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ping_data_);
    }

    // optional uint64 party_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->party_id());
    }

    // optional bool accept = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional uint32 client_version = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyInviteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPartyInviteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyInviteResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPartyInviteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPartyInviteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPartyInviteResponse)
    MergeFrom(*source);
  }
}

void CMsgPartyInviteResponse::MergeFrom(const CMsgPartyInviteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPartyInviteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_ping_data()->::proto::dota::CMsgClientPingData::MergeFrom(from.ping_data());
    }
    if (cached_has_bits & 0x00000002u) {
      party_id_ = from.party_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      accept_ = from.accept_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_version_ = from.client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgPartyInviteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPartyInviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyInviteResponse::CopyFrom(const CMsgPartyInviteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPartyInviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyInviteResponse::IsInitialized() const {
  return true;
}

void CMsgPartyInviteResponse::Swap(CMsgPartyInviteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPartyInviteResponse::InternalSwap(CMsgPartyInviteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ping_data_, other->ping_data_);
  swap(party_id_, other->party_id_);
  swap(accept_, other->accept_);
  swap(client_version_, other->client_version_);
}

::google::protobuf::Metadata CMsgPartyInviteResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgLobbyInviteResponse::InitAsDefaultInstance() {
}
class CMsgLobbyInviteResponse::HasBitSetters {
 public:
  static void set_has_lobby_id(CMsgLobbyInviteResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_accept(CMsgLobbyInviteResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_client_version(CMsgLobbyInviteResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_custom_game_crc(CMsgLobbyInviteResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_custom_game_timestamp(CMsgLobbyInviteResponse* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLobbyInviteResponse::kLobbyIdFieldNumber;
const int CMsgLobbyInviteResponse::kAcceptFieldNumber;
const int CMsgLobbyInviteResponse::kClientVersionFieldNumber;
const int CMsgLobbyInviteResponse::kCustomGameCrcFieldNumber;
const int CMsgLobbyInviteResponse::kCustomGameTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLobbyInviteResponse::CMsgLobbyInviteResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLobbyInviteResponse)
}
CMsgLobbyInviteResponse::CMsgLobbyInviteResponse(const CMsgLobbyInviteResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lobby_id_, &from.lobby_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&custom_game_timestamp_) -
    reinterpret_cast<char*>(&lobby_id_)) + sizeof(custom_game_timestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLobbyInviteResponse)
}

void CMsgLobbyInviteResponse::SharedCtor() {
  ::memset(&lobby_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&custom_game_timestamp_) -
      reinterpret_cast<char*>(&lobby_id_)) + sizeof(custom_game_timestamp_));
}

CMsgLobbyInviteResponse::~CMsgLobbyInviteResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLobbyInviteResponse)
  SharedDtor();
}

void CMsgLobbyInviteResponse::SharedDtor() {
}

void CMsgLobbyInviteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgLobbyInviteResponse& CMsgLobbyInviteResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgLobbyInviteResponse_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgLobbyInviteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLobbyInviteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&lobby_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&custom_game_timestamp_) -
        reinterpret_cast<char*>(&lobby_id_)) + sizeof(custom_game_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgLobbyInviteResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgLobbyInviteResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 lobby_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_lobby_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bool accept = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_accept(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 client_version = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_client_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 custom_game_crc = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_custom_game_crc(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed32 custom_game_timestamp = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_custom_game_timestamp(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgLobbyInviteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLobbyInviteResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 lobby_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_lobby_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool accept = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_accept(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_client_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 custom_game_crc = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_custom_game_crc(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &custom_game_crc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 custom_game_timestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_custom_game_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &custom_game_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLobbyInviteResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLobbyInviteResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgLobbyInviteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLobbyInviteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->lobby_id(), output);
  }

  // optional bool accept = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->accept(), output);
  }

  // optional uint32 client_version = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->client_version(), output);
  }

  // optional fixed64 custom_game_crc = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->custom_game_crc(), output);
  }

  // optional fixed32 custom_game_timestamp = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->custom_game_timestamp(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLobbyInviteResponse)
}

::google::protobuf::uint8* CMsgLobbyInviteResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLobbyInviteResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->lobby_id(), target);
  }

  // optional bool accept = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->accept(), target);
  }

  // optional uint32 client_version = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->client_version(), target);
  }

  // optional fixed64 custom_game_crc = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->custom_game_crc(), target);
  }

  // optional fixed32 custom_game_timestamp = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->custom_game_timestamp(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLobbyInviteResponse)
  return target;
}

size_t CMsgLobbyInviteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLobbyInviteResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional fixed64 lobby_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool accept = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional uint32 client_version = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional fixed64 custom_game_crc = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional fixed32 custom_game_timestamp = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLobbyInviteResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLobbyInviteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLobbyInviteResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgLobbyInviteResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLobbyInviteResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLobbyInviteResponse)
    MergeFrom(*source);
  }
}

void CMsgLobbyInviteResponse::MergeFrom(const CMsgLobbyInviteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLobbyInviteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      accept_ = from.accept_;
    }
    if (cached_has_bits & 0x00000004u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000008u) {
      custom_game_crc_ = from.custom_game_crc_;
    }
    if (cached_has_bits & 0x00000010u) {
      custom_game_timestamp_ = from.custom_game_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgLobbyInviteResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLobbyInviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLobbyInviteResponse::CopyFrom(const CMsgLobbyInviteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLobbyInviteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLobbyInviteResponse::IsInitialized() const {
  return true;
}

void CMsgLobbyInviteResponse::Swap(CMsgLobbyInviteResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLobbyInviteResponse::InternalSwap(CMsgLobbyInviteResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lobby_id_, other->lobby_id_);
  swap(accept_, other->accept_);
  swap(client_version_, other->client_version_);
  swap(custom_game_crc_, other->custom_game_crc_);
  swap(custom_game_timestamp_, other->custom_game_timestamp_);
}

::google::protobuf::Metadata CMsgLobbyInviteResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgKickFromParty::InitAsDefaultInstance() {
}
class CMsgKickFromParty::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgKickFromParty* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgKickFromParty::kSteamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgKickFromParty::CMsgKickFromParty()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgKickFromParty)
}
CMsgKickFromParty::CMsgKickFromParty(const CMsgKickFromParty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  steam_id_ = from.steam_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgKickFromParty)
}

void CMsgKickFromParty::SharedCtor() {
  steam_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgKickFromParty::~CMsgKickFromParty() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgKickFromParty)
  SharedDtor();
}

void CMsgKickFromParty::SharedDtor() {
}

void CMsgKickFromParty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgKickFromParty& CMsgKickFromParty::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgKickFromParty_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgKickFromParty::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgKickFromParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  steam_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgKickFromParty::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgKickFromParty*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgKickFromParty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgKickFromParty)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgKickFromParty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgKickFromParty)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgKickFromParty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgKickFromParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgKickFromParty)
}

::google::protobuf::uint8* CMsgKickFromParty::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgKickFromParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgKickFromParty)
  return target;
}

size_t CMsgKickFromParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgKickFromParty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 steam_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgKickFromParty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgKickFromParty)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgKickFromParty* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgKickFromParty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgKickFromParty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgKickFromParty)
    MergeFrom(*source);
  }
}

void CMsgKickFromParty::MergeFrom(const CMsgKickFromParty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgKickFromParty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_steam_id()) {
    set_steam_id(from.steam_id());
  }
}

void CMsgKickFromParty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgKickFromParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgKickFromParty::CopyFrom(const CMsgKickFromParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgKickFromParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgKickFromParty::IsInitialized() const {
  return true;
}

void CMsgKickFromParty::Swap(CMsgKickFromParty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgKickFromParty::InternalSwap(CMsgKickFromParty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_, other->steam_id_);
}

::google::protobuf::Metadata CMsgKickFromParty::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgLeaveParty::InitAsDefaultInstance() {
}
class CMsgLeaveParty::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLeaveParty::CMsgLeaveParty()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLeaveParty)
}
CMsgLeaveParty::CMsgLeaveParty(const CMsgLeaveParty& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLeaveParty)
}

void CMsgLeaveParty::SharedCtor() {
}

CMsgLeaveParty::~CMsgLeaveParty() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLeaveParty)
  SharedDtor();
}

void CMsgLeaveParty::SharedDtor() {
}

void CMsgLeaveParty::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgLeaveParty& CMsgLeaveParty::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgLeaveParty_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgLeaveParty::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLeaveParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgLeaveParty::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgLeaveParty*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgLeaveParty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLeaveParty)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLeaveParty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLeaveParty)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgLeaveParty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLeaveParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLeaveParty)
}

::google::protobuf::uint8* CMsgLeaveParty::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLeaveParty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLeaveParty)
  return target;
}

size_t CMsgLeaveParty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLeaveParty)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLeaveParty::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLeaveParty)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLeaveParty* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgLeaveParty>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLeaveParty)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLeaveParty)
    MergeFrom(*source);
  }
}

void CMsgLeaveParty::MergeFrom(const CMsgLeaveParty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLeaveParty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgLeaveParty::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLeaveParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLeaveParty::CopyFrom(const CMsgLeaveParty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLeaveParty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLeaveParty::IsInitialized() const {
  return true;
}

void CMsgLeaveParty::Swap(CMsgLeaveParty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLeaveParty::InternalSwap(CMsgLeaveParty* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgLeaveParty::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgCustomGameInstallStatus::InitAsDefaultInstance() {
}
class CMsgCustomGameInstallStatus::HasBitSetters {
 public:
  static void set_has_status(CMsgCustomGameInstallStatus* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_message(CMsgCustomGameInstallStatus* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_latest_timestamp_from_steam(CMsgCustomGameInstallStatus* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgCustomGameInstallStatus::kStatusFieldNumber;
const int CMsgCustomGameInstallStatus::kMessageFieldNumber;
const int CMsgCustomGameInstallStatus::kLatestTimestampFromSteamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgCustomGameInstallStatus::CMsgCustomGameInstallStatus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgCustomGameInstallStatus)
}
CMsgCustomGameInstallStatus::CMsgCustomGameInstallStatus(const CMsgCustomGameInstallStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&latest_timestamp_from_steam_) -
    reinterpret_cast<char*>(&status_)) + sizeof(latest_timestamp_from_steam_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgCustomGameInstallStatus)
}

void CMsgCustomGameInstallStatus::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgCustomGameInstallStatus_base_5fgcmessages_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latest_timestamp_from_steam_) -
      reinterpret_cast<char*>(&status_)) + sizeof(latest_timestamp_from_steam_));
}

CMsgCustomGameInstallStatus::~CMsgCustomGameInstallStatus() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgCustomGameInstallStatus)
  SharedDtor();
}

void CMsgCustomGameInstallStatus::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgCustomGameInstallStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgCustomGameInstallStatus& CMsgCustomGameInstallStatus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgCustomGameInstallStatus_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgCustomGameInstallStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgCustomGameInstallStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&latest_timestamp_from_steam_) -
        reinterpret_cast<char*>(&status_)) + sizeof(latest_timestamp_from_steam_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgCustomGameInstallStatus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgCustomGameInstallStatus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.ECustomGameInstallStatus status = 1 [default = k_ECustomGameInstallStatus_Unknown];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ECustomGameInstallStatus_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_status(static_cast<::proto::dota::ECustomGameInstallStatus>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string message = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgCustomGameInstallStatus.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed32 latest_timestamp_from_steam = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_latest_timestamp_from_steam(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgCustomGameInstallStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgCustomGameInstallStatus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.ECustomGameInstallStatus status = 1 [default = k_ECustomGameInstallStatus_Unknown];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ECustomGameInstallStatus_IsValid(value)) {
            set_status(static_cast< ::proto::dota::ECustomGameInstallStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgCustomGameInstallStatus.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 latest_timestamp_from_steam = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_latest_timestamp_from_steam(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &latest_timestamp_from_steam_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgCustomGameInstallStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgCustomGameInstallStatus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgCustomGameInstallStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgCustomGameInstallStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.ECustomGameInstallStatus status = 1 [default = k_ECustomGameInstallStatus_Unknown];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgCustomGameInstallStatus.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->message(), output);
  }

  // optional fixed32 latest_timestamp_from_steam = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(3, this->latest_timestamp_from_steam(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgCustomGameInstallStatus)
}

::google::protobuf::uint8* CMsgCustomGameInstallStatus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgCustomGameInstallStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.ECustomGameInstallStatus status = 1 [default = k_ECustomGameInstallStatus_Unknown];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional string message = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgCustomGameInstallStatus.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->message(), target);
  }

  // optional fixed32 latest_timestamp_from_steam = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(3, this->latest_timestamp_from_steam(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgCustomGameInstallStatus)
  return target;
}

size_t CMsgCustomGameInstallStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgCustomGameInstallStatus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional .proto.dota.ECustomGameInstallStatus status = 1 [default = k_ECustomGameInstallStatus_Unknown];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional fixed32 latest_timestamp_from_steam = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCustomGameInstallStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgCustomGameInstallStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCustomGameInstallStatus* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgCustomGameInstallStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgCustomGameInstallStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgCustomGameInstallStatus)
    MergeFrom(*source);
  }
}

void CMsgCustomGameInstallStatus::MergeFrom(const CMsgCustomGameInstallStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgCustomGameInstallStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000004u) {
      latest_timestamp_from_steam_ = from.latest_timestamp_from_steam_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgCustomGameInstallStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgCustomGameInstallStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCustomGameInstallStatus::CopyFrom(const CMsgCustomGameInstallStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgCustomGameInstallStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCustomGameInstallStatus::IsInitialized() const {
  return true;
}

void CMsgCustomGameInstallStatus::Swap(CMsgCustomGameInstallStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgCustomGameInstallStatus::InternalSwap(CMsgCustomGameInstallStatus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
  swap(latest_timestamp_from_steam_, other->latest_timestamp_from_steam_);
}

::google::protobuf::Metadata CMsgCustomGameInstallStatus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgServerAvailable::InitAsDefaultInstance() {
  ::proto::dota::_CMsgServerAvailable_default_instance_._instance.get_mutable()->custom_game_install_status_ = const_cast< ::proto::dota::CMsgCustomGameInstallStatus*>(
      ::proto::dota::CMsgCustomGameInstallStatus::internal_default_instance());
}
class CMsgServerAvailable::HasBitSetters {
 public:
  static const ::proto::dota::CMsgCustomGameInstallStatus& custom_game_install_status(const CMsgServerAvailable* msg);
  static void set_has_custom_game_install_status(CMsgServerAvailable* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgCustomGameInstallStatus&
CMsgServerAvailable::HasBitSetters::custom_game_install_status(const CMsgServerAvailable* msg) {
  return *msg->custom_game_install_status_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgServerAvailable::kCustomGameInstallStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgServerAvailable::CMsgServerAvailable()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgServerAvailable)
}
CMsgServerAvailable::CMsgServerAvailable(const CMsgServerAvailable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_custom_game_install_status()) {
    custom_game_install_status_ = new ::proto::dota::CMsgCustomGameInstallStatus(*from.custom_game_install_status_);
  } else {
    custom_game_install_status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgServerAvailable)
}

void CMsgServerAvailable::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgServerAvailable_base_5fgcmessages_2eproto.base);
  custom_game_install_status_ = nullptr;
}

CMsgServerAvailable::~CMsgServerAvailable() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgServerAvailable)
  SharedDtor();
}

void CMsgServerAvailable::SharedDtor() {
  if (this != internal_default_instance()) delete custom_game_install_status_;
}

void CMsgServerAvailable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgServerAvailable& CMsgServerAvailable::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgServerAvailable_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgServerAvailable::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgServerAvailable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(custom_game_install_status_ != nullptr);
    custom_game_install_status_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgServerAvailable::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgServerAvailable*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgCustomGameInstallStatus custom_game_install_status = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgCustomGameInstallStatus::_InternalParse;
        object = msg->mutable_custom_game_install_status();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgServerAvailable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgServerAvailable)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgCustomGameInstallStatus custom_game_install_status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_custom_game_install_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgServerAvailable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgServerAvailable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgServerAvailable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgServerAvailable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgCustomGameInstallStatus custom_game_install_status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::custom_game_install_status(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgServerAvailable)
}

::google::protobuf::uint8* CMsgServerAvailable::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgServerAvailable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgCustomGameInstallStatus custom_game_install_status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::custom_game_install_status(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgServerAvailable)
  return target;
}

size_t CMsgServerAvailable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgServerAvailable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgCustomGameInstallStatus custom_game_install_status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *custom_game_install_status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgServerAvailable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgServerAvailable)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgServerAvailable* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgServerAvailable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgServerAvailable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgServerAvailable)
    MergeFrom(*source);
  }
}

void CMsgServerAvailable::MergeFrom(const CMsgServerAvailable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgServerAvailable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_custom_game_install_status()) {
    mutable_custom_game_install_status()->::proto::dota::CMsgCustomGameInstallStatus::MergeFrom(from.custom_game_install_status());
  }
}

void CMsgServerAvailable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgServerAvailable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgServerAvailable::CopyFrom(const CMsgServerAvailable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgServerAvailable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgServerAvailable::IsInitialized() const {
  return true;
}

void CMsgServerAvailable::Swap(CMsgServerAvailable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgServerAvailable::InternalSwap(CMsgServerAvailable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(custom_game_install_status_, other->custom_game_install_status_);
}

::google::protobuf::Metadata CMsgServerAvailable::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgLANServerAvailable::InitAsDefaultInstance() {
}
class CMsgLANServerAvailable::HasBitSetters {
 public:
  static void set_has_lobby_id(CMsgLANServerAvailable* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgLANServerAvailable::kLobbyIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgLANServerAvailable::CMsgLANServerAvailable()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgLANServerAvailable)
}
CMsgLANServerAvailable::CMsgLANServerAvailable(const CMsgLANServerAvailable& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  lobby_id_ = from.lobby_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgLANServerAvailable)
}

void CMsgLANServerAvailable::SharedCtor() {
  lobby_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgLANServerAvailable::~CMsgLANServerAvailable() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgLANServerAvailable)
  SharedDtor();
}

void CMsgLANServerAvailable::SharedDtor() {
}

void CMsgLANServerAvailable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgLANServerAvailable& CMsgLANServerAvailable::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgLANServerAvailable_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgLANServerAvailable::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgLANServerAvailable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lobby_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgLANServerAvailable::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgLANServerAvailable*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 lobby_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_lobby_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgLANServerAvailable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgLANServerAvailable)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 lobby_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_lobby_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgLANServerAvailable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgLANServerAvailable)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgLANServerAvailable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgLANServerAvailable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->lobby_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgLANServerAvailable)
}

::google::protobuf::uint8* CMsgLANServerAvailable::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgLANServerAvailable)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 lobby_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->lobby_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgLANServerAvailable)
  return target;
}

size_t CMsgLANServerAvailable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgLANServerAvailable)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 lobby_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgLANServerAvailable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgLANServerAvailable)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgLANServerAvailable* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgLANServerAvailable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgLANServerAvailable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgLANServerAvailable)
    MergeFrom(*source);
  }
}

void CMsgLANServerAvailable::MergeFrom(const CMsgLANServerAvailable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgLANServerAvailable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_lobby_id()) {
    set_lobby_id(from.lobby_id());
  }
}

void CMsgLANServerAvailable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgLANServerAvailable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgLANServerAvailable::CopyFrom(const CMsgLANServerAvailable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgLANServerAvailable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgLANServerAvailable::IsInitialized() const {
  return true;
}

void CMsgLANServerAvailable::Swap(CMsgLANServerAvailable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgLANServerAvailable::InternalSwap(CMsgLANServerAvailable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(lobby_id_, other->lobby_id_);
}

::google::protobuf::Metadata CMsgLANServerAvailable::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CSOEconGameAccountClient::InitAsDefaultInstance() {
}
class CSOEconGameAccountClient::HasBitSetters {
 public:
  static void set_has_additional_backpack_slots(CSOEconGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_trial_account(CSOEconGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_eligible_for_online_play(CSOEconGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_need_to_choose_most_helpful_friend(CSOEconGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_in_coaches_list(CSOEconGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_trade_ban_expiration(CSOEconGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_duel_ban_expiration(CSOEconGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_made_first_purchase(CSOEconGameAccountClient* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOEconGameAccountClient::kAdditionalBackpackSlotsFieldNumber;
const int CSOEconGameAccountClient::kTrialAccountFieldNumber;
const int CSOEconGameAccountClient::kEligibleForOnlinePlayFieldNumber;
const int CSOEconGameAccountClient::kNeedToChooseMostHelpfulFriendFieldNumber;
const int CSOEconGameAccountClient::kInCoachesListFieldNumber;
const int CSOEconGameAccountClient::kTradeBanExpirationFieldNumber;
const int CSOEconGameAccountClient::kDuelBanExpirationFieldNumber;
const int CSOEconGameAccountClient::kMadeFirstPurchaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOEconGameAccountClient::CSOEconGameAccountClient()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSOEconGameAccountClient)
}
CSOEconGameAccountClient::CSOEconGameAccountClient(const CSOEconGameAccountClient& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&additional_backpack_slots_, &from.additional_backpack_slots_,
    static_cast<size_t>(reinterpret_cast<char*>(&eligible_for_online_play_) -
    reinterpret_cast<char*>(&additional_backpack_slots_)) + sizeof(eligible_for_online_play_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSOEconGameAccountClient)
}

void CSOEconGameAccountClient::SharedCtor() {
  ::memset(&additional_backpack_slots_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duel_ban_expiration_) -
      reinterpret_cast<char*>(&additional_backpack_slots_)) + sizeof(duel_ban_expiration_));
  eligible_for_online_play_ = true;
}

CSOEconGameAccountClient::~CSOEconGameAccountClient() {
  // @@protoc_insertion_point(destructor:proto.dota.CSOEconGameAccountClient)
  SharedDtor();
}

void CSOEconGameAccountClient::SharedDtor() {
}

void CSOEconGameAccountClient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSOEconGameAccountClient& CSOEconGameAccountClient::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSOEconGameAccountClient_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CSOEconGameAccountClient::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSOEconGameAccountClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&additional_backpack_slots_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duel_ban_expiration_) -
        reinterpret_cast<char*>(&additional_backpack_slots_)) + sizeof(duel_ban_expiration_));
    eligible_for_online_play_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSOEconGameAccountClient::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSOEconGameAccountClient*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 additional_backpack_slots = 1 [default = 0];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_additional_backpack_slots(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool trial_account = 2 [default = false];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_trial_account(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool eligible_for_online_play = 3 [default = true];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_eligible_for_online_play(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool need_to_choose_most_helpful_friend = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_need_to_choose_most_helpful_friend(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool in_coaches_list = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_in_coaches_list(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 trade_ban_expiration = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_trade_ban_expiration(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed32 duel_ban_expiration = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_duel_ban_expiration(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional bool made_first_purchase = 9 [default = false];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_made_first_purchase(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSOEconGameAccountClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSOEconGameAccountClient)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 additional_backpack_slots = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_additional_backpack_slots(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &additional_backpack_slots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool trial_account = 2 [default = false];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_trial_account(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trial_account_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool eligible_for_online_play = 3 [default = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_eligible_for_online_play(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &eligible_for_online_play_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool need_to_choose_most_helpful_friend = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_need_to_choose_most_helpful_friend(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_to_choose_most_helpful_friend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool in_coaches_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_in_coaches_list(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &in_coaches_list_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 trade_ban_expiration = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_trade_ban_expiration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &trade_ban_expiration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 duel_ban_expiration = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_duel_ban_expiration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &duel_ban_expiration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool made_first_purchase = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_made_first_purchase(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &made_first_purchase_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSOEconGameAccountClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSOEconGameAccountClient)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSOEconGameAccountClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSOEconGameAccountClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 additional_backpack_slots = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->additional_backpack_slots(), output);
  }

  // optional bool trial_account = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->trial_account(), output);
  }

  // optional bool eligible_for_online_play = 3 [default = true];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->eligible_for_online_play(), output);
  }

  // optional bool need_to_choose_most_helpful_friend = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->need_to_choose_most_helpful_friend(), output);
  }

  // optional bool in_coaches_list = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->in_coaches_list(), output);
  }

  // optional fixed32 trade_ban_expiration = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->trade_ban_expiration(), output);
  }

  // optional fixed32 duel_ban_expiration = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(7, this->duel_ban_expiration(), output);
  }

  // optional bool made_first_purchase = 9 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->made_first_purchase(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSOEconGameAccountClient)
}

::google::protobuf::uint8* CSOEconGameAccountClient::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSOEconGameAccountClient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 additional_backpack_slots = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->additional_backpack_slots(), target);
  }

  // optional bool trial_account = 2 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->trial_account(), target);
  }

  // optional bool eligible_for_online_play = 3 [default = true];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->eligible_for_online_play(), target);
  }

  // optional bool need_to_choose_most_helpful_friend = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->need_to_choose_most_helpful_friend(), target);
  }

  // optional bool in_coaches_list = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->in_coaches_list(), target);
  }

  // optional fixed32 trade_ban_expiration = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(6, this->trade_ban_expiration(), target);
  }

  // optional fixed32 duel_ban_expiration = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(7, this->duel_ban_expiration(), target);
  }

  // optional bool made_first_purchase = 9 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->made_first_purchase(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSOEconGameAccountClient)
  return target;
}

size_t CSOEconGameAccountClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSOEconGameAccountClient)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 additional_backpack_slots = 1 [default = 0];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->additional_backpack_slots());
    }

    // optional bool trial_account = 2 [default = false];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

    // optional bool need_to_choose_most_helpful_friend = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional bool in_coaches_list = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional bool made_first_purchase = 9 [default = false];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional fixed32 trade_ban_expiration = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional fixed32 duel_ban_expiration = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

    // optional bool eligible_for_online_play = 3 [default = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOEconGameAccountClient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSOEconGameAccountClient)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconGameAccountClient* source =
      ::google::protobuf::DynamicCastToGenerated<CSOEconGameAccountClient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSOEconGameAccountClient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSOEconGameAccountClient)
    MergeFrom(*source);
  }
}

void CSOEconGameAccountClient::MergeFrom(const CSOEconGameAccountClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSOEconGameAccountClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      additional_backpack_slots_ = from.additional_backpack_slots_;
    }
    if (cached_has_bits & 0x00000002u) {
      trial_account_ = from.trial_account_;
    }
    if (cached_has_bits & 0x00000004u) {
      need_to_choose_most_helpful_friend_ = from.need_to_choose_most_helpful_friend_;
    }
    if (cached_has_bits & 0x00000008u) {
      in_coaches_list_ = from.in_coaches_list_;
    }
    if (cached_has_bits & 0x00000010u) {
      made_first_purchase_ = from.made_first_purchase_;
    }
    if (cached_has_bits & 0x00000020u) {
      trade_ban_expiration_ = from.trade_ban_expiration_;
    }
    if (cached_has_bits & 0x00000040u) {
      duel_ban_expiration_ = from.duel_ban_expiration_;
    }
    if (cached_has_bits & 0x00000080u) {
      eligible_for_online_play_ = from.eligible_for_online_play_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconGameAccountClient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSOEconGameAccountClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconGameAccountClient::CopyFrom(const CSOEconGameAccountClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSOEconGameAccountClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconGameAccountClient::IsInitialized() const {
  return true;
}

void CSOEconGameAccountClient::Swap(CSOEconGameAccountClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOEconGameAccountClient::InternalSwap(CSOEconGameAccountClient* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(additional_backpack_slots_, other->additional_backpack_slots_);
  swap(trial_account_, other->trial_account_);
  swap(need_to_choose_most_helpful_friend_, other->need_to_choose_most_helpful_friend_);
  swap(in_coaches_list_, other->in_coaches_list_);
  swap(made_first_purchase_, other->made_first_purchase_);
  swap(trade_ban_expiration_, other->trade_ban_expiration_);
  swap(duel_ban_expiration_, other->duel_ban_expiration_);
  swap(eligible_for_online_play_, other->eligible_for_online_play_);
}

::google::protobuf::Metadata CSOEconGameAccountClient::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CSOItemCriteriaCondition::InitAsDefaultInstance() {
}
class CSOItemCriteriaCondition::HasBitSetters {
 public:
  static void set_has_op(CSOItemCriteriaCondition* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_field(CSOItemCriteriaCondition* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_required(CSOItemCriteriaCondition* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_float_value(CSOItemCriteriaCondition* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_string_value(CSOItemCriteriaCondition* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOItemCriteriaCondition::kOpFieldNumber;
const int CSOItemCriteriaCondition::kFieldFieldNumber;
const int CSOItemCriteriaCondition::kRequiredFieldNumber;
const int CSOItemCriteriaCondition::kFloatValueFieldNumber;
const int CSOItemCriteriaCondition::kStringValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOItemCriteriaCondition::CSOItemCriteriaCondition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSOItemCriteriaCondition)
}
CSOItemCriteriaCondition::CSOItemCriteriaCondition(const CSOItemCriteriaCondition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_field()) {
    field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_string_value()) {
    string_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_value_);
  }
  ::memcpy(&op_, &from.op_,
    static_cast<size_t>(reinterpret_cast<char*>(&float_value_) -
    reinterpret_cast<char*>(&op_)) + sizeof(float_value_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSOItemCriteriaCondition)
}

void CSOItemCriteriaCondition::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CSOItemCriteriaCondition_base_5fgcmessages_2eproto.base);
  field_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&op_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&float_value_) -
      reinterpret_cast<char*>(&op_)) + sizeof(float_value_));
}

CSOItemCriteriaCondition::~CSOItemCriteriaCondition() {
  // @@protoc_insertion_point(destructor:proto.dota.CSOItemCriteriaCondition)
  SharedDtor();
}

void CSOItemCriteriaCondition::SharedDtor() {
  field_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSOItemCriteriaCondition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSOItemCriteriaCondition& CSOItemCriteriaCondition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSOItemCriteriaCondition_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CSOItemCriteriaCondition::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSOItemCriteriaCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      field_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      string_value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&op_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&float_value_) -
        reinterpret_cast<char*>(&op_)) + sizeof(float_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSOItemCriteriaCondition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSOItemCriteriaCondition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 op = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_op(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string field = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CSOItemCriteriaCondition.field");
        object = msg->mutable_field();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool required = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_required(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float float_value = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_float_value(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional string string_value = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CSOItemCriteriaCondition.string_value");
        object = msg->mutable_string_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSOItemCriteriaCondition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSOItemCriteriaCondition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 op = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_op(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string field = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_field()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->field().data(), static_cast<int>(this->field().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSOItemCriteriaCondition.field");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool required = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_required(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &required_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float float_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_float_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &float_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string string_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string_value().data(), static_cast<int>(this->string_value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSOItemCriteriaCondition.string_value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSOItemCriteriaCondition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSOItemCriteriaCondition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSOItemCriteriaCondition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSOItemCriteriaCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 op = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->op(), output);
  }

  // optional string field = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemCriteriaCondition.field");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->field(), output);
  }

  // optional bool required = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->required(), output);
  }

  // optional float float_value = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->float_value(), output);
  }

  // optional string string_value = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), static_cast<int>(this->string_value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemCriteriaCondition.string_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->string_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSOItemCriteriaCondition)
}

::google::protobuf::uint8* CSOItemCriteriaCondition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSOItemCriteriaCondition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 op = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->op(), target);
  }

  // optional string field = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->field().data(), static_cast<int>(this->field().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemCriteriaCondition.field");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->field(), target);
  }

  // optional bool required = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->required(), target);
  }

  // optional float float_value = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->float_value(), target);
  }

  // optional string string_value = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string_value().data(), static_cast<int>(this->string_value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemCriteriaCondition.string_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->string_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSOItemCriteriaCondition)
  return target;
}

size_t CSOItemCriteriaCondition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSOItemCriteriaCondition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string field = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->field());
    }

    // optional string string_value = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_value());
    }

    // optional int32 op = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op());
    }

    // optional bool required = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

    // optional float float_value = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOItemCriteriaCondition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSOItemCriteriaCondition)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOItemCriteriaCondition* source =
      ::google::protobuf::DynamicCastToGenerated<CSOItemCriteriaCondition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSOItemCriteriaCondition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSOItemCriteriaCondition)
    MergeFrom(*source);
  }
}

void CSOItemCriteriaCondition::MergeFrom(const CSOItemCriteriaCondition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSOItemCriteriaCondition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      field_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.field_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      string_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_value_);
    }
    if (cached_has_bits & 0x00000004u) {
      op_ = from.op_;
    }
    if (cached_has_bits & 0x00000008u) {
      required_ = from.required_;
    }
    if (cached_has_bits & 0x00000010u) {
      float_value_ = from.float_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOItemCriteriaCondition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSOItemCriteriaCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOItemCriteriaCondition::CopyFrom(const CSOItemCriteriaCondition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSOItemCriteriaCondition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOItemCriteriaCondition::IsInitialized() const {
  return true;
}

void CSOItemCriteriaCondition::Swap(CSOItemCriteriaCondition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOItemCriteriaCondition::InternalSwap(CSOItemCriteriaCondition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  field_.Swap(&other->field_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  string_value_.Swap(&other->string_value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(op_, other->op_);
  swap(required_, other->required_);
  swap(float_value_, other->float_value_);
}

::google::protobuf::Metadata CSOItemCriteriaCondition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CSOItemCriteria::InitAsDefaultInstance() {
}
class CSOItemCriteria::HasBitSetters {
 public:
  static void set_has_item_level(CSOItemCriteria* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_item_quality(CSOItemCriteria* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_item_level_set(CSOItemCriteria* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_item_quality_set(CSOItemCriteria* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_initial_inventory(CSOItemCriteria* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_initial_quantity(CSOItemCriteria* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_ignore_enabled_flag(CSOItemCriteria* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_recent_only(CSOItemCriteria* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOItemCriteria::kItemLevelFieldNumber;
const int CSOItemCriteria::kItemQualityFieldNumber;
const int CSOItemCriteria::kItemLevelSetFieldNumber;
const int CSOItemCriteria::kItemQualitySetFieldNumber;
const int CSOItemCriteria::kInitialInventoryFieldNumber;
const int CSOItemCriteria::kInitialQuantityFieldNumber;
const int CSOItemCriteria::kIgnoreEnabledFlagFieldNumber;
const int CSOItemCriteria::kConditionsFieldNumber;
const int CSOItemCriteria::kRecentOnlyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOItemCriteria::CSOItemCriteria()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSOItemCriteria)
}
CSOItemCriteria::CSOItemCriteria(const CSOItemCriteria& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      conditions_(from.conditions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_level_, &from.item_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&recent_only_) -
    reinterpret_cast<char*>(&item_level_)) + sizeof(recent_only_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSOItemCriteria)
}

void CSOItemCriteria::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CSOItemCriteria_base_5fgcmessages_2eproto.base);
  ::memset(&item_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recent_only_) -
      reinterpret_cast<char*>(&item_level_)) + sizeof(recent_only_));
}

CSOItemCriteria::~CSOItemCriteria() {
  // @@protoc_insertion_point(destructor:proto.dota.CSOItemCriteria)
  SharedDtor();
}

void CSOItemCriteria::SharedDtor() {
}

void CSOItemCriteria::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSOItemCriteria& CSOItemCriteria::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSOItemCriteria_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CSOItemCriteria::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSOItemCriteria)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  conditions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&item_level_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&recent_only_) -
        reinterpret_cast<char*>(&item_level_)) + sizeof(recent_only_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSOItemCriteria::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSOItemCriteria*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 item_level = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_item_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 item_quality = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_item_quality(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool item_level_set = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_item_level_set(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool item_quality_set = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_item_quality_set(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 initial_inventory = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_initial_inventory(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 initial_quantity = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_initial_quantity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool ignore_enabled_flag = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_ignore_enabled_flag(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CSOItemCriteriaCondition conditions = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CSOItemCriteriaCondition::_InternalParse;
          object = msg->add_conditions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 74 && (ptr += 1));
        break;
      }
      // optional bool recent_only = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_recent_only(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSOItemCriteria::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSOItemCriteria)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_item_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 item_quality = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_item_quality(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool item_level_set = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_item_level_set(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &item_level_set_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool item_quality_set = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_item_quality_set(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &item_quality_set_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 initial_inventory = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_initial_inventory(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_inventory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 initial_quantity = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_initial_quantity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &initial_quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ignore_enabled_flag = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_ignore_enabled_flag(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ignore_enabled_flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSOItemCriteriaCondition conditions = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_conditions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool recent_only = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_recent_only(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &recent_only_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSOItemCriteria)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSOItemCriteria)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSOItemCriteria::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSOItemCriteria)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_level = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_level(), output);
  }

  // optional int32 item_quality = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->item_quality(), output);
  }

  // optional bool item_level_set = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->item_level_set(), output);
  }

  // optional bool item_quality_set = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->item_quality_set(), output);
  }

  // optional uint32 initial_inventory = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->initial_inventory(), output);
  }

  // optional uint32 initial_quantity = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->initial_quantity(), output);
  }

  // optional bool ignore_enabled_flag = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->ignore_enabled_flag(), output);
  }

  // repeated .proto.dota.CSOItemCriteriaCondition conditions = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->conditions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9,
      this->conditions(static_cast<int>(i)),
      output);
  }

  // optional bool recent_only = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->recent_only(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSOItemCriteria)
}

::google::protobuf::uint8* CSOItemCriteria::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSOItemCriteria)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_level(), target);
  }

  // optional int32 item_quality = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->item_quality(), target);
  }

  // optional bool item_level_set = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->item_level_set(), target);
  }

  // optional bool item_quality_set = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->item_quality_set(), target);
  }

  // optional uint32 initial_inventory = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->initial_inventory(), target);
  }

  // optional uint32 initial_quantity = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->initial_quantity(), target);
  }

  // optional bool ignore_enabled_flag = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->ignore_enabled_flag(), target);
  }

  // repeated .proto.dota.CSOItemCriteriaCondition conditions = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->conditions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->conditions(static_cast<int>(i)), target);
  }

  // optional bool recent_only = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->recent_only(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSOItemCriteria)
  return target;
}

size_t CSOItemCriteria::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSOItemCriteria)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CSOItemCriteriaCondition conditions = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->conditions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->conditions(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 item_level = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_level());
    }

    // optional int32 item_quality = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item_quality());
    }

    // optional uint32 initial_inventory = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_inventory());
    }

    // optional uint32 initial_quantity = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->initial_quantity());
    }

    // optional bool item_level_set = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool item_quality_set = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool ignore_enabled_flag = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional bool recent_only = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOItemCriteria::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSOItemCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOItemCriteria* source =
      ::google::protobuf::DynamicCastToGenerated<CSOItemCriteria>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSOItemCriteria)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSOItemCriteria)
    MergeFrom(*source);
  }
}

void CSOItemCriteria::MergeFrom(const CSOItemCriteria& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSOItemCriteria)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  conditions_.MergeFrom(from.conditions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      item_level_ = from.item_level_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_quality_ = from.item_quality_;
    }
    if (cached_has_bits & 0x00000004u) {
      initial_inventory_ = from.initial_inventory_;
    }
    if (cached_has_bits & 0x00000008u) {
      initial_quantity_ = from.initial_quantity_;
    }
    if (cached_has_bits & 0x00000010u) {
      item_level_set_ = from.item_level_set_;
    }
    if (cached_has_bits & 0x00000020u) {
      item_quality_set_ = from.item_quality_set_;
    }
    if (cached_has_bits & 0x00000040u) {
      ignore_enabled_flag_ = from.ignore_enabled_flag_;
    }
    if (cached_has_bits & 0x00000080u) {
      recent_only_ = from.recent_only_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOItemCriteria::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSOItemCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOItemCriteria::CopyFrom(const CSOItemCriteria& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSOItemCriteria)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOItemCriteria::IsInitialized() const {
  return true;
}

void CSOItemCriteria::Swap(CSOItemCriteria* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOItemCriteria::InternalSwap(CSOItemCriteria* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&conditions_)->InternalSwap(CastToBase(&other->conditions_));
  swap(item_level_, other->item_level_);
  swap(item_quality_, other->item_quality_);
  swap(initial_inventory_, other->initial_inventory_);
  swap(initial_quantity_, other->initial_quantity_);
  swap(item_level_set_, other->item_level_set_);
  swap(item_quality_set_, other->item_quality_set_);
  swap(ignore_enabled_flag_, other->ignore_enabled_flag_);
  swap(recent_only_, other->recent_only_);
}

::google::protobuf::Metadata CSOItemCriteria::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CSOItemRecipe::InitAsDefaultInstance() {
}
class CSOItemRecipe::HasBitSetters {
 public:
  static void set_has_def_index(CSOItemRecipe* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_name(CSOItemRecipe* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_n_a(CSOItemRecipe* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_desc_inputs(CSOItemRecipe* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_desc_outputs(CSOItemRecipe* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_di_a(CSOItemRecipe* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_di_b(CSOItemRecipe* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_di_c(CSOItemRecipe* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_do_a(CSOItemRecipe* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_do_b(CSOItemRecipe* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_do_c(CSOItemRecipe* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_requires_all_same_class(CSOItemRecipe* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_requires_all_same_slot(CSOItemRecipe* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_class_usage_for_output(CSOItemRecipe* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_slot_usage_for_output(CSOItemRecipe* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_set_for_output(CSOItemRecipe* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOItemRecipe::kDefIndexFieldNumber;
const int CSOItemRecipe::kNameFieldNumber;
const int CSOItemRecipe::kNAFieldNumber;
const int CSOItemRecipe::kDescInputsFieldNumber;
const int CSOItemRecipe::kDescOutputsFieldNumber;
const int CSOItemRecipe::kDiAFieldNumber;
const int CSOItemRecipe::kDiBFieldNumber;
const int CSOItemRecipe::kDiCFieldNumber;
const int CSOItemRecipe::kDoAFieldNumber;
const int CSOItemRecipe::kDoBFieldNumber;
const int CSOItemRecipe::kDoCFieldNumber;
const int CSOItemRecipe::kRequiresAllSameClassFieldNumber;
const int CSOItemRecipe::kRequiresAllSameSlotFieldNumber;
const int CSOItemRecipe::kClassUsageForOutputFieldNumber;
const int CSOItemRecipe::kSlotUsageForOutputFieldNumber;
const int CSOItemRecipe::kSetForOutputFieldNumber;
const int CSOItemRecipe::kInputItemsCriteriaFieldNumber;
const int CSOItemRecipe::kOutputItemsCriteriaFieldNumber;
const int CSOItemRecipe::kInputItemDupeCountsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOItemRecipe::CSOItemRecipe()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSOItemRecipe)
}
CSOItemRecipe::CSOItemRecipe(const CSOItemRecipe& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      input_items_criteria_(from.input_items_criteria_),
      output_items_criteria_(from.output_items_criteria_),
      input_item_dupe_counts_(from.input_item_dupe_counts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  n_a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_n_a()) {
    n_a_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.n_a_);
  }
  desc_inputs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc_inputs()) {
    desc_inputs_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_inputs_);
  }
  desc_outputs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_desc_outputs()) {
    desc_outputs_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_outputs_);
  }
  di_a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_di_a()) {
    di_a_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.di_a_);
  }
  di_b_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_di_b()) {
    di_b_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.di_b_);
  }
  di_c_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_di_c()) {
    di_c_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.di_c_);
  }
  do_a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_do_a()) {
    do_a_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.do_a_);
  }
  do_b_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_do_b()) {
    do_b_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.do_b_);
  }
  do_c_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_do_c()) {
    do_c_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.do_c_);
  }
  ::memcpy(&def_index_, &from.def_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&set_for_output_) -
    reinterpret_cast<char*>(&def_index_)) + sizeof(set_for_output_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSOItemRecipe)
}

void CSOItemRecipe::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CSOItemRecipe_base_5fgcmessages_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  n_a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_inputs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_outputs_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  di_a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  di_b_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  di_c_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  do_a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  do_b_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  do_c_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&def_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&set_for_output_) -
      reinterpret_cast<char*>(&def_index_)) + sizeof(set_for_output_));
}

CSOItemRecipe::~CSOItemRecipe() {
  // @@protoc_insertion_point(destructor:proto.dota.CSOItemRecipe)
  SharedDtor();
}

void CSOItemRecipe::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  n_a_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_inputs_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  desc_outputs_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  di_a_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  di_b_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  di_c_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  do_a_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  do_b_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  do_c_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSOItemRecipe::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSOItemRecipe& CSOItemRecipe::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSOItemRecipe_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CSOItemRecipe::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSOItemRecipe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_items_criteria_.Clear();
  output_items_criteria_.Clear();
  input_item_dupe_counts_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      n_a_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      desc_inputs_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      desc_outputs_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      di_a_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      di_b_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      di_c_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      do_a_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      do_b_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000200u) {
      do_c_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000fc00u) {
    ::memset(&def_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&set_for_output_) -
        reinterpret_cast<char*>(&def_index_)) + sizeof(set_for_output_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSOItemRecipe::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSOItemRecipe*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 def_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_def_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CSOItemRecipe.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string n_a = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CSOItemRecipe.n_a");
        object = msg->mutable_n_a();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string desc_inputs = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CSOItemRecipe.desc_inputs");
        object = msg->mutable_desc_inputs();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string desc_outputs = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CSOItemRecipe.desc_outputs");
        object = msg->mutable_desc_outputs();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string di_a = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CSOItemRecipe.di_a");
        object = msg->mutable_di_a();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string di_b = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CSOItemRecipe.di_b");
        object = msg->mutable_di_b();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string di_c = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CSOItemRecipe.di_c");
        object = msg->mutable_di_c();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string do_a = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CSOItemRecipe.do_a");
        object = msg->mutable_do_a();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string do_b = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CSOItemRecipe.do_b");
        object = msg->mutable_do_b();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string do_c = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CSOItemRecipe.do_c");
        object = msg->mutable_do_c();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool requires_all_same_class = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_requires_all_same_class(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool requires_all_same_slot = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_requires_all_same_slot(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 class_usage_for_output = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_class_usage_for_output(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 slot_usage_for_output = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_slot_usage_for_output(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 set_for_output = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_set_for_output(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CSOItemCriteria input_items_criteria = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CSOItemCriteria::_InternalParse;
          object = msg->add_input_items_criteria();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 418 && (ptr += 2));
        break;
      }
      // repeated .proto.dota.CSOItemCriteria output_items_criteria = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 170) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CSOItemCriteria::_InternalParse;
          object = msg->add_output_items_criteria();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 426 && (ptr += 2));
        break;
      }
      // repeated uint32 input_item_dupe_counts = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) == 176) {
          do {
            msg->add_input_item_dupe_counts(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 432 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_input_item_dupe_counts();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSOItemRecipe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSOItemRecipe)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 def_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_def_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSOItemRecipe.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string n_a = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_n_a()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->n_a().data(), static_cast<int>(this->n_a().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSOItemRecipe.n_a");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string desc_inputs = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc_inputs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc_inputs().data(), static_cast<int>(this->desc_inputs().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSOItemRecipe.desc_inputs");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string desc_outputs = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc_outputs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->desc_outputs().data(), static_cast<int>(this->desc_outputs().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSOItemRecipe.desc_outputs");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string di_a = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_di_a()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->di_a().data(), static_cast<int>(this->di_a().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSOItemRecipe.di_a");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string di_b = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_di_b()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->di_b().data(), static_cast<int>(this->di_b().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSOItemRecipe.di_b");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string di_c = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_di_c()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->di_c().data(), static_cast<int>(this->di_c().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSOItemRecipe.di_c");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string do_a = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_do_a()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->do_a().data(), static_cast<int>(this->do_a().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSOItemRecipe.do_a");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string do_b = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_do_b()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->do_b().data(), static_cast<int>(this->do_b().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSOItemRecipe.do_b");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string do_c = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_do_c()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->do_c().data(), static_cast<int>(this->do_c().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSOItemRecipe.do_c");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool requires_all_same_class = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_requires_all_same_class(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_all_same_class_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool requires_all_same_slot = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_requires_all_same_slot(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &requires_all_same_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 class_usage_for_output = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_class_usage_for_output(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &class_usage_for_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 slot_usage_for_output = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_slot_usage_for_output(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slot_usage_for_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 set_for_output = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_set_for_output(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &set_for_output_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSOItemCriteria input_items_criteria = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (162 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_input_items_criteria()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSOItemCriteria output_items_criteria = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (170 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_output_items_criteria()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 input_item_dupe_counts = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 176u, input, this->mutable_input_item_dupe_counts())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_input_item_dupe_counts())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSOItemRecipe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSOItemRecipe)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSOItemRecipe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSOItemRecipe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 def_index = 1;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->def_index(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string n_a = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->n_a().data(), static_cast<int>(this->n_a().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.n_a");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->n_a(), output);
  }

  // optional string desc_inputs = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc_inputs().data(), static_cast<int>(this->desc_inputs().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.desc_inputs");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->desc_inputs(), output);
  }

  // optional string desc_outputs = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc_outputs().data(), static_cast<int>(this->desc_outputs().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.desc_outputs");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->desc_outputs(), output);
  }

  // optional string di_a = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->di_a().data(), static_cast<int>(this->di_a().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.di_a");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->di_a(), output);
  }

  // optional string di_b = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->di_b().data(), static_cast<int>(this->di_b().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.di_b");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->di_b(), output);
  }

  // optional string di_c = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->di_c().data(), static_cast<int>(this->di_c().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.di_c");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->di_c(), output);
  }

  // optional string do_a = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->do_a().data(), static_cast<int>(this->do_a().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.do_a");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->do_a(), output);
  }

  // optional string do_b = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->do_b().data(), static_cast<int>(this->do_b().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.do_b");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->do_b(), output);
  }

  // optional string do_c = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->do_c().data(), static_cast<int>(this->do_c().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.do_c");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->do_c(), output);
  }

  // optional bool requires_all_same_class = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->requires_all_same_class(), output);
  }

  // optional bool requires_all_same_slot = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->requires_all_same_slot(), output);
  }

  // optional int32 class_usage_for_output = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->class_usage_for_output(), output);
  }

  // optional int32 slot_usage_for_output = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->slot_usage_for_output(), output);
  }

  // optional int32 set_for_output = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->set_for_output(), output);
  }

  // repeated .proto.dota.CSOItemCriteria input_items_criteria = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->input_items_criteria_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20,
      this->input_items_criteria(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CSOItemCriteria output_items_criteria = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->output_items_criteria_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21,
      this->output_items_criteria(static_cast<int>(i)),
      output);
  }

  // repeated uint32 input_item_dupe_counts = 22;
  for (int i = 0, n = this->input_item_dupe_counts_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      22, this->input_item_dupe_counts(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSOItemRecipe)
}

::google::protobuf::uint8* CSOItemRecipe::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSOItemRecipe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 def_index = 1;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->def_index(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string n_a = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->n_a().data(), static_cast<int>(this->n_a().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.n_a");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->n_a(), target);
  }

  // optional string desc_inputs = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc_inputs().data(), static_cast<int>(this->desc_inputs().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.desc_inputs");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->desc_inputs(), target);
  }

  // optional string desc_outputs = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->desc_outputs().data(), static_cast<int>(this->desc_outputs().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.desc_outputs");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->desc_outputs(), target);
  }

  // optional string di_a = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->di_a().data(), static_cast<int>(this->di_a().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.di_a");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->di_a(), target);
  }

  // optional string di_b = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->di_b().data(), static_cast<int>(this->di_b().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.di_b");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->di_b(), target);
  }

  // optional string di_c = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->di_c().data(), static_cast<int>(this->di_c().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.di_c");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->di_c(), target);
  }

  // optional string do_a = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->do_a().data(), static_cast<int>(this->do_a().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.do_a");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->do_a(), target);
  }

  // optional string do_b = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->do_b().data(), static_cast<int>(this->do_b().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.do_b");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->do_b(), target);
  }

  // optional string do_c = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->do_c().data(), static_cast<int>(this->do_c().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOItemRecipe.do_c");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->do_c(), target);
  }

  // optional bool requires_all_same_class = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->requires_all_same_class(), target);
  }

  // optional bool requires_all_same_slot = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->requires_all_same_slot(), target);
  }

  // optional int32 class_usage_for_output = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->class_usage_for_output(), target);
  }

  // optional int32 slot_usage_for_output = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->slot_usage_for_output(), target);
  }

  // optional int32 set_for_output = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->set_for_output(), target);
  }

  // repeated .proto.dota.CSOItemCriteria input_items_criteria = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->input_items_criteria_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, this->input_items_criteria(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CSOItemCriteria output_items_criteria = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->output_items_criteria_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        21, this->output_items_criteria(static_cast<int>(i)), target);
  }

  // repeated uint32 input_item_dupe_counts = 22;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(22, this->input_item_dupe_counts_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSOItemRecipe)
  return target;
}

size_t CSOItemRecipe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSOItemRecipe)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CSOItemCriteria input_items_criteria = 20;
  {
    unsigned int count = static_cast<unsigned int>(this->input_items_criteria_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->input_items_criteria(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CSOItemCriteria output_items_criteria = 21;
  {
    unsigned int count = static_cast<unsigned int>(this->output_items_criteria_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->output_items_criteria(static_cast<int>(i)));
    }
  }

  // repeated uint32 input_item_dupe_counts = 22;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->input_item_dupe_counts_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->input_item_dupe_counts_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string n_a = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->n_a());
    }

    // optional string desc_inputs = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc_inputs());
    }

    // optional string desc_outputs = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc_outputs());
    }

    // optional string di_a = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->di_a());
    }

    // optional string di_b = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->di_b());
    }

    // optional string di_c = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->di_c());
    }

    // optional string do_a = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->do_a());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string do_b = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->do_b());
    }

    // optional string do_c = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->do_c());
    }

    // optional uint32 def_index = 1;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }

    // optional bool requires_all_same_class = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool requires_all_same_slot = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional int32 class_usage_for_output = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->class_usage_for_output());
    }

    // optional int32 slot_usage_for_output = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slot_usage_for_output());
    }

    // optional int32 set_for_output = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->set_for_output());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOItemRecipe::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSOItemRecipe)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOItemRecipe* source =
      ::google::protobuf::DynamicCastToGenerated<CSOItemRecipe>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSOItemRecipe)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSOItemRecipe)
    MergeFrom(*source);
  }
}

void CSOItemRecipe::MergeFrom(const CSOItemRecipe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSOItemRecipe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_items_criteria_.MergeFrom(from.input_items_criteria_);
  output_items_criteria_.MergeFrom(from.output_items_criteria_);
  input_item_dupe_counts_.MergeFrom(from.input_item_dupe_counts_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      n_a_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.n_a_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      desc_inputs_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_inputs_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      desc_outputs_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.desc_outputs_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      di_a_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.di_a_);
    }
    if (cached_has_bits & 0x00000020u) {
      _has_bits_[0] |= 0x00000020u;
      di_b_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.di_b_);
    }
    if (cached_has_bits & 0x00000040u) {
      _has_bits_[0] |= 0x00000040u;
      di_c_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.di_c_);
    }
    if (cached_has_bits & 0x00000080u) {
      _has_bits_[0] |= 0x00000080u;
      do_a_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.do_a_);
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _has_bits_[0] |= 0x00000100u;
      do_b_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.do_b_);
    }
    if (cached_has_bits & 0x00000200u) {
      _has_bits_[0] |= 0x00000200u;
      do_c_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.do_c_);
    }
    if (cached_has_bits & 0x00000400u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000800u) {
      requires_all_same_class_ = from.requires_all_same_class_;
    }
    if (cached_has_bits & 0x00001000u) {
      requires_all_same_slot_ = from.requires_all_same_slot_;
    }
    if (cached_has_bits & 0x00002000u) {
      class_usage_for_output_ = from.class_usage_for_output_;
    }
    if (cached_has_bits & 0x00004000u) {
      slot_usage_for_output_ = from.slot_usage_for_output_;
    }
    if (cached_has_bits & 0x00008000u) {
      set_for_output_ = from.set_for_output_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOItemRecipe::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSOItemRecipe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOItemRecipe::CopyFrom(const CSOItemRecipe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSOItemRecipe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOItemRecipe::IsInitialized() const {
  return true;
}

void CSOItemRecipe::Swap(CSOItemRecipe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOItemRecipe::InternalSwap(CSOItemRecipe* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&input_items_criteria_)->InternalSwap(CastToBase(&other->input_items_criteria_));
  CastToBase(&output_items_criteria_)->InternalSwap(CastToBase(&other->output_items_criteria_));
  input_item_dupe_counts_.InternalSwap(&other->input_item_dupe_counts_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  n_a_.Swap(&other->n_a_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_inputs_.Swap(&other->desc_inputs_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  desc_outputs_.Swap(&other->desc_outputs_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  di_a_.Swap(&other->di_a_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  di_b_.Swap(&other->di_b_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  di_c_.Swap(&other->di_c_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  do_a_.Swap(&other->do_a_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  do_b_.Swap(&other->do_b_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  do_c_.Swap(&other->do_c_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(def_index_, other->def_index_);
  swap(requires_all_same_class_, other->requires_all_same_class_);
  swap(requires_all_same_slot_, other->requires_all_same_slot_);
  swap(class_usage_for_output_, other->class_usage_for_output_);
  swap(slot_usage_for_output_, other->slot_usage_for_output_);
  swap(set_for_output_, other->set_for_output_);
}

::google::protobuf::Metadata CSOItemRecipe::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgApplyStrangePart::InitAsDefaultInstance() {
}
class CMsgApplyStrangePart::HasBitSetters {
 public:
  static void set_has_strange_part_item_id(CMsgApplyStrangePart* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_item_item_id(CMsgApplyStrangePart* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgApplyStrangePart::kStrangePartItemIdFieldNumber;
const int CMsgApplyStrangePart::kItemItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgApplyStrangePart::CMsgApplyStrangePart()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgApplyStrangePart)
}
CMsgApplyStrangePart::CMsgApplyStrangePart(const CMsgApplyStrangePart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&strange_part_item_id_, &from.strange_part_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_item_id_) -
    reinterpret_cast<char*>(&strange_part_item_id_)) + sizeof(item_item_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgApplyStrangePart)
}

void CMsgApplyStrangePart::SharedCtor() {
  ::memset(&strange_part_item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_item_id_) -
      reinterpret_cast<char*>(&strange_part_item_id_)) + sizeof(item_item_id_));
}

CMsgApplyStrangePart::~CMsgApplyStrangePart() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgApplyStrangePart)
  SharedDtor();
}

void CMsgApplyStrangePart::SharedDtor() {
}

void CMsgApplyStrangePart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgApplyStrangePart& CMsgApplyStrangePart::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgApplyStrangePart_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgApplyStrangePart::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgApplyStrangePart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&strange_part_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_item_id_) -
        reinterpret_cast<char*>(&strange_part_item_id_)) + sizeof(item_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgApplyStrangePart::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgApplyStrangePart*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 strange_part_item_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_strange_part_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 item_item_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_item_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgApplyStrangePart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgApplyStrangePart)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 strange_part_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_strange_part_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &strange_part_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 item_item_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_item_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgApplyStrangePart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgApplyStrangePart)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgApplyStrangePart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgApplyStrangePart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 strange_part_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->strange_part_item_id(), output);
  }

  // optional uint64 item_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgApplyStrangePart)
}

::google::protobuf::uint8* CMsgApplyStrangePart::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgApplyStrangePart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 strange_part_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->strange_part_item_id(), target);
  }

  // optional uint64 item_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgApplyStrangePart)
  return target;
}

size_t CMsgApplyStrangePart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgApplyStrangePart)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 strange_part_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->strange_part_item_id());
    }

    // optional uint64 item_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_item_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgApplyStrangePart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgApplyStrangePart)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgApplyStrangePart* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgApplyStrangePart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgApplyStrangePart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgApplyStrangePart)
    MergeFrom(*source);
  }
}

void CMsgApplyStrangePart::MergeFrom(const CMsgApplyStrangePart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgApplyStrangePart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      strange_part_item_id_ = from.strange_part_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_item_id_ = from.item_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgApplyStrangePart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgApplyStrangePart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgApplyStrangePart::CopyFrom(const CMsgApplyStrangePart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgApplyStrangePart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyStrangePart::IsInitialized() const {
  return true;
}

void CMsgApplyStrangePart::Swap(CMsgApplyStrangePart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgApplyStrangePart::InternalSwap(CMsgApplyStrangePart* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(strange_part_item_id_, other->strange_part_item_id_);
  swap(item_item_id_, other->item_item_id_);
}

::google::protobuf::Metadata CMsgApplyStrangePart::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgApplyPennantUpgrade::InitAsDefaultInstance() {
}
class CMsgApplyPennantUpgrade::HasBitSetters {
 public:
  static void set_has_upgrade_item_id(CMsgApplyPennantUpgrade* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_pennant_item_id(CMsgApplyPennantUpgrade* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgApplyPennantUpgrade::kUpgradeItemIdFieldNumber;
const int CMsgApplyPennantUpgrade::kPennantItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgApplyPennantUpgrade::CMsgApplyPennantUpgrade()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgApplyPennantUpgrade)
}
CMsgApplyPennantUpgrade::CMsgApplyPennantUpgrade(const CMsgApplyPennantUpgrade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&upgrade_item_id_, &from.upgrade_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pennant_item_id_) -
    reinterpret_cast<char*>(&upgrade_item_id_)) + sizeof(pennant_item_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgApplyPennantUpgrade)
}

void CMsgApplyPennantUpgrade::SharedCtor() {
  ::memset(&upgrade_item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pennant_item_id_) -
      reinterpret_cast<char*>(&upgrade_item_id_)) + sizeof(pennant_item_id_));
}

CMsgApplyPennantUpgrade::~CMsgApplyPennantUpgrade() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgApplyPennantUpgrade)
  SharedDtor();
}

void CMsgApplyPennantUpgrade::SharedDtor() {
}

void CMsgApplyPennantUpgrade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgApplyPennantUpgrade& CMsgApplyPennantUpgrade::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgApplyPennantUpgrade_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgApplyPennantUpgrade::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgApplyPennantUpgrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&upgrade_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pennant_item_id_) -
        reinterpret_cast<char*>(&upgrade_item_id_)) + sizeof(pennant_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgApplyPennantUpgrade::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgApplyPennantUpgrade*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 upgrade_item_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_upgrade_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 pennant_item_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_pennant_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgApplyPennantUpgrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgApplyPennantUpgrade)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 upgrade_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_upgrade_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &upgrade_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 pennant_item_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_pennant_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pennant_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgApplyPennantUpgrade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgApplyPennantUpgrade)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgApplyPennantUpgrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgApplyPennantUpgrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 upgrade_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->upgrade_item_id(), output);
  }

  // optional uint64 pennant_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->pennant_item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgApplyPennantUpgrade)
}

::google::protobuf::uint8* CMsgApplyPennantUpgrade::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgApplyPennantUpgrade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 upgrade_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->upgrade_item_id(), target);
  }

  // optional uint64 pennant_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->pennant_item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgApplyPennantUpgrade)
  return target;
}

size_t CMsgApplyPennantUpgrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgApplyPennantUpgrade)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 upgrade_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->upgrade_item_id());
    }

    // optional uint64 pennant_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pennant_item_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgApplyPennantUpgrade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgApplyPennantUpgrade)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgApplyPennantUpgrade* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgApplyPennantUpgrade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgApplyPennantUpgrade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgApplyPennantUpgrade)
    MergeFrom(*source);
  }
}

void CMsgApplyPennantUpgrade::MergeFrom(const CMsgApplyPennantUpgrade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgApplyPennantUpgrade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      upgrade_item_id_ = from.upgrade_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      pennant_item_id_ = from.pennant_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgApplyPennantUpgrade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgApplyPennantUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgApplyPennantUpgrade::CopyFrom(const CMsgApplyPennantUpgrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgApplyPennantUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyPennantUpgrade::IsInitialized() const {
  return true;
}

void CMsgApplyPennantUpgrade::Swap(CMsgApplyPennantUpgrade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgApplyPennantUpgrade::InternalSwap(CMsgApplyPennantUpgrade* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(upgrade_item_id_, other->upgrade_item_id_);
  swap(pennant_item_id_, other->pennant_item_id_);
}

::google::protobuf::Metadata CMsgApplyPennantUpgrade::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgApplyEggEssence::InitAsDefaultInstance() {
}
class CMsgApplyEggEssence::HasBitSetters {
 public:
  static void set_has_essence_item_id(CMsgApplyEggEssence* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_egg_item_id(CMsgApplyEggEssence* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgApplyEggEssence::kEssenceItemIdFieldNumber;
const int CMsgApplyEggEssence::kEggItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgApplyEggEssence::CMsgApplyEggEssence()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgApplyEggEssence)
}
CMsgApplyEggEssence::CMsgApplyEggEssence(const CMsgApplyEggEssence& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&essence_item_id_, &from.essence_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&egg_item_id_) -
    reinterpret_cast<char*>(&essence_item_id_)) + sizeof(egg_item_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgApplyEggEssence)
}

void CMsgApplyEggEssence::SharedCtor() {
  ::memset(&essence_item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&egg_item_id_) -
      reinterpret_cast<char*>(&essence_item_id_)) + sizeof(egg_item_id_));
}

CMsgApplyEggEssence::~CMsgApplyEggEssence() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgApplyEggEssence)
  SharedDtor();
}

void CMsgApplyEggEssence::SharedDtor() {
}

void CMsgApplyEggEssence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgApplyEggEssence& CMsgApplyEggEssence::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgApplyEggEssence_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgApplyEggEssence::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgApplyEggEssence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&essence_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&egg_item_id_) -
        reinterpret_cast<char*>(&essence_item_id_)) + sizeof(egg_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgApplyEggEssence::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgApplyEggEssence*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 essence_item_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_essence_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 egg_item_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_egg_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgApplyEggEssence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgApplyEggEssence)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 essence_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_essence_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &essence_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 egg_item_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_egg_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &egg_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgApplyEggEssence)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgApplyEggEssence)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgApplyEggEssence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgApplyEggEssence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 essence_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->essence_item_id(), output);
  }

  // optional uint64 egg_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->egg_item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgApplyEggEssence)
}

::google::protobuf::uint8* CMsgApplyEggEssence::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgApplyEggEssence)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 essence_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->essence_item_id(), target);
  }

  // optional uint64 egg_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->egg_item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgApplyEggEssence)
  return target;
}

size_t CMsgApplyEggEssence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgApplyEggEssence)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 essence_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->essence_item_id());
    }

    // optional uint64 egg_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->egg_item_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgApplyEggEssence::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgApplyEggEssence)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgApplyEggEssence* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgApplyEggEssence>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgApplyEggEssence)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgApplyEggEssence)
    MergeFrom(*source);
  }
}

void CMsgApplyEggEssence::MergeFrom(const CMsgApplyEggEssence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgApplyEggEssence)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      essence_item_id_ = from.essence_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      egg_item_id_ = from.egg_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgApplyEggEssence::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgApplyEggEssence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgApplyEggEssence::CopyFrom(const CMsgApplyEggEssence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgApplyEggEssence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgApplyEggEssence::IsInitialized() const {
  return true;
}

void CMsgApplyEggEssence::Swap(CMsgApplyEggEssence* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgApplyEggEssence::InternalSwap(CMsgApplyEggEssence* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(essence_item_id_, other->essence_item_id_);
  swap(egg_item_id_, other->egg_item_id_);
}

::google::protobuf::Metadata CMsgApplyEggEssence::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CSOEconItemAttribute::InitAsDefaultInstance() {
}
class CSOEconItemAttribute::HasBitSetters {
 public:
  static void set_has_def_index(CSOEconItemAttribute* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_value(CSOEconItemAttribute* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_value_bytes(CSOEconItemAttribute* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOEconItemAttribute::kDefIndexFieldNumber;
const int CSOEconItemAttribute::kValueFieldNumber;
const int CSOEconItemAttribute::kValueBytesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOEconItemAttribute::CSOEconItemAttribute()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSOEconItemAttribute)
}
CSOEconItemAttribute::CSOEconItemAttribute(const CSOEconItemAttribute& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value_bytes()) {
    value_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_bytes_);
  }
  ::memcpy(&def_index_, &from.def_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&def_index_)) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSOEconItemAttribute)
}

void CSOEconItemAttribute::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CSOEconItemAttribute_base_5fgcmessages_2eproto.base);
  value_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&def_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&def_index_)) + sizeof(value_));
}

CSOEconItemAttribute::~CSOEconItemAttribute() {
  // @@protoc_insertion_point(destructor:proto.dota.CSOEconItemAttribute)
  SharedDtor();
}

void CSOEconItemAttribute::SharedDtor() {
  value_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSOEconItemAttribute::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSOEconItemAttribute& CSOEconItemAttribute::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSOEconItemAttribute_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CSOEconItemAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSOEconItemAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_bytes_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&def_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&value_) -
        reinterpret_cast<char*>(&def_index_)) + sizeof(value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSOEconItemAttribute::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSOEconItemAttribute*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 def_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_def_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes value_bytes = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_value_bytes();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSOEconItemAttribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSOEconItemAttribute)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 def_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_def_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes value_bytes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSOEconItemAttribute)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSOEconItemAttribute)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSOEconItemAttribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSOEconItemAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 def_index = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->def_index(), output);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // optional bytes value_bytes = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value_bytes(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSOEconItemAttribute)
}

::google::protobuf::uint8* CSOEconItemAttribute::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSOEconItemAttribute)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 def_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->def_index(), target);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->value(), target);
  }

  // optional bytes value_bytes = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value_bytes(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSOEconItemAttribute)
  return target;
}

size_t CSOEconItemAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSOEconItemAttribute)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes value_bytes = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value_bytes());
    }

    // optional uint32 def_index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }

    // optional uint32 value = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOEconItemAttribute::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSOEconItemAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconItemAttribute* source =
      ::google::protobuf::DynamicCastToGenerated<CSOEconItemAttribute>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSOEconItemAttribute)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSOEconItemAttribute)
    MergeFrom(*source);
  }
}

void CSOEconItemAttribute::MergeFrom(const CSOEconItemAttribute& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSOEconItemAttribute)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      value_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_bytes_);
    }
    if (cached_has_bits & 0x00000002u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconItemAttribute::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSOEconItemAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItemAttribute::CopyFrom(const CSOEconItemAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSOEconItemAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemAttribute::IsInitialized() const {
  return true;
}

void CSOEconItemAttribute::Swap(CSOEconItemAttribute* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOEconItemAttribute::InternalSwap(CSOEconItemAttribute* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_bytes_.Swap(&other->value_bytes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(def_index_, other->def_index_);
  swap(value_, other->value_);
}

::google::protobuf::Metadata CSOEconItemAttribute::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CSOEconItemEquipped::InitAsDefaultInstance() {
}
class CSOEconItemEquipped::HasBitSetters {
 public:
  static void set_has_new_class(CSOEconItemEquipped* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_new_slot(CSOEconItemEquipped* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOEconItemEquipped::kNewClassFieldNumber;
const int CSOEconItemEquipped::kNewSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOEconItemEquipped::CSOEconItemEquipped()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSOEconItemEquipped)
}
CSOEconItemEquipped::CSOEconItemEquipped(const CSOEconItemEquipped& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&new_class_, &from.new_class_,
    static_cast<size_t>(reinterpret_cast<char*>(&new_slot_) -
    reinterpret_cast<char*>(&new_class_)) + sizeof(new_slot_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSOEconItemEquipped)
}

void CSOEconItemEquipped::SharedCtor() {
  ::memset(&new_class_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&new_slot_) -
      reinterpret_cast<char*>(&new_class_)) + sizeof(new_slot_));
}

CSOEconItemEquipped::~CSOEconItemEquipped() {
  // @@protoc_insertion_point(destructor:proto.dota.CSOEconItemEquipped)
  SharedDtor();
}

void CSOEconItemEquipped::SharedDtor() {
}

void CSOEconItemEquipped::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSOEconItemEquipped& CSOEconItemEquipped::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSOEconItemEquipped_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CSOEconItemEquipped::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSOEconItemEquipped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&new_class_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&new_slot_) -
        reinterpret_cast<char*>(&new_class_)) + sizeof(new_slot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSOEconItemEquipped::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSOEconItemEquipped*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 new_class = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_new_class(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 new_slot = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_new_slot(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSOEconItemEquipped::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSOEconItemEquipped)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 new_class = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_new_class(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_class_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 new_slot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_new_slot(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &new_slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSOEconItemEquipped)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSOEconItemEquipped)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSOEconItemEquipped::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSOEconItemEquipped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 new_class = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->new_class(), output);
  }

  // optional uint32 new_slot = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->new_slot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSOEconItemEquipped)
}

::google::protobuf::uint8* CSOEconItemEquipped::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSOEconItemEquipped)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 new_class = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->new_class(), target);
  }

  // optional uint32 new_slot = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->new_slot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSOEconItemEquipped)
  return target;
}

size_t CSOEconItemEquipped::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSOEconItemEquipped)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 new_class = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_class());
    }

    // optional uint32 new_slot = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->new_slot());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOEconItemEquipped::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSOEconItemEquipped)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconItemEquipped* source =
      ::google::protobuf::DynamicCastToGenerated<CSOEconItemEquipped>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSOEconItemEquipped)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSOEconItemEquipped)
    MergeFrom(*source);
  }
}

void CSOEconItemEquipped::MergeFrom(const CSOEconItemEquipped& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSOEconItemEquipped)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      new_class_ = from.new_class_;
    }
    if (cached_has_bits & 0x00000002u) {
      new_slot_ = from.new_slot_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconItemEquipped::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSOEconItemEquipped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItemEquipped::CopyFrom(const CSOEconItemEquipped& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSOEconItemEquipped)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemEquipped::IsInitialized() const {
  return true;
}

void CSOEconItemEquipped::Swap(CSOEconItemEquipped* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOEconItemEquipped::InternalSwap(CSOEconItemEquipped* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(new_class_, other->new_class_);
  swap(new_slot_, other->new_slot_);
}

::google::protobuf::Metadata CSOEconItemEquipped::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CSOEconItem::InitAsDefaultInstance() {
  ::proto::dota::_CSOEconItem_default_instance_._instance.get_mutable()->interior_item_ = const_cast< ::proto::dota::CSOEconItem*>(
      ::proto::dota::CSOEconItem::internal_default_instance());
}
class CSOEconItem::HasBitSetters {
 public:
  static void set_has_id(CSOEconItem* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_account_id(CSOEconItem* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_inventory(CSOEconItem* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_def_index(CSOEconItem* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_quantity(CSOEconItem* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_level(CSOEconItem* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_quality(CSOEconItem* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_flags(CSOEconItem* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_origin(CSOEconItem* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static const ::proto::dota::CSOEconItem& interior_item(const CSOEconItem* msg);
  static void set_has_interior_item(CSOEconItem* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_style(CSOEconItem* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_original_id(CSOEconItem* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

const ::proto::dota::CSOEconItem&
CSOEconItem::HasBitSetters::interior_item(const CSOEconItem* msg) {
  return *msg->interior_item_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOEconItem::kIdFieldNumber;
const int CSOEconItem::kAccountIdFieldNumber;
const int CSOEconItem::kInventoryFieldNumber;
const int CSOEconItem::kDefIndexFieldNumber;
const int CSOEconItem::kQuantityFieldNumber;
const int CSOEconItem::kLevelFieldNumber;
const int CSOEconItem::kQualityFieldNumber;
const int CSOEconItem::kFlagsFieldNumber;
const int CSOEconItem::kOriginFieldNumber;
const int CSOEconItem::kAttributeFieldNumber;
const int CSOEconItem::kInteriorItemFieldNumber;
const int CSOEconItem::kStyleFieldNumber;
const int CSOEconItem::kOriginalIdFieldNumber;
const int CSOEconItem::kEquippedStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOEconItem::CSOEconItem()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSOEconItem)
}
CSOEconItem::CSOEconItem(const CSOEconItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      attribute_(from.attribute_),
      equipped_state_(from.equipped_state_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_interior_item()) {
    interior_item_ = new ::proto::dota::CSOEconItem(*from.interior_item_);
  } else {
    interior_item_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&id_)) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSOEconItem)
}

void CSOEconItem::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CSOEconItem_base_5fgcmessages_2eproto.base);
  ::memset(&interior_item_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&original_id_) -
      reinterpret_cast<char*>(&interior_item_)) + sizeof(original_id_));
  quality_ = 4u;
  quantity_ = 1u;
  level_ = 1u;
}

CSOEconItem::~CSOEconItem() {
  // @@protoc_insertion_point(destructor:proto.dota.CSOEconItem)
  SharedDtor();
}

void CSOEconItem::SharedDtor() {
  if (this != internal_default_instance()) delete interior_item_;
}

void CSOEconItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSOEconItem& CSOEconItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSOEconItem_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CSOEconItem::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSOEconItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attribute_.Clear();
  equipped_state_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(interior_item_ != nullptr);
    interior_item_->Clear();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&style_) -
        reinterpret_cast<char*>(&id_)) + sizeof(style_));
  }
  if (cached_has_bits & 0x00000f00u) {
    original_id_ = PROTOBUF_ULONGLONG(0);
    quality_ = 4u;
    quantity_ = 1u;
    level_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSOEconItem::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSOEconItem*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 account_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 inventory = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_inventory(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 def_index = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_def_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 quantity = 5 [default = 1];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_quantity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 level = 6 [default = 1];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 quality = 7 [default = 4];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_quality(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 flags = 8 [default = 0];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 origin = 9 [default = 0];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_origin(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CSOEconItemAttribute attribute = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CSOEconItemAttribute::_InternalParse;
          object = msg->add_attribute();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 98 && (ptr += 1));
        break;
      }
      // optional .proto.dota.CSOEconItem interior_item = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CSOEconItem::_InternalParse;
        object = msg->mutable_interior_item();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 style = 15 [default = 0];
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_style(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 original_id = 16 [default = 0];
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_original_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CSOEconItemEquipped equipped_state = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CSOEconItemEquipped::_InternalParse;
          object = msg->add_equipped_state();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 402 && (ptr += 2));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSOEconItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSOEconItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 inventory = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_inventory(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inventory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 def_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_def_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quantity = 5 [default = 1];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_quantity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level = 6 [default = 1];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality = 7 [default = 4];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_quality(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 8 [default = 0];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 origin = 9 [default = 0];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_origin(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &origin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSOEconItemAttribute attribute = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_attribute()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CSOEconItem interior_item = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_interior_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 style = 15 [default = 0];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_style(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &style_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 original_id = 16 [default = 0];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_original_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &original_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSOEconItemEquipped equipped_state = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (146 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_equipped_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSOEconItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSOEconItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSOEconItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSOEconItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->account_id(), output);
  }

  // optional uint32 inventory = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->inventory(), output);
  }

  // optional uint32 def_index = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->def_index(), output);
  }

  // optional uint32 quantity = 5 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->quantity(), output);
  }

  // optional uint32 level = 6 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->level(), output);
  }

  // optional uint32 quality = 7 [default = 4];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->quality(), output);
  }

  // optional uint32 flags = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->flags(), output);
  }

  // optional uint32 origin = 9 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->origin(), output);
  }

  // repeated .proto.dota.CSOEconItemAttribute attribute = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attribute_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12,
      this->attribute(static_cast<int>(i)),
      output);
  }

  // optional .proto.dota.CSOEconItem interior_item = 13;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, HasBitSetters::interior_item(this), output);
  }

  // optional uint32 style = 15 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->style(), output);
  }

  // optional uint64 original_id = 16 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(16, this->original_id(), output);
  }

  // repeated .proto.dota.CSOEconItemEquipped equipped_state = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equipped_state_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18,
      this->equipped_state(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSOEconItem)
}

::google::protobuf::uint8* CSOEconItem::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSOEconItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint32 account_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->account_id(), target);
  }

  // optional uint32 inventory = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->inventory(), target);
  }

  // optional uint32 def_index = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->def_index(), target);
  }

  // optional uint32 quantity = 5 [default = 1];
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->quantity(), target);
  }

  // optional uint32 level = 6 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->level(), target);
  }

  // optional uint32 quality = 7 [default = 4];
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->quality(), target);
  }

  // optional uint32 flags = 8 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->flags(), target);
  }

  // optional uint32 origin = 9 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->origin(), target);
  }

  // repeated .proto.dota.CSOEconItemAttribute attribute = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->attribute_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->attribute(static_cast<int>(i)), target);
  }

  // optional .proto.dota.CSOEconItem interior_item = 13;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, HasBitSetters::interior_item(this), target);
  }

  // optional uint32 style = 15 [default = 0];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->style(), target);
  }

  // optional uint64 original_id = 16 [default = 0];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(16, this->original_id(), target);
  }

  // repeated .proto.dota.CSOEconItemEquipped equipped_state = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->equipped_state_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->equipped_state(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSOEconItem)
  return target;
}

size_t CSOEconItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSOEconItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CSOEconItemAttribute attribute = 12;
  {
    unsigned int count = static_cast<unsigned int>(this->attribute_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->attribute(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CSOEconItemEquipped equipped_state = 18;
  {
    unsigned int count = static_cast<unsigned int>(this->equipped_state_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->equipped_state(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .proto.dota.CSOEconItem interior_item = 13;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *interior_item_);
    }

    // optional uint64 id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint32 account_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 inventory = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inventory());
    }

    // optional uint32 def_index = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }

    // optional uint32 flags = 8 [default = 0];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional uint32 origin = 9 [default = 0];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->origin());
    }

    // optional uint32 style = 15 [default = 0];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->style());
    }

  }
  if (cached_has_bits & 0x00000f00u) {
    // optional uint64 original_id = 16 [default = 0];
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->original_id());
    }

    // optional uint32 quality = 7 [default = 4];
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // optional uint32 quantity = 5 [default = 1];
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantity());
    }

    // optional uint32 level = 6 [default = 1];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOEconItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSOEconItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconItem* source =
      ::google::protobuf::DynamicCastToGenerated<CSOEconItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSOEconItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSOEconItem)
    MergeFrom(*source);
  }
}

void CSOEconItem::MergeFrom(const CSOEconItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSOEconItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attribute_.MergeFrom(from.attribute_);
  equipped_state_.MergeFrom(from.equipped_state_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_interior_item()->::proto::dota::CSOEconItem::MergeFrom(from.interior_item());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      inventory_ = from.inventory_;
    }
    if (cached_has_bits & 0x00000010u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000020u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000040u) {
      origin_ = from.origin_;
    }
    if (cached_has_bits & 0x00000080u) {
      style_ = from.style_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      original_id_ = from.original_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000400u) {
      quantity_ = from.quantity_;
    }
    if (cached_has_bits & 0x00000800u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSOEconItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItem::CopyFrom(const CSOEconItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSOEconItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItem::IsInitialized() const {
  return true;
}

void CSOEconItem::Swap(CSOEconItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOEconItem::InternalSwap(CSOEconItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&attribute_)->InternalSwap(CastToBase(&other->attribute_));
  CastToBase(&equipped_state_)->InternalSwap(CastToBase(&other->equipped_state_));
  swap(interior_item_, other->interior_item_);
  swap(id_, other->id_);
  swap(account_id_, other->account_id_);
  swap(inventory_, other->inventory_);
  swap(def_index_, other->def_index_);
  swap(flags_, other->flags_);
  swap(origin_, other->origin_);
  swap(style_, other->style_);
  swap(original_id_, other->original_id_);
  swap(quality_, other->quality_);
  swap(quantity_, other->quantity_);
  swap(level_, other->level_);
}

::google::protobuf::Metadata CSOEconItem::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSortItems::InitAsDefaultInstance() {
}
class CMsgSortItems::HasBitSetters {
 public:
  static void set_has_sort_type(CMsgSortItems* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSortItems::kSortTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSortItems::CMsgSortItems()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSortItems)
}
CMsgSortItems::CMsgSortItems(const CMsgSortItems& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sort_type_ = from.sort_type_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSortItems)
}

void CMsgSortItems::SharedCtor() {
  sort_type_ = 0u;
}

CMsgSortItems::~CMsgSortItems() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSortItems)
  SharedDtor();
}

void CMsgSortItems::SharedDtor() {
}

void CMsgSortItems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSortItems& CMsgSortItems::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSortItems_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSortItems::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSortItems)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sort_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSortItems::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSortItems*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 sort_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_sort_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSortItems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSortItems)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sort_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_sort_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sort_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSortItems)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSortItems)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSortItems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSortItems)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sort_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sort_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSortItems)
}

::google::protobuf::uint8* CMsgSortItems::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSortItems)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sort_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sort_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSortItems)
  return target;
}

size_t CMsgSortItems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSortItems)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 sort_type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sort_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSortItems::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSortItems)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSortItems* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSortItems>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSortItems)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSortItems)
    MergeFrom(*source);
  }
}

void CMsgSortItems::MergeFrom(const CMsgSortItems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSortItems)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sort_type()) {
    set_sort_type(from.sort_type());
  }
}

void CMsgSortItems::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSortItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSortItems::CopyFrom(const CMsgSortItems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSortItems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSortItems::IsInitialized() const {
  return true;
}

void CMsgSortItems::Swap(CMsgSortItems* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSortItems::InternalSwap(CMsgSortItems* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(sort_type_, other->sort_type_);
}

::google::protobuf::Metadata CMsgSortItems::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CSOEconClaimCode::InitAsDefaultInstance() {
}
class CSOEconClaimCode::HasBitSetters {
 public:
  static void set_has_account_id(CSOEconClaimCode* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_code_type(CSOEconClaimCode* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_time_acquired(CSOEconClaimCode* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_code(CSOEconClaimCode* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOEconClaimCode::kAccountIdFieldNumber;
const int CSOEconClaimCode::kCodeTypeFieldNumber;
const int CSOEconClaimCode::kTimeAcquiredFieldNumber;
const int CSOEconClaimCode::kCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOEconClaimCode::CSOEconClaimCode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSOEconClaimCode)
}
CSOEconClaimCode::CSOEconClaimCode(const CSOEconClaimCode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_code()) {
    code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_acquired_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(time_acquired_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSOEconClaimCode)
}

void CSOEconClaimCode::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CSOEconClaimCode_base_5fgcmessages_2eproto.base);
  code_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_acquired_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(time_acquired_));
}

CSOEconClaimCode::~CSOEconClaimCode() {
  // @@protoc_insertion_point(destructor:proto.dota.CSOEconClaimCode)
  SharedDtor();
}

void CSOEconClaimCode::SharedDtor() {
  code_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSOEconClaimCode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSOEconClaimCode& CSOEconClaimCode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSOEconClaimCode_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CSOEconClaimCode::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSOEconClaimCode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    code_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_acquired_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(time_acquired_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSOEconClaimCode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSOEconClaimCode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 code_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_code_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 time_acquired = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_time_acquired(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string code = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CSOEconClaimCode.code");
        object = msg->mutable_code();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSOEconClaimCode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSOEconClaimCode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 code_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_code_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &code_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time_acquired = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_time_acquired(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_acquired_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->code().data(), static_cast<int>(this->code().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSOEconClaimCode.code");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSOEconClaimCode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSOEconClaimCode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSOEconClaimCode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSOEconClaimCode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 code_type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->code_type(), output);
  }

  // optional uint32 time_acquired = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->time_acquired(), output);
  }

  // optional string code = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOEconClaimCode.code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSOEconClaimCode)
}

::google::protobuf::uint8* CSOEconClaimCode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSOEconClaimCode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 code_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->code_type(), target);
  }

  // optional uint32 time_acquired = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->time_acquired(), target);
  }

  // optional string code = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->code().data(), static_cast<int>(this->code().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSOEconClaimCode.code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSOEconClaimCode)
  return target;
}

size_t CSOEconClaimCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSOEconClaimCode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string code = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->code());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 code_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->code_type());
    }

    // optional uint32 time_acquired = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time_acquired());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOEconClaimCode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSOEconClaimCode)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconClaimCode* source =
      ::google::protobuf::DynamicCastToGenerated<CSOEconClaimCode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSOEconClaimCode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSOEconClaimCode)
    MergeFrom(*source);
  }
}

void CSOEconClaimCode::MergeFrom(const CSOEconClaimCode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSOEconClaimCode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      code_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.code_);
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      code_type_ = from.code_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_acquired_ = from.time_acquired_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconClaimCode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSOEconClaimCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconClaimCode::CopyFrom(const CSOEconClaimCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSOEconClaimCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconClaimCode::IsInitialized() const {
  return true;
}

void CSOEconClaimCode::Swap(CSOEconClaimCode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOEconClaimCode::InternalSwap(CSOEconClaimCode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  code_.Swap(&other->code_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_id_, other->account_id_);
  swap(code_type_, other->code_type_);
  swap(time_acquired_, other->time_acquired_);
}

::google::protobuf::Metadata CSOEconClaimCode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgUpdateItemSchema::InitAsDefaultInstance() {
}
class CMsgUpdateItemSchema::HasBitSetters {
 public:
  static void set_has_items_game(CMsgUpdateItemSchema* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_item_schema_version(CMsgUpdateItemSchema* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_items_game_url(CMsgUpdateItemSchema* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgUpdateItemSchema::kItemsGameFieldNumber;
const int CMsgUpdateItemSchema::kItemSchemaVersionFieldNumber;
const int CMsgUpdateItemSchema::kItemsGameUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgUpdateItemSchema::CMsgUpdateItemSchema()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgUpdateItemSchema)
}
CMsgUpdateItemSchema::CMsgUpdateItemSchema(const CMsgUpdateItemSchema& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  items_game_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_items_game()) {
    items_game_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.items_game_);
  }
  items_game_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_items_game_url()) {
    items_game_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.items_game_url_);
  }
  item_schema_version_ = from.item_schema_version_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgUpdateItemSchema)
}

void CMsgUpdateItemSchema::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgUpdateItemSchema_base_5fgcmessages_2eproto.base);
  items_game_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  items_game_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  item_schema_version_ = 0u;
}

CMsgUpdateItemSchema::~CMsgUpdateItemSchema() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgUpdateItemSchema)
  SharedDtor();
}

void CMsgUpdateItemSchema::SharedDtor() {
  items_game_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  items_game_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgUpdateItemSchema::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgUpdateItemSchema& CMsgUpdateItemSchema::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgUpdateItemSchema_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgUpdateItemSchema::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgUpdateItemSchema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      items_game_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      items_game_url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  item_schema_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgUpdateItemSchema::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgUpdateItemSchema*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bytes items_game = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_items_game();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed32 item_schema_version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_item_schema_version(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional string items_game_url = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgUpdateItemSchema.items_game_url");
        object = msg->mutable_items_game_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgUpdateItemSchema::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgUpdateItemSchema)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes items_game = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_items_game()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 item_schema_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_item_schema_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &item_schema_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string items_game_url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_items_game_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->items_game_url().data(), static_cast<int>(this->items_game_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgUpdateItemSchema.items_game_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgUpdateItemSchema)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgUpdateItemSchema)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgUpdateItemSchema::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgUpdateItemSchema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes items_game = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->items_game(), output);
  }

  // optional fixed32 item_schema_version = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->item_schema_version(), output);
  }

  // optional string items_game_url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->items_game_url().data(), static_cast<int>(this->items_game_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgUpdateItemSchema.items_game_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->items_game_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgUpdateItemSchema)
}

::google::protobuf::uint8* CMsgUpdateItemSchema::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgUpdateItemSchema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes items_game = 1;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->items_game(), target);
  }

  // optional fixed32 item_schema_version = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->item_schema_version(), target);
  }

  // optional string items_game_url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->items_game_url().data(), static_cast<int>(this->items_game_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgUpdateItemSchema.items_game_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->items_game_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgUpdateItemSchema)
  return target;
}

size_t CMsgUpdateItemSchema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgUpdateItemSchema)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes items_game = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->items_game());
    }

    // optional string items_game_url = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->items_game_url());
    }

    // optional fixed32 item_schema_version = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgUpdateItemSchema::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgUpdateItemSchema)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgUpdateItemSchema* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgUpdateItemSchema>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgUpdateItemSchema)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgUpdateItemSchema)
    MergeFrom(*source);
  }
}

void CMsgUpdateItemSchema::MergeFrom(const CMsgUpdateItemSchema& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgUpdateItemSchema)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      items_game_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.items_game_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      items_game_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.items_game_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      item_schema_version_ = from.item_schema_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgUpdateItemSchema::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgUpdateItemSchema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgUpdateItemSchema::CopyFrom(const CMsgUpdateItemSchema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgUpdateItemSchema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgUpdateItemSchema::IsInitialized() const {
  return true;
}

void CMsgUpdateItemSchema::Swap(CMsgUpdateItemSchema* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgUpdateItemSchema::InternalSwap(CMsgUpdateItemSchema* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  items_game_.Swap(&other->items_game_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  items_game_url_.Swap(&other->items_game_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(item_schema_version_, other->item_schema_version_);
}

::google::protobuf::Metadata CMsgUpdateItemSchema::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCError::InitAsDefaultInstance() {
}
class CMsgGCError::HasBitSetters {
 public:
  static void set_has_error_text(CMsgGCError* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCError::kErrorTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCError::CMsgGCError()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCError)
}
CMsgGCError::CMsgGCError(const CMsgGCError& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_error_text()) {
    error_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_text_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCError)
}

void CMsgGCError::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCError_base_5fgcmessages_2eproto.base);
  error_text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgGCError::~CMsgGCError() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCError)
  SharedDtor();
}

void CMsgGCError::SharedDtor() {
  error_text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCError& CMsgGCError::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCError_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCError::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    error_text_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCError::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCError*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string error_text = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCError.error_text");
        object = msg->mutable_error_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string error_text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error_text().data(), static_cast<int>(this->error_text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCError.error_text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCError)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string error_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_text().data(), static_cast<int>(this->error_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCError.error_text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->error_text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCError)
}

::google::protobuf::uint8* CMsgGCError::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string error_text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error_text().data(), static_cast<int>(this->error_text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCError.error_text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->error_text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCError)
  return target;
}

size_t CMsgGCError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCError)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string error_text = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->error_text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCError)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCError* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCError>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCError)
    MergeFrom(*source);
  }
}

void CMsgGCError::MergeFrom(const CMsgGCError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error_text()) {
    _has_bits_[0] |= 0x00000001u;
    error_text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_text_);
  }
}

void CMsgGCError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCError::CopyFrom(const CMsgGCError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCError::IsInitialized() const {
  return true;
}

void CMsgGCError::Swap(CMsgGCError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCError::InternalSwap(CMsgGCError* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  error_text_.Swap(&other->error_text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgGCError::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRequestInventoryRefresh::InitAsDefaultInstance() {
}
class CMsgRequestInventoryRefresh::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRequestInventoryRefresh::CMsgRequestInventoryRefresh()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgRequestInventoryRefresh)
}
CMsgRequestInventoryRefresh::CMsgRequestInventoryRefresh(const CMsgRequestInventoryRefresh& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgRequestInventoryRefresh)
}

void CMsgRequestInventoryRefresh::SharedCtor() {
}

CMsgRequestInventoryRefresh::~CMsgRequestInventoryRefresh() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgRequestInventoryRefresh)
  SharedDtor();
}

void CMsgRequestInventoryRefresh::SharedDtor() {
}

void CMsgRequestInventoryRefresh::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRequestInventoryRefresh& CMsgRequestInventoryRefresh::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRequestInventoryRefresh_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgRequestInventoryRefresh::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgRequestInventoryRefresh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRequestInventoryRefresh::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRequestInventoryRefresh*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRequestInventoryRefresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgRequestInventoryRefresh)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgRequestInventoryRefresh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgRequestInventoryRefresh)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRequestInventoryRefresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgRequestInventoryRefresh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgRequestInventoryRefresh)
}

::google::protobuf::uint8* CMsgRequestInventoryRefresh::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgRequestInventoryRefresh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgRequestInventoryRefresh)
  return target;
}

size_t CMsgRequestInventoryRefresh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgRequestInventoryRefresh)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRequestInventoryRefresh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgRequestInventoryRefresh)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRequestInventoryRefresh* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRequestInventoryRefresh>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgRequestInventoryRefresh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgRequestInventoryRefresh)
    MergeFrom(*source);
  }
}

void CMsgRequestInventoryRefresh::MergeFrom(const CMsgRequestInventoryRefresh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgRequestInventoryRefresh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgRequestInventoryRefresh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgRequestInventoryRefresh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRequestInventoryRefresh::CopyFrom(const CMsgRequestInventoryRefresh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgRequestInventoryRefresh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRequestInventoryRefresh::IsInitialized() const {
  return true;
}

void CMsgRequestInventoryRefresh::Swap(CMsgRequestInventoryRefresh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRequestInventoryRefresh::InternalSwap(CMsgRequestInventoryRefresh* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgRequestInventoryRefresh::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgConVarValue::InitAsDefaultInstance() {
}
class CMsgConVarValue::HasBitSetters {
 public:
  static void set_has_name(CMsgConVarValue* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_value(CMsgConVarValue* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgConVarValue::kNameFieldNumber;
const int CMsgConVarValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgConVarValue::CMsgConVarValue()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgConVarValue)
}
CMsgConVarValue::CMsgConVarValue(const CMsgConVarValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgConVarValue)
}

void CMsgConVarValue::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgConVarValue_base_5fgcmessages_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgConVarValue::~CMsgConVarValue() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgConVarValue)
  SharedDtor();
}

void CMsgConVarValue::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgConVarValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgConVarValue& CMsgConVarValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgConVarValue_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgConVarValue::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgConVarValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgConVarValue::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgConVarValue*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgConVarValue.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgConVarValue.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgConVarValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgConVarValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgConVarValue.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgConVarValue.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgConVarValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgConVarValue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgConVarValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgConVarValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgConVarValue.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgConVarValue.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgConVarValue)
}

::google::protobuf::uint8* CMsgConVarValue::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgConVarValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgConVarValue.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgConVarValue.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgConVarValue)
  return target;
}

size_t CMsgConVarValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgConVarValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgConVarValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgConVarValue)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgConVarValue* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgConVarValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgConVarValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgConVarValue)
    MergeFrom(*source);
  }
}

void CMsgConVarValue::MergeFrom(const CMsgConVarValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgConVarValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CMsgConVarValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgConVarValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgConVarValue::CopyFrom(const CMsgConVarValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgConVarValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgConVarValue::IsInitialized() const {
  return true;
}

void CMsgConVarValue::Swap(CMsgConVarValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgConVarValue::InternalSwap(CMsgConVarValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgConVarValue::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgReplicateConVars::InitAsDefaultInstance() {
}
class CMsgReplicateConVars::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgReplicateConVars::kConvarsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgReplicateConVars::CMsgReplicateConVars()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgReplicateConVars)
}
CMsgReplicateConVars::CMsgReplicateConVars(const CMsgReplicateConVars& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      convars_(from.convars_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgReplicateConVars)
}

void CMsgReplicateConVars::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgReplicateConVars_base_5fgcmessages_2eproto.base);
}

CMsgReplicateConVars::~CMsgReplicateConVars() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgReplicateConVars)
  SharedDtor();
}

void CMsgReplicateConVars::SharedDtor() {
}

void CMsgReplicateConVars::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgReplicateConVars& CMsgReplicateConVars::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgReplicateConVars_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgReplicateConVars::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgReplicateConVars)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  convars_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgReplicateConVars::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgReplicateConVars*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgConVarValue convars = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgConVarValue::_InternalParse;
          object = msg->add_convars();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgReplicateConVars::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgReplicateConVars)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgConVarValue convars = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_convars()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgReplicateConVars)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgReplicateConVars)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgReplicateConVars::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgReplicateConVars)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgConVarValue convars = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->convars_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->convars(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgReplicateConVars)
}

::google::protobuf::uint8* CMsgReplicateConVars::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgReplicateConVars)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgConVarValue convars = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->convars_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->convars(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgReplicateConVars)
  return target;
}

size_t CMsgReplicateConVars::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgReplicateConVars)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgConVarValue convars = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->convars_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->convars(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgReplicateConVars::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgReplicateConVars)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgReplicateConVars* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgReplicateConVars>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgReplicateConVars)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgReplicateConVars)
    MergeFrom(*source);
  }
}

void CMsgReplicateConVars::MergeFrom(const CMsgReplicateConVars& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgReplicateConVars)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  convars_.MergeFrom(from.convars_);
}

void CMsgReplicateConVars::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgReplicateConVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgReplicateConVars::CopyFrom(const CMsgReplicateConVars& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgReplicateConVars)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgReplicateConVars::IsInitialized() const {
  return true;
}

void CMsgReplicateConVars::Swap(CMsgReplicateConVars* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgReplicateConVars::InternalSwap(CMsgReplicateConVars* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&convars_)->InternalSwap(CastToBase(&other->convars_));
}

::google::protobuf::Metadata CMsgReplicateConVars::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgItemAcknowledged::InitAsDefaultInstance() {
}
class CMsgItemAcknowledged::HasBitSetters {
 public:
  static void set_has_account_id(CMsgItemAcknowledged* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_inventory(CMsgItemAcknowledged* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_def_index(CMsgItemAcknowledged* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_quality(CMsgItemAcknowledged* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_rarity(CMsgItemAcknowledged* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_origin(CMsgItemAcknowledged* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgItemAcknowledged::kAccountIdFieldNumber;
const int CMsgItemAcknowledged::kInventoryFieldNumber;
const int CMsgItemAcknowledged::kDefIndexFieldNumber;
const int CMsgItemAcknowledged::kQualityFieldNumber;
const int CMsgItemAcknowledged::kRarityFieldNumber;
const int CMsgItemAcknowledged::kOriginFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgItemAcknowledged::CMsgItemAcknowledged()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgItemAcknowledged)
}
CMsgItemAcknowledged::CMsgItemAcknowledged(const CMsgItemAcknowledged& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&origin_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(origin_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgItemAcknowledged)
}

void CMsgItemAcknowledged::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&origin_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(origin_));
}

CMsgItemAcknowledged::~CMsgItemAcknowledged() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgItemAcknowledged)
  SharedDtor();
}

void CMsgItemAcknowledged::SharedDtor() {
}

void CMsgItemAcknowledged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgItemAcknowledged& CMsgItemAcknowledged::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgItemAcknowledged_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgItemAcknowledged::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgItemAcknowledged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&origin_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(origin_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgItemAcknowledged::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgItemAcknowledged*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 inventory = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_inventory(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 def_index = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_def_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 quality = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_quality(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 rarity = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_rarity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 origin = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_origin(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgItemAcknowledged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgItemAcknowledged)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 inventory = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_inventory(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &inventory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 def_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_def_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 quality = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_quality(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 rarity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_rarity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rarity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 origin = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_origin(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &origin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgItemAcknowledged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgItemAcknowledged)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgItemAcknowledged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgItemAcknowledged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 inventory = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->inventory(), output);
  }

  // optional uint32 def_index = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->def_index(), output);
  }

  // optional uint32 quality = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->quality(), output);
  }

  // optional uint32 rarity = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rarity(), output);
  }

  // optional uint32 origin = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->origin(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgItemAcknowledged)
}

::google::protobuf::uint8* CMsgItemAcknowledged::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgItemAcknowledged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 inventory = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->inventory(), target);
  }

  // optional uint32 def_index = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->def_index(), target);
  }

  // optional uint32 quality = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->quality(), target);
  }

  // optional uint32 rarity = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rarity(), target);
  }

  // optional uint32 origin = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->origin(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgItemAcknowledged)
  return target;
}

size_t CMsgItemAcknowledged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgItemAcknowledged)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 inventory = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->inventory());
    }

    // optional uint32 def_index = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }

    // optional uint32 quality = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

    // optional uint32 rarity = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rarity());
    }

    // optional uint32 origin = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->origin());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgItemAcknowledged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgItemAcknowledged)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgItemAcknowledged* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgItemAcknowledged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgItemAcknowledged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgItemAcknowledged)
    MergeFrom(*source);
  }
}

void CMsgItemAcknowledged::MergeFrom(const CMsgItemAcknowledged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgItemAcknowledged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      inventory_ = from.inventory_;
    }
    if (cached_has_bits & 0x00000004u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00000010u) {
      rarity_ = from.rarity_;
    }
    if (cached_has_bits & 0x00000020u) {
      origin_ = from.origin_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgItemAcknowledged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgItemAcknowledged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgItemAcknowledged::CopyFrom(const CMsgItemAcknowledged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgItemAcknowledged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgItemAcknowledged::IsInitialized() const {
  return true;
}

void CMsgItemAcknowledged::Swap(CMsgItemAcknowledged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgItemAcknowledged::InternalSwap(CMsgItemAcknowledged* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(inventory_, other->inventory_);
  swap(def_index_, other->def_index_);
  swap(quality_, other->quality_);
  swap(rarity_, other->rarity_);
  swap(origin_, other->origin_);
}

::google::protobuf::Metadata CMsgItemAcknowledged::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSetItemPositions_ItemPosition::InitAsDefaultInstance() {
}
class CMsgSetItemPositions_ItemPosition::HasBitSetters {
 public:
  static void set_has_item_id(CMsgSetItemPositions_ItemPosition* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_position(CMsgSetItemPositions_ItemPosition* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetItemPositions_ItemPosition::kItemIdFieldNumber;
const int CMsgSetItemPositions_ItemPosition::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetItemPositions_ItemPosition::CMsgSetItemPositions_ItemPosition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSetItemPositions.ItemPosition)
}
CMsgSetItemPositions_ItemPosition::CMsgSetItemPositions_ItemPosition(const CMsgSetItemPositions_ItemPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&position_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(position_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSetItemPositions.ItemPosition)
}

void CMsgSetItemPositions_ItemPosition::SharedCtor() {
  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&position_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(position_));
}

CMsgSetItemPositions_ItemPosition::~CMsgSetItemPositions_ItemPosition() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSetItemPositions.ItemPosition)
  SharedDtor();
}

void CMsgSetItemPositions_ItemPosition::SharedDtor() {
}

void CMsgSetItemPositions_ItemPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSetItemPositions_ItemPosition& CMsgSetItemPositions_ItemPosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSetItemPositions_ItemPosition_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSetItemPositions_ItemPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSetItemPositions.ItemPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&position_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(position_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSetItemPositions_ItemPosition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSetItemPositions_ItemPosition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 position = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_position(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSetItemPositions_ItemPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSetItemPositions.ItemPosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_position(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSetItemPositions.ItemPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSetItemPositions.ItemPosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSetItemPositions_ItemPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSetItemPositions.ItemPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }

  // optional uint32 position = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSetItemPositions.ItemPosition)
}

::google::protobuf::uint8* CMsgSetItemPositions_ItemPosition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSetItemPositions.ItemPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }

  // optional uint32 position = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSetItemPositions.ItemPosition)
  return target;
}

size_t CMsgSetItemPositions_ItemPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSetItemPositions.ItemPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional uint32 position = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetItemPositions_ItemPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSetItemPositions.ItemPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetItemPositions_ItemPosition* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSetItemPositions_ItemPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSetItemPositions.ItemPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSetItemPositions.ItemPosition)
    MergeFrom(*source);
  }
}

void CMsgSetItemPositions_ItemPosition::MergeFrom(const CMsgSetItemPositions_ItemPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSetItemPositions.ItemPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      position_ = from.position_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSetItemPositions_ItemPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSetItemPositions.ItemPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetItemPositions_ItemPosition::CopyFrom(const CMsgSetItemPositions_ItemPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSetItemPositions.ItemPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetItemPositions_ItemPosition::IsInitialized() const {
  return true;
}

void CMsgSetItemPositions_ItemPosition::Swap(CMsgSetItemPositions_ItemPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetItemPositions_ItemPosition::InternalSwap(CMsgSetItemPositions_ItemPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_id_, other->item_id_);
  swap(position_, other->position_);
}

::google::protobuf::Metadata CMsgSetItemPositions_ItemPosition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSetItemPositions::InitAsDefaultInstance() {
}
class CMsgSetItemPositions::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSetItemPositions::kItemPositionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSetItemPositions::CMsgSetItemPositions()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSetItemPositions)
}
CMsgSetItemPositions::CMsgSetItemPositions(const CMsgSetItemPositions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      item_positions_(from.item_positions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSetItemPositions)
}

void CMsgSetItemPositions::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgSetItemPositions_base_5fgcmessages_2eproto.base);
}

CMsgSetItemPositions::~CMsgSetItemPositions() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSetItemPositions)
  SharedDtor();
}

void CMsgSetItemPositions::SharedDtor() {
}

void CMsgSetItemPositions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSetItemPositions& CMsgSetItemPositions::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSetItemPositions_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSetItemPositions::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSetItemPositions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_positions_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSetItemPositions::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSetItemPositions*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgSetItemPositions.ItemPosition item_positions = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgSetItemPositions_ItemPosition::_InternalParse;
          object = msg->add_item_positions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSetItemPositions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSetItemPositions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgSetItemPositions.ItemPosition item_positions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_item_positions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSetItemPositions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSetItemPositions)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSetItemPositions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSetItemPositions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSetItemPositions.ItemPosition item_positions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_positions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->item_positions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSetItemPositions)
}

::google::protobuf::uint8* CMsgSetItemPositions::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSetItemPositions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSetItemPositions.ItemPosition item_positions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->item_positions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->item_positions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSetItemPositions)
  return target;
}

size_t CMsgSetItemPositions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSetItemPositions)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgSetItemPositions.ItemPosition item_positions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->item_positions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->item_positions(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSetItemPositions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSetItemPositions)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSetItemPositions* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSetItemPositions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSetItemPositions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSetItemPositions)
    MergeFrom(*source);
  }
}

void CMsgSetItemPositions::MergeFrom(const CMsgSetItemPositions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSetItemPositions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_positions_.MergeFrom(from.item_positions_);
}

void CMsgSetItemPositions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSetItemPositions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSetItemPositions::CopyFrom(const CMsgSetItemPositions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSetItemPositions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSetItemPositions::IsInitialized() const {
  return true;
}

void CMsgSetItemPositions::Swap(CMsgSetItemPositions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSetItemPositions::InternalSwap(CMsgSetItemPositions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&item_positions_)->InternalSwap(CastToBase(&other->item_positions_));
}

::google::protobuf::Metadata CMsgSetItemPositions::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCNameItemNotification::InitAsDefaultInstance() {
}
class CMsgGCNameItemNotification::HasBitSetters {
 public:
  static void set_has_player_steamid(CMsgGCNameItemNotification* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_item_def_index(CMsgGCNameItemNotification* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_item_name_custom(CMsgGCNameItemNotification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCNameItemNotification::kPlayerSteamidFieldNumber;
const int CMsgGCNameItemNotification::kItemDefIndexFieldNumber;
const int CMsgGCNameItemNotification::kItemNameCustomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCNameItemNotification::CMsgGCNameItemNotification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCNameItemNotification)
}
CMsgGCNameItemNotification::CMsgGCNameItemNotification(const CMsgGCNameItemNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_name_custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_item_name_custom()) {
    item_name_custom_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_name_custom_);
  }
  ::memcpy(&player_steamid_, &from.player_steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_def_index_) -
    reinterpret_cast<char*>(&player_steamid_)) + sizeof(item_def_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCNameItemNotification)
}

void CMsgGCNameItemNotification::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCNameItemNotification_base_5fgcmessages_2eproto.base);
  item_name_custom_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_def_index_) -
      reinterpret_cast<char*>(&player_steamid_)) + sizeof(item_def_index_));
}

CMsgGCNameItemNotification::~CMsgGCNameItemNotification() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCNameItemNotification)
  SharedDtor();
}

void CMsgGCNameItemNotification::SharedDtor() {
  item_name_custom_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCNameItemNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCNameItemNotification& CMsgGCNameItemNotification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCNameItemNotification_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCNameItemNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCNameItemNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    item_name_custom_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&player_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_def_index_) -
        reinterpret_cast<char*>(&player_steamid_)) + sizeof(item_def_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCNameItemNotification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCNameItemNotification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 player_steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_player_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 item_def_index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_item_def_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string item_name_custom = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCNameItemNotification.item_name_custom");
        object = msg->mutable_item_name_custom();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCNameItemNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCNameItemNotification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 player_steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_player_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_def_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_item_def_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string item_name_custom = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_item_name_custom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->item_name_custom().data(), static_cast<int>(this->item_name_custom().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCNameItemNotification.item_name_custom");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCNameItemNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCNameItemNotification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCNameItemNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCNameItemNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 player_steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->player_steamid(), output);
  }

  // optional uint32 item_def_index = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_def_index(), output);
  }

  // optional string item_name_custom = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_name_custom().data(), static_cast<int>(this->item_name_custom().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCNameItemNotification.item_name_custom");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->item_name_custom(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCNameItemNotification)
}

::google::protobuf::uint8* CMsgGCNameItemNotification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCNameItemNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 player_steamid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->player_steamid(), target);
  }

  // optional uint32 item_def_index = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_def_index(), target);
  }

  // optional string item_name_custom = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->item_name_custom().data(), static_cast<int>(this->item_name_custom().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCNameItemNotification.item_name_custom");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->item_name_custom(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCNameItemNotification)
  return target;
}

size_t CMsgGCNameItemNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCNameItemNotification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string item_name_custom = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->item_name_custom());
    }

    // optional fixed64 player_steamid = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 item_def_index = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCNameItemNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCNameItemNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCNameItemNotification* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCNameItemNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCNameItemNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCNameItemNotification)
    MergeFrom(*source);
  }
}

void CMsgGCNameItemNotification::MergeFrom(const CMsgGCNameItemNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCNameItemNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      item_name_custom_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.item_name_custom_);
    }
    if (cached_has_bits & 0x00000002u) {
      player_steamid_ = from.player_steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_def_index_ = from.item_def_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCNameItemNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCNameItemNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCNameItemNotification::CopyFrom(const CMsgGCNameItemNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCNameItemNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCNameItemNotification::IsInitialized() const {
  return true;
}

void CMsgGCNameItemNotification::Swap(CMsgGCNameItemNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCNameItemNotification::InternalSwap(CMsgGCNameItemNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_name_custom_.Swap(&other->item_name_custom_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_steamid_, other->player_steamid_);
  swap(item_def_index_, other->item_def_index_);
}

::google::protobuf::Metadata CMsgGCNameItemNotification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCClientDisplayNotification::InitAsDefaultInstance() {
}
class CMsgGCClientDisplayNotification::HasBitSetters {
 public:
  static void set_has_notification_title_localization_key(CMsgGCClientDisplayNotification* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_notification_body_localization_key(CMsgGCClientDisplayNotification* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCClientDisplayNotification::kNotificationTitleLocalizationKeyFieldNumber;
const int CMsgGCClientDisplayNotification::kNotificationBodyLocalizationKeyFieldNumber;
const int CMsgGCClientDisplayNotification::kBodySubstringKeysFieldNumber;
const int CMsgGCClientDisplayNotification::kBodySubstringValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCClientDisplayNotification::CMsgGCClientDisplayNotification()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCClientDisplayNotification)
}
CMsgGCClientDisplayNotification::CMsgGCClientDisplayNotification(const CMsgGCClientDisplayNotification& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      body_substring_keys_(from.body_substring_keys_),
      body_substring_values_(from.body_substring_values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  notification_title_localization_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_notification_title_localization_key()) {
    notification_title_localization_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notification_title_localization_key_);
  }
  notification_body_localization_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_notification_body_localization_key()) {
    notification_body_localization_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notification_body_localization_key_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCClientDisplayNotification)
}

void CMsgGCClientDisplayNotification::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCClientDisplayNotification_base_5fgcmessages_2eproto.base);
  notification_title_localization_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notification_body_localization_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgGCClientDisplayNotification::~CMsgGCClientDisplayNotification() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCClientDisplayNotification)
  SharedDtor();
}

void CMsgGCClientDisplayNotification::SharedDtor() {
  notification_title_localization_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notification_body_localization_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCClientDisplayNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCClientDisplayNotification& CMsgGCClientDisplayNotification::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCClientDisplayNotification_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCClientDisplayNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCClientDisplayNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  body_substring_keys_.Clear();
  body_substring_values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      notification_title_localization_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      notification_body_localization_key_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCClientDisplayNotification::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCClientDisplayNotification*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string notification_title_localization_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCClientDisplayNotification.notification_title_localization_key");
        object = msg->mutable_notification_title_localization_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string notification_body_localization_key = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCClientDisplayNotification.notification_body_localization_key");
        object = msg->mutable_notification_body_localization_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated string body_substring_keys = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCClientDisplayNotification.body_substring_keys");
          object = msg->add_body_substring_keys();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated string body_substring_values = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCClientDisplayNotification.body_substring_values");
          object = msg->add_body_substring_values();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCClientDisplayNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCClientDisplayNotification)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string notification_title_localization_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notification_title_localization_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->notification_title_localization_key().data(), static_cast<int>(this->notification_title_localization_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCClientDisplayNotification.notification_title_localization_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string notification_body_localization_key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notification_body_localization_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->notification_body_localization_key().data(), static_cast<int>(this->notification_body_localization_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCClientDisplayNotification.notification_body_localization_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string body_substring_keys = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_body_substring_keys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->body_substring_keys(this->body_substring_keys_size() - 1).data(),
            static_cast<int>(this->body_substring_keys(this->body_substring_keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCClientDisplayNotification.body_substring_keys");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string body_substring_values = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_body_substring_values()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->body_substring_values(this->body_substring_values_size() - 1).data(),
            static_cast<int>(this->body_substring_values(this->body_substring_values_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCClientDisplayNotification.body_substring_values");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCClientDisplayNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCClientDisplayNotification)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCClientDisplayNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCClientDisplayNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string notification_title_localization_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notification_title_localization_key().data(), static_cast<int>(this->notification_title_localization_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCClientDisplayNotification.notification_title_localization_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->notification_title_localization_key(), output);
  }

  // optional string notification_body_localization_key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notification_body_localization_key().data(), static_cast<int>(this->notification_body_localization_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCClientDisplayNotification.notification_body_localization_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->notification_body_localization_key(), output);
  }

  // repeated string body_substring_keys = 3;
  for (int i = 0, n = this->body_substring_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body_substring_keys(i).data(), static_cast<int>(this->body_substring_keys(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCClientDisplayNotification.body_substring_keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->body_substring_keys(i), output);
  }

  // repeated string body_substring_values = 4;
  for (int i = 0, n = this->body_substring_values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body_substring_values(i).data(), static_cast<int>(this->body_substring_values(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCClientDisplayNotification.body_substring_values");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->body_substring_values(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCClientDisplayNotification)
}

::google::protobuf::uint8* CMsgGCClientDisplayNotification::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCClientDisplayNotification)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string notification_title_localization_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notification_title_localization_key().data(), static_cast<int>(this->notification_title_localization_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCClientDisplayNotification.notification_title_localization_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->notification_title_localization_key(), target);
  }

  // optional string notification_body_localization_key = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notification_body_localization_key().data(), static_cast<int>(this->notification_body_localization_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCClientDisplayNotification.notification_body_localization_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->notification_body_localization_key(), target);
  }

  // repeated string body_substring_keys = 3;
  for (int i = 0, n = this->body_substring_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body_substring_keys(i).data(), static_cast<int>(this->body_substring_keys(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCClientDisplayNotification.body_substring_keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->body_substring_keys(i), target);
  }

  // repeated string body_substring_values = 4;
  for (int i = 0, n = this->body_substring_values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body_substring_values(i).data(), static_cast<int>(this->body_substring_values(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCClientDisplayNotification.body_substring_values");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->body_substring_values(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCClientDisplayNotification)
  return target;
}

size_t CMsgGCClientDisplayNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCClientDisplayNotification)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string body_substring_keys = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->body_substring_keys_size());
  for (int i = 0, n = this->body_substring_keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->body_substring_keys(i));
  }

  // repeated string body_substring_values = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->body_substring_values_size());
  for (int i = 0, n = this->body_substring_values_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->body_substring_values(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string notification_title_localization_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notification_title_localization_key());
    }

    // optional string notification_body_localization_key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notification_body_localization_key());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCClientDisplayNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCClientDisplayNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCClientDisplayNotification* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCClientDisplayNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCClientDisplayNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCClientDisplayNotification)
    MergeFrom(*source);
  }
}

void CMsgGCClientDisplayNotification::MergeFrom(const CMsgGCClientDisplayNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCClientDisplayNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  body_substring_keys_.MergeFrom(from.body_substring_keys_);
  body_substring_values_.MergeFrom(from.body_substring_values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      notification_title_localization_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notification_title_localization_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      notification_body_localization_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notification_body_localization_key_);
    }
  }
}

void CMsgGCClientDisplayNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCClientDisplayNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCClientDisplayNotification::CopyFrom(const CMsgGCClientDisplayNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCClientDisplayNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClientDisplayNotification::IsInitialized() const {
  return true;
}

void CMsgGCClientDisplayNotification::Swap(CMsgGCClientDisplayNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCClientDisplayNotification::InternalSwap(CMsgGCClientDisplayNotification* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  body_substring_keys_.InternalSwap(CastToBase(&other->body_substring_keys_));
  body_substring_values_.InternalSwap(CastToBase(&other->body_substring_values_));
  notification_title_localization_key_.Swap(&other->notification_title_localization_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  notification_body_localization_key_.Swap(&other->notification_body_localization_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgGCClientDisplayNotification::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCShowItemsPickedUp::InitAsDefaultInstance() {
}
class CMsgGCShowItemsPickedUp::HasBitSetters {
 public:
  static void set_has_player_steamid(CMsgGCShowItemsPickedUp* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCShowItemsPickedUp::kPlayerSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCShowItemsPickedUp::CMsgGCShowItemsPickedUp()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCShowItemsPickedUp)
}
CMsgGCShowItemsPickedUp::CMsgGCShowItemsPickedUp(const CMsgGCShowItemsPickedUp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  player_steamid_ = from.player_steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCShowItemsPickedUp)
}

void CMsgGCShowItemsPickedUp::SharedCtor() {
  player_steamid_ = PROTOBUF_ULONGLONG(0);
}

CMsgGCShowItemsPickedUp::~CMsgGCShowItemsPickedUp() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCShowItemsPickedUp)
  SharedDtor();
}

void CMsgGCShowItemsPickedUp::SharedDtor() {
}

void CMsgGCShowItemsPickedUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCShowItemsPickedUp& CMsgGCShowItemsPickedUp::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCShowItemsPickedUp_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCShowItemsPickedUp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCShowItemsPickedUp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCShowItemsPickedUp::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCShowItemsPickedUp*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 player_steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_player_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCShowItemsPickedUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCShowItemsPickedUp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 player_steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_player_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &player_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCShowItemsPickedUp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCShowItemsPickedUp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCShowItemsPickedUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCShowItemsPickedUp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 player_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->player_steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCShowItemsPickedUp)
}

::google::protobuf::uint8* CMsgGCShowItemsPickedUp::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCShowItemsPickedUp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 player_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->player_steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCShowItemsPickedUp)
  return target;
}

size_t CMsgGCShowItemsPickedUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCShowItemsPickedUp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 player_steamid = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCShowItemsPickedUp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCShowItemsPickedUp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCShowItemsPickedUp* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCShowItemsPickedUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCShowItemsPickedUp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCShowItemsPickedUp)
    MergeFrom(*source);
  }
}

void CMsgGCShowItemsPickedUp::MergeFrom(const CMsgGCShowItemsPickedUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCShowItemsPickedUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_steamid()) {
    set_player_steamid(from.player_steamid());
  }
}

void CMsgGCShowItemsPickedUp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCShowItemsPickedUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCShowItemsPickedUp::CopyFrom(const CMsgGCShowItemsPickedUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCShowItemsPickedUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCShowItemsPickedUp::IsInitialized() const {
  return true;
}

void CMsgGCShowItemsPickedUp::Swap(CMsgGCShowItemsPickedUp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCShowItemsPickedUp::InternalSwap(CMsgGCShowItemsPickedUp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(player_steamid_, other->player_steamid_);
}

::google::protobuf::Metadata CMsgGCShowItemsPickedUp::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCIncrementKillCountResponse::InitAsDefaultInstance() {
}
class CMsgGCIncrementKillCountResponse::HasBitSetters {
 public:
  static void set_has_killer_account_id(CMsgGCIncrementKillCountResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_num_kills(CMsgGCIncrementKillCountResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_item_def(CMsgGCIncrementKillCountResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_level_type(CMsgGCIncrementKillCountResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCIncrementKillCountResponse::kKillerAccountIdFieldNumber;
const int CMsgGCIncrementKillCountResponse::kNumKillsFieldNumber;
const int CMsgGCIncrementKillCountResponse::kItemDefFieldNumber;
const int CMsgGCIncrementKillCountResponse::kLevelTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCIncrementKillCountResponse::CMsgGCIncrementKillCountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCIncrementKillCountResponse)
}
CMsgGCIncrementKillCountResponse::CMsgGCIncrementKillCountResponse(const CMsgGCIncrementKillCountResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&killer_account_id_, &from.killer_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&level_type_) -
    reinterpret_cast<char*>(&killer_account_id_)) + sizeof(level_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCIncrementKillCountResponse)
}

void CMsgGCIncrementKillCountResponse::SharedCtor() {
  ::memset(&killer_account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&level_type_) -
      reinterpret_cast<char*>(&killer_account_id_)) + sizeof(level_type_));
}

CMsgGCIncrementKillCountResponse::~CMsgGCIncrementKillCountResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCIncrementKillCountResponse)
  SharedDtor();
}

void CMsgGCIncrementKillCountResponse::SharedDtor() {
}

void CMsgGCIncrementKillCountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCIncrementKillCountResponse& CMsgGCIncrementKillCountResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCIncrementKillCountResponse_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCIncrementKillCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCIncrementKillCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&killer_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&level_type_) -
        reinterpret_cast<char*>(&killer_account_id_)) + sizeof(level_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCIncrementKillCountResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCIncrementKillCountResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 killer_account_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_killer_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 num_kills = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_num_kills(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 item_def = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_item_def(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 level_type = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_level_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCIncrementKillCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCIncrementKillCountResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 killer_account_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_killer_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killer_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_kills = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_num_kills(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_kills_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_def = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_item_def(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 level_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_level_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCIncrementKillCountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCIncrementKillCountResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCIncrementKillCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCIncrementKillCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 killer_account_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->killer_account_id(), output);
  }

  // optional uint32 num_kills = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_kills(), output);
  }

  // optional uint32 item_def = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_def(), output);
  }

  // optional uint32 level_type = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCIncrementKillCountResponse)
}

::google::protobuf::uint8* CMsgGCIncrementKillCountResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCIncrementKillCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 killer_account_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->killer_account_id(), target);
  }

  // optional uint32 num_kills = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_kills(), target);
  }

  // optional uint32 item_def = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_def(), target);
  }

  // optional uint32 level_type = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCIncrementKillCountResponse)
  return target;
}

size_t CMsgGCIncrementKillCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCIncrementKillCountResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 killer_account_id = 1 [(.proto.dota.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killer_account_id());
    }

    // optional uint32 num_kills = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_kills());
    }

    // optional uint32 item_def = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def());
    }

    // optional uint32 level_type = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCIncrementKillCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCIncrementKillCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCIncrementKillCountResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCIncrementKillCountResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCIncrementKillCountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCIncrementKillCountResponse)
    MergeFrom(*source);
  }
}

void CMsgGCIncrementKillCountResponse::MergeFrom(const CMsgGCIncrementKillCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCIncrementKillCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      killer_account_id_ = from.killer_account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      num_kills_ = from.num_kills_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_def_ = from.item_def_;
    }
    if (cached_has_bits & 0x00000008u) {
      level_type_ = from.level_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCIncrementKillCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCIncrementKillCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCIncrementKillCountResponse::CopyFrom(const CMsgGCIncrementKillCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCIncrementKillCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCIncrementKillCountResponse::IsInitialized() const {
  return true;
}

void CMsgGCIncrementKillCountResponse::Swap(CMsgGCIncrementKillCountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCIncrementKillCountResponse::InternalSwap(CMsgGCIncrementKillCountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(killer_account_id_, other->killer_account_id_);
  swap(num_kills_, other->num_kills_);
  swap(item_def_, other->item_def_);
  swap(level_type_, other->level_type_);
}

::google::protobuf::Metadata CMsgGCIncrementKillCountResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CSOEconItemDropRateBonus::InitAsDefaultInstance() {
}
class CSOEconItemDropRateBonus::HasBitSetters {
 public:
  static void set_has_account_id(CSOEconItemDropRateBonus* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_expiration_date(CSOEconItemDropRateBonus* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_bonus(CSOEconItemDropRateBonus* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_bonus_count(CSOEconItemDropRateBonus* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_item_id(CSOEconItemDropRateBonus* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_def_index(CSOEconItemDropRateBonus* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_seconds_left(CSOEconItemDropRateBonus* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_booster_type(CSOEconItemDropRateBonus* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOEconItemDropRateBonus::kAccountIdFieldNumber;
const int CSOEconItemDropRateBonus::kExpirationDateFieldNumber;
const int CSOEconItemDropRateBonus::kBonusFieldNumber;
const int CSOEconItemDropRateBonus::kBonusCountFieldNumber;
const int CSOEconItemDropRateBonus::kItemIdFieldNumber;
const int CSOEconItemDropRateBonus::kDefIndexFieldNumber;
const int CSOEconItemDropRateBonus::kSecondsLeftFieldNumber;
const int CSOEconItemDropRateBonus::kBoosterTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOEconItemDropRateBonus::CSOEconItemDropRateBonus()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSOEconItemDropRateBonus)
}
CSOEconItemDropRateBonus::CSOEconItemDropRateBonus(const CSOEconItemDropRateBonus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&booster_type_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(booster_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSOEconItemDropRateBonus)
}

void CSOEconItemDropRateBonus::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&booster_type_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(booster_type_));
}

CSOEconItemDropRateBonus::~CSOEconItemDropRateBonus() {
  // @@protoc_insertion_point(destructor:proto.dota.CSOEconItemDropRateBonus)
  SharedDtor();
}

void CSOEconItemDropRateBonus::SharedDtor() {
}

void CSOEconItemDropRateBonus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSOEconItemDropRateBonus& CSOEconItemDropRateBonus::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSOEconItemDropRateBonus_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CSOEconItemDropRateBonus::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSOEconItemDropRateBonus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&booster_type_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(booster_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSOEconItemDropRateBonus::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSOEconItemDropRateBonus*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 expiration_date = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_expiration_date(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional float bonus = 3 [(.proto.dota.key_field) = true];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_bonus(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 bonus_count = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_bonus_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 item_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 def_index = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_def_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 seconds_left = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_seconds_left(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 booster_type = 8 [(.proto.dota.key_field) = true];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_booster_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSOEconItemDropRateBonus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSOEconItemDropRateBonus)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 expiration_date = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_expiration_date(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &expiration_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bonus = 3 [(.proto.dota.key_field) = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_bonus(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bonus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 bonus_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_bonus_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bonus_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 item_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 def_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_def_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 seconds_left = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_seconds_left(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &seconds_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 booster_type = 8 [(.proto.dota.key_field) = true];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_booster_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &booster_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSOEconItemDropRateBonus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSOEconItemDropRateBonus)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSOEconItemDropRateBonus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSOEconItemDropRateBonus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional fixed32 expiration_date = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(2, this->expiration_date(), output);
  }

  // optional float bonus = 3 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->bonus(), output);
  }

  // optional uint32 bonus_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->bonus_count(), output);
  }

  // optional uint64 item_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->item_id(), output);
  }

  // optional uint32 def_index = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->def_index(), output);
  }

  // optional uint32 seconds_left = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->seconds_left(), output);
  }

  // optional uint32 booster_type = 8 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->booster_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSOEconItemDropRateBonus)
}

::google::protobuf::uint8* CSOEconItemDropRateBonus::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSOEconItemDropRateBonus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional fixed32 expiration_date = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(2, this->expiration_date(), target);
  }

  // optional float bonus = 3 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->bonus(), target);
  }

  // optional uint32 bonus_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->bonus_count(), target);
  }

  // optional uint64 item_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->item_id(), target);
  }

  // optional uint32 def_index = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->def_index(), target);
  }

  // optional uint32 seconds_left = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->seconds_left(), target);
  }

  // optional uint32 booster_type = 8 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->booster_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSOEconItemDropRateBonus)
  return target;
}

size_t CSOEconItemDropRateBonus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSOEconItemDropRateBonus)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional fixed32 expiration_date = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float bonus = 3 [(.proto.dota.key_field) = true];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 bonus_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bonus_count());
    }

    // optional uint64 item_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional uint32 def_index = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }

    // optional uint32 seconds_left = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->seconds_left());
    }

    // optional uint32 booster_type = 8 [(.proto.dota.key_field) = true];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->booster_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOEconItemDropRateBonus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSOEconItemDropRateBonus)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconItemDropRateBonus* source =
      ::google::protobuf::DynamicCastToGenerated<CSOEconItemDropRateBonus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSOEconItemDropRateBonus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSOEconItemDropRateBonus)
    MergeFrom(*source);
  }
}

void CSOEconItemDropRateBonus::MergeFrom(const CSOEconItemDropRateBonus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSOEconItemDropRateBonus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      expiration_date_ = from.expiration_date_;
    }
    if (cached_has_bits & 0x00000004u) {
      bonus_ = from.bonus_;
    }
    if (cached_has_bits & 0x00000008u) {
      bonus_count_ = from.bonus_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000040u) {
      seconds_left_ = from.seconds_left_;
    }
    if (cached_has_bits & 0x00000080u) {
      booster_type_ = from.booster_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconItemDropRateBonus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSOEconItemDropRateBonus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItemDropRateBonus::CopyFrom(const CSOEconItemDropRateBonus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSOEconItemDropRateBonus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemDropRateBonus::IsInitialized() const {
  return true;
}

void CSOEconItemDropRateBonus::Swap(CSOEconItemDropRateBonus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOEconItemDropRateBonus::InternalSwap(CSOEconItemDropRateBonus* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(expiration_date_, other->expiration_date_);
  swap(bonus_, other->bonus_);
  swap(bonus_count_, other->bonus_count_);
  swap(item_id_, other->item_id_);
  swap(def_index_, other->def_index_);
  swap(seconds_left_, other->seconds_left_);
  swap(booster_type_, other->booster_type_);
}

::google::protobuf::Metadata CSOEconItemDropRateBonus::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CSOEconItemLeagueViewPass::InitAsDefaultInstance() {
}
class CSOEconItemLeagueViewPass::HasBitSetters {
 public:
  static void set_has_account_id(CSOEconItemLeagueViewPass* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_league_id(CSOEconItemLeagueViewPass* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_itemindex(CSOEconItemLeagueViewPass* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_grant_reason(CSOEconItemLeagueViewPass* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOEconItemLeagueViewPass::kAccountIdFieldNumber;
const int CSOEconItemLeagueViewPass::kLeagueIdFieldNumber;
const int CSOEconItemLeagueViewPass::kItemindexFieldNumber;
const int CSOEconItemLeagueViewPass::kGrantReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOEconItemLeagueViewPass::CSOEconItemLeagueViewPass()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSOEconItemLeagueViewPass)
}
CSOEconItemLeagueViewPass::CSOEconItemLeagueViewPass(const CSOEconItemLeagueViewPass& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&grant_reason_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(grant_reason_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSOEconItemLeagueViewPass)
}

void CSOEconItemLeagueViewPass::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&grant_reason_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(grant_reason_));
}

CSOEconItemLeagueViewPass::~CSOEconItemLeagueViewPass() {
  // @@protoc_insertion_point(destructor:proto.dota.CSOEconItemLeagueViewPass)
  SharedDtor();
}

void CSOEconItemLeagueViewPass::SharedDtor() {
}

void CSOEconItemLeagueViewPass::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSOEconItemLeagueViewPass& CSOEconItemLeagueViewPass::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSOEconItemLeagueViewPass_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CSOEconItemLeagueViewPass::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSOEconItemLeagueViewPass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&grant_reason_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(grant_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSOEconItemLeagueViewPass::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSOEconItemLeagueViewPass*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 league_id = 2 [(.proto.dota.key_field) = true];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 itemindex = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_itemindex(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 grant_reason = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_grant_reason(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSOEconItemLeagueViewPass::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSOEconItemLeagueViewPass)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 2 [(.proto.dota.key_field) = true];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 itemindex = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_itemindex(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 grant_reason = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_grant_reason(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &grant_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSOEconItemLeagueViewPass)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSOEconItemLeagueViewPass)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSOEconItemLeagueViewPass::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSOEconItemLeagueViewPass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 league_id = 2 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->league_id(), output);
  }

  // optional uint32 itemindex = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->itemindex(), output);
  }

  // optional uint32 grant_reason = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->grant_reason(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSOEconItemLeagueViewPass)
}

::google::protobuf::uint8* CSOEconItemLeagueViewPass::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSOEconItemLeagueViewPass)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 league_id = 2 [(.proto.dota.key_field) = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->league_id(), target);
  }

  // optional uint32 itemindex = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->itemindex(), target);
  }

  // optional uint32 grant_reason = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->grant_reason(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSOEconItemLeagueViewPass)
  return target;
}

size_t CSOEconItemLeagueViewPass::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSOEconItemLeagueViewPass)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 account_id = 1 [(.proto.dota.key_field) = true];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 league_id = 2 [(.proto.dota.key_field) = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 itemindex = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemindex());
    }

    // optional uint32 grant_reason = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->grant_reason());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOEconItemLeagueViewPass::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSOEconItemLeagueViewPass)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconItemLeagueViewPass* source =
      ::google::protobuf::DynamicCastToGenerated<CSOEconItemLeagueViewPass>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSOEconItemLeagueViewPass)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSOEconItemLeagueViewPass)
    MergeFrom(*source);
  }
}

void CSOEconItemLeagueViewPass::MergeFrom(const CSOEconItemLeagueViewPass& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSOEconItemLeagueViewPass)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      itemindex_ = from.itemindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      grant_reason_ = from.grant_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconItemLeagueViewPass::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSOEconItemLeagueViewPass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItemLeagueViewPass::CopyFrom(const CSOEconItemLeagueViewPass& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSOEconItemLeagueViewPass)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemLeagueViewPass::IsInitialized() const {
  return true;
}

void CSOEconItemLeagueViewPass::Swap(CSOEconItemLeagueViewPass* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOEconItemLeagueViewPass::InternalSwap(CSOEconItemLeagueViewPass* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(league_id_, other->league_id_);
  swap(itemindex_, other->itemindex_);
  swap(grant_reason_, other->grant_reason_);
}

::google::protobuf::Metadata CSOEconItemLeagueViewPass::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CSOEconItemEventTicket::InitAsDefaultInstance() {
}
class CSOEconItemEventTicket::HasBitSetters {
 public:
  static void set_has_account_id(CSOEconItemEventTicket* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_event_id(CSOEconItemEventTicket* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_item_id(CSOEconItemEventTicket* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOEconItemEventTicket::kAccountIdFieldNumber;
const int CSOEconItemEventTicket::kEventIdFieldNumber;
const int CSOEconItemEventTicket::kItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOEconItemEventTicket::CSOEconItemEventTicket()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSOEconItemEventTicket)
}
CSOEconItemEventTicket::CSOEconItemEventTicket(const CSOEconItemEventTicket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(item_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSOEconItemEventTicket)
}

void CSOEconItemEventTicket::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_id_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(item_id_));
}

CSOEconItemEventTicket::~CSOEconItemEventTicket() {
  // @@protoc_insertion_point(destructor:proto.dota.CSOEconItemEventTicket)
  SharedDtor();
}

void CSOEconItemEventTicket::SharedDtor() {
}

void CSOEconItemEventTicket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSOEconItemEventTicket& CSOEconItemEventTicket::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSOEconItemEventTicket_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CSOEconItemEventTicket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSOEconItemEventTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSOEconItemEventTicket::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSOEconItemEventTicket*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 event_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_event_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 item_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSOEconItemEventTicket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSOEconItemEventTicket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_event_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 item_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSOEconItemEventTicket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSOEconItemEventTicket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSOEconItemEventTicket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSOEconItemEventTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 event_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->event_id(), output);
  }

  // optional uint64 item_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSOEconItemEventTicket)
}

::google::protobuf::uint8* CSOEconItemEventTicket::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSOEconItemEventTicket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 event_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->event_id(), target);
  }

  // optional uint64 item_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSOEconItemEventTicket)
  return target;
}

size_t CSOEconItemEventTicket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSOEconItemEventTicket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 event_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint64 item_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOEconItemEventTicket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSOEconItemEventTicket)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconItemEventTicket* source =
      ::google::protobuf::DynamicCastToGenerated<CSOEconItemEventTicket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSOEconItemEventTicket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSOEconItemEventTicket)
    MergeFrom(*source);
  }
}

void CSOEconItemEventTicket::MergeFrom(const CSOEconItemEventTicket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSOEconItemEventTicket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_id_ = from.item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconItemEventTicket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSOEconItemEventTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItemEventTicket::CopyFrom(const CSOEconItemEventTicket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSOEconItemEventTicket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemEventTicket::IsInitialized() const {
  return true;
}

void CSOEconItemEventTicket::Swap(CSOEconItemEventTicket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOEconItemEventTicket::InternalSwap(CSOEconItemEventTicket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(event_id_, other->event_id_);
  swap(item_id_, other->item_id_);
}

::google::protobuf::Metadata CSOEconItemEventTicket::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CSOEconItemTournamentPassport::InitAsDefaultInstance() {
}
class CSOEconItemTournamentPassport::HasBitSetters {
 public:
  static void set_has_account_id(CSOEconItemTournamentPassport* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_league_id(CSOEconItemTournamentPassport* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_item_id(CSOEconItemTournamentPassport* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_original_purchaser_id(CSOEconItemTournamentPassport* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_passports_bought(CSOEconItemTournamentPassport* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_version(CSOEconItemTournamentPassport* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_def_index(CSOEconItemTournamentPassport* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_reward_flags(CSOEconItemTournamentPassport* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSOEconItemTournamentPassport::kAccountIdFieldNumber;
const int CSOEconItemTournamentPassport::kLeagueIdFieldNumber;
const int CSOEconItemTournamentPassport::kItemIdFieldNumber;
const int CSOEconItemTournamentPassport::kOriginalPurchaserIdFieldNumber;
const int CSOEconItemTournamentPassport::kPassportsBoughtFieldNumber;
const int CSOEconItemTournamentPassport::kVersionFieldNumber;
const int CSOEconItemTournamentPassport::kDefIndexFieldNumber;
const int CSOEconItemTournamentPassport::kRewardFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSOEconItemTournamentPassport::CSOEconItemTournamentPassport()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSOEconItemTournamentPassport)
}
CSOEconItemTournamentPassport::CSOEconItemTournamentPassport(const CSOEconItemTournamentPassport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&reward_flags_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(reward_flags_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSOEconItemTournamentPassport)
}

void CSOEconItemTournamentPassport::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&reward_flags_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(reward_flags_));
}

CSOEconItemTournamentPassport::~CSOEconItemTournamentPassport() {
  // @@protoc_insertion_point(destructor:proto.dota.CSOEconItemTournamentPassport)
  SharedDtor();
}

void CSOEconItemTournamentPassport::SharedDtor() {
}

void CSOEconItemTournamentPassport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSOEconItemTournamentPassport& CSOEconItemTournamentPassport::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSOEconItemTournamentPassport_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CSOEconItemTournamentPassport::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSOEconItemTournamentPassport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reward_flags_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(reward_flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSOEconItemTournamentPassport::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSOEconItemTournamentPassport*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 league_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 item_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 original_purchaser_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_original_purchaser_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 passports_bought = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_passports_bought(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 version = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 def_index = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_def_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 reward_flags = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_reward_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSOEconItemTournamentPassport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSOEconItemTournamentPassport)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 item_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 original_purchaser_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_original_purchaser_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &original_purchaser_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 passports_bought = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_passports_bought(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passports_bought_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 version = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 def_index = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_def_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 reward_flags = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_reward_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSOEconItemTournamentPassport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSOEconItemTournamentPassport)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSOEconItemTournamentPassport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSOEconItemTournamentPassport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->league_id(), output);
  }

  // optional uint64 item_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->item_id(), output);
  }

  // optional uint32 original_purchaser_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->original_purchaser_id(), output);
  }

  // optional uint32 passports_bought = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->passports_bought(), output);
  }

  // optional uint32 version = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->version(), output);
  }

  // optional uint32 def_index = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->def_index(), output);
  }

  // optional uint32 reward_flags = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->reward_flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSOEconItemTournamentPassport)
}

::google::protobuf::uint8* CSOEconItemTournamentPassport::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSOEconItemTournamentPassport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->league_id(), target);
  }

  // optional uint64 item_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->item_id(), target);
  }

  // optional uint32 original_purchaser_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->original_purchaser_id(), target);
  }

  // optional uint32 passports_bought = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->passports_bought(), target);
  }

  // optional uint32 version = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->version(), target);
  }

  // optional uint32 def_index = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->def_index(), target);
  }

  // optional uint32 reward_flags = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->reward_flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSOEconItemTournamentPassport)
  return target;
}

size_t CSOEconItemTournamentPassport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSOEconItemTournamentPassport)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 league_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint64 item_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional uint32 original_purchaser_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->original_purchaser_id());
    }

    // optional uint32 passports_bought = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passports_bought());
    }

    // optional uint32 version = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

    // optional uint32 def_index = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->def_index());
    }

    // optional uint32 reward_flags = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward_flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSOEconItemTournamentPassport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSOEconItemTournamentPassport)
  GOOGLE_DCHECK_NE(&from, this);
  const CSOEconItemTournamentPassport* source =
      ::google::protobuf::DynamicCastToGenerated<CSOEconItemTournamentPassport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSOEconItemTournamentPassport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSOEconItemTournamentPassport)
    MergeFrom(*source);
  }
}

void CSOEconItemTournamentPassport::MergeFrom(const CSOEconItemTournamentPassport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSOEconItemTournamentPassport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      original_purchaser_id_ = from.original_purchaser_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      passports_bought_ = from.passports_bought_;
    }
    if (cached_has_bits & 0x00000020u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000040u) {
      def_index_ = from.def_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      reward_flags_ = from.reward_flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSOEconItemTournamentPassport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSOEconItemTournamentPassport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSOEconItemTournamentPassport::CopyFrom(const CSOEconItemTournamentPassport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSOEconItemTournamentPassport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSOEconItemTournamentPassport::IsInitialized() const {
  return true;
}

void CSOEconItemTournamentPassport::Swap(CSOEconItemTournamentPassport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSOEconItemTournamentPassport::InternalSwap(CSOEconItemTournamentPassport* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(league_id_, other->league_id_);
  swap(item_id_, other->item_id_);
  swap(original_purchaser_id_, other->original_purchaser_id_);
  swap(passports_bought_, other->passports_bought_);
  swap(version_, other->version_);
  swap(def_index_, other->def_index_);
  swap(reward_flags_, other->reward_flags_);
}

::google::protobuf::Metadata CSOEconItemTournamentPassport::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCStorePurchaseCancel::InitAsDefaultInstance() {
}
class CMsgGCStorePurchaseCancel::HasBitSetters {
 public:
  static void set_has_txn_id(CMsgGCStorePurchaseCancel* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCStorePurchaseCancel::kTxnIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCStorePurchaseCancel::CMsgGCStorePurchaseCancel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCStorePurchaseCancel)
}
CMsgGCStorePurchaseCancel::CMsgGCStorePurchaseCancel(const CMsgGCStorePurchaseCancel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txn_id_ = from.txn_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCStorePurchaseCancel)
}

void CMsgGCStorePurchaseCancel::SharedCtor() {
  txn_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgGCStorePurchaseCancel::~CMsgGCStorePurchaseCancel() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCStorePurchaseCancel)
  SharedDtor();
}

void CMsgGCStorePurchaseCancel::SharedDtor() {
}

void CMsgGCStorePurchaseCancel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCStorePurchaseCancel& CMsgGCStorePurchaseCancel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCStorePurchaseCancel_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCStorePurchaseCancel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCStorePurchaseCancel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txn_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCStorePurchaseCancel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCStorePurchaseCancel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 txn_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_txn_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCStorePurchaseCancel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCStorePurchaseCancel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 txn_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_txn_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txn_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCStorePurchaseCancel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCStorePurchaseCancel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCStorePurchaseCancel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCStorePurchaseCancel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 txn_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->txn_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCStorePurchaseCancel)
}

::google::protobuf::uint8* CMsgGCStorePurchaseCancel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCStorePurchaseCancel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 txn_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->txn_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCStorePurchaseCancel)
  return target;
}

size_t CMsgGCStorePurchaseCancel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCStorePurchaseCancel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 txn_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->txn_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCStorePurchaseCancel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCStorePurchaseCancel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCStorePurchaseCancel* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCStorePurchaseCancel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCStorePurchaseCancel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCStorePurchaseCancel)
    MergeFrom(*source);
  }
}

void CMsgGCStorePurchaseCancel::MergeFrom(const CMsgGCStorePurchaseCancel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCStorePurchaseCancel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_txn_id()) {
    set_txn_id(from.txn_id());
  }
}

void CMsgGCStorePurchaseCancel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCStorePurchaseCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCStorePurchaseCancel::CopyFrom(const CMsgGCStorePurchaseCancel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCStorePurchaseCancel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseCancel::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseCancel::Swap(CMsgGCStorePurchaseCancel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCStorePurchaseCancel::InternalSwap(CMsgGCStorePurchaseCancel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(txn_id_, other->txn_id_);
}

::google::protobuf::Metadata CMsgGCStorePurchaseCancel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCStorePurchaseCancelResponse::InitAsDefaultInstance() {
}
class CMsgGCStorePurchaseCancelResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgGCStorePurchaseCancelResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCStorePurchaseCancelResponse::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCStorePurchaseCancelResponse::CMsgGCStorePurchaseCancelResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCStorePurchaseCancelResponse)
}
CMsgGCStorePurchaseCancelResponse::CMsgGCStorePurchaseCancelResponse(const CMsgGCStorePurchaseCancelResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCStorePurchaseCancelResponse)
}

void CMsgGCStorePurchaseCancelResponse::SharedCtor() {
  result_ = 0u;
}

CMsgGCStorePurchaseCancelResponse::~CMsgGCStorePurchaseCancelResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCStorePurchaseCancelResponse)
  SharedDtor();
}

void CMsgGCStorePurchaseCancelResponse::SharedDtor() {
}

void CMsgGCStorePurchaseCancelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCStorePurchaseCancelResponse& CMsgGCStorePurchaseCancelResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCStorePurchaseCancelResponse_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCStorePurchaseCancelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCStorePurchaseCancelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCStorePurchaseCancelResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCStorePurchaseCancelResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_result(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCStorePurchaseCancelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCStorePurchaseCancelResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_result(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCStorePurchaseCancelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCStorePurchaseCancelResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCStorePurchaseCancelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCStorePurchaseCancelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCStorePurchaseCancelResponse)
}

::google::protobuf::uint8* CMsgGCStorePurchaseCancelResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCStorePurchaseCancelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCStorePurchaseCancelResponse)
  return target;
}

size_t CMsgGCStorePurchaseCancelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCStorePurchaseCancelResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCStorePurchaseCancelResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCStorePurchaseCancelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCStorePurchaseCancelResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCStorePurchaseCancelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCStorePurchaseCancelResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCStorePurchaseCancelResponse)
    MergeFrom(*source);
  }
}

void CMsgGCStorePurchaseCancelResponse::MergeFrom(const CMsgGCStorePurchaseCancelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCStorePurchaseCancelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgGCStorePurchaseCancelResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCStorePurchaseCancelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCStorePurchaseCancelResponse::CopyFrom(const CMsgGCStorePurchaseCancelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCStorePurchaseCancelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseCancelResponse::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseCancelResponse::Swap(CMsgGCStorePurchaseCancelResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCStorePurchaseCancelResponse::InternalSwap(CMsgGCStorePurchaseCancelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgGCStorePurchaseCancelResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCStorePurchaseFinalize::InitAsDefaultInstance() {
}
class CMsgGCStorePurchaseFinalize::HasBitSetters {
 public:
  static void set_has_txn_id(CMsgGCStorePurchaseFinalize* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCStorePurchaseFinalize::kTxnIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCStorePurchaseFinalize::CMsgGCStorePurchaseFinalize()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCStorePurchaseFinalize)
}
CMsgGCStorePurchaseFinalize::CMsgGCStorePurchaseFinalize(const CMsgGCStorePurchaseFinalize& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  txn_id_ = from.txn_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCStorePurchaseFinalize)
}

void CMsgGCStorePurchaseFinalize::SharedCtor() {
  txn_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgGCStorePurchaseFinalize::~CMsgGCStorePurchaseFinalize() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCStorePurchaseFinalize)
  SharedDtor();
}

void CMsgGCStorePurchaseFinalize::SharedDtor() {
}

void CMsgGCStorePurchaseFinalize::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCStorePurchaseFinalize& CMsgGCStorePurchaseFinalize::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCStorePurchaseFinalize_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCStorePurchaseFinalize::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCStorePurchaseFinalize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  txn_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCStorePurchaseFinalize::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCStorePurchaseFinalize*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 txn_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_txn_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCStorePurchaseFinalize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCStorePurchaseFinalize)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 txn_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_txn_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &txn_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCStorePurchaseFinalize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCStorePurchaseFinalize)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCStorePurchaseFinalize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCStorePurchaseFinalize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 txn_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->txn_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCStorePurchaseFinalize)
}

::google::protobuf::uint8* CMsgGCStorePurchaseFinalize::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCStorePurchaseFinalize)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 txn_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->txn_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCStorePurchaseFinalize)
  return target;
}

size_t CMsgGCStorePurchaseFinalize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCStorePurchaseFinalize)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 txn_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->txn_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCStorePurchaseFinalize::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCStorePurchaseFinalize)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCStorePurchaseFinalize* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCStorePurchaseFinalize>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCStorePurchaseFinalize)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCStorePurchaseFinalize)
    MergeFrom(*source);
  }
}

void CMsgGCStorePurchaseFinalize::MergeFrom(const CMsgGCStorePurchaseFinalize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCStorePurchaseFinalize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_txn_id()) {
    set_txn_id(from.txn_id());
  }
}

void CMsgGCStorePurchaseFinalize::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCStorePurchaseFinalize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCStorePurchaseFinalize::CopyFrom(const CMsgGCStorePurchaseFinalize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCStorePurchaseFinalize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseFinalize::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseFinalize::Swap(CMsgGCStorePurchaseFinalize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCStorePurchaseFinalize::InternalSwap(CMsgGCStorePurchaseFinalize* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(txn_id_, other->txn_id_);
}

::google::protobuf::Metadata CMsgGCStorePurchaseFinalize::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCStorePurchaseFinalizeResponse::InitAsDefaultInstance() {
}
class CMsgGCStorePurchaseFinalizeResponse::HasBitSetters {
 public:
  static void set_has_result(CMsgGCStorePurchaseFinalizeResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCStorePurchaseFinalizeResponse::kResultFieldNumber;
const int CMsgGCStorePurchaseFinalizeResponse::kItemIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCStorePurchaseFinalizeResponse::CMsgGCStorePurchaseFinalizeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
}
CMsgGCStorePurchaseFinalizeResponse::CMsgGCStorePurchaseFinalizeResponse(const CMsgGCStorePurchaseFinalizeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      item_ids_(from.item_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
}

void CMsgGCStorePurchaseFinalizeResponse::SharedCtor() {
  result_ = 0u;
}

CMsgGCStorePurchaseFinalizeResponse::~CMsgGCStorePurchaseFinalizeResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
  SharedDtor();
}

void CMsgGCStorePurchaseFinalizeResponse::SharedDtor() {
}

void CMsgGCStorePurchaseFinalizeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCStorePurchaseFinalizeResponse& CMsgGCStorePurchaseFinalizeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCStorePurchaseFinalizeResponse_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCStorePurchaseFinalizeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_ids_.Clear();
  result_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCStorePurchaseFinalizeResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCStorePurchaseFinalizeResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_result(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint64 item_ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_item_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
        object = msg->mutable_item_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCStorePurchaseFinalizeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 result = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_result(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 item_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_item_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_item_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCStorePurchaseFinalizeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->result(), output);
  }

  // repeated uint64 item_ids = 2;
  for (int i = 0, n = this->item_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->item_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
}

::google::protobuf::uint8* CMsgGCStorePurchaseFinalizeResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 result = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->result(), target);
  }

  // repeated uint64 item_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(2, this->item_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
  return target;
}

size_t CMsgGCStorePurchaseFinalizeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 item_ids = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->item_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->item_ids_size());
    total_size += data_size;
  }

  // optional uint32 result = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->result());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCStorePurchaseFinalizeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCStorePurchaseFinalizeResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCStorePurchaseFinalizeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
    MergeFrom(*source);
  }
}

void CMsgGCStorePurchaseFinalizeResponse::MergeFrom(const CMsgGCStorePurchaseFinalizeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_ids_.MergeFrom(from.item_ids_);
  if (from.has_result()) {
    set_result(from.result());
  }
}

void CMsgGCStorePurchaseFinalizeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCStorePurchaseFinalizeResponse::CopyFrom(const CMsgGCStorePurchaseFinalizeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCStorePurchaseFinalizeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCStorePurchaseFinalizeResponse::IsInitialized() const {
  return true;
}

void CMsgGCStorePurchaseFinalizeResponse::Swap(CMsgGCStorePurchaseFinalizeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCStorePurchaseFinalizeResponse::InternalSwap(CMsgGCStorePurchaseFinalizeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  item_ids_.InternalSwap(&other->item_ids_);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgGCStorePurchaseFinalizeResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCBannedWordListUpdated::InitAsDefaultInstance() {
}
class CMsgGCToGCBannedWordListUpdated::HasBitSetters {
 public:
  static void set_has_group_id(CMsgGCToGCBannedWordListUpdated* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCBannedWordListUpdated::kGroupIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCBannedWordListUpdated::CMsgGCToGCBannedWordListUpdated()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCBannedWordListUpdated)
}
CMsgGCToGCBannedWordListUpdated::CMsgGCToGCBannedWordListUpdated(const CMsgGCToGCBannedWordListUpdated& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_ = from.group_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCBannedWordListUpdated)
}

void CMsgGCToGCBannedWordListUpdated::SharedCtor() {
  group_id_ = 0u;
}

CMsgGCToGCBannedWordListUpdated::~CMsgGCToGCBannedWordListUpdated() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCBannedWordListUpdated)
  SharedDtor();
}

void CMsgGCToGCBannedWordListUpdated::SharedDtor() {
}

void CMsgGCToGCBannedWordListUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCBannedWordListUpdated& CMsgGCToGCBannedWordListUpdated::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCBannedWordListUpdated_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCBannedWordListUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCBannedWordListUpdated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCBannedWordListUpdated::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCBannedWordListUpdated*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 group_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_group_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCBannedWordListUpdated::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCBannedWordListUpdated)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_group_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCBannedWordListUpdated)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCBannedWordListUpdated)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCBannedWordListUpdated::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCBannedWordListUpdated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->group_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCBannedWordListUpdated)
}

::google::protobuf::uint8* CMsgGCToGCBannedWordListUpdated::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCBannedWordListUpdated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->group_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCBannedWordListUpdated)
  return target;
}

size_t CMsgGCToGCBannedWordListUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCBannedWordListUpdated)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 group_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->group_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCBannedWordListUpdated::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCBannedWordListUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCBannedWordListUpdated* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCBannedWordListUpdated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCBannedWordListUpdated)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCBannedWordListUpdated)
    MergeFrom(*source);
  }
}

void CMsgGCToGCBannedWordListUpdated::MergeFrom(const CMsgGCToGCBannedWordListUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCBannedWordListUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_group_id()) {
    set_group_id(from.group_id());
  }
}

void CMsgGCToGCBannedWordListUpdated::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCBannedWordListUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCBannedWordListUpdated::CopyFrom(const CMsgGCToGCBannedWordListUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCBannedWordListUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCBannedWordListUpdated::IsInitialized() const {
  return true;
}

void CMsgGCToGCBannedWordListUpdated::Swap(CMsgGCToGCBannedWordListUpdated* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCBannedWordListUpdated::InternalSwap(CMsgGCToGCBannedWordListUpdated* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(group_id_, other->group_id_);
}

::google::protobuf::Metadata CMsgGCToGCBannedWordListUpdated::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCDirtySDOCache::InitAsDefaultInstance() {
}
class CMsgGCToGCDirtySDOCache::HasBitSetters {
 public:
  static void set_has_sdo_type(CMsgGCToGCDirtySDOCache* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_key_uint64(CMsgGCToGCDirtySDOCache* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCDirtySDOCache::kSdoTypeFieldNumber;
const int CMsgGCToGCDirtySDOCache::kKeyUint64FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCDirtySDOCache::CMsgGCToGCDirtySDOCache()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCDirtySDOCache)
}
CMsgGCToGCDirtySDOCache::CMsgGCToGCDirtySDOCache(const CMsgGCToGCDirtySDOCache& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&key_uint64_, &from.key_uint64_,
    static_cast<size_t>(reinterpret_cast<char*>(&sdo_type_) -
    reinterpret_cast<char*>(&key_uint64_)) + sizeof(sdo_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCDirtySDOCache)
}

void CMsgGCToGCDirtySDOCache::SharedCtor() {
  ::memset(&key_uint64_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sdo_type_) -
      reinterpret_cast<char*>(&key_uint64_)) + sizeof(sdo_type_));
}

CMsgGCToGCDirtySDOCache::~CMsgGCToGCDirtySDOCache() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCDirtySDOCache)
  SharedDtor();
}

void CMsgGCToGCDirtySDOCache::SharedDtor() {
}

void CMsgGCToGCDirtySDOCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCDirtySDOCache& CMsgGCToGCDirtySDOCache::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCDirtySDOCache_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCDirtySDOCache::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCDirtySDOCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&key_uint64_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sdo_type_) -
        reinterpret_cast<char*>(&key_uint64_)) + sizeof(sdo_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCDirtySDOCache::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCDirtySDOCache*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 sdo_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_sdo_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 key_uint64 = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_key_uint64(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCDirtySDOCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCDirtySDOCache)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sdo_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_sdo_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sdo_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 key_uint64 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_key_uint64(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &key_uint64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCDirtySDOCache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCDirtySDOCache)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCDirtySDOCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCDirtySDOCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sdo_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sdo_type(), output);
  }

  // optional uint64 key_uint64 = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->key_uint64(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCDirtySDOCache)
}

::google::protobuf::uint8* CMsgGCToGCDirtySDOCache::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCDirtySDOCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sdo_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sdo_type(), target);
  }

  // optional uint64 key_uint64 = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->key_uint64(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCDirtySDOCache)
  return target;
}

size_t CMsgGCToGCDirtySDOCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCDirtySDOCache)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 key_uint64 = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->key_uint64());
    }

    // optional uint32 sdo_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sdo_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCDirtySDOCache::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCDirtySDOCache)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCDirtySDOCache* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCDirtySDOCache>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCDirtySDOCache)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCDirtySDOCache)
    MergeFrom(*source);
  }
}

void CMsgGCToGCDirtySDOCache::MergeFrom(const CMsgGCToGCDirtySDOCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCDirtySDOCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_uint64_ = from.key_uint64_;
    }
    if (cached_has_bits & 0x00000002u) {
      sdo_type_ = from.sdo_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCDirtySDOCache::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCDirtySDOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCDirtySDOCache::CopyFrom(const CMsgGCToGCDirtySDOCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCDirtySDOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCDirtySDOCache::IsInitialized() const {
  return true;
}

void CMsgGCToGCDirtySDOCache::Swap(CMsgGCToGCDirtySDOCache* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCDirtySDOCache::InternalSwap(CMsgGCToGCDirtySDOCache* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(key_uint64_, other->key_uint64_);
  swap(sdo_type_, other->sdo_type_);
}

::google::protobuf::Metadata CMsgGCToGCDirtySDOCache::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCDirtyMultipleSDOCache::InitAsDefaultInstance() {
}
class CMsgGCToGCDirtyMultipleSDOCache::HasBitSetters {
 public:
  static void set_has_sdo_type(CMsgGCToGCDirtyMultipleSDOCache* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCDirtyMultipleSDOCache::kSdoTypeFieldNumber;
const int CMsgGCToGCDirtyMultipleSDOCache::kKeyUint64FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCDirtyMultipleSDOCache::CMsgGCToGCDirtyMultipleSDOCache()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
}
CMsgGCToGCDirtyMultipleSDOCache::CMsgGCToGCDirtyMultipleSDOCache(const CMsgGCToGCDirtyMultipleSDOCache& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      key_uint64_(from.key_uint64_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sdo_type_ = from.sdo_type_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
}

void CMsgGCToGCDirtyMultipleSDOCache::SharedCtor() {
  sdo_type_ = 0u;
}

CMsgGCToGCDirtyMultipleSDOCache::~CMsgGCToGCDirtyMultipleSDOCache() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
  SharedDtor();
}

void CMsgGCToGCDirtyMultipleSDOCache::SharedDtor() {
}

void CMsgGCToGCDirtyMultipleSDOCache::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCDirtyMultipleSDOCache& CMsgGCToGCDirtyMultipleSDOCache::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCDirtyMultipleSDOCache_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCDirtyMultipleSDOCache::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_uint64_.Clear();
  sdo_type_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCDirtyMultipleSDOCache::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCDirtyMultipleSDOCache*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 sdo_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_sdo_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint64 key_uint64 = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_key_uint64(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
        object = msg->mutable_key_uint64();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCDirtyMultipleSDOCache::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 sdo_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_sdo_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sdo_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 key_uint64 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 16u, input, this->mutable_key_uint64())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_key_uint64())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCDirtyMultipleSDOCache::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sdo_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sdo_type(), output);
  }

  // repeated uint64 key_uint64 = 2;
  for (int i = 0, n = this->key_uint64_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      2, this->key_uint64(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
}

::google::protobuf::uint8* CMsgGCToGCDirtyMultipleSDOCache::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 sdo_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sdo_type(), target);
  }

  // repeated uint64 key_uint64 = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(2, this->key_uint64_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
  return target;
}

size_t CMsgGCToGCDirtyMultipleSDOCache::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 key_uint64 = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->key_uint64_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->key_uint64_size());
    total_size += data_size;
  }

  // optional uint32 sdo_type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sdo_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCDirtyMultipleSDOCache::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCDirtyMultipleSDOCache* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCDirtyMultipleSDOCache>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
    MergeFrom(*source);
  }
}

void CMsgGCToGCDirtyMultipleSDOCache::MergeFrom(const CMsgGCToGCDirtyMultipleSDOCache& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_uint64_.MergeFrom(from.key_uint64_);
  if (from.has_sdo_type()) {
    set_sdo_type(from.sdo_type());
  }
}

void CMsgGCToGCDirtyMultipleSDOCache::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCDirtyMultipleSDOCache::CopyFrom(const CMsgGCToGCDirtyMultipleSDOCache& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCDirtyMultipleSDOCache)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCDirtyMultipleSDOCache::IsInitialized() const {
  return true;
}

void CMsgGCToGCDirtyMultipleSDOCache::Swap(CMsgGCToGCDirtyMultipleSDOCache* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCDirtyMultipleSDOCache::InternalSwap(CMsgGCToGCDirtyMultipleSDOCache* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_uint64_.InternalSwap(&other->key_uint64_);
  swap(sdo_type_, other->sdo_type_);
}

::google::protobuf::Metadata CMsgGCToGCDirtyMultipleSDOCache::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCApplyLocalizationDiff::InitAsDefaultInstance() {
}
class CMsgGCToGCApplyLocalizationDiff::HasBitSetters {
 public:
  static void set_has_language(CMsgGCToGCApplyLocalizationDiff* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_packed_diff(CMsgGCToGCApplyLocalizationDiff* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCApplyLocalizationDiff::kLanguageFieldNumber;
const int CMsgGCToGCApplyLocalizationDiff::kPackedDiffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCApplyLocalizationDiff::CMsgGCToGCApplyLocalizationDiff()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCApplyLocalizationDiff)
}
CMsgGCToGCApplyLocalizationDiff::CMsgGCToGCApplyLocalizationDiff(const CMsgGCToGCApplyLocalizationDiff& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  packed_diff_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_packed_diff()) {
    packed_diff_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packed_diff_);
  }
  language_ = from.language_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCApplyLocalizationDiff)
}

void CMsgGCToGCApplyLocalizationDiff::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCToGCApplyLocalizationDiff_base_5fgcmessages_2eproto.base);
  packed_diff_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  language_ = 0u;
}

CMsgGCToGCApplyLocalizationDiff::~CMsgGCToGCApplyLocalizationDiff() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCApplyLocalizationDiff)
  SharedDtor();
}

void CMsgGCToGCApplyLocalizationDiff::SharedDtor() {
  packed_diff_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToGCApplyLocalizationDiff::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCApplyLocalizationDiff& CMsgGCToGCApplyLocalizationDiff::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCApplyLocalizationDiff_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCApplyLocalizationDiff::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCApplyLocalizationDiff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    packed_diff_.ClearNonDefaultToEmptyNoArena();
  }
  language_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCApplyLocalizationDiff::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCApplyLocalizationDiff*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 language = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_language(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string packed_diff = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCToGCApplyLocalizationDiff.packed_diff");
        object = msg->mutable_packed_diff();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCApplyLocalizationDiff::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCApplyLocalizationDiff)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 language = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_language(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &language_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string packed_diff = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_packed_diff()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->packed_diff().data(), static_cast<int>(this->packed_diff().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCToGCApplyLocalizationDiff.packed_diff");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCApplyLocalizationDiff)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCApplyLocalizationDiff)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCApplyLocalizationDiff::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCApplyLocalizationDiff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 language = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->language(), output);
  }

  // optional string packed_diff = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packed_diff().data(), static_cast<int>(this->packed_diff().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToGCApplyLocalizationDiff.packed_diff");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->packed_diff(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCApplyLocalizationDiff)
}

::google::protobuf::uint8* CMsgGCToGCApplyLocalizationDiff::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCApplyLocalizationDiff)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 language = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->language(), target);
  }

  // optional string packed_diff = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->packed_diff().data(), static_cast<int>(this->packed_diff().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToGCApplyLocalizationDiff.packed_diff");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->packed_diff(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCApplyLocalizationDiff)
  return target;
}

size_t CMsgGCToGCApplyLocalizationDiff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCApplyLocalizationDiff)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string packed_diff = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->packed_diff());
    }

    // optional uint32 language = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->language());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCApplyLocalizationDiff::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCApplyLocalizationDiff)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCApplyLocalizationDiff* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCApplyLocalizationDiff>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCApplyLocalizationDiff)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCApplyLocalizationDiff)
    MergeFrom(*source);
  }
}

void CMsgGCToGCApplyLocalizationDiff::MergeFrom(const CMsgGCToGCApplyLocalizationDiff& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCApplyLocalizationDiff)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      packed_diff_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.packed_diff_);
    }
    if (cached_has_bits & 0x00000002u) {
      language_ = from.language_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCApplyLocalizationDiff::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCApplyLocalizationDiff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCApplyLocalizationDiff::CopyFrom(const CMsgGCToGCApplyLocalizationDiff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCApplyLocalizationDiff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCApplyLocalizationDiff::IsInitialized() const {
  return true;
}

void CMsgGCToGCApplyLocalizationDiff::Swap(CMsgGCToGCApplyLocalizationDiff* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCApplyLocalizationDiff::InternalSwap(CMsgGCToGCApplyLocalizationDiff* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  packed_diff_.Swap(&other->packed_diff_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(language_, other->language_);
}

::google::protobuf::Metadata CMsgGCToGCApplyLocalizationDiff::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCApplyLocalizationDiffResponse::InitAsDefaultInstance() {
}
class CMsgGCToGCApplyLocalizationDiffResponse::HasBitSetters {
 public:
  static void set_has_success(CMsgGCToGCApplyLocalizationDiffResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCApplyLocalizationDiffResponse::kSuccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCApplyLocalizationDiffResponse::CMsgGCToGCApplyLocalizationDiffResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
}
CMsgGCToGCApplyLocalizationDiffResponse::CMsgGCToGCApplyLocalizationDiffResponse(const CMsgGCToGCApplyLocalizationDiffResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
}

void CMsgGCToGCApplyLocalizationDiffResponse::SharedCtor() {
  success_ = false;
}

CMsgGCToGCApplyLocalizationDiffResponse::~CMsgGCToGCApplyLocalizationDiffResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
  SharedDtor();
}

void CMsgGCToGCApplyLocalizationDiffResponse::SharedDtor() {
}

void CMsgGCToGCApplyLocalizationDiffResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCApplyLocalizationDiffResponse& CMsgGCToGCApplyLocalizationDiffResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCApplyLocalizationDiffResponse_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCApplyLocalizationDiffResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCApplyLocalizationDiffResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCApplyLocalizationDiffResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_success(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCApplyLocalizationDiffResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_success(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCApplyLocalizationDiffResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
}

::google::protobuf::uint8* CMsgGCToGCApplyLocalizationDiffResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
  return target;
}

size_t CMsgGCToGCApplyLocalizationDiffResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool success = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCApplyLocalizationDiffResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCApplyLocalizationDiffResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCApplyLocalizationDiffResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToGCApplyLocalizationDiffResponse::MergeFrom(const CMsgGCToGCApplyLocalizationDiffResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_success()) {
    set_success(from.success());
  }
}

void CMsgGCToGCApplyLocalizationDiffResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCApplyLocalizationDiffResponse::CopyFrom(const CMsgGCToGCApplyLocalizationDiffResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCApplyLocalizationDiffResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCApplyLocalizationDiffResponse::IsInitialized() const {
  return true;
}

void CMsgGCToGCApplyLocalizationDiffResponse::Swap(CMsgGCToGCApplyLocalizationDiffResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCApplyLocalizationDiffResponse::InternalSwap(CMsgGCToGCApplyLocalizationDiffResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(success_, other->success_);
}

::google::protobuf::Metadata CMsgGCToGCApplyLocalizationDiffResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCCollectItem::InitAsDefaultInstance() {
}
class CMsgGCCollectItem::HasBitSetters {
 public:
  static void set_has_collection_item_id(CMsgGCCollectItem* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_subject_item_id(CMsgGCCollectItem* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCCollectItem::kCollectionItemIdFieldNumber;
const int CMsgGCCollectItem::kSubjectItemIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCCollectItem::CMsgGCCollectItem()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCCollectItem)
}
CMsgGCCollectItem::CMsgGCCollectItem(const CMsgGCCollectItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&collection_item_id_, &from.collection_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&subject_item_id_) -
    reinterpret_cast<char*>(&collection_item_id_)) + sizeof(subject_item_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCCollectItem)
}

void CMsgGCCollectItem::SharedCtor() {
  ::memset(&collection_item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subject_item_id_) -
      reinterpret_cast<char*>(&collection_item_id_)) + sizeof(subject_item_id_));
}

CMsgGCCollectItem::~CMsgGCCollectItem() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCCollectItem)
  SharedDtor();
}

void CMsgGCCollectItem::SharedDtor() {
}

void CMsgGCCollectItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCCollectItem& CMsgGCCollectItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCCollectItem_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCCollectItem::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCCollectItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&collection_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&subject_item_id_) -
        reinterpret_cast<char*>(&collection_item_id_)) + sizeof(subject_item_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCCollectItem::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCCollectItem*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 collection_item_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_collection_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 subject_item_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_subject_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCCollectItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCCollectItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 collection_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_collection_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &collection_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 subject_item_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_subject_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &subject_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCCollectItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCCollectItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCCollectItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCCollectItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 collection_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->collection_item_id(), output);
  }

  // optional uint64 subject_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->subject_item_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCCollectItem)
}

::google::protobuf::uint8* CMsgGCCollectItem::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCCollectItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 collection_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->collection_item_id(), target);
  }

  // optional uint64 subject_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->subject_item_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCCollectItem)
  return target;
}

size_t CMsgGCCollectItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCCollectItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 collection_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->collection_item_id());
    }

    // optional uint64 subject_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->subject_item_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCCollectItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCCollectItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCCollectItem* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCCollectItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCCollectItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCCollectItem)
    MergeFrom(*source);
  }
}

void CMsgGCCollectItem::MergeFrom(const CMsgGCCollectItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCCollectItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      collection_item_id_ = from.collection_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      subject_item_id_ = from.subject_item_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCCollectItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCCollectItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCCollectItem::CopyFrom(const CMsgGCCollectItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCCollectItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCCollectItem::IsInitialized() const {
  return true;
}

void CMsgGCCollectItem::Swap(CMsgGCCollectItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCCollectItem::InternalSwap(CMsgGCCollectItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(collection_item_id_, other->collection_item_id_);
  swap(subject_item_id_, other->subject_item_id_);
}

::google::protobuf::Metadata CMsgGCCollectItem::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSDONoMemcached::InitAsDefaultInstance() {
}
class CMsgSDONoMemcached::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSDONoMemcached::CMsgSDONoMemcached()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSDONoMemcached)
}
CMsgSDONoMemcached::CMsgSDONoMemcached(const CMsgSDONoMemcached& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSDONoMemcached)
}

void CMsgSDONoMemcached::SharedCtor() {
}

CMsgSDONoMemcached::~CMsgSDONoMemcached() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSDONoMemcached)
  SharedDtor();
}

void CMsgSDONoMemcached::SharedDtor() {
}

void CMsgSDONoMemcached::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSDONoMemcached& CMsgSDONoMemcached::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSDONoMemcached_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgSDONoMemcached::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSDONoMemcached)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSDONoMemcached::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSDONoMemcached*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSDONoMemcached::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSDONoMemcached)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSDONoMemcached)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSDONoMemcached)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSDONoMemcached::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSDONoMemcached)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSDONoMemcached)
}

::google::protobuf::uint8* CMsgSDONoMemcached::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSDONoMemcached)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSDONoMemcached)
  return target;
}

size_t CMsgSDONoMemcached::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSDONoMemcached)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSDONoMemcached::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSDONoMemcached)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSDONoMemcached* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSDONoMemcached>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSDONoMemcached)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSDONoMemcached)
    MergeFrom(*source);
  }
}

void CMsgSDONoMemcached::MergeFrom(const CMsgSDONoMemcached& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSDONoMemcached)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgSDONoMemcached::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSDONoMemcached)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSDONoMemcached::CopyFrom(const CMsgSDONoMemcached& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSDONoMemcached)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSDONoMemcached::IsInitialized() const {
  return true;
}

void CMsgSDONoMemcached::Swap(CMsgSDONoMemcached* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSDONoMemcached::InternalSwap(CMsgSDONoMemcached* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgSDONoMemcached::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCUpdateSQLKeyValue::InitAsDefaultInstance() {
}
class CMsgGCToGCUpdateSQLKeyValue::HasBitSetters {
 public:
  static void set_has_key_name(CMsgGCToGCUpdateSQLKeyValue* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCUpdateSQLKeyValue::kKeyNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCUpdateSQLKeyValue::CMsgGCToGCUpdateSQLKeyValue()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
}
CMsgGCToGCUpdateSQLKeyValue::CMsgGCToGCUpdateSQLKeyValue(const CMsgGCToGCUpdateSQLKeyValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key_name()) {
    key_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_name_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
}

void CMsgGCToGCUpdateSQLKeyValue::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCToGCUpdateSQLKeyValue_base_5fgcmessages_2eproto.base);
  key_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgGCToGCUpdateSQLKeyValue::~CMsgGCToGCUpdateSQLKeyValue() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
  SharedDtor();
}

void CMsgGCToGCUpdateSQLKeyValue::SharedDtor() {
  key_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToGCUpdateSQLKeyValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCUpdateSQLKeyValue& CMsgGCToGCUpdateSQLKeyValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCUpdateSQLKeyValue_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCUpdateSQLKeyValue::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCUpdateSQLKeyValue::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCUpdateSQLKeyValue*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string key_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCToGCUpdateSQLKeyValue.key_name");
        object = msg->mutable_key_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCUpdateSQLKeyValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string key_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key_name().data(), static_cast<int>(this->key_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCToGCUpdateSQLKeyValue.key_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCUpdateSQLKeyValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_name().data(), static_cast<int>(this->key_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToGCUpdateSQLKeyValue.key_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
}

::google::protobuf::uint8* CMsgGCToGCUpdateSQLKeyValue::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string key_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key_name().data(), static_cast<int>(this->key_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToGCUpdateSQLKeyValue.key_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
  return target;
}

size_t CMsgGCToGCUpdateSQLKeyValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string key_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCUpdateSQLKeyValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCUpdateSQLKeyValue* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCUpdateSQLKeyValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
    MergeFrom(*source);
  }
}

void CMsgGCToGCUpdateSQLKeyValue::MergeFrom(const CMsgGCToGCUpdateSQLKeyValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key_name()) {
    _has_bits_[0] |= 0x00000001u;
    key_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_name_);
  }
}

void CMsgGCToGCUpdateSQLKeyValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCUpdateSQLKeyValue::CopyFrom(const CMsgGCToGCUpdateSQLKeyValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCUpdateSQLKeyValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCUpdateSQLKeyValue::IsInitialized() const {
  return true;
}

void CMsgGCToGCUpdateSQLKeyValue::Swap(CMsgGCToGCUpdateSQLKeyValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCUpdateSQLKeyValue::InternalSwap(CMsgGCToGCUpdateSQLKeyValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_name_.Swap(&other->key_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgGCToGCUpdateSQLKeyValue::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCServerVersionUpdated::InitAsDefaultInstance() {
}
class CMsgGCServerVersionUpdated::HasBitSetters {
 public:
  static void set_has_server_version(CMsgGCServerVersionUpdated* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCServerVersionUpdated::kServerVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCServerVersionUpdated::CMsgGCServerVersionUpdated()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCServerVersionUpdated)
}
CMsgGCServerVersionUpdated::CMsgGCServerVersionUpdated(const CMsgGCServerVersionUpdated& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  server_version_ = from.server_version_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCServerVersionUpdated)
}

void CMsgGCServerVersionUpdated::SharedCtor() {
  server_version_ = 0u;
}

CMsgGCServerVersionUpdated::~CMsgGCServerVersionUpdated() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCServerVersionUpdated)
  SharedDtor();
}

void CMsgGCServerVersionUpdated::SharedDtor() {
}

void CMsgGCServerVersionUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCServerVersionUpdated& CMsgGCServerVersionUpdated::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCServerVersionUpdated_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCServerVersionUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCServerVersionUpdated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCServerVersionUpdated::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCServerVersionUpdated*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 server_version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_server_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCServerVersionUpdated::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCServerVersionUpdated)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 server_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_server_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &server_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCServerVersionUpdated)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCServerVersionUpdated)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCServerVersionUpdated::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCServerVersionUpdated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->server_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCServerVersionUpdated)
}

::google::protobuf::uint8* CMsgGCServerVersionUpdated::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCServerVersionUpdated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 server_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->server_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCServerVersionUpdated)
  return target;
}

size_t CMsgGCServerVersionUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCServerVersionUpdated)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 server_version = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->server_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCServerVersionUpdated::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCServerVersionUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCServerVersionUpdated* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCServerVersionUpdated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCServerVersionUpdated)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCServerVersionUpdated)
    MergeFrom(*source);
  }
}

void CMsgGCServerVersionUpdated::MergeFrom(const CMsgGCServerVersionUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCServerVersionUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_server_version()) {
    set_server_version(from.server_version());
  }
}

void CMsgGCServerVersionUpdated::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCServerVersionUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCServerVersionUpdated::CopyFrom(const CMsgGCServerVersionUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCServerVersionUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCServerVersionUpdated::IsInitialized() const {
  return true;
}

void CMsgGCServerVersionUpdated::Swap(CMsgGCServerVersionUpdated* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCServerVersionUpdated::InternalSwap(CMsgGCServerVersionUpdated* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(server_version_, other->server_version_);
}

::google::protobuf::Metadata CMsgGCServerVersionUpdated::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCClientVersionUpdated::InitAsDefaultInstance() {
}
class CMsgGCClientVersionUpdated::HasBitSetters {
 public:
  static void set_has_client_version(CMsgGCClientVersionUpdated* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCClientVersionUpdated::kClientVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCClientVersionUpdated::CMsgGCClientVersionUpdated()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCClientVersionUpdated)
}
CMsgGCClientVersionUpdated::CMsgGCClientVersionUpdated(const CMsgGCClientVersionUpdated& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_version_ = from.client_version_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCClientVersionUpdated)
}

void CMsgGCClientVersionUpdated::SharedCtor() {
  client_version_ = 0u;
}

CMsgGCClientVersionUpdated::~CMsgGCClientVersionUpdated() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCClientVersionUpdated)
  SharedDtor();
}

void CMsgGCClientVersionUpdated::SharedDtor() {
}

void CMsgGCClientVersionUpdated::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCClientVersionUpdated& CMsgGCClientVersionUpdated::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCClientVersionUpdated_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCClientVersionUpdated::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCClientVersionUpdated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  client_version_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCClientVersionUpdated::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCClientVersionUpdated*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 client_version = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_client_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCClientVersionUpdated::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCClientVersionUpdated)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 client_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_client_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCClientVersionUpdated)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCClientVersionUpdated)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCClientVersionUpdated::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCClientVersionUpdated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_version = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->client_version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCClientVersionUpdated)
}

::google::protobuf::uint8* CMsgGCClientVersionUpdated::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCClientVersionUpdated)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 client_version = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->client_version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCClientVersionUpdated)
  return target;
}

size_t CMsgGCClientVersionUpdated::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCClientVersionUpdated)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 client_version = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->client_version());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCClientVersionUpdated::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCClientVersionUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCClientVersionUpdated* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCClientVersionUpdated>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCClientVersionUpdated)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCClientVersionUpdated)
    MergeFrom(*source);
  }
}

void CMsgGCClientVersionUpdated::MergeFrom(const CMsgGCClientVersionUpdated& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCClientVersionUpdated)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_client_version()) {
    set_client_version(from.client_version());
  }
}

void CMsgGCClientVersionUpdated::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCClientVersionUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCClientVersionUpdated::CopyFrom(const CMsgGCClientVersionUpdated& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCClientVersionUpdated)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClientVersionUpdated::IsInitialized() const {
  return true;
}

void CMsgGCClientVersionUpdated::Swap(CMsgGCClientVersionUpdated* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCClientVersionUpdated::InternalSwap(CMsgGCClientVersionUpdated* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(client_version_, other->client_version_);
}

::google::protobuf::Metadata CMsgGCClientVersionUpdated::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCWebAPIAccountChanged::InitAsDefaultInstance() {
}
class CMsgGCToGCWebAPIAccountChanged::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCWebAPIAccountChanged::CMsgGCToGCWebAPIAccountChanged()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCWebAPIAccountChanged)
}
CMsgGCToGCWebAPIAccountChanged::CMsgGCToGCWebAPIAccountChanged(const CMsgGCToGCWebAPIAccountChanged& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCWebAPIAccountChanged)
}

void CMsgGCToGCWebAPIAccountChanged::SharedCtor() {
}

CMsgGCToGCWebAPIAccountChanged::~CMsgGCToGCWebAPIAccountChanged() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCWebAPIAccountChanged)
  SharedDtor();
}

void CMsgGCToGCWebAPIAccountChanged::SharedDtor() {
}

void CMsgGCToGCWebAPIAccountChanged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCWebAPIAccountChanged& CMsgGCToGCWebAPIAccountChanged::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCWebAPIAccountChanged_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCWebAPIAccountChanged::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCWebAPIAccountChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCWebAPIAccountChanged::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCWebAPIAccountChanged*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCWebAPIAccountChanged::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCWebAPIAccountChanged)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCWebAPIAccountChanged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCWebAPIAccountChanged)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCWebAPIAccountChanged::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCWebAPIAccountChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCWebAPIAccountChanged)
}

::google::protobuf::uint8* CMsgGCToGCWebAPIAccountChanged::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCWebAPIAccountChanged)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCWebAPIAccountChanged)
  return target;
}

size_t CMsgGCToGCWebAPIAccountChanged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCWebAPIAccountChanged)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCWebAPIAccountChanged::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCWebAPIAccountChanged)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCWebAPIAccountChanged* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCWebAPIAccountChanged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCWebAPIAccountChanged)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCWebAPIAccountChanged)
    MergeFrom(*source);
  }
}

void CMsgGCToGCWebAPIAccountChanged::MergeFrom(const CMsgGCToGCWebAPIAccountChanged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCWebAPIAccountChanged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCToGCWebAPIAccountChanged::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCWebAPIAccountChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCWebAPIAccountChanged::CopyFrom(const CMsgGCToGCWebAPIAccountChanged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCWebAPIAccountChanged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCWebAPIAccountChanged::IsInitialized() const {
  return true;
}

void CMsgGCToGCWebAPIAccountChanged::Swap(CMsgGCToGCWebAPIAccountChanged* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCWebAPIAccountChanged::InternalSwap(CMsgGCToGCWebAPIAccountChanged* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgGCToGCWebAPIAccountChanged::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgRecipeComponent::InitAsDefaultInstance() {
}
class CMsgRecipeComponent::HasBitSetters {
 public:
  static void set_has_subject_item_id(CMsgRecipeComponent* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_attribute_index(CMsgRecipeComponent* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgRecipeComponent::kSubjectItemIdFieldNumber;
const int CMsgRecipeComponent::kAttributeIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgRecipeComponent::CMsgRecipeComponent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgRecipeComponent)
}
CMsgRecipeComponent::CMsgRecipeComponent(const CMsgRecipeComponent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&subject_item_id_, &from.subject_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&attribute_index_) -
    reinterpret_cast<char*>(&subject_item_id_)) + sizeof(attribute_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgRecipeComponent)
}

void CMsgRecipeComponent::SharedCtor() {
  ::memset(&subject_item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&attribute_index_) -
      reinterpret_cast<char*>(&subject_item_id_)) + sizeof(attribute_index_));
}

CMsgRecipeComponent::~CMsgRecipeComponent() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgRecipeComponent)
  SharedDtor();
}

void CMsgRecipeComponent::SharedDtor() {
}

void CMsgRecipeComponent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgRecipeComponent& CMsgRecipeComponent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgRecipeComponent_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgRecipeComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgRecipeComponent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&subject_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&attribute_index_) -
        reinterpret_cast<char*>(&subject_item_id_)) + sizeof(attribute_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgRecipeComponent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgRecipeComponent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 subject_item_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_subject_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 attribute_index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_attribute_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgRecipeComponent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgRecipeComponent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 subject_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_subject_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &subject_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 attribute_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_attribute_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &attribute_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgRecipeComponent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgRecipeComponent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgRecipeComponent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgRecipeComponent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 subject_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->subject_item_id(), output);
  }

  // optional uint64 attribute_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->attribute_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgRecipeComponent)
}

::google::protobuf::uint8* CMsgRecipeComponent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgRecipeComponent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 subject_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->subject_item_id(), target);
  }

  // optional uint64 attribute_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->attribute_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgRecipeComponent)
  return target;
}

size_t CMsgRecipeComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgRecipeComponent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 subject_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->subject_item_id());
    }

    // optional uint64 attribute_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->attribute_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgRecipeComponent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgRecipeComponent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgRecipeComponent* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgRecipeComponent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgRecipeComponent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgRecipeComponent)
    MergeFrom(*source);
  }
}

void CMsgRecipeComponent::MergeFrom(const CMsgRecipeComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgRecipeComponent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      subject_item_id_ = from.subject_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      attribute_index_ = from.attribute_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgRecipeComponent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgRecipeComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgRecipeComponent::CopyFrom(const CMsgRecipeComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgRecipeComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgRecipeComponent::IsInitialized() const {
  return true;
}

void CMsgRecipeComponent::Swap(CMsgRecipeComponent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgRecipeComponent::InternalSwap(CMsgRecipeComponent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(subject_item_id_, other->subject_item_id_);
  swap(attribute_index_, other->attribute_index_);
}

::google::protobuf::Metadata CMsgRecipeComponent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgFulfillDynamicRecipeComponent::InitAsDefaultInstance() {
}
class CMsgFulfillDynamicRecipeComponent::HasBitSetters {
 public:
  static void set_has_tool_item_id(CMsgFulfillDynamicRecipeComponent* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgFulfillDynamicRecipeComponent::kToolItemIdFieldNumber;
const int CMsgFulfillDynamicRecipeComponent::kConsumptionComponentsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgFulfillDynamicRecipeComponent::CMsgFulfillDynamicRecipeComponent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgFulfillDynamicRecipeComponent)
}
CMsgFulfillDynamicRecipeComponent::CMsgFulfillDynamicRecipeComponent(const CMsgFulfillDynamicRecipeComponent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      consumption_components_(from.consumption_components_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tool_item_id_ = from.tool_item_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgFulfillDynamicRecipeComponent)
}

void CMsgFulfillDynamicRecipeComponent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgFulfillDynamicRecipeComponent_base_5fgcmessages_2eproto.base);
  tool_item_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgFulfillDynamicRecipeComponent::~CMsgFulfillDynamicRecipeComponent() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgFulfillDynamicRecipeComponent)
  SharedDtor();
}

void CMsgFulfillDynamicRecipeComponent::SharedDtor() {
}

void CMsgFulfillDynamicRecipeComponent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgFulfillDynamicRecipeComponent& CMsgFulfillDynamicRecipeComponent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgFulfillDynamicRecipeComponent_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgFulfillDynamicRecipeComponent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgFulfillDynamicRecipeComponent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  consumption_components_.Clear();
  tool_item_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgFulfillDynamicRecipeComponent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgFulfillDynamicRecipeComponent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 tool_item_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_tool_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgRecipeComponent consumption_components = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgRecipeComponent::_InternalParse;
          object = msg->add_consumption_components();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgFulfillDynamicRecipeComponent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgFulfillDynamicRecipeComponent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 tool_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_tool_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tool_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgRecipeComponent consumption_components = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_consumption_components()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgFulfillDynamicRecipeComponent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgFulfillDynamicRecipeComponent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgFulfillDynamicRecipeComponent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgFulfillDynamicRecipeComponent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tool_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tool_item_id(), output);
  }

  // repeated .proto.dota.CMsgRecipeComponent consumption_components = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->consumption_components_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->consumption_components(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgFulfillDynamicRecipeComponent)
}

::google::protobuf::uint8* CMsgFulfillDynamicRecipeComponent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgFulfillDynamicRecipeComponent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tool_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tool_item_id(), target);
  }

  // repeated .proto.dota.CMsgRecipeComponent consumption_components = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->consumption_components_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->consumption_components(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgFulfillDynamicRecipeComponent)
  return target;
}

size_t CMsgFulfillDynamicRecipeComponent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgFulfillDynamicRecipeComponent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgRecipeComponent consumption_components = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->consumption_components_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->consumption_components(static_cast<int>(i)));
    }
  }

  // optional uint64 tool_item_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tool_item_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgFulfillDynamicRecipeComponent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgFulfillDynamicRecipeComponent)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgFulfillDynamicRecipeComponent* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgFulfillDynamicRecipeComponent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgFulfillDynamicRecipeComponent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgFulfillDynamicRecipeComponent)
    MergeFrom(*source);
  }
}

void CMsgFulfillDynamicRecipeComponent::MergeFrom(const CMsgFulfillDynamicRecipeComponent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgFulfillDynamicRecipeComponent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  consumption_components_.MergeFrom(from.consumption_components_);
  if (from.has_tool_item_id()) {
    set_tool_item_id(from.tool_item_id());
  }
}

void CMsgFulfillDynamicRecipeComponent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgFulfillDynamicRecipeComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgFulfillDynamicRecipeComponent::CopyFrom(const CMsgFulfillDynamicRecipeComponent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgFulfillDynamicRecipeComponent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgFulfillDynamicRecipeComponent::IsInitialized() const {
  return true;
}

void CMsgFulfillDynamicRecipeComponent::Swap(CMsgFulfillDynamicRecipeComponent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgFulfillDynamicRecipeComponent::InternalSwap(CMsgFulfillDynamicRecipeComponent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&consumption_components_)->InternalSwap(CastToBase(&other->consumption_components_));
  swap(tool_item_id_, other->tool_item_id_);
}

::google::protobuf::Metadata CMsgFulfillDynamicRecipeComponent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCClientMarketDataRequest::InitAsDefaultInstance() {
}
class CMsgGCClientMarketDataRequest::HasBitSetters {
 public:
  static void set_has_user_currency(CMsgGCClientMarketDataRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCClientMarketDataRequest::kUserCurrencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCClientMarketDataRequest::CMsgGCClientMarketDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCClientMarketDataRequest)
}
CMsgGCClientMarketDataRequest::CMsgGCClientMarketDataRequest(const CMsgGCClientMarketDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_currency_ = from.user_currency_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCClientMarketDataRequest)
}

void CMsgGCClientMarketDataRequest::SharedCtor() {
  user_currency_ = 0u;
}

CMsgGCClientMarketDataRequest::~CMsgGCClientMarketDataRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCClientMarketDataRequest)
  SharedDtor();
}

void CMsgGCClientMarketDataRequest::SharedDtor() {
}

void CMsgGCClientMarketDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCClientMarketDataRequest& CMsgGCClientMarketDataRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCClientMarketDataRequest_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCClientMarketDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCClientMarketDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_currency_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCClientMarketDataRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCClientMarketDataRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 user_currency = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_user_currency(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCClientMarketDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCClientMarketDataRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 user_currency = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_user_currency(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_currency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCClientMarketDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCClientMarketDataRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCClientMarketDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCClientMarketDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 user_currency = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_currency(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCClientMarketDataRequest)
}

::google::protobuf::uint8* CMsgGCClientMarketDataRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCClientMarketDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 user_currency = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_currency(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCClientMarketDataRequest)
  return target;
}

size_t CMsgGCClientMarketDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCClientMarketDataRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 user_currency = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->user_currency());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCClientMarketDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCClientMarketDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCClientMarketDataRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCClientMarketDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCClientMarketDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCClientMarketDataRequest)
    MergeFrom(*source);
  }
}

void CMsgGCClientMarketDataRequest::MergeFrom(const CMsgGCClientMarketDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCClientMarketDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_currency()) {
    set_user_currency(from.user_currency());
  }
}

void CMsgGCClientMarketDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCClientMarketDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCClientMarketDataRequest::CopyFrom(const CMsgGCClientMarketDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCClientMarketDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClientMarketDataRequest::IsInitialized() const {
  return true;
}

void CMsgGCClientMarketDataRequest::Swap(CMsgGCClientMarketDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCClientMarketDataRequest::InternalSwap(CMsgGCClientMarketDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(user_currency_, other->user_currency_);
}

::google::protobuf::Metadata CMsgGCClientMarketDataRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCClientMarketDataEntry::InitAsDefaultInstance() {
}
class CMsgGCClientMarketDataEntry::HasBitSetters {
 public:
  static void set_has_item_def_index(CMsgGCClientMarketDataEntry* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_item_quality(CMsgGCClientMarketDataEntry* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_item_sell_listings(CMsgGCClientMarketDataEntry* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_price_in_local_currency(CMsgGCClientMarketDataEntry* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCClientMarketDataEntry::kItemDefIndexFieldNumber;
const int CMsgGCClientMarketDataEntry::kItemQualityFieldNumber;
const int CMsgGCClientMarketDataEntry::kItemSellListingsFieldNumber;
const int CMsgGCClientMarketDataEntry::kPriceInLocalCurrencyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCClientMarketDataEntry::CMsgGCClientMarketDataEntry()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCClientMarketDataEntry)
}
CMsgGCClientMarketDataEntry::CMsgGCClientMarketDataEntry(const CMsgGCClientMarketDataEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_def_index_, &from.item_def_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&price_in_local_currency_) -
    reinterpret_cast<char*>(&item_def_index_)) + sizeof(price_in_local_currency_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCClientMarketDataEntry)
}

void CMsgGCClientMarketDataEntry::SharedCtor() {
  ::memset(&item_def_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&price_in_local_currency_) -
      reinterpret_cast<char*>(&item_def_index_)) + sizeof(price_in_local_currency_));
}

CMsgGCClientMarketDataEntry::~CMsgGCClientMarketDataEntry() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCClientMarketDataEntry)
  SharedDtor();
}

void CMsgGCClientMarketDataEntry::SharedDtor() {
}

void CMsgGCClientMarketDataEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCClientMarketDataEntry& CMsgGCClientMarketDataEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCClientMarketDataEntry_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCClientMarketDataEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCClientMarketDataEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&item_def_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&price_in_local_currency_) -
        reinterpret_cast<char*>(&item_def_index_)) + sizeof(price_in_local_currency_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCClientMarketDataEntry::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCClientMarketDataEntry*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 item_def_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_item_def_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 item_quality = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_item_quality(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 item_sell_listings = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_item_sell_listings(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 price_in_local_currency = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_price_in_local_currency(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCClientMarketDataEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCClientMarketDataEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_def_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_item_def_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_quality = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_item_quality(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_sell_listings = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_item_sell_listings(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_sell_listings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 price_in_local_currency = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_price_in_local_currency(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &price_in_local_currency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCClientMarketDataEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCClientMarketDataEntry)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCClientMarketDataEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCClientMarketDataEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_def_index(), output);
  }

  // optional uint32 item_quality = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->item_quality(), output);
  }

  // optional uint32 item_sell_listings = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_sell_listings(), output);
  }

  // optional uint32 price_in_local_currency = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->price_in_local_currency(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCClientMarketDataEntry)
}

::google::protobuf::uint8* CMsgGCClientMarketDataEntry::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCClientMarketDataEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_def_index(), target);
  }

  // optional uint32 item_quality = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->item_quality(), target);
  }

  // optional uint32 item_sell_listings = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_sell_listings(), target);
  }

  // optional uint32 price_in_local_currency = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->price_in_local_currency(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCClientMarketDataEntry)
  return target;
}

size_t CMsgGCClientMarketDataEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCClientMarketDataEntry)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 item_def_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def_index());
    }

    // optional uint32 item_quality = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_quality());
    }

    // optional uint32 item_sell_listings = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_sell_listings());
    }

    // optional uint32 price_in_local_currency = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->price_in_local_currency());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCClientMarketDataEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCClientMarketDataEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCClientMarketDataEntry* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCClientMarketDataEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCClientMarketDataEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCClientMarketDataEntry)
    MergeFrom(*source);
  }
}

void CMsgGCClientMarketDataEntry::MergeFrom(const CMsgGCClientMarketDataEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCClientMarketDataEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      item_def_index_ = from.item_def_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_quality_ = from.item_quality_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_sell_listings_ = from.item_sell_listings_;
    }
    if (cached_has_bits & 0x00000008u) {
      price_in_local_currency_ = from.price_in_local_currency_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCClientMarketDataEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCClientMarketDataEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCClientMarketDataEntry::CopyFrom(const CMsgGCClientMarketDataEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCClientMarketDataEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClientMarketDataEntry::IsInitialized() const {
  return true;
}

void CMsgGCClientMarketDataEntry::Swap(CMsgGCClientMarketDataEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCClientMarketDataEntry::InternalSwap(CMsgGCClientMarketDataEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_def_index_, other->item_def_index_);
  swap(item_quality_, other->item_quality_);
  swap(item_sell_listings_, other->item_sell_listings_);
  swap(price_in_local_currency_, other->price_in_local_currency_);
}

::google::protobuf::Metadata CMsgGCClientMarketDataEntry::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCClientMarketData::InitAsDefaultInstance() {
}
class CMsgGCClientMarketData::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCClientMarketData::kEntriesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCClientMarketData::CMsgGCClientMarketData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCClientMarketData)
}
CMsgGCClientMarketData::CMsgGCClientMarketData(const CMsgGCClientMarketData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCClientMarketData)
}

void CMsgGCClientMarketData::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCClientMarketData_base_5fgcmessages_2eproto.base);
}

CMsgGCClientMarketData::~CMsgGCClientMarketData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCClientMarketData)
  SharedDtor();
}

void CMsgGCClientMarketData::SharedDtor() {
}

void CMsgGCClientMarketData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCClientMarketData& CMsgGCClientMarketData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCClientMarketData_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCClientMarketData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCClientMarketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCClientMarketData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCClientMarketData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgGCClientMarketDataEntry entries = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgGCClientMarketDataEntry::_InternalParse;
          object = msg->add_entries();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCClientMarketData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCClientMarketData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgGCClientMarketDataEntry entries = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCClientMarketData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCClientMarketData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCClientMarketData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCClientMarketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCClientMarketDataEntry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->entries(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCClientMarketData)
}

::google::protobuf::uint8* CMsgGCClientMarketData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCClientMarketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCClientMarketDataEntry entries = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->entries(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCClientMarketData)
  return target;
}

size_t CMsgGCClientMarketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCClientMarketData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCClientMarketDataEntry entries = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCClientMarketData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCClientMarketData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCClientMarketData* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCClientMarketData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCClientMarketData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCClientMarketData)
    MergeFrom(*source);
  }
}

void CMsgGCClientMarketData::MergeFrom(const CMsgGCClientMarketData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCClientMarketData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
}

void CMsgGCClientMarketData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCClientMarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCClientMarketData::CopyFrom(const CMsgGCClientMarketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCClientMarketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCClientMarketData::IsInitialized() const {
  return true;
}

void CMsgGCClientMarketData::Swap(CMsgGCClientMarketData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCClientMarketData::InternalSwap(CMsgGCClientMarketData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
}

::google::protobuf::Metadata CMsgGCClientMarketData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgExtractGems::InitAsDefaultInstance() {
}
class CMsgExtractGems::HasBitSetters {
 public:
  static void set_has_tool_item_id(CMsgExtractGems* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_item_item_id(CMsgExtractGems* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_item_socket_id(CMsgExtractGems* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgExtractGems::kToolItemIdFieldNumber;
const int CMsgExtractGems::kItemItemIdFieldNumber;
const int CMsgExtractGems::kItemSocketIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgExtractGems::CMsgExtractGems()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgExtractGems)
}
CMsgExtractGems::CMsgExtractGems(const CMsgExtractGems& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tool_item_id_, &from.tool_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_socket_id_) -
    reinterpret_cast<char*>(&tool_item_id_)) + sizeof(item_socket_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgExtractGems)
}

void CMsgExtractGems::SharedCtor() {
  ::memset(&tool_item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_item_id_) -
      reinterpret_cast<char*>(&tool_item_id_)) + sizeof(item_item_id_));
  item_socket_id_ = 65535u;
}

CMsgExtractGems::~CMsgExtractGems() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgExtractGems)
  SharedDtor();
}

void CMsgExtractGems::SharedDtor() {
}

void CMsgExtractGems::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgExtractGems& CMsgExtractGems::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgExtractGems_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgExtractGems::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgExtractGems)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&tool_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_item_id_) -
        reinterpret_cast<char*>(&tool_item_id_)) + sizeof(item_item_id_));
    item_socket_id_ = 65535u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgExtractGems::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgExtractGems*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 tool_item_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_tool_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 item_item_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_item_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 item_socket_id = 3 [default = 65535];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_item_socket_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgExtractGems::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgExtractGems)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 tool_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_tool_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tool_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 item_item_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_item_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 item_socket_id = 3 [default = 65535];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_item_socket_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_socket_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgExtractGems)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgExtractGems)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgExtractGems::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgExtractGems)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tool_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tool_item_id(), output);
  }

  // optional uint64 item_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_item_id(), output);
  }

  // optional uint32 item_socket_id = 3 [default = 65535];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->item_socket_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgExtractGems)
}

::google::protobuf::uint8* CMsgExtractGems::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgExtractGems)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tool_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tool_item_id(), target);
  }

  // optional uint64 item_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_item_id(), target);
  }

  // optional uint32 item_socket_id = 3 [default = 65535];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->item_socket_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgExtractGems)
  return target;
}

size_t CMsgExtractGems::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgExtractGems)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 tool_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tool_item_id());
    }

    // optional uint64 item_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_item_id());
    }

    // optional uint32 item_socket_id = 3 [default = 65535];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_socket_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgExtractGems::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgExtractGems)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgExtractGems* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgExtractGems>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgExtractGems)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgExtractGems)
    MergeFrom(*source);
  }
}

void CMsgExtractGems::MergeFrom(const CMsgExtractGems& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgExtractGems)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      tool_item_id_ = from.tool_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_item_id_ = from.item_item_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_socket_id_ = from.item_socket_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgExtractGems::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgExtractGems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgExtractGems::CopyFrom(const CMsgExtractGems& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgExtractGems)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgExtractGems::IsInitialized() const {
  return true;
}

void CMsgExtractGems::Swap(CMsgExtractGems* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgExtractGems::InternalSwap(CMsgExtractGems* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tool_item_id_, other->tool_item_id_);
  swap(item_item_id_, other->item_item_id_);
  swap(item_socket_id_, other->item_socket_id_);
}

::google::protobuf::Metadata CMsgExtractGems::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgExtractGemsResponse::InitAsDefaultInstance() {
}
class CMsgExtractGemsResponse::HasBitSetters {
 public:
  static void set_has_item_id(CMsgExtractGemsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_response(CMsgExtractGemsResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgExtractGemsResponse::kItemIdFieldNumber;
const int CMsgExtractGemsResponse::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgExtractGemsResponse::CMsgExtractGemsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgExtractGemsResponse)
}
CMsgExtractGemsResponse::CMsgExtractGemsResponse(const CMsgExtractGemsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(response_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgExtractGemsResponse)
}

void CMsgExtractGemsResponse::SharedCtor() {
  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(response_));
}

CMsgExtractGemsResponse::~CMsgExtractGemsResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgExtractGemsResponse)
  SharedDtor();
}

void CMsgExtractGemsResponse::SharedDtor() {
}

void CMsgExtractGemsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgExtractGemsResponse& CMsgExtractGemsResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgExtractGemsResponse_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgExtractGemsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgExtractGemsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&response_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(response_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgExtractGemsResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgExtractGemsResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgExtractGemsResponse.EExtractGems response = 2 [default = k_ExtractGems_Succeeded];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgExtractGemsResponse_EExtractGems_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_response(static_cast<::proto::dota::CMsgExtractGemsResponse_EExtractGems>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgExtractGemsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgExtractGemsResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgExtractGemsResponse.EExtractGems response = 2 [default = k_ExtractGems_Succeeded];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgExtractGemsResponse_EExtractGems_IsValid(value)) {
            set_response(static_cast< ::proto::dota::CMsgExtractGemsResponse_EExtractGems >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgExtractGemsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgExtractGemsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgExtractGemsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgExtractGemsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }

  // optional .proto.dota.CMsgExtractGemsResponse.EExtractGems response = 2 [default = k_ExtractGems_Succeeded];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgExtractGemsResponse)
}

::google::protobuf::uint8* CMsgExtractGemsResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgExtractGemsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }

  // optional .proto.dota.CMsgExtractGemsResponse.EExtractGems response = 2 [default = k_ExtractGems_Succeeded];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgExtractGemsResponse)
  return target;
}

size_t CMsgExtractGemsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgExtractGemsResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional .proto.dota.CMsgExtractGemsResponse.EExtractGems response = 2 [default = k_ExtractGems_Succeeded];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->response());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgExtractGemsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgExtractGemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgExtractGemsResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgExtractGemsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgExtractGemsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgExtractGemsResponse)
    MergeFrom(*source);
  }
}

void CMsgExtractGemsResponse::MergeFrom(const CMsgExtractGemsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgExtractGemsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      response_ = from.response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgExtractGemsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgExtractGemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgExtractGemsResponse::CopyFrom(const CMsgExtractGemsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgExtractGemsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgExtractGemsResponse::IsInitialized() const {
  return true;
}

void CMsgExtractGemsResponse::Swap(CMsgExtractGemsResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgExtractGemsResponse::InternalSwap(CMsgExtractGemsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_id_, other->item_id_);
  swap(response_, other->response_);
}

::google::protobuf::Metadata CMsgExtractGemsResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgAddSocket::InitAsDefaultInstance() {
}
class CMsgAddSocket::HasBitSetters {
 public:
  static void set_has_tool_item_id(CMsgAddSocket* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_item_item_id(CMsgAddSocket* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_unusual(CMsgAddSocket* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAddSocket::kToolItemIdFieldNumber;
const int CMsgAddSocket::kItemItemIdFieldNumber;
const int CMsgAddSocket::kUnusualFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAddSocket::CMsgAddSocket()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAddSocket)
}
CMsgAddSocket::CMsgAddSocket(const CMsgAddSocket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tool_item_id_, &from.tool_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&unusual_) -
    reinterpret_cast<char*>(&tool_item_id_)) + sizeof(unusual_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAddSocket)
}

void CMsgAddSocket::SharedCtor() {
  ::memset(&tool_item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unusual_) -
      reinterpret_cast<char*>(&tool_item_id_)) + sizeof(unusual_));
}

CMsgAddSocket::~CMsgAddSocket() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAddSocket)
  SharedDtor();
}

void CMsgAddSocket::SharedDtor() {
}

void CMsgAddSocket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAddSocket& CMsgAddSocket::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgAddSocket_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgAddSocket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAddSocket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&tool_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unusual_) -
        reinterpret_cast<char*>(&tool_item_id_)) + sizeof(unusual_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgAddSocket::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgAddSocket*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 tool_item_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_tool_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 item_item_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_item_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool unusual = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_unusual(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgAddSocket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAddSocket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 tool_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_tool_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tool_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 item_item_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_item_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool unusual = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_unusual(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unusual_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAddSocket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAddSocket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgAddSocket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAddSocket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tool_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tool_item_id(), output);
  }

  // optional uint64 item_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->item_item_id(), output);
  }

  // optional bool unusual = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->unusual(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAddSocket)
}

::google::protobuf::uint8* CMsgAddSocket::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAddSocket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 tool_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tool_item_id(), target);
  }

  // optional uint64 item_item_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->item_item_id(), target);
  }

  // optional bool unusual = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->unusual(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAddSocket)
  return target;
}

size_t CMsgAddSocket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAddSocket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint64 tool_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->tool_item_id());
    }

    // optional uint64 item_item_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_item_id());
    }

    // optional bool unusual = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAddSocket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAddSocket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAddSocket* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgAddSocket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAddSocket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAddSocket)
    MergeFrom(*source);
  }
}

void CMsgAddSocket::MergeFrom(const CMsgAddSocket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAddSocket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      tool_item_id_ = from.tool_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      item_item_id_ = from.item_item_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      unusual_ = from.unusual_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAddSocket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAddSocket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAddSocket::CopyFrom(const CMsgAddSocket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAddSocket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAddSocket::IsInitialized() const {
  return true;
}

void CMsgAddSocket::Swap(CMsgAddSocket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAddSocket::InternalSwap(CMsgAddSocket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(tool_item_id_, other->tool_item_id_);
  swap(item_item_id_, other->item_item_id_);
  swap(unusual_, other->unusual_);
}

::google::protobuf::Metadata CMsgAddSocket::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgAddSocketResponse::InitAsDefaultInstance() {
}
class CMsgAddSocketResponse::HasBitSetters {
 public:
  static void set_has_item_id(CMsgAddSocketResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_response(CMsgAddSocketResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAddSocketResponse::kItemIdFieldNumber;
const int CMsgAddSocketResponse::kUpdatedSocketIndexFieldNumber;
const int CMsgAddSocketResponse::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAddSocketResponse::CMsgAddSocketResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAddSocketResponse)
}
CMsgAddSocketResponse::CMsgAddSocketResponse(const CMsgAddSocketResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      updated_socket_index_(from.updated_socket_index_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_id_, &from.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&item_id_)) + sizeof(response_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAddSocketResponse)
}

void CMsgAddSocketResponse::SharedCtor() {
  ::memset(&item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_) -
      reinterpret_cast<char*>(&item_id_)) + sizeof(response_));
}

CMsgAddSocketResponse::~CMsgAddSocketResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAddSocketResponse)
  SharedDtor();
}

void CMsgAddSocketResponse::SharedDtor() {
}

void CMsgAddSocketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAddSocketResponse& CMsgAddSocketResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgAddSocketResponse_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgAddSocketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAddSocketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updated_socket_index_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&response_) -
        reinterpret_cast<char*>(&item_id_)) + sizeof(response_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgAddSocketResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgAddSocketResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 item_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 updated_socket_index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_updated_socket_index(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_updated_socket_index();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional .proto.dota.CMsgAddSocketResponse.EAddSocket response = 3 [default = k_AddSocket_Succeeded];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgAddSocketResponse_EAddSocket_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_response(static_cast<::proto::dota::CMsgAddSocketResponse_EAddSocket>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgAddSocketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAddSocketResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 updated_socket_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_updated_socket_index())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_updated_socket_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgAddSocketResponse.EAddSocket response = 3 [default = k_AddSocket_Succeeded];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgAddSocketResponse_EAddSocket_IsValid(value)) {
            set_response(static_cast< ::proto::dota::CMsgAddSocketResponse_EAddSocket >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAddSocketResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAddSocketResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgAddSocketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAddSocketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_id(), output);
  }

  // repeated uint32 updated_socket_index = 2;
  for (int i = 0, n = this->updated_socket_index_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->updated_socket_index(i), output);
  }

  // optional .proto.dota.CMsgAddSocketResponse.EAddSocket response = 3 [default = k_AddSocket_Succeeded];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAddSocketResponse)
}

::google::protobuf::uint8* CMsgAddSocketResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAddSocketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_id(), target);
  }

  // repeated uint32 updated_socket_index = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->updated_socket_index_, target);

  // optional .proto.dota.CMsgAddSocketResponse.EAddSocket response = 3 [default = k_AddSocket_Succeeded];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAddSocketResponse)
  return target;
}

size_t CMsgAddSocketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAddSocketResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 updated_socket_index = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->updated_socket_index_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->updated_socket_index_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_id());
    }

    // optional .proto.dota.CMsgAddSocketResponse.EAddSocket response = 3 [default = k_AddSocket_Succeeded];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->response());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAddSocketResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAddSocketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAddSocketResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgAddSocketResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAddSocketResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAddSocketResponse)
    MergeFrom(*source);
  }
}

void CMsgAddSocketResponse::MergeFrom(const CMsgAddSocketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAddSocketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updated_socket_index_.MergeFrom(from.updated_socket_index_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_id_ = from.item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      response_ = from.response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAddSocketResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAddSocketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAddSocketResponse::CopyFrom(const CMsgAddSocketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAddSocketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAddSocketResponse::IsInitialized() const {
  return true;
}

void CMsgAddSocketResponse::Swap(CMsgAddSocketResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAddSocketResponse::InternalSwap(CMsgAddSocketResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  updated_socket_index_.InternalSwap(&other->updated_socket_index_);
  swap(item_id_, other->item_id_);
  swap(response_, other->response_);
}

::google::protobuf::Metadata CMsgAddSocketResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgAddItemToSocketData::InitAsDefaultInstance() {
}
class CMsgAddItemToSocketData::HasBitSetters {
 public:
  static void set_has_gem_item_id(CMsgAddItemToSocketData* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_socket_index(CMsgAddItemToSocketData* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAddItemToSocketData::kGemItemIdFieldNumber;
const int CMsgAddItemToSocketData::kSocketIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAddItemToSocketData::CMsgAddItemToSocketData()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAddItemToSocketData)
}
CMsgAddItemToSocketData::CMsgAddItemToSocketData(const CMsgAddItemToSocketData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&gem_item_id_, &from.gem_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&socket_index_) -
    reinterpret_cast<char*>(&gem_item_id_)) + sizeof(socket_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAddItemToSocketData)
}

void CMsgAddItemToSocketData::SharedCtor() {
  ::memset(&gem_item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&socket_index_) -
      reinterpret_cast<char*>(&gem_item_id_)) + sizeof(socket_index_));
}

CMsgAddItemToSocketData::~CMsgAddItemToSocketData() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAddItemToSocketData)
  SharedDtor();
}

void CMsgAddItemToSocketData::SharedDtor() {
}

void CMsgAddItemToSocketData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAddItemToSocketData& CMsgAddItemToSocketData::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgAddItemToSocketData_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgAddItemToSocketData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAddItemToSocketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&gem_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&socket_index_) -
        reinterpret_cast<char*>(&gem_item_id_)) + sizeof(socket_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgAddItemToSocketData::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgAddItemToSocketData*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 gem_item_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_gem_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 socket_index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_socket_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgAddItemToSocketData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAddItemToSocketData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 gem_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_gem_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &gem_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 socket_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_socket_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socket_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAddItemToSocketData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAddItemToSocketData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgAddItemToSocketData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAddItemToSocketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 gem_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->gem_item_id(), output);
  }

  // optional uint32 socket_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->socket_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAddItemToSocketData)
}

::google::protobuf::uint8* CMsgAddItemToSocketData::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAddItemToSocketData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 gem_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->gem_item_id(), target);
  }

  // optional uint32 socket_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->socket_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAddItemToSocketData)
  return target;
}

size_t CMsgAddItemToSocketData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAddItemToSocketData)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 gem_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->gem_item_id());
    }

    // optional uint32 socket_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->socket_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAddItemToSocketData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAddItemToSocketData)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAddItemToSocketData* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgAddItemToSocketData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAddItemToSocketData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAddItemToSocketData)
    MergeFrom(*source);
  }
}

void CMsgAddItemToSocketData::MergeFrom(const CMsgAddItemToSocketData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAddItemToSocketData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      gem_item_id_ = from.gem_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      socket_index_ = from.socket_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAddItemToSocketData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAddItemToSocketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAddItemToSocketData::CopyFrom(const CMsgAddItemToSocketData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAddItemToSocketData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAddItemToSocketData::IsInitialized() const {
  return true;
}

void CMsgAddItemToSocketData::Swap(CMsgAddItemToSocketData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAddItemToSocketData::InternalSwap(CMsgAddItemToSocketData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(gem_item_id_, other->gem_item_id_);
  swap(socket_index_, other->socket_index_);
}

::google::protobuf::Metadata CMsgAddItemToSocketData::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgAddItemToSocket::InitAsDefaultInstance() {
}
class CMsgAddItemToSocket::HasBitSetters {
 public:
  static void set_has_item_item_id(CMsgAddItemToSocket* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAddItemToSocket::kItemItemIdFieldNumber;
const int CMsgAddItemToSocket::kGemsToSocketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAddItemToSocket::CMsgAddItemToSocket()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAddItemToSocket)
}
CMsgAddItemToSocket::CMsgAddItemToSocket(const CMsgAddItemToSocket& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      gems_to_socket_(from.gems_to_socket_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_item_id_ = from.item_item_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAddItemToSocket)
}

void CMsgAddItemToSocket::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgAddItemToSocket_base_5fgcmessages_2eproto.base);
  item_item_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgAddItemToSocket::~CMsgAddItemToSocket() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAddItemToSocket)
  SharedDtor();
}

void CMsgAddItemToSocket::SharedDtor() {
}

void CMsgAddItemToSocket::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAddItemToSocket& CMsgAddItemToSocket::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgAddItemToSocket_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgAddItemToSocket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAddItemToSocket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gems_to_socket_.Clear();
  item_item_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgAddItemToSocket::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgAddItemToSocket*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 item_item_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_item_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgAddItemToSocketData gems_to_socket = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgAddItemToSocketData::_InternalParse;
          object = msg->add_gems_to_socket();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgAddItemToSocket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAddItemToSocket)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_item_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgAddItemToSocketData gems_to_socket = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_gems_to_socket()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAddItemToSocket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAddItemToSocket)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgAddItemToSocket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAddItemToSocket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_item_id(), output);
  }

  // repeated .proto.dota.CMsgAddItemToSocketData gems_to_socket = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gems_to_socket_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->gems_to_socket(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAddItemToSocket)
}

::google::protobuf::uint8* CMsgAddItemToSocket::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAddItemToSocket)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_item_id(), target);
  }

  // repeated .proto.dota.CMsgAddItemToSocketData gems_to_socket = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gems_to_socket_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->gems_to_socket(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAddItemToSocket)
  return target;
}

size_t CMsgAddItemToSocket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAddItemToSocket)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgAddItemToSocketData gems_to_socket = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->gems_to_socket_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->gems_to_socket(static_cast<int>(i)));
    }
  }

  // optional uint64 item_item_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->item_item_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAddItemToSocket::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAddItemToSocket)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAddItemToSocket* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgAddItemToSocket>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAddItemToSocket)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAddItemToSocket)
    MergeFrom(*source);
  }
}

void CMsgAddItemToSocket::MergeFrom(const CMsgAddItemToSocket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAddItemToSocket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gems_to_socket_.MergeFrom(from.gems_to_socket_);
  if (from.has_item_item_id()) {
    set_item_item_id(from.item_item_id());
  }
}

void CMsgAddItemToSocket::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAddItemToSocket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAddItemToSocket::CopyFrom(const CMsgAddItemToSocket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAddItemToSocket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAddItemToSocket::IsInitialized() const {
  return true;
}

void CMsgAddItemToSocket::Swap(CMsgAddItemToSocket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAddItemToSocket::InternalSwap(CMsgAddItemToSocket* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&gems_to_socket_)->InternalSwap(CastToBase(&other->gems_to_socket_));
  swap(item_item_id_, other->item_item_id_);
}

::google::protobuf::Metadata CMsgAddItemToSocket::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgAddItemToSocketResponse::InitAsDefaultInstance() {
}
class CMsgAddItemToSocketResponse::HasBitSetters {
 public:
  static void set_has_item_item_id(CMsgAddItemToSocketResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_response(CMsgAddItemToSocketResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgAddItemToSocketResponse::kItemItemIdFieldNumber;
const int CMsgAddItemToSocketResponse::kUpdatedSocketIndexFieldNumber;
const int CMsgAddItemToSocketResponse::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgAddItemToSocketResponse::CMsgAddItemToSocketResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgAddItemToSocketResponse)
}
CMsgAddItemToSocketResponse::CMsgAddItemToSocketResponse(const CMsgAddItemToSocketResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      updated_socket_index_(from.updated_socket_index_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_item_id_, &from.item_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_) -
    reinterpret_cast<char*>(&item_item_id_)) + sizeof(response_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgAddItemToSocketResponse)
}

void CMsgAddItemToSocketResponse::SharedCtor() {
  ::memset(&item_item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_) -
      reinterpret_cast<char*>(&item_item_id_)) + sizeof(response_));
}

CMsgAddItemToSocketResponse::~CMsgAddItemToSocketResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgAddItemToSocketResponse)
  SharedDtor();
}

void CMsgAddItemToSocketResponse::SharedDtor() {
}

void CMsgAddItemToSocketResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgAddItemToSocketResponse& CMsgAddItemToSocketResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgAddItemToSocketResponse_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgAddItemToSocketResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgAddItemToSocketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updated_socket_index_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&response_) -
        reinterpret_cast<char*>(&item_item_id_)) + sizeof(response_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgAddItemToSocketResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgAddItemToSocketResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 item_item_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_item_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 updated_socket_index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_updated_socket_index(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_updated_socket_index();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional .proto.dota.CMsgAddItemToSocketResponse.EAddGem response = 3 [default = k_AddGem_Succeeded];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgAddItemToSocketResponse_EAddGem_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_response(static_cast<::proto::dota::CMsgAddItemToSocketResponse_EAddGem>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgAddItemToSocketResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgAddItemToSocketResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_item_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 updated_socket_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_updated_socket_index())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_updated_socket_index())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgAddItemToSocketResponse.EAddGem response = 3 [default = k_AddGem_Succeeded];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgAddItemToSocketResponse_EAddGem_IsValid(value)) {
            set_response(static_cast< ::proto::dota::CMsgAddItemToSocketResponse_EAddGem >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgAddItemToSocketResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgAddItemToSocketResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgAddItemToSocketResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgAddItemToSocketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_item_id(), output);
  }

  // repeated uint32 updated_socket_index = 2;
  for (int i = 0, n = this->updated_socket_index_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->updated_socket_index(i), output);
  }

  // optional .proto.dota.CMsgAddItemToSocketResponse.EAddGem response = 3 [default = k_AddGem_Succeeded];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgAddItemToSocketResponse)
}

::google::protobuf::uint8* CMsgAddItemToSocketResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgAddItemToSocketResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_item_id(), target);
  }

  // repeated uint32 updated_socket_index = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->updated_socket_index_, target);

  // optional .proto.dota.CMsgAddItemToSocketResponse.EAddGem response = 3 [default = k_AddGem_Succeeded];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgAddItemToSocketResponse)
  return target;
}

size_t CMsgAddItemToSocketResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgAddItemToSocketResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 updated_socket_index = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->updated_socket_index_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->updated_socket_index_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_item_id());
    }

    // optional .proto.dota.CMsgAddItemToSocketResponse.EAddGem response = 3 [default = k_AddGem_Succeeded];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->response());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgAddItemToSocketResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgAddItemToSocketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgAddItemToSocketResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgAddItemToSocketResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgAddItemToSocketResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgAddItemToSocketResponse)
    MergeFrom(*source);
  }
}

void CMsgAddItemToSocketResponse::MergeFrom(const CMsgAddItemToSocketResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgAddItemToSocketResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updated_socket_index_.MergeFrom(from.updated_socket_index_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_item_id_ = from.item_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      response_ = from.response_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgAddItemToSocketResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgAddItemToSocketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgAddItemToSocketResponse::CopyFrom(const CMsgAddItemToSocketResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgAddItemToSocketResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgAddItemToSocketResponse::IsInitialized() const {
  return true;
}

void CMsgAddItemToSocketResponse::Swap(CMsgAddItemToSocketResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgAddItemToSocketResponse::InternalSwap(CMsgAddItemToSocketResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  updated_socket_index_.InternalSwap(&other->updated_socket_index_);
  swap(item_item_id_, other->item_item_id_);
  swap(response_, other->response_);
}

::google::protobuf::Metadata CMsgAddItemToSocketResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgResetStrangeGemCount::InitAsDefaultInstance() {
}
class CMsgResetStrangeGemCount::HasBitSetters {
 public:
  static void set_has_item_item_id(CMsgResetStrangeGemCount* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_socket_index(CMsgResetStrangeGemCount* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgResetStrangeGemCount::kItemItemIdFieldNumber;
const int CMsgResetStrangeGemCount::kSocketIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgResetStrangeGemCount::CMsgResetStrangeGemCount()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgResetStrangeGemCount)
}
CMsgResetStrangeGemCount::CMsgResetStrangeGemCount(const CMsgResetStrangeGemCount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_item_id_, &from.item_item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&socket_index_) -
    reinterpret_cast<char*>(&item_item_id_)) + sizeof(socket_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgResetStrangeGemCount)
}

void CMsgResetStrangeGemCount::SharedCtor() {
  ::memset(&item_item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&socket_index_) -
      reinterpret_cast<char*>(&item_item_id_)) + sizeof(socket_index_));
}

CMsgResetStrangeGemCount::~CMsgResetStrangeGemCount() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgResetStrangeGemCount)
  SharedDtor();
}

void CMsgResetStrangeGemCount::SharedDtor() {
}

void CMsgResetStrangeGemCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgResetStrangeGemCount& CMsgResetStrangeGemCount::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgResetStrangeGemCount_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgResetStrangeGemCount::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgResetStrangeGemCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&item_item_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&socket_index_) -
        reinterpret_cast<char*>(&item_item_id_)) + sizeof(socket_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgResetStrangeGemCount::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgResetStrangeGemCount*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 item_item_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_item_item_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 socket_index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_socket_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgResetStrangeGemCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgResetStrangeGemCount)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 item_item_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_item_item_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &item_item_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 socket_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_socket_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &socket_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgResetStrangeGemCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgResetStrangeGemCount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgResetStrangeGemCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgResetStrangeGemCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->item_item_id(), output);
  }

  // optional uint32 socket_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->socket_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgResetStrangeGemCount)
}

::google::protobuf::uint8* CMsgResetStrangeGemCount::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgResetStrangeGemCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 item_item_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->item_item_id(), target);
  }

  // optional uint32 socket_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->socket_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgResetStrangeGemCount)
  return target;
}

size_t CMsgResetStrangeGemCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgResetStrangeGemCount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 item_item_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->item_item_id());
    }

    // optional uint32 socket_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->socket_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgResetStrangeGemCount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgResetStrangeGemCount)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgResetStrangeGemCount* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgResetStrangeGemCount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgResetStrangeGemCount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgResetStrangeGemCount)
    MergeFrom(*source);
  }
}

void CMsgResetStrangeGemCount::MergeFrom(const CMsgResetStrangeGemCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgResetStrangeGemCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      item_item_id_ = from.item_item_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      socket_index_ = from.socket_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgResetStrangeGemCount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgResetStrangeGemCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgResetStrangeGemCount::CopyFrom(const CMsgResetStrangeGemCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgResetStrangeGemCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgResetStrangeGemCount::IsInitialized() const {
  return true;
}

void CMsgResetStrangeGemCount::Swap(CMsgResetStrangeGemCount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgResetStrangeGemCount::InternalSwap(CMsgResetStrangeGemCount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_item_id_, other->item_item_id_);
  swap(socket_index_, other->socket_index_);
}

::google::protobuf::Metadata CMsgResetStrangeGemCount::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgResetStrangeGemCountResponse::InitAsDefaultInstance() {
}
class CMsgResetStrangeGemCountResponse::HasBitSetters {
 public:
  static void set_has_response(CMsgResetStrangeGemCountResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgResetStrangeGemCountResponse::kResponseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgResetStrangeGemCountResponse::CMsgResetStrangeGemCountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgResetStrangeGemCountResponse)
}
CMsgResetStrangeGemCountResponse::CMsgResetStrangeGemCountResponse(const CMsgResetStrangeGemCountResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_ = from.response_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgResetStrangeGemCountResponse)
}

void CMsgResetStrangeGemCountResponse::SharedCtor() {
  response_ = 0;
}

CMsgResetStrangeGemCountResponse::~CMsgResetStrangeGemCountResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgResetStrangeGemCountResponse)
  SharedDtor();
}

void CMsgResetStrangeGemCountResponse::SharedDtor() {
}

void CMsgResetStrangeGemCountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgResetStrangeGemCountResponse& CMsgResetStrangeGemCountResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgResetStrangeGemCountResponse_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgResetStrangeGemCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgResetStrangeGemCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgResetStrangeGemCountResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgResetStrangeGemCountResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgResetStrangeGemCountResponse.EResetGem response = 1 [default = k_ResetGem_Succeeded];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgResetStrangeGemCountResponse_EResetGem_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_response(static_cast<::proto::dota::CMsgResetStrangeGemCountResponse_EResetGem>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgResetStrangeGemCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgResetStrangeGemCountResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgResetStrangeGemCountResponse.EResetGem response = 1 [default = k_ResetGem_Succeeded];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgResetStrangeGemCountResponse_EResetGem_IsValid(value)) {
            set_response(static_cast< ::proto::dota::CMsgResetStrangeGemCountResponse_EResetGem >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgResetStrangeGemCountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgResetStrangeGemCountResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgResetStrangeGemCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgResetStrangeGemCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgResetStrangeGemCountResponse.EResetGem response = 1 [default = k_ResetGem_Succeeded];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->response(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgResetStrangeGemCountResponse)
}

::google::protobuf::uint8* CMsgResetStrangeGemCountResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgResetStrangeGemCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgResetStrangeGemCountResponse.EResetGem response = 1 [default = k_ResetGem_Succeeded];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->response(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgResetStrangeGemCountResponse)
  return target;
}

size_t CMsgResetStrangeGemCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgResetStrangeGemCountResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgResetStrangeGemCountResponse.EResetGem response = 1 [default = k_ResetGem_Succeeded];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->response());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgResetStrangeGemCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgResetStrangeGemCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgResetStrangeGemCountResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgResetStrangeGemCountResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgResetStrangeGemCountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgResetStrangeGemCountResponse)
    MergeFrom(*source);
  }
}

void CMsgResetStrangeGemCountResponse::MergeFrom(const CMsgResetStrangeGemCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgResetStrangeGemCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_response()) {
    set_response(from.response());
  }
}

void CMsgResetStrangeGemCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgResetStrangeGemCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgResetStrangeGemCountResponse::CopyFrom(const CMsgResetStrangeGemCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgResetStrangeGemCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgResetStrangeGemCountResponse::IsInitialized() const {
  return true;
}

void CMsgResetStrangeGemCountResponse::Swap(CMsgResetStrangeGemCountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgResetStrangeGemCountResponse::InternalSwap(CMsgResetStrangeGemCountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(response_, other->response_);
}

::google::protobuf::Metadata CMsgResetStrangeGemCountResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToClientPollFileRequest::InitAsDefaultInstance() {
}
class CMsgGCToClientPollFileRequest::HasBitSetters {
 public:
  static void set_has_file_name(CMsgGCToClientPollFileRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_client_version(CMsgGCToClientPollFileRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_poll_id(CMsgGCToClientPollFileRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientPollFileRequest::kFileNameFieldNumber;
const int CMsgGCToClientPollFileRequest::kClientVersionFieldNumber;
const int CMsgGCToClientPollFileRequest::kPollIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientPollFileRequest::CMsgGCToClientPollFileRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientPollFileRequest)
}
CMsgGCToClientPollFileRequest::CMsgGCToClientPollFileRequest(const CMsgGCToClientPollFileRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file_name()) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&client_version_, &from.client_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&poll_id_) -
    reinterpret_cast<char*>(&client_version_)) + sizeof(poll_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientPollFileRequest)
}

void CMsgGCToClientPollFileRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCToClientPollFileRequest_base_5fgcmessages_2eproto.base);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&client_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&poll_id_) -
      reinterpret_cast<char*>(&client_version_)) + sizeof(poll_id_));
}

CMsgGCToClientPollFileRequest::~CMsgGCToClientPollFileRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientPollFileRequest)
  SharedDtor();
}

void CMsgGCToClientPollFileRequest::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToClientPollFileRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToClientPollFileRequest& CMsgGCToClientPollFileRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToClientPollFileRequest_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToClientPollFileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientPollFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    file_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&client_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&poll_id_) -
        reinterpret_cast<char*>(&client_version_)) + sizeof(poll_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToClientPollFileRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToClientPollFileRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string file_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCToClientPollFileRequest.file_name");
        object = msg->mutable_file_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 client_version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_client_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 poll_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_poll_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToClientPollFileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientPollFileRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string file_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCToClientPollFileRequest.file_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_client_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 poll_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_poll_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poll_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientPollFileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientPollFileRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToClientPollFileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientPollFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPollFileRequest.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->file_name(), output);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_version(), output);
  }

  // optional uint32 poll_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->poll_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientPollFileRequest)
}

::google::protobuf::uint8* CMsgGCToClientPollFileRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientPollFileRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string file_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPollFileRequest.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->file_name(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_version(), target);
  }

  // optional uint32 poll_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->poll_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientPollFileRequest)
  return target;
}

size_t CMsgGCToClientPollFileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientPollFileRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string file_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file_name());
    }

    // optional uint32 client_version = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

    // optional uint32 poll_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->poll_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientPollFileRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientPollFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientPollFileRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToClientPollFileRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientPollFileRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientPollFileRequest)
    MergeFrom(*source);
  }
}

void CMsgGCToClientPollFileRequest::MergeFrom(const CMsgGCToClientPollFileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientPollFileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      client_version_ = from.client_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      poll_id_ = from.poll_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientPollFileRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientPollFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientPollFileRequest::CopyFrom(const CMsgGCToClientPollFileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientPollFileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPollFileRequest::IsInitialized() const {
  return true;
}

void CMsgGCToClientPollFileRequest::Swap(CMsgGCToClientPollFileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientPollFileRequest::InternalSwap(CMsgGCToClientPollFileRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  file_name_.Swap(&other->file_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(client_version_, other->client_version_);
  swap(poll_id_, other->poll_id_);
}

::google::protobuf::Metadata CMsgGCToClientPollFileRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToClientPollFileResponse::InitAsDefaultInstance() {
}
class CMsgGCToClientPollFileResponse::HasBitSetters {
 public:
  static void set_has_poll_id(CMsgGCToClientPollFileResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_file_size(CMsgGCToClientPollFileResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientPollFileResponse::kPollIdFieldNumber;
const int CMsgGCToClientPollFileResponse::kFileSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientPollFileResponse::CMsgGCToClientPollFileResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientPollFileResponse)
}
CMsgGCToClientPollFileResponse::CMsgGCToClientPollFileResponse(const CMsgGCToClientPollFileResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&poll_id_, &from.poll_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&file_size_) -
    reinterpret_cast<char*>(&poll_id_)) + sizeof(file_size_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientPollFileResponse)
}

void CMsgGCToClientPollFileResponse::SharedCtor() {
  ::memset(&poll_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&file_size_) -
      reinterpret_cast<char*>(&poll_id_)) + sizeof(file_size_));
}

CMsgGCToClientPollFileResponse::~CMsgGCToClientPollFileResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientPollFileResponse)
  SharedDtor();
}

void CMsgGCToClientPollFileResponse::SharedDtor() {
}

void CMsgGCToClientPollFileResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToClientPollFileResponse& CMsgGCToClientPollFileResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToClientPollFileResponse_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToClientPollFileResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientPollFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&poll_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&file_size_) -
        reinterpret_cast<char*>(&poll_id_)) + sizeof(file_size_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToClientPollFileResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToClientPollFileResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 poll_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_poll_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 file_size = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_file_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToClientPollFileResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientPollFileResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 poll_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_poll_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &poll_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 file_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_file_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientPollFileResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientPollFileResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToClientPollFileResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientPollFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 poll_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->poll_id(), output);
  }

  // optional uint32 file_size = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->file_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientPollFileResponse)
}

::google::protobuf::uint8* CMsgGCToClientPollFileResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientPollFileResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 poll_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->poll_id(), target);
  }

  // optional uint32 file_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->file_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientPollFileResponse)
  return target;
}

size_t CMsgGCToClientPollFileResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientPollFileResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 poll_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->poll_id());
    }

    // optional uint32 file_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->file_size());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientPollFileResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientPollFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientPollFileResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToClientPollFileResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientPollFileResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientPollFileResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToClientPollFileResponse::MergeFrom(const CMsgGCToClientPollFileResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientPollFileResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      poll_id_ = from.poll_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      file_size_ = from.file_size_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientPollFileResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientPollFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientPollFileResponse::CopyFrom(const CMsgGCToClientPollFileResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientPollFileResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPollFileResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientPollFileResponse::Swap(CMsgGCToClientPollFileResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientPollFileResponse::InternalSwap(CMsgGCToClientPollFileResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(poll_id_, other->poll_id_);
  swap(file_size_, other->file_size_);
}

::google::protobuf::Metadata CMsgGCToClientPollFileResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCPerformManualOp::InitAsDefaultInstance() {
}
class CMsgGCToGCPerformManualOp::HasBitSetters {
 public:
  static void set_has_op_id(CMsgGCToGCPerformManualOp* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_group_code(CMsgGCToGCPerformManualOp* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCPerformManualOp::kOpIdFieldNumber;
const int CMsgGCToGCPerformManualOp::kGroupCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCPerformManualOp::CMsgGCToGCPerformManualOp()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCPerformManualOp)
}
CMsgGCToGCPerformManualOp::CMsgGCToGCPerformManualOp(const CMsgGCToGCPerformManualOp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&op_id_, &from.op_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&group_code_) -
    reinterpret_cast<char*>(&op_id_)) + sizeof(group_code_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCPerformManualOp)
}

void CMsgGCToGCPerformManualOp::SharedCtor() {
  ::memset(&op_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&group_code_) -
      reinterpret_cast<char*>(&op_id_)) + sizeof(group_code_));
}

CMsgGCToGCPerformManualOp::~CMsgGCToGCPerformManualOp() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCPerformManualOp)
  SharedDtor();
}

void CMsgGCToGCPerformManualOp::SharedDtor() {
}

void CMsgGCToGCPerformManualOp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCPerformManualOp& CMsgGCToGCPerformManualOp::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCPerformManualOp_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCPerformManualOp::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCPerformManualOp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&op_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&group_code_) -
        reinterpret_cast<char*>(&op_id_)) + sizeof(group_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCPerformManualOp::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCPerformManualOp*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 op_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_op_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 group_code = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_group_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCPerformManualOp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCPerformManualOp)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 op_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_op_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &op_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 group_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_group_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &group_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCPerformManualOp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCPerformManualOp)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCPerformManualOp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCPerformManualOp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 op_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->op_id(), output);
  }

  // optional uint32 group_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->group_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCPerformManualOp)
}

::google::protobuf::uint8* CMsgGCToGCPerformManualOp::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCPerformManualOp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 op_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->op_id(), target);
  }

  // optional uint32 group_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->group_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCPerformManualOp)
  return target;
}

size_t CMsgGCToGCPerformManualOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCPerformManualOp)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 op_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->op_id());
    }

    // optional uint32 group_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->group_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCPerformManualOp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCPerformManualOp)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCPerformManualOp* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCPerformManualOp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCPerformManualOp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCPerformManualOp)
    MergeFrom(*source);
  }
}

void CMsgGCToGCPerformManualOp::MergeFrom(const CMsgGCToGCPerformManualOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCPerformManualOp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      op_id_ = from.op_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      group_code_ = from.group_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCPerformManualOp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCPerformManualOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCPerformManualOp::CopyFrom(const CMsgGCToGCPerformManualOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCPerformManualOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCPerformManualOp::IsInitialized() const {
  return true;
}

void CMsgGCToGCPerformManualOp::Swap(CMsgGCToGCPerformManualOp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCPerformManualOp::InternalSwap(CMsgGCToGCPerformManualOp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(op_id_, other->op_id_);
  swap(group_code_, other->group_code_);
}

::google::protobuf::Metadata CMsgGCToGCPerformManualOp::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCPerformManualOpCompleted::InitAsDefaultInstance() {
}
class CMsgGCToGCPerformManualOpCompleted::HasBitSetters {
 public:
  static void set_has_success(CMsgGCToGCPerformManualOpCompleted* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_source_gc(CMsgGCToGCPerformManualOpCompleted* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToGCPerformManualOpCompleted::kSuccessFieldNumber;
const int CMsgGCToGCPerformManualOpCompleted::kSourceGcFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCPerformManualOpCompleted::CMsgGCToGCPerformManualOpCompleted()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCPerformManualOpCompleted)
}
CMsgGCToGCPerformManualOpCompleted::CMsgGCToGCPerformManualOpCompleted(const CMsgGCToGCPerformManualOpCompleted& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&success_, &from.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_gc_) -
    reinterpret_cast<char*>(&success_)) + sizeof(source_gc_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCPerformManualOpCompleted)
}

void CMsgGCToGCPerformManualOpCompleted::SharedCtor() {
  ::memset(&success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_gc_) -
      reinterpret_cast<char*>(&success_)) + sizeof(source_gc_));
}

CMsgGCToGCPerformManualOpCompleted::~CMsgGCToGCPerformManualOpCompleted() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCPerformManualOpCompleted)
  SharedDtor();
}

void CMsgGCToGCPerformManualOpCompleted::SharedDtor() {
}

void CMsgGCToGCPerformManualOpCompleted::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCPerformManualOpCompleted& CMsgGCToGCPerformManualOpCompleted::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCPerformManualOpCompleted_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCPerformManualOpCompleted::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCPerformManualOpCompleted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&success_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&source_gc_) -
        reinterpret_cast<char*>(&success_)) + sizeof(source_gc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCPerformManualOpCompleted::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCPerformManualOpCompleted*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool success = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_success(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 source_gc = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_source_gc(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCPerformManualOpCompleted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCPerformManualOpCompleted)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_success(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 source_gc = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_source_gc(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_gc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCPerformManualOpCompleted)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCPerformManualOpCompleted)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCPerformManualOpCompleted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCPerformManualOpCompleted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->success(), output);
  }

  // optional uint32 source_gc = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->source_gc(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCPerformManualOpCompleted)
}

::google::protobuf::uint8* CMsgGCToGCPerformManualOpCompleted::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCPerformManualOpCompleted)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool success = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->success(), target);
  }

  // optional uint32 source_gc = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->source_gc(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCPerformManualOpCompleted)
  return target;
}

size_t CMsgGCToGCPerformManualOpCompleted::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCPerformManualOpCompleted)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool success = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional uint32 source_gc = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_gc());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCPerformManualOpCompleted::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCPerformManualOpCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCPerformManualOpCompleted* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCPerformManualOpCompleted>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCPerformManualOpCompleted)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCPerformManualOpCompleted)
    MergeFrom(*source);
  }
}

void CMsgGCToGCPerformManualOpCompleted::MergeFrom(const CMsgGCToGCPerformManualOpCompleted& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCPerformManualOpCompleted)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      success_ = from.success_;
    }
    if (cached_has_bits & 0x00000002u) {
      source_gc_ = from.source_gc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToGCPerformManualOpCompleted::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCPerformManualOpCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCPerformManualOpCompleted::CopyFrom(const CMsgGCToGCPerformManualOpCompleted& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCPerformManualOpCompleted)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCPerformManualOpCompleted::IsInitialized() const {
  return true;
}

void CMsgGCToGCPerformManualOpCompleted::Swap(CMsgGCToGCPerformManualOpCompleted* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCPerformManualOpCompleted::InternalSwap(CMsgGCToGCPerformManualOpCompleted* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(success_, other->success_);
  swap(source_gc_, other->source_gc_);
}

::google::protobuf::Metadata CMsgGCToGCPerformManualOpCompleted::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToGCReloadServerRegionSettings::InitAsDefaultInstance() {
}
class CMsgGCToGCReloadServerRegionSettings::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToGCReloadServerRegionSettings::CMsgGCToGCReloadServerRegionSettings()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToGCReloadServerRegionSettings)
}
CMsgGCToGCReloadServerRegionSettings::CMsgGCToGCReloadServerRegionSettings(const CMsgGCToGCReloadServerRegionSettings& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToGCReloadServerRegionSettings)
}

void CMsgGCToGCReloadServerRegionSettings::SharedCtor() {
}

CMsgGCToGCReloadServerRegionSettings::~CMsgGCToGCReloadServerRegionSettings() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToGCReloadServerRegionSettings)
  SharedDtor();
}

void CMsgGCToGCReloadServerRegionSettings::SharedDtor() {
}

void CMsgGCToGCReloadServerRegionSettings::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToGCReloadServerRegionSettings& CMsgGCToGCReloadServerRegionSettings::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToGCReloadServerRegionSettings_base_5fgcmessages_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToGCReloadServerRegionSettings::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToGCReloadServerRegionSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToGCReloadServerRegionSettings::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToGCReloadServerRegionSettings*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToGCReloadServerRegionSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToGCReloadServerRegionSettings)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToGCReloadServerRegionSettings)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToGCReloadServerRegionSettings)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToGCReloadServerRegionSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToGCReloadServerRegionSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToGCReloadServerRegionSettings)
}

::google::protobuf::uint8* CMsgGCToGCReloadServerRegionSettings::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToGCReloadServerRegionSettings)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToGCReloadServerRegionSettings)
  return target;
}

size_t CMsgGCToGCReloadServerRegionSettings::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToGCReloadServerRegionSettings)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToGCReloadServerRegionSettings::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToGCReloadServerRegionSettings)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToGCReloadServerRegionSettings* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToGCReloadServerRegionSettings>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToGCReloadServerRegionSettings)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToGCReloadServerRegionSettings)
    MergeFrom(*source);
  }
}

void CMsgGCToGCReloadServerRegionSettings::MergeFrom(const CMsgGCToGCReloadServerRegionSettings& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToGCReloadServerRegionSettings)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgGCToGCReloadServerRegionSettings::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToGCReloadServerRegionSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToGCReloadServerRegionSettings::CopyFrom(const CMsgGCToGCReloadServerRegionSettings& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToGCReloadServerRegionSettings)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToGCReloadServerRegionSettings::IsInitialized() const {
  return true;
}

void CMsgGCToGCReloadServerRegionSettings::Swap(CMsgGCToGCReloadServerRegionSettings* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToGCReloadServerRegionSettings::InternalSwap(CMsgGCToGCReloadServerRegionSettings* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgGCToGCReloadServerRegionSettings::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_base_5fgcmessages_2eproto);
  return ::file_level_metadata_base_5fgcmessages_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::dota::CGCStorePurchaseInit_LineItem* Arena::CreateMaybeMessage< ::proto::dota::CGCStorePurchaseInit_LineItem >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CGCStorePurchaseInit_LineItem >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCStorePurchaseInit* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCStorePurchaseInit >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCStorePurchaseInit >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCStorePurchaseInitResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCStorePurchaseInitResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCStorePurchaseInitResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSystemBroadcast* Arena::CreateMaybeMessage< ::proto::dota::CMsgSystemBroadcast >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSystemBroadcast >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgClientPingData* Arena::CreateMaybeMessage< ::proto::dota::CMsgClientPingData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgClientPingData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgInviteToParty* Arena::CreateMaybeMessage< ::proto::dota::CMsgInviteToParty >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgInviteToParty >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgInviteToLobby* Arena::CreateMaybeMessage< ::proto::dota::CMsgInviteToLobby >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgInviteToLobby >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgInvitationCreated* Arena::CreateMaybeMessage< ::proto::dota::CMsgInvitationCreated >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgInvitationCreated >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPartyInviteResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgPartyInviteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPartyInviteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgLobbyInviteResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgLobbyInviteResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgLobbyInviteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgKickFromParty* Arena::CreateMaybeMessage< ::proto::dota::CMsgKickFromParty >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgKickFromParty >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgLeaveParty* Arena::CreateMaybeMessage< ::proto::dota::CMsgLeaveParty >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgLeaveParty >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgCustomGameInstallStatus* Arena::CreateMaybeMessage< ::proto::dota::CMsgCustomGameInstallStatus >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgCustomGameInstallStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgServerAvailable* Arena::CreateMaybeMessage< ::proto::dota::CMsgServerAvailable >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgServerAvailable >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgLANServerAvailable* Arena::CreateMaybeMessage< ::proto::dota::CMsgLANServerAvailable >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgLANServerAvailable >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CSOEconGameAccountClient* Arena::CreateMaybeMessage< ::proto::dota::CSOEconGameAccountClient >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSOEconGameAccountClient >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CSOItemCriteriaCondition* Arena::CreateMaybeMessage< ::proto::dota::CSOItemCriteriaCondition >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSOItemCriteriaCondition >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CSOItemCriteria* Arena::CreateMaybeMessage< ::proto::dota::CSOItemCriteria >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSOItemCriteria >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CSOItemRecipe* Arena::CreateMaybeMessage< ::proto::dota::CSOItemRecipe >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSOItemRecipe >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgApplyStrangePart* Arena::CreateMaybeMessage< ::proto::dota::CMsgApplyStrangePart >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgApplyStrangePart >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgApplyPennantUpgrade* Arena::CreateMaybeMessage< ::proto::dota::CMsgApplyPennantUpgrade >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgApplyPennantUpgrade >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgApplyEggEssence* Arena::CreateMaybeMessage< ::proto::dota::CMsgApplyEggEssence >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgApplyEggEssence >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CSOEconItemAttribute* Arena::CreateMaybeMessage< ::proto::dota::CSOEconItemAttribute >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSOEconItemAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CSOEconItemEquipped* Arena::CreateMaybeMessage< ::proto::dota::CSOEconItemEquipped >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSOEconItemEquipped >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CSOEconItem* Arena::CreateMaybeMessage< ::proto::dota::CSOEconItem >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSOEconItem >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSortItems* Arena::CreateMaybeMessage< ::proto::dota::CMsgSortItems >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSortItems >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CSOEconClaimCode* Arena::CreateMaybeMessage< ::proto::dota::CSOEconClaimCode >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSOEconClaimCode >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgUpdateItemSchema* Arena::CreateMaybeMessage< ::proto::dota::CMsgUpdateItemSchema >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgUpdateItemSchema >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCError* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCError >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCError >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgRequestInventoryRefresh* Arena::CreateMaybeMessage< ::proto::dota::CMsgRequestInventoryRefresh >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgRequestInventoryRefresh >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgConVarValue* Arena::CreateMaybeMessage< ::proto::dota::CMsgConVarValue >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgConVarValue >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgReplicateConVars* Arena::CreateMaybeMessage< ::proto::dota::CMsgReplicateConVars >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgReplicateConVars >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgItemAcknowledged* Arena::CreateMaybeMessage< ::proto::dota::CMsgItemAcknowledged >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgItemAcknowledged >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSetItemPositions_ItemPosition* Arena::CreateMaybeMessage< ::proto::dota::CMsgSetItemPositions_ItemPosition >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSetItemPositions_ItemPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSetItemPositions* Arena::CreateMaybeMessage< ::proto::dota::CMsgSetItemPositions >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSetItemPositions >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCNameItemNotification* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCNameItemNotification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCNameItemNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCClientDisplayNotification* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCClientDisplayNotification >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCClientDisplayNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCShowItemsPickedUp* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCShowItemsPickedUp >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCShowItemsPickedUp >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCIncrementKillCountResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCIncrementKillCountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCIncrementKillCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CSOEconItemDropRateBonus* Arena::CreateMaybeMessage< ::proto::dota::CSOEconItemDropRateBonus >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSOEconItemDropRateBonus >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CSOEconItemLeagueViewPass* Arena::CreateMaybeMessage< ::proto::dota::CSOEconItemLeagueViewPass >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSOEconItemLeagueViewPass >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CSOEconItemEventTicket* Arena::CreateMaybeMessage< ::proto::dota::CSOEconItemEventTicket >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSOEconItemEventTicket >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CSOEconItemTournamentPassport* Arena::CreateMaybeMessage< ::proto::dota::CSOEconItemTournamentPassport >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSOEconItemTournamentPassport >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCStorePurchaseCancel* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCStorePurchaseCancel >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCStorePurchaseCancel >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCStorePurchaseCancelResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCStorePurchaseCancelResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCStorePurchaseCancelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCStorePurchaseFinalize* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCStorePurchaseFinalize >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCStorePurchaseFinalize >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCStorePurchaseFinalizeResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCStorePurchaseFinalizeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCStorePurchaseFinalizeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCBannedWordListUpdated* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCBannedWordListUpdated >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCBannedWordListUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCDirtySDOCache* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCDirtySDOCache >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCDirtySDOCache >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCDirtyMultipleSDOCache* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCDirtyMultipleSDOCache >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCDirtyMultipleSDOCache >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCApplyLocalizationDiff* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCApplyLocalizationDiff >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCApplyLocalizationDiff >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCApplyLocalizationDiffResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCApplyLocalizationDiffResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCApplyLocalizationDiffResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCCollectItem* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCCollectItem >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCCollectItem >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSDONoMemcached* Arena::CreateMaybeMessage< ::proto::dota::CMsgSDONoMemcached >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSDONoMemcached >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCUpdateSQLKeyValue* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCUpdateSQLKeyValue >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCUpdateSQLKeyValue >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCServerVersionUpdated* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCServerVersionUpdated >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCServerVersionUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCClientVersionUpdated* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCClientVersionUpdated >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCClientVersionUpdated >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCWebAPIAccountChanged* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCWebAPIAccountChanged >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCWebAPIAccountChanged >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgRecipeComponent* Arena::CreateMaybeMessage< ::proto::dota::CMsgRecipeComponent >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgRecipeComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgFulfillDynamicRecipeComponent* Arena::CreateMaybeMessage< ::proto::dota::CMsgFulfillDynamicRecipeComponent >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgFulfillDynamicRecipeComponent >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCClientMarketDataRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCClientMarketDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCClientMarketDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCClientMarketDataEntry* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCClientMarketDataEntry >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCClientMarketDataEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCClientMarketData* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCClientMarketData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCClientMarketData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgExtractGems* Arena::CreateMaybeMessage< ::proto::dota::CMsgExtractGems >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgExtractGems >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgExtractGemsResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgExtractGemsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgExtractGemsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgAddSocket* Arena::CreateMaybeMessage< ::proto::dota::CMsgAddSocket >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgAddSocket >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgAddSocketResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgAddSocketResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgAddSocketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgAddItemToSocketData* Arena::CreateMaybeMessage< ::proto::dota::CMsgAddItemToSocketData >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgAddItemToSocketData >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgAddItemToSocket* Arena::CreateMaybeMessage< ::proto::dota::CMsgAddItemToSocket >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgAddItemToSocket >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgAddItemToSocketResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgAddItemToSocketResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgAddItemToSocketResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgResetStrangeGemCount* Arena::CreateMaybeMessage< ::proto::dota::CMsgResetStrangeGemCount >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgResetStrangeGemCount >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgResetStrangeGemCountResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgResetStrangeGemCountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgResetStrangeGemCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToClientPollFileRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToClientPollFileRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToClientPollFileRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToClientPollFileResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToClientPollFileResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToClientPollFileResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCPerformManualOp* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCPerformManualOp >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCPerformManualOp >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCPerformManualOpCompleted* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCPerformManualOpCompleted >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCPerformManualOpCompleted >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToGCReloadServerRegionSettings* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToGCReloadServerRegionSettings >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToGCReloadServerRegionSettings >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
