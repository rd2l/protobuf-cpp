// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_common_league.proto

#include "dota_gcmessages_common_league.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fleague_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeagueAvailableLobbyNodes_NodeInfo_dota_5fgcmessages_5fcommon_5fleague_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fleague_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeagueInfo_dota_5fgcmessages_5fcommon_5fleague_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fleague_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeagueLiveGames_LiveGame_dota_5fgcmessages_5fcommon_5fleague_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fleague_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeagueMessages_Message_dota_5fgcmessages_5fcommon_5fleague_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fleague_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeagueNodeGroup_TeamStanding_dota_5fgcmessages_5fcommon_5fleague_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fleague_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeagueNodeResults_Result_dota_5fgcmessages_5fcommon_5fleague_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fleague_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeagueNode_MatchDetails_dota_5fgcmessages_5fcommon_5fleague_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fleague_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeague_Admin_dota_5fgcmessages_5fcommon_5fleague_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fleague_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeague_Info_dota_5fgcmessages_5fcommon_5fleague_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fleague_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeague_Player_dota_5fgcmessages_5fcommon_5fleague_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fleague_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeague_PrizePoolItem_dota_5fgcmessages_5fcommon_5fleague_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fleague_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeague_SeriesInfo_dota_5fgcmessages_5fcommon_5fleague_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fleague_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeague_Stream_dota_5fgcmessages_5fcommon_5fleague_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fleague_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTALeagueNode_dota_5fgcmessages_5fcommon_5fleague_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fleague_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTALeague_PrizePool_dota_5fgcmessages_5fcommon_5fleague_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_5fleague_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CMsgDOTALeagueNodeGroup_dota_5fgcmessages_5fcommon_5fleague_2eproto;
namespace proto {
namespace dota {
class CMsgDOTALeagueNode_MatchDetailsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeagueNode_MatchDetails> _instance;
} _CMsgDOTALeagueNode_MatchDetails_default_instance_;
class CMsgDOTALeagueNodeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeagueNode> _instance;
} _CMsgDOTALeagueNode_default_instance_;
class CMsgDOTALeagueNodeGroup_TeamStandingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeagueNodeGroup_TeamStanding> _instance;
} _CMsgDOTALeagueNodeGroup_TeamStanding_default_instance_;
class CMsgDOTALeagueNodeGroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeagueNodeGroup> _instance;
} _CMsgDOTALeagueNodeGroup_default_instance_;
class CMsgDOTALeague_InfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeague_Info> _instance;
} _CMsgDOTALeague_Info_default_instance_;
class CMsgDOTALeague_AdminDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeague_Admin> _instance;
} _CMsgDOTALeague_Admin_default_instance_;
class CMsgDOTALeague_PrizePoolItemDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeague_PrizePoolItem> _instance;
} _CMsgDOTALeague_PrizePoolItem_default_instance_;
class CMsgDOTALeague_PrizePoolDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeague_PrizePool> _instance;
} _CMsgDOTALeague_PrizePool_default_instance_;
class CMsgDOTALeague_StreamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeague_Stream> _instance;
} _CMsgDOTALeague_Stream_default_instance_;
class CMsgDOTALeague_SeriesInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeague_SeriesInfo> _instance;
} _CMsgDOTALeague_SeriesInfo_default_instance_;
class CMsgDOTALeague_PlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeague_Player> _instance;
} _CMsgDOTALeague_Player_default_instance_;
class CMsgDOTALeagueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeague> _instance;
} _CMsgDOTALeague_default_instance_;
class CMsgDOTALeagueInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeagueInfo> _instance;
} _CMsgDOTALeagueInfo_default_instance_;
class CMsgDOTALeagueInfoListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeagueInfoList> _instance;
} _CMsgDOTALeagueInfoList_default_instance_;
class CMsgDOTALeagueLiveGames_LiveGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeagueLiveGames_LiveGame> _instance;
} _CMsgDOTALeagueLiveGames_LiveGame_default_instance_;
class CMsgDOTALeagueLiveGamesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeagueLiveGames> _instance;
} _CMsgDOTALeagueLiveGames_default_instance_;
class CMsgDOTALeagueMessages_MessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeagueMessages_Message> _instance;
} _CMsgDOTALeagueMessages_Message_default_instance_;
class CMsgDOTALeagueMessagesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeagueMessages> _instance;
} _CMsgDOTALeagueMessages_default_instance_;
class CMsgDOTALeaguePrizePoolDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeaguePrizePool> _instance;
} _CMsgDOTALeaguePrizePool_default_instance_;
class CMsgDOTALeagueInfoListAdminsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeagueInfoListAdminsRequest> _instance;
} _CMsgDOTALeagueInfoListAdminsRequest_default_instance_;
class CMsgDOTALeagueNodeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeagueNodeRequest> _instance;
} _CMsgDOTALeagueNodeRequest_default_instance_;
class CMsgDOTALeagueNodeResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeagueNodeResponse> _instance;
} _CMsgDOTALeagueNodeResponse_default_instance_;
class CMsgDOTALeagueAvailableLobbyNodesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeagueAvailableLobbyNodesRequest> _instance;
} _CMsgDOTALeagueAvailableLobbyNodesRequest_default_instance_;
class CMsgDOTALeagueAvailableLobbyNodes_NodeInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeagueAvailableLobbyNodes_NodeInfo> _instance;
} _CMsgDOTALeagueAvailableLobbyNodes_NodeInfo_default_instance_;
class CMsgDOTALeagueAvailableLobbyNodesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeagueAvailableLobbyNodes> _instance;
} _CMsgDOTALeagueAvailableLobbyNodes_default_instance_;
class CMsgDOTALeagueNodeResults_ResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeagueNodeResults_Result> _instance;
} _CMsgDOTALeagueNodeResults_Result_default_instance_;
class CMsgDOTALeagueNodeResultsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeagueNodeResults> _instance;
} _CMsgDOTALeagueNodeResults_default_instance_;
}  // namespace dota
}  // namespace proto
static void InitDefaultsCMsgDOTALeagueNode_MatchDetails_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeagueNode_MatchDetails_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeagueNode_MatchDetails();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeagueNode_MatchDetails::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeagueNode_MatchDetails_dota_5fgcmessages_5fcommon_5fleague_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTALeagueNode_MatchDetails_dota_5fgcmessages_5fcommon_5fleague_2eproto}, {}};

static void InitDefaultsCMsgDOTALeagueNode_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeagueNode_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeagueNode();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeagueNode::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTALeagueNode_dota_5fgcmessages_5fcommon_5fleague_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTALeagueNode_dota_5fgcmessages_5fcommon_5fleague_2eproto}, {
      &scc_info_CMsgDOTALeagueNode_MatchDetails_dota_5fgcmessages_5fcommon_5fleague_2eproto.base,}};

static void InitDefaultsCMsgDOTALeagueNodeGroup_TeamStanding_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeagueNodeGroup_TeamStanding_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeagueNodeGroup_TeamStanding();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeagueNodeGroup_TeamStanding::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeagueNodeGroup_TeamStanding_dota_5fgcmessages_5fcommon_5fleague_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTALeagueNodeGroup_TeamStanding_dota_5fgcmessages_5fcommon_5fleague_2eproto}, {}};

static void InitDefaultsCMsgDOTALeagueNodeGroup_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeagueNodeGroup_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeagueNodeGroup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeagueNodeGroup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgDOTALeagueNodeGroup_dota_5fgcmessages_5fcommon_5fleague_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgDOTALeagueNodeGroup_dota_5fgcmessages_5fcommon_5fleague_2eproto}, {
      &scc_info_CMsgDOTALeagueNodeGroup_TeamStanding_dota_5fgcmessages_5fcommon_5fleague_2eproto.base,
      &scc_info_CMsgDOTALeagueNode_dota_5fgcmessages_5fcommon_5fleague_2eproto.base,}};

static void InitDefaultsCMsgDOTALeague_Info_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeague_Info_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeague_Info();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeague_Info::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeague_Info_dota_5fgcmessages_5fcommon_5fleague_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTALeague_Info_dota_5fgcmessages_5fcommon_5fleague_2eproto}, {}};

static void InitDefaultsCMsgDOTALeague_Admin_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeague_Admin_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeague_Admin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeague_Admin::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeague_Admin_dota_5fgcmessages_5fcommon_5fleague_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTALeague_Admin_dota_5fgcmessages_5fcommon_5fleague_2eproto}, {}};

static void InitDefaultsCMsgDOTALeague_PrizePoolItem_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeague_PrizePoolItem_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeague_PrizePoolItem();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeague_PrizePoolItem::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeague_PrizePoolItem_dota_5fgcmessages_5fcommon_5fleague_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTALeague_PrizePoolItem_dota_5fgcmessages_5fcommon_5fleague_2eproto}, {}};

static void InitDefaultsCMsgDOTALeague_PrizePool_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeague_PrizePool_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeague_PrizePool();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeague_PrizePool::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTALeague_PrizePool_dota_5fgcmessages_5fcommon_5fleague_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTALeague_PrizePool_dota_5fgcmessages_5fcommon_5fleague_2eproto}, {
      &scc_info_CMsgDOTALeague_PrizePoolItem_dota_5fgcmessages_5fcommon_5fleague_2eproto.base,}};

static void InitDefaultsCMsgDOTALeague_Stream_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeague_Stream_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeague_Stream();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeague_Stream::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeague_Stream_dota_5fgcmessages_5fcommon_5fleague_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTALeague_Stream_dota_5fgcmessages_5fcommon_5fleague_2eproto}, {}};

static void InitDefaultsCMsgDOTALeague_SeriesInfo_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeague_SeriesInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeague_SeriesInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeague_SeriesInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeague_SeriesInfo_dota_5fgcmessages_5fcommon_5fleague_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTALeague_SeriesInfo_dota_5fgcmessages_5fcommon_5fleague_2eproto}, {}};

static void InitDefaultsCMsgDOTALeague_Player_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeague_Player_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeague_Player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeague_Player::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeague_Player_dota_5fgcmessages_5fcommon_5fleague_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTALeague_Player_dota_5fgcmessages_5fcommon_5fleague_2eproto}, {}};

static void InitDefaultsCMsgDOTALeague_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeague_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeague();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeague::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_CMsgDOTALeague_dota_5fgcmessages_5fcommon_5fleague_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsCMsgDOTALeague_dota_5fgcmessages_5fcommon_5fleague_2eproto}, {
      &scc_info_CMsgDOTALeague_Info_dota_5fgcmessages_5fcommon_5fleague_2eproto.base,
      &scc_info_CMsgDOTALeague_PrizePool_dota_5fgcmessages_5fcommon_5fleague_2eproto.base,
      &scc_info_CMsgDOTALeague_Admin_dota_5fgcmessages_5fcommon_5fleague_2eproto.base,
      &scc_info_CMsgDOTALeague_Stream_dota_5fgcmessages_5fcommon_5fleague_2eproto.base,
      &scc_info_CMsgDOTALeagueNodeGroup_dota_5fgcmessages_5fcommon_5fleague_2eproto.base,
      &scc_info_CMsgDOTALeague_SeriesInfo_dota_5fgcmessages_5fcommon_5fleague_2eproto.base,
      &scc_info_CMsgDOTALeague_Player_dota_5fgcmessages_5fcommon_5fleague_2eproto.base,}};

static void InitDefaultsCMsgDOTALeagueInfo_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeagueInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeagueInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeagueInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeagueInfo_dota_5fgcmessages_5fcommon_5fleague_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTALeagueInfo_dota_5fgcmessages_5fcommon_5fleague_2eproto}, {}};

static void InitDefaultsCMsgDOTALeagueInfoList_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeagueInfoList_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeagueInfoList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeagueInfoList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTALeagueInfoList_dota_5fgcmessages_5fcommon_5fleague_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTALeagueInfoList_dota_5fgcmessages_5fcommon_5fleague_2eproto}, {
      &scc_info_CMsgDOTALeagueInfo_dota_5fgcmessages_5fcommon_5fleague_2eproto.base,}};

static void InitDefaultsCMsgDOTALeagueLiveGames_LiveGame_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeagueLiveGames_LiveGame_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeagueLiveGames_LiveGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeagueLiveGames_LiveGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeagueLiveGames_LiveGame_dota_5fgcmessages_5fcommon_5fleague_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTALeagueLiveGames_LiveGame_dota_5fgcmessages_5fcommon_5fleague_2eproto}, {}};

static void InitDefaultsCMsgDOTALeagueLiveGames_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeagueLiveGames_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeagueLiveGames();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeagueLiveGames::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTALeagueLiveGames_dota_5fgcmessages_5fcommon_5fleague_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTALeagueLiveGames_dota_5fgcmessages_5fcommon_5fleague_2eproto}, {
      &scc_info_CMsgDOTALeagueLiveGames_LiveGame_dota_5fgcmessages_5fcommon_5fleague_2eproto.base,}};

static void InitDefaultsCMsgDOTALeagueMessages_Message_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeagueMessages_Message_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeagueMessages_Message();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeagueMessages_Message::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeagueMessages_Message_dota_5fgcmessages_5fcommon_5fleague_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTALeagueMessages_Message_dota_5fgcmessages_5fcommon_5fleague_2eproto}, {}};

static void InitDefaultsCMsgDOTALeagueMessages_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeagueMessages_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeagueMessages();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeagueMessages::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTALeagueMessages_dota_5fgcmessages_5fcommon_5fleague_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTALeagueMessages_dota_5fgcmessages_5fcommon_5fleague_2eproto}, {
      &scc_info_CMsgDOTALeagueMessages_Message_dota_5fgcmessages_5fcommon_5fleague_2eproto.base,}};

static void InitDefaultsCMsgDOTALeaguePrizePool_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeaguePrizePool_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeaguePrizePool();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeaguePrizePool::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeaguePrizePool_dota_5fgcmessages_5fcommon_5fleague_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTALeaguePrizePool_dota_5fgcmessages_5fcommon_5fleague_2eproto}, {}};

static void InitDefaultsCMsgDOTALeagueInfoListAdminsRequest_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeagueInfoListAdminsRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeagueInfoListAdminsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeagueInfoListAdminsRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeagueInfoListAdminsRequest_dota_5fgcmessages_5fcommon_5fleague_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTALeagueInfoListAdminsRequest_dota_5fgcmessages_5fcommon_5fleague_2eproto}, {}};

static void InitDefaultsCMsgDOTALeagueNodeRequest_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeagueNodeRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeagueNodeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeagueNodeRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeagueNodeRequest_dota_5fgcmessages_5fcommon_5fleague_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTALeagueNodeRequest_dota_5fgcmessages_5fcommon_5fleague_2eproto}, {}};

static void InitDefaultsCMsgDOTALeagueNodeResponse_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeagueNodeResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeagueNodeResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeagueNodeResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTALeagueNodeResponse_dota_5fgcmessages_5fcommon_5fleague_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTALeagueNodeResponse_dota_5fgcmessages_5fcommon_5fleague_2eproto}, {
      &scc_info_CMsgDOTALeagueNode_dota_5fgcmessages_5fcommon_5fleague_2eproto.base,}};

static void InitDefaultsCMsgDOTALeagueAvailableLobbyNodesRequest_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeagueAvailableLobbyNodesRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeagueAvailableLobbyNodesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeagueAvailableLobbyNodesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeagueAvailableLobbyNodesRequest_dota_5fgcmessages_5fcommon_5fleague_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTALeagueAvailableLobbyNodesRequest_dota_5fgcmessages_5fcommon_5fleague_2eproto}, {}};

static void InitDefaultsCMsgDOTALeagueAvailableLobbyNodes_NodeInfo_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeagueAvailableLobbyNodes_NodeInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeagueAvailableLobbyNodes_NodeInfo_dota_5fgcmessages_5fcommon_5fleague_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTALeagueAvailableLobbyNodes_NodeInfo_dota_5fgcmessages_5fcommon_5fleague_2eproto}, {}};

static void InitDefaultsCMsgDOTALeagueAvailableLobbyNodes_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeagueAvailableLobbyNodes_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeagueAvailableLobbyNodes();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeagueAvailableLobbyNodes::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTALeagueAvailableLobbyNodes_dota_5fgcmessages_5fcommon_5fleague_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTALeagueAvailableLobbyNodes_dota_5fgcmessages_5fcommon_5fleague_2eproto}, {
      &scc_info_CMsgDOTALeagueAvailableLobbyNodes_NodeInfo_dota_5fgcmessages_5fcommon_5fleague_2eproto.base,}};

static void InitDefaultsCMsgDOTALeagueNodeResults_Result_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeagueNodeResults_Result_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeagueNodeResults_Result();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeagueNodeResults_Result::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeagueNodeResults_Result_dota_5fgcmessages_5fcommon_5fleague_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTALeagueNodeResults_Result_dota_5fgcmessages_5fcommon_5fleague_2eproto}, {}};

static void InitDefaultsCMsgDOTALeagueNodeResults_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeagueNodeResults_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeagueNodeResults();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeagueNodeResults::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTALeagueNodeResults_dota_5fgcmessages_5fcommon_5fleague_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTALeagueNodeResults_dota_5fgcmessages_5fcommon_5fleague_2eproto}, {
      &scc_info_CMsgDOTALeagueNodeResults_Result_dota_5fgcmessages_5fcommon_5fleague_2eproto.base,}};

void InitDefaults_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeagueNode_MatchDetails_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeagueNode_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeagueNodeGroup_TeamStanding_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeagueNodeGroup_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeague_Info_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeague_Admin_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeague_PrizePoolItem_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeague_PrizePool_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeague_Stream_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeague_SeriesInfo_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeague_Player_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeague_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeagueInfo_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeagueInfoList_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeagueLiveGames_LiveGame_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeagueLiveGames_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeagueMessages_Message_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeagueMessages_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeaguePrizePool_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeagueInfoListAdminsRequest_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeagueNodeRequest_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeagueNodeResponse_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeagueAvailableLobbyNodesRequest_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeagueAvailableLobbyNodes_NodeInfo_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeagueAvailableLobbyNodes_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeagueNodeResults_Result_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeagueNodeResults_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[27];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fleague_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fcommon_5fleague_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_dota_5fgcmessages_5fcommon_5fleague_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNode_MatchDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNode_MatchDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNode_MatchDetails, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNode_MatchDetails, winning_team_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNode, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNode, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNode, node_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNode, node_group_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNode, winning_node_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNode, losing_node_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNode, incoming_node_id_1_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNode, incoming_node_id_2_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNode, node_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNode, scheduled_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNode, actual_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNode, series_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNode, team_id_1_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNode, team_id_2_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNode, matches_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNode, team_1_wins_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNode, team_2_wins_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNode, has_started_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNode, is_completed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNode, stream_ids_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  16,
  9,
  10,
  11,
  ~0u,
  12,
  13,
  14,
  15,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup_TeamStanding, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup_TeamStanding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup_TeamStanding, standing_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup_TeamStanding, team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup_TeamStanding, team_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup_TeamStanding, team_tag_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup_TeamStanding, team_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup_TeamStanding, team_logo_url_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup_TeamStanding, wins_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup_TeamStanding, losses_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup_TeamStanding, score_),
  3,
  4,
  0,
  1,
  5,
  2,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup, node_group_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup, parent_node_group_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup, incoming_node_group_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup, advancing_node_group_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup, advancing_team_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup, team_count_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup, node_group_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup, default_node_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup, round_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup, max_rounds_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup, is_tiebreaker_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup, is_final_group_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup, is_completed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup, phase_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup, region_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup, start_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup, end_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup, team_standings_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup, nodes_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeGroup, node_groups_),
  0,
  1,
  2,
  ~0u,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Info, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Info, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Info, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Info, tier_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Info, region_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Info, url_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Info, description_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Info, notes_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Info, start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Info, end_timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Info, pro_circuit_points_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Info, image_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Info, status_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Info, most_recent_activity_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Info, registration_period_),
  4,
  0,
  5,
  6,
  1,
  2,
  3,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Admin, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Admin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Admin, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Admin, is_primary_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Admin, email_address_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_PrizePoolItem, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_PrizePoolItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_PrizePoolItem, item_def_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_PrizePoolItem, sales_stop_timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_PrizePoolItem, revenue_pct_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_PrizePoolItem, revenue_cents_per_sale_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_PrizePool, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_PrizePool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_PrizePool, base_prize_pool_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_PrizePool, total_prize_pool_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_PrizePool, prize_split_pct_x100_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_PrizePool, prize_pool_items_),
  0,
  1,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Stream, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Stream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Stream, stream_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Stream, language_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Stream, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Stream, broadcast_provider_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Stream, stream_url_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Stream, vod_url_),
  3,
  4,
  0,
  5,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_SeriesInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_SeriesInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_SeriesInfo, series_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_SeriesInfo, series_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_SeriesInfo, start_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_SeriesInfo, match_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_SeriesInfo, team_id_1_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_SeriesInfo, team_id_2_),
  0,
  1,
  2,
  ~0u,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Player, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague_Player, team_id_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague, info_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague, prize_pool_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague, admins_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague, streams_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague, node_groups_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague, series_infos_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeague, registered_players_),
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueInfo, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueInfo, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueInfo, tier_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueInfo, region_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueInfo, most_recent_activity_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueInfo, total_prize_pool_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueInfo, start_timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueInfo, end_timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueInfo, status_),
  1,
  0,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueInfoList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueInfoList, infos_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueLiveGames_LiveGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueLiveGames_LiveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueLiveGames_LiveGame, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueLiveGames_LiveGame, server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueLiveGames_LiveGame, radiant_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueLiveGames_LiveGame, radiant_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueLiveGames_LiveGame, radiant_team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueLiveGames_LiveGame, dire_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueLiveGames_LiveGame, dire_logo_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueLiveGames_LiveGame, dire_team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueLiveGames_LiveGame, time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueLiveGames_LiveGame, spectators_),
  4,
  2,
  0,
  3,
  8,
  1,
  6,
  9,
  5,
  7,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueLiveGames, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueLiveGames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueLiveGames, games_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueMessages_Message, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueMessages_Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueMessages_Message, author_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueMessages_Message, timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueMessages_Message, message_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueMessages, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueMessages, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueMessages, messages_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeaguePrizePool, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeaguePrizePool, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeaguePrizePool, prize_pool_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeaguePrizePool, increment_per_second_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueInfoListAdminsRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueInfoListAdminsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeRequest, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeRequest, node_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeResponse, node_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueAvailableLobbyNodesRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueAvailableLobbyNodesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueAvailableLobbyNodesRequest, league_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo, node_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo, node_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo, node_group_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo, team_id_1_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo, team_id_2_),
  2,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueAvailableLobbyNodes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueAvailableLobbyNodes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueAvailableLobbyNodes, node_infos_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeResults_Result, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeResults_Result, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeResults_Result, node_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeResults_Result, winning_node_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeResults_Result, losing_node_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeResults_Result, incoming_node_id_1_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeResults_Result, incoming_node_id_2_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeResults_Result, team_id_1_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeResults_Result, team_id_2_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeResults_Result, team_1_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeResults_Result, team_2_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeResults_Result, team_1_wins_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeResults_Result, team_2_wins_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeResults_Result, winning_team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeResults_Result, losing_team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeResults_Result, has_started_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeResults_Result, is_completed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeResults_Result, scheduled_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeResults_Result, match_ids_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  1,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeResults, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeagueNodeResults, node_results_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::proto::dota::CMsgDOTALeagueNode_MatchDetails)},
  { 9, 33, sizeof(::proto::dota::CMsgDOTALeagueNode)},
  { 52, 66, sizeof(::proto::dota::CMsgDOTALeagueNodeGroup_TeamStanding)},
  { 75, 101, sizeof(::proto::dota::CMsgDOTALeagueNodeGroup)},
  { 122, 141, sizeof(::proto::dota::CMsgDOTALeague_Info)},
  { 155, 163, sizeof(::proto::dota::CMsgDOTALeague_Admin)},
  { 166, 175, sizeof(::proto::dota::CMsgDOTALeague_PrizePoolItem)},
  { 179, 188, sizeof(::proto::dota::CMsgDOTALeague_PrizePool)},
  { 192, 203, sizeof(::proto::dota::CMsgDOTALeague_Stream)},
  { 209, 220, sizeof(::proto::dota::CMsgDOTALeague_SeriesInfo)},
  { 226, 234, sizeof(::proto::dota::CMsgDOTALeague_Player)},
  { 237, 249, sizeof(::proto::dota::CMsgDOTALeague)},
  { 256, 270, sizeof(::proto::dota::CMsgDOTALeagueInfo)},
  { 279, 285, sizeof(::proto::dota::CMsgDOTALeagueInfoList)},
  { 286, 301, sizeof(::proto::dota::CMsgDOTALeagueLiveGames_LiveGame)},
  { 311, 317, sizeof(::proto::dota::CMsgDOTALeagueLiveGames)},
  { 318, 326, sizeof(::proto::dota::CMsgDOTALeagueMessages_Message)},
  { 329, 335, sizeof(::proto::dota::CMsgDOTALeagueMessages)},
  { 336, 343, sizeof(::proto::dota::CMsgDOTALeaguePrizePool)},
  { 345, 350, sizeof(::proto::dota::CMsgDOTALeagueInfoListAdminsRequest)},
  { 350, 357, sizeof(::proto::dota::CMsgDOTALeagueNodeRequest)},
  { 359, 365, sizeof(::proto::dota::CMsgDOTALeagueNodeResponse)},
  { 366, 372, sizeof(::proto::dota::CMsgDOTALeagueAvailableLobbyNodesRequest)},
  { 373, 383, sizeof(::proto::dota::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo)},
  { 388, 394, sizeof(::proto::dota::CMsgDOTALeagueAvailableLobbyNodes)},
  { 395, 417, sizeof(::proto::dota::CMsgDOTALeagueNodeResults_Result)},
  { 434, 440, sizeof(::proto::dota::CMsgDOTALeagueNodeResults)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeagueNode_MatchDetails_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeagueNode_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeagueNodeGroup_TeamStanding_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeagueNodeGroup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeague_Info_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeague_Admin_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeague_PrizePoolItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeague_PrizePool_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeague_Stream_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeague_SeriesInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeague_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeague_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeagueInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeagueInfoList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeagueLiveGames_LiveGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeagueLiveGames_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeagueMessages_Message_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeagueMessages_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeaguePrizePool_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeagueInfoListAdminsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeagueNodeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeagueNodeResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeagueAvailableLobbyNodesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeagueAvailableLobbyNodes_NodeInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeagueAvailableLobbyNodes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeagueNodeResults_Result_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeagueNodeResults_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto = {
  {}, AddDescriptors_dota_5fgcmessages_5fcommon_5fleague_2eproto, "dota_gcmessages_common_league.proto", schemas,
  file_default_instances, TableStruct_dota_5fgcmessages_5fcommon_5fleague_2eproto::offsets,
  file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto, 27, file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fleague_2eproto, file_level_service_descriptors_dota_5fgcmessages_5fcommon_5fleague_2eproto,
};

const char descriptor_table_protodef_dota_5fgcmessages_5fcommon_5fleague_2eproto[] =
  "\n#dota_gcmessages_common_league.proto\022\np"
  "roto.dota\032\027dota_shared_enums.proto\"\276\004\n\022C"
  "MsgDOTALeagueNode\022\014\n\004name\030\001 \001(\t\022\017\n\007node_"
  "id\030\002 \001(\r\022\025\n\rnode_group_id\030\003 \001(\r\022\027\n\017winni"
  "ng_node_id\030\004 \001(\r\022\026\n\016losing_node_id\030\005 \001(\r"
  "\022\032\n\022incoming_node_id_1\030\006 \001(\r\022\032\n\022incoming"
  "_node_id_2\030\007 \001(\r\022A\n\tnode_type\030\010 \001(\0162\033.pr"
  "oto.dota.ELeagueNodeType:\021INVALID_NODE_T"
  "YPE\022\026\n\016scheduled_time\030\t \001(\r\022\023\n\013actual_ti"
  "me\030\023 \001(\r\022\021\n\tseries_id\030\n \001(\r\022\021\n\tteam_id_1"
  "\030\013 \001(\r\022\021\n\tteam_id_2\030\014 \001(\r\022<\n\007matches\030\r \003"
  "(\0132+.proto.dota.CMsgDOTALeagueNode.Match"
  "Details\022\023\n\013team_1_wins\030\016 \001(\r\022\023\n\013team_2_w"
  "ins\030\017 \001(\r\022\023\n\013has_started\030\020 \001(\010\022\024\n\014is_com"
  "pleted\030\021 \001(\010\022\022\n\nstream_ids\030\022 \003(\r\0329\n\014Matc"
  "hDetails\022\020\n\010match_id\030\001 \001(\004\022\027\n\017winning_te"
  "am_id\030\002 \001(\r\"\330\007\n\027CMsgDOTALeagueNodeGroup\022"
  "\014\n\004name\030\001 \001(\t\022\025\n\rnode_group_id\030\002 \001(\r\022\034\n\024"
  "parent_node_group_id\030\003 \001(\r\022\037\n\027incoming_n"
  "ode_group_ids\030\004 \003(\r\022\037\n\027advancing_node_gr"
  "oup_id\030\005 \001(\r\022\034\n\024advancing_team_count\030\006 \001"
  "(\r\022\022\n\nteam_count\030\007 \001(\r\022M\n\017node_group_typ"
  "e\030\010 \001(\0162 .proto.dota.ELeagueNodeGroupTyp"
  "e:\022INVALID_GROUP_TYPE\022I\n\021default_node_ty"
  "pe\030\t \001(\0162\033.proto.dota.ELeagueNodeType:\021I"
  "NVALID_NODE_TYPE\022\r\n\005round\030\n \001(\r\022\022\n\nmax_r"
  "ounds\030\013 \001(\r\022\025\n\ris_tiebreaker\030\014 \001(\010\022\026\n\016is"
  "_final_group\030\r \001(\010\022\024\n\014is_completed\030\016 \001(\010"
  "\022;\n\005phase\030\022 \001(\0162\030.proto.dota.ELeaguePhas"
  "e:\022LEAGUE_PHASE_UNSET\022>\n\006region\030\023 \001(\0162\031."
  "proto.dota.ELeagueRegion:\023LEAGUE_REGION_"
  "UNSET\022\022\n\nstart_time\030\024 \001(\r\022\020\n\010end_time\030\025 "
  "\001(\r\022H\n\016team_standings\030\017 \003(\01320.proto.dota"
  ".CMsgDOTALeagueNodeGroup.TeamStanding\022-\n"
  "\005nodes\030\020 \003(\0132\036.proto.dota.CMsgDOTALeague"
  "Node\0228\n\013node_groups\030\021 \003(\0132#.proto.dota.C"
  "MsgDOTALeagueNodeGroup\032\255\001\n\014TeamStanding\022"
  "\020\n\010standing\030\001 \001(\r\022\017\n\007team_id\030\002 \001(\r\022\021\n\tte"
  "am_name\030\003 \001(\t\022\020\n\010team_tag\030\004 \001(\t\022\021\n\tteam_"
  "logo\030\005 \001(\004\022\025\n\rteam_logo_url\030\006 \001(\t\022\014\n\004win"
  "s\030\007 \001(\r\022\016\n\006losses\030\010 \001(\r\022\r\n\005score\030\t \001(\003\"\246"
  "\014\n\016CMsgDOTALeague\022-\n\004info\030\001 \001(\0132\037.proto."
  "dota.CMsgDOTALeague.Info\0228\n\nprize_pool\030\002"
  " \001(\0132$.proto.dota.CMsgDOTALeague.PrizePo"
  "ol\0220\n\006admins\030\003 \003(\0132 .proto.dota.CMsgDOTA"
  "League.Admin\0222\n\007streams\030\004 \003(\0132!.proto.do"
  "ta.CMsgDOTALeague.Stream\0228\n\013node_groups\030"
  "\005 \003(\0132#.proto.dota.CMsgDOTALeagueNodeGro"
  "up\022;\n\014series_infos\030\006 \003(\0132%.proto.dota.CM"
  "sgDOTALeague.SeriesInfo\022=\n\022registered_pl"
  "ayers\030\007 \003(\0132!.proto.dota.CMsgDOTALeague."
  "Player\032\255\003\n\004Info\022\021\n\tleague_id\030\001 \001(\r\022\014\n\004na"
  "me\030\002 \001(\t\0228\n\004tier\030\003 \001(\0162\027.proto.dota.ELea"
  "gueTier:\021LEAGUE_TIER_UNSET\022>\n\006region\030\004 \001"
  "(\0162\031.proto.dota.ELeagueRegion:\023LEAGUE_RE"
  "GION_UNSET\022\013\n\003url\030\005 \001(\t\022\023\n\013description\030\006"
  " \001(\t\022\r\n\005notes\030\007 \001(\t\022\027\n\017start_timestamp\030\010"
  " \001(\r\022\025\n\rend_timestamp\030\t \001(\r\022\032\n\022pro_circu"
  "it_points\030\n \001(\r\022\022\n\nimage_bits\030\013 \001(\r\022>\n\006s"
  "tatus\030\014 \001(\0162\031.proto.dota.ELeagueStatus:\023"
  "LEAGUE_STATUS_UNSET\022\034\n\024most_recent_activ"
  "ity\030\r \001(\r\022\033\n\023registration_period\030\016 \001(\r\032F"
  "\n\005Admin\022\022\n\naccount_id\030\001 \001(\r\022\022\n\nis_primar"
  "y\030\002 \001(\010\022\025\n\remail_address\030\003 \001(\t\032t\n\rPrizeP"
  "oolItem\022\020\n\010item_def\030\001 \001(\r\022\034\n\024sales_stop_"
  "timestamp\030\002 \001(\r\022\023\n\013revenue_pct\030\003 \001(\r\022\036\n\026"
  "revenue_cents_per_sale\030\004 \001(\r\032\240\001\n\tPrizePo"
  "ol\022\027\n\017base_prize_pool\030\001 \001(\r\022\030\n\020total_pri"
  "ze_pool\030\002 \001(\r\022\034\n\024prize_split_pct_x100\030\003 "
  "\003(\r\022B\n\020prize_pool_items\030\004 \003(\0132(.proto.do"
  "ta.CMsgDOTALeague.PrizePoolItem\032\274\001\n\006Stre"
  "am\022\021\n\tstream_id\030\001 \001(\r\022\020\n\010language\030\002 \001(\r\022"
  "\014\n\004name\030\003 \001(\t\022Z\n\022broadcast_provider\030\004 \001("
  "\0162$.proto.dota.ELeagueBroadcastProvider:"
  "\030LEAGUE_BROADCAST_UNKNOWN\022\022\n\nstream_url\030"
  "\005 \001(\t\022\017\n\007vod_url\030\006 \001(\t\032\201\001\n\nSeriesInfo\022\021\n"
  "\tseries_id\030\001 \001(\r\022\023\n\013series_type\030\002 \001(\r\022\022\n"
  "\nstart_time\030\003 \001(\r\022\021\n\tmatch_ids\030\004 \003(\004\022\021\n\t"
  "team_id_1\030\005 \001(\r\022\021\n\tteam_id_2\030\006 \001(\r\032;\n\006Pl"
  "ayer\022\022\n\naccount_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\017"
  "\n\007team_id\030\003 \001(\r\"\247\002\n\022CMsgDOTALeagueInfo\022\021"
  "\n\tleague_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\0228\n\004tier\030"
  "\003 \001(\0162\027.proto.dota.ELeagueTier:\021LEAGUE_T"
  "IER_UNSET\022>\n\006region\030\004 \001(\0162\031.proto.dota.E"
  "LeagueRegion:\023LEAGUE_REGION_UNSET\022\034\n\024mos"
  "t_recent_activity\030\005 \001(\r\022\030\n\020total_prize_p"
  "ool\030\006 \001(\r\022\027\n\017start_timestamp\030\007 \001(\r\022\025\n\ren"
  "d_timestamp\030\010 \001(\r\022\016\n\006status\030\t \001(\r\"G\n\026CMs"
  "gDOTALeagueInfoList\022-\n\005infos\030\001 \003(\0132\036.pro"
  "to.dota.CMsgDOTALeagueInfo\"\262\002\n\027CMsgDOTAL"
  "eagueLiveGames\022;\n\005games\030\001 \003(\0132,.proto.do"
  "ta.CMsgDOTALeagueLiveGames.LiveGame\032\331\001\n\010"
  "LiveGame\022\021\n\tleague_id\030\001 \001(\r\022\027\n\017server_st"
  "eam_id\030\002 \001(\004\022\024\n\014radiant_name\030\003 \001(\t\022\024\n\014ra"
  "diant_logo\030\004 \001(\004\022\027\n\017radiant_team_id\030\t \001("
  "\r\022\021\n\tdire_name\030\005 \001(\t\022\021\n\tdire_logo\030\006 \001(\004\022"
  "\024\n\014dire_team_id\030\n \001(\r\022\014\n\004time\030\007 \001(\r\022\022\n\ns"
  "pectators\030\010 \001(\r\"\240\001\n\026CMsgDOTALeagueMessag"
  "es\022<\n\010messages\030\001 \003(\0132*.proto.dota.CMsgDO"
  "TALeagueMessages.Message\032H\n\007Message\022\031\n\021a"
  "uthor_account_id\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001("
  "\r\022\017\n\007message\030\003 \001(\t\"K\n\027CMsgDOTALeaguePriz"
  "ePool\022\022\n\nprize_pool\030\001 \001(\r\022\034\n\024increment_p"
  "er_second\030\002 \001(\002\"%\n#CMsgDOTALeagueInfoLis"
  "tAdminsRequest\"\?\n\031CMsgDOTALeagueNodeRequ"
  "est\022\021\n\tleague_id\030\001 \001(\r\022\017\n\007node_id\030\002 \001(\r\""
  "J\n\032CMsgDOTALeagueNodeResponse\022,\n\004node\030\001 "
  "\001(\0132\036.proto.dota.CMsgDOTALeagueNode\"=\n(C"
  "MsgDOTALeagueAvailableLobbyNodesRequest\022"
  "\021\n\tleague_id\030\001 \001(\r\"\336\001\n!CMsgDOTALeagueAva"
  "ilableLobbyNodes\022J\n\nnode_infos\030\001 \003(\01326.p"
  "roto.dota.CMsgDOTALeagueAvailableLobbyNo"
  "des.NodeInfo\032m\n\010NodeInfo\022\017\n\007node_id\030\001 \001("
  "\r\022\021\n\tnode_name\030\002 \001(\t\022\027\n\017node_group_name\030"
  "\003 \001(\t\022\021\n\tteam_id_1\030\004 \001(\r\022\021\n\tteam_id_2\030\005 "
  "\001(\r\"\345\003\n\031CMsgDOTALeagueNodeResults\022B\n\014nod"
  "e_results\030\001 \003(\0132,.proto.dota.CMsgDOTALea"
  "gueNodeResults.Result\032\203\003\n\006Result\022\017\n\007node"
  "_id\030\001 \001(\r\022\027\n\017winning_node_id\030\002 \001(\r\022\026\n\016lo"
  "sing_node_id\030\003 \001(\r\022\032\n\022incoming_node_id_1"
  "\030\004 \001(\r\022\032\n\022incoming_node_id_2\030\005 \001(\r\022\021\n\tte"
  "am_id_1\030\006 \001(\r\022\021\n\tteam_id_2\030\007 \001(\r\022\023\n\013team"
  "_1_name\030\010 \001(\t\022\023\n\013team_2_name\030\t \001(\t\022\023\n\013te"
  "am_1_wins\030\n \001(\r\022\023\n\013team_2_wins\030\013 \001(\r\022\027\n\017"
  "winning_team_id\030\014 \001(\r\022\026\n\016losing_team_id\030"
  "\r \001(\r\022\023\n\013has_started\030\016 \001(\010\022\024\n\014is_complet"
  "ed\030\017 \001(\010\022\026\n\016scheduled_time\030\020 \001(\r\022\021\n\tmatc"
  "h_ids\030\021 \003(\004*\310\001\n\024ELeagueNodeGroupType\022\026\n\022"
  "INVALID_GROUP_TYPE\020\000\022\022\n\016ORGANIZATIONAL\020\001"
  "\022\017\n\013ROUND_ROBIN\020\002\022\t\n\005SWISS\020\003\022\022\n\016BRACKET_"
  "SINGLE\020\004\022\035\n\031BRACKET_DOUBLE_SEED_LOSER\020\005\022"
  "\035\n\031BRACKET_DOUBLE_ALL_WINNER\020\006\022\r\n\tSHOWMA"
  "TCH\020\007\022\007\n\003GSL\020\010*o\n\017ELeagueNodeType\022\025\n\021INV"
  "ALID_NODE_TYPE\020\000\022\017\n\013BEST_OF_ONE\020\001\022\021\n\rBES"
  "T_OF_THREE\020\002\022\020\n\014BEST_OF_FIVE\020\003\022\017\n\013BEST_O"
  "F_TWO\020\004B\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fcommon_5fleague_2eproto = {
  false, InitDefaults_dota_5fgcmessages_5fcommon_5fleague_2eproto, 
  descriptor_table_protodef_dota_5fgcmessages_5fcommon_5fleague_2eproto,
  "dota_gcmessages_common_league.proto", &assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto, 5414,
};

void AddDescriptors_dota_5fgcmessages_5fcommon_5fleague_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_dota_5fshared_5fenums_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_dota_5fgcmessages_5fcommon_5fleague_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dota_5fgcmessages_5fcommon_5fleague_2eproto = []() { AddDescriptors_dota_5fgcmessages_5fcommon_5fleague_2eproto(); return true; }();
namespace proto {
namespace dota {
const ::google::protobuf::EnumDescriptor* ELeagueNodeGroupType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fleague_2eproto[0];
}
bool ELeagueNodeGroupType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ELeagueNodeType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fcommon_5fleague_2eproto[1];
}
bool ELeagueNodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CMsgDOTALeagueNode_MatchDetails::InitAsDefaultInstance() {
}
class CMsgDOTALeagueNode_MatchDetails::HasBitSetters {
 public:
  static void set_has_match_id(CMsgDOTALeagueNode_MatchDetails* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_winning_team_id(CMsgDOTALeagueNode_MatchDetails* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeagueNode_MatchDetails::kMatchIdFieldNumber;
const int CMsgDOTALeagueNode_MatchDetails::kWinningTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeagueNode_MatchDetails::CMsgDOTALeagueNode_MatchDetails()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeagueNode.MatchDetails)
}
CMsgDOTALeagueNode_MatchDetails::CMsgDOTALeagueNode_MatchDetails(const CMsgDOTALeagueNode_MatchDetails& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&match_id_, &from.match_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&winning_team_id_) -
    reinterpret_cast<char*>(&match_id_)) + sizeof(winning_team_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeagueNode.MatchDetails)
}

void CMsgDOTALeagueNode_MatchDetails::SharedCtor() {
  ::memset(&match_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&winning_team_id_) -
      reinterpret_cast<char*>(&match_id_)) + sizeof(winning_team_id_));
}

CMsgDOTALeagueNode_MatchDetails::~CMsgDOTALeagueNode_MatchDetails() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeagueNode.MatchDetails)
  SharedDtor();
}

void CMsgDOTALeagueNode_MatchDetails::SharedDtor() {
}

void CMsgDOTALeagueNode_MatchDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeagueNode_MatchDetails& CMsgDOTALeagueNode_MatchDetails::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeagueNode_MatchDetails_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeagueNode_MatchDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeagueNode.MatchDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&match_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&winning_team_id_) -
        reinterpret_cast<char*>(&match_id_)) + sizeof(winning_team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeagueNode_MatchDetails::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeagueNode_MatchDetails*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 winning_team_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_winning_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeagueNode_MatchDetails::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeagueNode.MatchDetails)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 match_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 winning_team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_winning_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winning_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeagueNode.MatchDetails)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeagueNode.MatchDetails)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeagueNode_MatchDetails::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeagueNode.MatchDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->match_id(), output);
  }

  // optional uint32 winning_team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->winning_team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeagueNode.MatchDetails)
}

::google::protobuf::uint8* CMsgDOTALeagueNode_MatchDetails::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeagueNode.MatchDetails)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 match_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->match_id(), target);
  }

  // optional uint32 winning_team_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->winning_team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeagueNode.MatchDetails)
  return target;
}

size_t CMsgDOTALeagueNode_MatchDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeagueNode.MatchDetails)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 match_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 winning_team_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winning_team_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueNode_MatchDetails::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeagueNode.MatchDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueNode_MatchDetails* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeagueNode_MatchDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeagueNode.MatchDetails)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeagueNode.MatchDetails)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueNode_MatchDetails::MergeFrom(const CMsgDOTALeagueNode_MatchDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeagueNode.MatchDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      winning_team_id_ = from.winning_team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeagueNode_MatchDetails::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeagueNode.MatchDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueNode_MatchDetails::CopyFrom(const CMsgDOTALeagueNode_MatchDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeagueNode.MatchDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueNode_MatchDetails::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueNode_MatchDetails::Swap(CMsgDOTALeagueNode_MatchDetails* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeagueNode_MatchDetails::InternalSwap(CMsgDOTALeagueNode_MatchDetails* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(match_id_, other->match_id_);
  swap(winning_team_id_, other->winning_team_id_);
}

::google::protobuf::Metadata CMsgDOTALeagueNode_MatchDetails::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeagueNode::InitAsDefaultInstance() {
}
class CMsgDOTALeagueNode::HasBitSetters {
 public:
  static void set_has_name(CMsgDOTALeagueNode* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_node_id(CMsgDOTALeagueNode* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_node_group_id(CMsgDOTALeagueNode* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_winning_node_id(CMsgDOTALeagueNode* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_losing_node_id(CMsgDOTALeagueNode* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_incoming_node_id_1(CMsgDOTALeagueNode* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_incoming_node_id_2(CMsgDOTALeagueNode* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_node_type(CMsgDOTALeagueNode* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_scheduled_time(CMsgDOTALeagueNode* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_actual_time(CMsgDOTALeagueNode* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_series_id(CMsgDOTALeagueNode* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_team_id_1(CMsgDOTALeagueNode* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_team_id_2(CMsgDOTALeagueNode* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_team_1_wins(CMsgDOTALeagueNode* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_team_2_wins(CMsgDOTALeagueNode* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_has_started(CMsgDOTALeagueNode* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_is_completed(CMsgDOTALeagueNode* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeagueNode::kNameFieldNumber;
const int CMsgDOTALeagueNode::kNodeIdFieldNumber;
const int CMsgDOTALeagueNode::kNodeGroupIdFieldNumber;
const int CMsgDOTALeagueNode::kWinningNodeIdFieldNumber;
const int CMsgDOTALeagueNode::kLosingNodeIdFieldNumber;
const int CMsgDOTALeagueNode::kIncomingNodeId1FieldNumber;
const int CMsgDOTALeagueNode::kIncomingNodeId2FieldNumber;
const int CMsgDOTALeagueNode::kNodeTypeFieldNumber;
const int CMsgDOTALeagueNode::kScheduledTimeFieldNumber;
const int CMsgDOTALeagueNode::kActualTimeFieldNumber;
const int CMsgDOTALeagueNode::kSeriesIdFieldNumber;
const int CMsgDOTALeagueNode::kTeamId1FieldNumber;
const int CMsgDOTALeagueNode::kTeamId2FieldNumber;
const int CMsgDOTALeagueNode::kMatchesFieldNumber;
const int CMsgDOTALeagueNode::kTeam1WinsFieldNumber;
const int CMsgDOTALeagueNode::kTeam2WinsFieldNumber;
const int CMsgDOTALeagueNode::kHasStartedFieldNumber;
const int CMsgDOTALeagueNode::kIsCompletedFieldNumber;
const int CMsgDOTALeagueNode::kStreamIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeagueNode::CMsgDOTALeagueNode()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeagueNode)
}
CMsgDOTALeagueNode::CMsgDOTALeagueNode(const CMsgDOTALeagueNode& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      matches_(from.matches_),
      stream_ids_(from.stream_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&actual_time_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(actual_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeagueNode)
}

void CMsgDOTALeagueNode::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTALeagueNode_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&actual_time_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(actual_time_));
}

CMsgDOTALeagueNode::~CMsgDOTALeagueNode() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeagueNode)
  SharedDtor();
}

void CMsgDOTALeagueNode::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALeagueNode::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeagueNode& CMsgDOTALeagueNode::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeagueNode_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeagueNode::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeagueNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matches_.Clear();
  stream_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&node_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&node_type_) -
        reinterpret_cast<char*>(&node_id_)) + sizeof(node_type_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&scheduled_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_completed_) -
        reinterpret_cast<char*>(&scheduled_time_)) + sizeof(is_completed_));
  }
  actual_time_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeagueNode::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeagueNode*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTALeagueNode.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 node_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_node_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 node_group_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_node_group_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 winning_node_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_winning_node_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 losing_node_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_losing_node_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 incoming_node_id_1 = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_incoming_node_id_1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 incoming_node_id_2 = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_incoming_node_id_2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.ELeagueNodeType node_type = 8 [default = INVALID_NODE_TYPE];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ELeagueNodeType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(8, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_node_type(static_cast<::proto::dota::ELeagueNodeType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 scheduled_time = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_scheduled_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 series_id = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_series_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_id_1 = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_team_id_1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_id_2 = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_team_id_2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTALeagueNode.MatchDetails matches = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 106) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTALeagueNode_MatchDetails::_InternalParse;
          object = msg->add_matches();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 106 && (ptr += 1));
        break;
      }
      // optional uint32 team_1_wins = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_team_1_wins(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_2_wins = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_team_2_wins(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool has_started = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_has_started(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_completed = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_is_completed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 stream_ids = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) == 144) {
          do {
            msg->add_stream_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 400 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_stream_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 actual_time = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_actual_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeagueNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeagueNode)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTALeagueNode.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_node_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 node_group_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_node_group_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 winning_node_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_winning_node_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winning_node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 losing_node_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_losing_node_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losing_node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 incoming_node_id_1 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_incoming_node_id_1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &incoming_node_id_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 incoming_node_id_2 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_incoming_node_id_2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &incoming_node_id_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ELeagueNodeType node_type = 8 [default = INVALID_NODE_TYPE];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ELeagueNodeType_IsValid(value)) {
            set_node_type(static_cast< ::proto::dota::ELeagueNodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scheduled_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_scheduled_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scheduled_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_series_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id_1 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_team_id_1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id_2 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_team_id_2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTALeagueNode.MatchDetails matches = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (106 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_1_wins = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_team_1_wins(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_1_wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_2_wins = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_team_2_wins(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_2_wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_started = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_has_started(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_started_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_completed = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_is_completed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_completed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 stream_ids = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 144u, input, this->mutable_stream_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (146 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_stream_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 actual_time = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_actual_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &actual_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeagueNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeagueNode)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeagueNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeagueNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeagueNode.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 node_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->node_id(), output);
  }

  // optional uint32 node_group_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->node_group_id(), output);
  }

  // optional uint32 winning_node_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->winning_node_id(), output);
  }

  // optional uint32 losing_node_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->losing_node_id(), output);
  }

  // optional uint32 incoming_node_id_1 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->incoming_node_id_1(), output);
  }

  // optional uint32 incoming_node_id_2 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->incoming_node_id_2(), output);
  }

  // optional .proto.dota.ELeagueNodeType node_type = 8 [default = INVALID_NODE_TYPE];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->node_type(), output);
  }

  // optional uint32 scheduled_time = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->scheduled_time(), output);
  }

  // optional uint32 series_id = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->series_id(), output);
  }

  // optional uint32 team_id_1 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->team_id_1(), output);
  }

  // optional uint32 team_id_2 = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->team_id_2(), output);
  }

  // repeated .proto.dota.CMsgDOTALeagueNode.MatchDetails matches = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matches_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13,
      this->matches(static_cast<int>(i)),
      output);
  }

  // optional uint32 team_1_wins = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->team_1_wins(), output);
  }

  // optional uint32 team_2_wins = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->team_2_wins(), output);
  }

  // optional bool has_started = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->has_started(), output);
  }

  // optional bool is_completed = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->is_completed(), output);
  }

  // repeated uint32 stream_ids = 18;
  for (int i = 0, n = this->stream_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      18, this->stream_ids(i), output);
  }

  // optional uint32 actual_time = 19;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->actual_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeagueNode)
}

::google::protobuf::uint8* CMsgDOTALeagueNode::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeagueNode)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeagueNode.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 node_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->node_id(), target);
  }

  // optional uint32 node_group_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->node_group_id(), target);
  }

  // optional uint32 winning_node_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->winning_node_id(), target);
  }

  // optional uint32 losing_node_id = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->losing_node_id(), target);
  }

  // optional uint32 incoming_node_id_1 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->incoming_node_id_1(), target);
  }

  // optional uint32 incoming_node_id_2 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->incoming_node_id_2(), target);
  }

  // optional .proto.dota.ELeagueNodeType node_type = 8 [default = INVALID_NODE_TYPE];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->node_type(), target);
  }

  // optional uint32 scheduled_time = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->scheduled_time(), target);
  }

  // optional uint32 series_id = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->series_id(), target);
  }

  // optional uint32 team_id_1 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->team_id_1(), target);
  }

  // optional uint32 team_id_2 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->team_id_2(), target);
  }

  // repeated .proto.dota.CMsgDOTALeagueNode.MatchDetails matches = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matches_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->matches(static_cast<int>(i)), target);
  }

  // optional uint32 team_1_wins = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->team_1_wins(), target);
  }

  // optional uint32 team_2_wins = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->team_2_wins(), target);
  }

  // optional bool has_started = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->has_started(), target);
  }

  // optional bool is_completed = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->is_completed(), target);
  }

  // repeated uint32 stream_ids = 18;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(18, this->stream_ids_, target);

  // optional uint32 actual_time = 19;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->actual_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeagueNode)
  return target;
}

size_t CMsgDOTALeagueNode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeagueNode)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTALeagueNode.MatchDetails matches = 13;
  {
    unsigned int count = static_cast<unsigned int>(this->matches_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->matches(static_cast<int>(i)));
    }
  }

  // repeated uint32 stream_ids = 18;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->stream_ids_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->stream_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 node_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_id());
    }

    // optional uint32 node_group_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_group_id());
    }

    // optional uint32 winning_node_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winning_node_id());
    }

    // optional uint32 losing_node_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losing_node_id());
    }

    // optional uint32 incoming_node_id_1 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->incoming_node_id_1());
    }

    // optional uint32 incoming_node_id_2 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->incoming_node_id_2());
    }

    // optional .proto.dota.ELeagueNodeType node_type = 8 [default = INVALID_NODE_TYPE];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->node_type());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 scheduled_time = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scheduled_time());
    }

    // optional uint32 series_id = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_id());
    }

    // optional uint32 team_id_1 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id_1());
    }

    // optional uint32 team_id_2 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id_2());
    }

    // optional uint32 team_1_wins = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_1_wins());
    }

    // optional uint32 team_2_wins = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_2_wins());
    }

    // optional bool has_started = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 + 1;
    }

    // optional bool is_completed = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 1;
    }

  }
  // optional uint32 actual_time = 19;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->actual_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueNode::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeagueNode)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueNode* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeagueNode>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeagueNode)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeagueNode)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueNode::MergeFrom(const CMsgDOTALeagueNode& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeagueNode)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matches_.MergeFrom(from.matches_);
  stream_ids_.MergeFrom(from.stream_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      node_id_ = from.node_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      node_group_id_ = from.node_group_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      winning_node_id_ = from.winning_node_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      losing_node_id_ = from.losing_node_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      incoming_node_id_1_ = from.incoming_node_id_1_;
    }
    if (cached_has_bits & 0x00000040u) {
      incoming_node_id_2_ = from.incoming_node_id_2_;
    }
    if (cached_has_bits & 0x00000080u) {
      node_type_ = from.node_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      scheduled_time_ = from.scheduled_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      series_id_ = from.series_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      team_id_1_ = from.team_id_1_;
    }
    if (cached_has_bits & 0x00000800u) {
      team_id_2_ = from.team_id_2_;
    }
    if (cached_has_bits & 0x00001000u) {
      team_1_wins_ = from.team_1_wins_;
    }
    if (cached_has_bits & 0x00002000u) {
      team_2_wins_ = from.team_2_wins_;
    }
    if (cached_has_bits & 0x00004000u) {
      has_started_ = from.has_started_;
    }
    if (cached_has_bits & 0x00008000u) {
      is_completed_ = from.is_completed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_actual_time(from.actual_time());
  }
}

void CMsgDOTALeagueNode::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeagueNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueNode::CopyFrom(const CMsgDOTALeagueNode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeagueNode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueNode::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueNode::Swap(CMsgDOTALeagueNode* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeagueNode::InternalSwap(CMsgDOTALeagueNode* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&matches_)->InternalSwap(CastToBase(&other->matches_));
  stream_ids_.InternalSwap(&other->stream_ids_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(node_id_, other->node_id_);
  swap(node_group_id_, other->node_group_id_);
  swap(winning_node_id_, other->winning_node_id_);
  swap(losing_node_id_, other->losing_node_id_);
  swap(incoming_node_id_1_, other->incoming_node_id_1_);
  swap(incoming_node_id_2_, other->incoming_node_id_2_);
  swap(node_type_, other->node_type_);
  swap(scheduled_time_, other->scheduled_time_);
  swap(series_id_, other->series_id_);
  swap(team_id_1_, other->team_id_1_);
  swap(team_id_2_, other->team_id_2_);
  swap(team_1_wins_, other->team_1_wins_);
  swap(team_2_wins_, other->team_2_wins_);
  swap(has_started_, other->has_started_);
  swap(is_completed_, other->is_completed_);
  swap(actual_time_, other->actual_time_);
}

::google::protobuf::Metadata CMsgDOTALeagueNode::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeagueNodeGroup_TeamStanding::InitAsDefaultInstance() {
}
class CMsgDOTALeagueNodeGroup_TeamStanding::HasBitSetters {
 public:
  static void set_has_standing(CMsgDOTALeagueNodeGroup_TeamStanding* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_team_id(CMsgDOTALeagueNodeGroup_TeamStanding* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_team_name(CMsgDOTALeagueNodeGroup_TeamStanding* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_tag(CMsgDOTALeagueNodeGroup_TeamStanding* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_team_logo(CMsgDOTALeagueNodeGroup_TeamStanding* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_team_logo_url(CMsgDOTALeagueNodeGroup_TeamStanding* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_wins(CMsgDOTALeagueNodeGroup_TeamStanding* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_losses(CMsgDOTALeagueNodeGroup_TeamStanding* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_score(CMsgDOTALeagueNodeGroup_TeamStanding* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeagueNodeGroup_TeamStanding::kStandingFieldNumber;
const int CMsgDOTALeagueNodeGroup_TeamStanding::kTeamIdFieldNumber;
const int CMsgDOTALeagueNodeGroup_TeamStanding::kTeamNameFieldNumber;
const int CMsgDOTALeagueNodeGroup_TeamStanding::kTeamTagFieldNumber;
const int CMsgDOTALeagueNodeGroup_TeamStanding::kTeamLogoFieldNumber;
const int CMsgDOTALeagueNodeGroup_TeamStanding::kTeamLogoUrlFieldNumber;
const int CMsgDOTALeagueNodeGroup_TeamStanding::kWinsFieldNumber;
const int CMsgDOTALeagueNodeGroup_TeamStanding::kLossesFieldNumber;
const int CMsgDOTALeagueNodeGroup_TeamStanding::kScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeagueNodeGroup_TeamStanding::CMsgDOTALeagueNodeGroup_TeamStanding()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding)
}
CMsgDOTALeagueNodeGroup_TeamStanding::CMsgDOTALeagueNodeGroup_TeamStanding(const CMsgDOTALeagueNodeGroup_TeamStanding& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_tag()) {
    team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_tag_);
  }
  team_logo_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_logo_url()) {
    team_logo_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_logo_url_);
  }
  ::memcpy(&standing_, &from.standing_,
    static_cast<size_t>(reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&standing_)) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding)
}

void CMsgDOTALeagueNodeGroup_TeamStanding::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTALeagueNodeGroup_TeamStanding_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_tag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_logo_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&standing_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&standing_)) + sizeof(score_));
}

CMsgDOTALeagueNodeGroup_TeamStanding::~CMsgDOTALeagueNodeGroup_TeamStanding() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding)
  SharedDtor();
}

void CMsgDOTALeagueNodeGroup_TeamStanding::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_tag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_logo_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALeagueNodeGroup_TeamStanding::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeagueNodeGroup_TeamStanding& CMsgDOTALeagueNodeGroup_TeamStanding::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeagueNodeGroup_TeamStanding_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeagueNodeGroup_TeamStanding::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      team_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      team_tag_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      team_logo_url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&standing_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&losses_) -
        reinterpret_cast<char*>(&standing_)) + sizeof(losses_));
  }
  score_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeagueNodeGroup_TeamStanding::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeagueNodeGroup_TeamStanding*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 standing = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_standing(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string team_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding.team_name");
        object = msg->mutable_team_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string team_tag = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding.team_tag");
        object = msg->mutable_team_tag();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 team_logo = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_team_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string team_logo_url = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding.team_logo_url");
        object = msg->mutable_team_logo_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 wins = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_wins(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 losses = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_losses(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int64 score = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeagueNodeGroup_TeamStanding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 standing = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_standing(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &standing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), static_cast<int>(this->team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_tag = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_tag().data(), static_cast<int>(this->team_tag().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding.team_tag");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 team_logo = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_team_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &team_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_logo_url = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_logo_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_logo_url().data(), static_cast<int>(this->team_logo_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding.team_logo_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wins = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_wins(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 losses = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_losses(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losses_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 score = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeagueNodeGroup_TeamStanding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 standing = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->standing(), output);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->team_id(), output);
  }

  // optional string team_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_name(), output);
  }

  // optional string team_tag = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), static_cast<int>(this->team_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding.team_tag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->team_tag(), output);
  }

  // optional uint64 team_logo = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->team_logo(), output);
  }

  // optional string team_logo_url = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_logo_url().data(), static_cast<int>(this->team_logo_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding.team_logo_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->team_logo_url(), output);
  }

  // optional uint32 wins = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->wins(), output);
  }

  // optional uint32 losses = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->losses(), output);
  }

  // optional int64 score = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding)
}

::google::protobuf::uint8* CMsgDOTALeagueNodeGroup_TeamStanding::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 standing = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->standing(), target);
  }

  // optional uint32 team_id = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->team_id(), target);
  }

  // optional string team_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_name(), target);
  }

  // optional string team_tag = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_tag().data(), static_cast<int>(this->team_tag().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding.team_tag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->team_tag(), target);
  }

  // optional uint64 team_logo = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->team_logo(), target);
  }

  // optional string team_logo_url = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_logo_url().data(), static_cast<int>(this->team_logo_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding.team_logo_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->team_logo_url(), target);
  }

  // optional uint32 wins = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->wins(), target);
  }

  // optional uint32 losses = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->losses(), target);
  }

  // optional int64 score = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding)
  return target;
}

size_t CMsgDOTALeagueNodeGroup_TeamStanding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string team_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional string team_tag = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_tag());
    }

    // optional string team_logo_url = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_logo_url());
    }

    // optional uint32 standing = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->standing());
    }

    // optional uint32 team_id = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint64 team_logo = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->team_logo());
    }

    // optional uint32 wins = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wins());
    }

    // optional uint32 losses = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losses());
    }

  }
  // optional int64 score = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->score());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueNodeGroup_TeamStanding::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueNodeGroup_TeamStanding* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeagueNodeGroup_TeamStanding>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueNodeGroup_TeamStanding::MergeFrom(const CMsgDOTALeagueNodeGroup_TeamStanding& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      team_tag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_tag_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      team_logo_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_logo_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      standing_ = from.standing_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_logo_ = from.team_logo_;
    }
    if (cached_has_bits & 0x00000040u) {
      wins_ = from.wins_;
    }
    if (cached_has_bits & 0x00000080u) {
      losses_ = from.losses_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_score(from.score());
  }
}

void CMsgDOTALeagueNodeGroup_TeamStanding::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueNodeGroup_TeamStanding::CopyFrom(const CMsgDOTALeagueNodeGroup_TeamStanding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueNodeGroup_TeamStanding::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueNodeGroup_TeamStanding::Swap(CMsgDOTALeagueNodeGroup_TeamStanding* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeagueNodeGroup_TeamStanding::InternalSwap(CMsgDOTALeagueNodeGroup_TeamStanding* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_name_.Swap(&other->team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team_tag_.Swap(&other->team_tag_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team_logo_url_.Swap(&other->team_logo_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(standing_, other->standing_);
  swap(team_id_, other->team_id_);
  swap(team_logo_, other->team_logo_);
  swap(wins_, other->wins_);
  swap(losses_, other->losses_);
  swap(score_, other->score_);
}

::google::protobuf::Metadata CMsgDOTALeagueNodeGroup_TeamStanding::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeagueNodeGroup::InitAsDefaultInstance() {
}
class CMsgDOTALeagueNodeGroup::HasBitSetters {
 public:
  static void set_has_name(CMsgDOTALeagueNodeGroup* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_node_group_id(CMsgDOTALeagueNodeGroup* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_parent_node_group_id(CMsgDOTALeagueNodeGroup* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_advancing_node_group_id(CMsgDOTALeagueNodeGroup* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_advancing_team_count(CMsgDOTALeagueNodeGroup* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_team_count(CMsgDOTALeagueNodeGroup* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_node_group_type(CMsgDOTALeagueNodeGroup* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_default_node_type(CMsgDOTALeagueNodeGroup* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_round(CMsgDOTALeagueNodeGroup* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_max_rounds(CMsgDOTALeagueNodeGroup* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_is_tiebreaker(CMsgDOTALeagueNodeGroup* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_is_final_group(CMsgDOTALeagueNodeGroup* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_is_completed(CMsgDOTALeagueNodeGroup* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_phase(CMsgDOTALeagueNodeGroup* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_region(CMsgDOTALeagueNodeGroup* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_start_time(CMsgDOTALeagueNodeGroup* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_end_time(CMsgDOTALeagueNodeGroup* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeagueNodeGroup::kNameFieldNumber;
const int CMsgDOTALeagueNodeGroup::kNodeGroupIdFieldNumber;
const int CMsgDOTALeagueNodeGroup::kParentNodeGroupIdFieldNumber;
const int CMsgDOTALeagueNodeGroup::kIncomingNodeGroupIdsFieldNumber;
const int CMsgDOTALeagueNodeGroup::kAdvancingNodeGroupIdFieldNumber;
const int CMsgDOTALeagueNodeGroup::kAdvancingTeamCountFieldNumber;
const int CMsgDOTALeagueNodeGroup::kTeamCountFieldNumber;
const int CMsgDOTALeagueNodeGroup::kNodeGroupTypeFieldNumber;
const int CMsgDOTALeagueNodeGroup::kDefaultNodeTypeFieldNumber;
const int CMsgDOTALeagueNodeGroup::kRoundFieldNumber;
const int CMsgDOTALeagueNodeGroup::kMaxRoundsFieldNumber;
const int CMsgDOTALeagueNodeGroup::kIsTiebreakerFieldNumber;
const int CMsgDOTALeagueNodeGroup::kIsFinalGroupFieldNumber;
const int CMsgDOTALeagueNodeGroup::kIsCompletedFieldNumber;
const int CMsgDOTALeagueNodeGroup::kPhaseFieldNumber;
const int CMsgDOTALeagueNodeGroup::kRegionFieldNumber;
const int CMsgDOTALeagueNodeGroup::kStartTimeFieldNumber;
const int CMsgDOTALeagueNodeGroup::kEndTimeFieldNumber;
const int CMsgDOTALeagueNodeGroup::kTeamStandingsFieldNumber;
const int CMsgDOTALeagueNodeGroup::kNodesFieldNumber;
const int CMsgDOTALeagueNodeGroup::kNodeGroupsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeagueNodeGroup::CMsgDOTALeagueNodeGroup()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeagueNodeGroup)
}
CMsgDOTALeagueNodeGroup::CMsgDOTALeagueNodeGroup(const CMsgDOTALeagueNodeGroup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      incoming_node_group_ids_(from.incoming_node_group_ids_),
      team_standings_(from.team_standings_),
      nodes_(from.nodes_),
      node_groups_(from.node_groups_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&node_group_id_, &from.node_group_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&end_time_) -
    reinterpret_cast<char*>(&node_group_id_)) + sizeof(end_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeagueNodeGroup)
}

void CMsgDOTALeagueNodeGroup::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTALeagueNodeGroup_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_group_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&end_time_) -
      reinterpret_cast<char*>(&node_group_id_)) + sizeof(end_time_));
}

CMsgDOTALeagueNodeGroup::~CMsgDOTALeagueNodeGroup() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeagueNodeGroup)
  SharedDtor();
}

void CMsgDOTALeagueNodeGroup::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALeagueNodeGroup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeagueNodeGroup& CMsgDOTALeagueNodeGroup::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeagueNodeGroup_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeagueNodeGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeagueNodeGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  incoming_node_group_ids_.Clear();
  team_standings_.Clear();
  nodes_.Clear();
  node_groups_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&node_group_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&default_node_type_) -
        reinterpret_cast<char*>(&node_group_id_)) + sizeof(default_node_type_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&round_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_time_) -
        reinterpret_cast<char*>(&round_)) + sizeof(start_time_));
  }
  end_time_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeagueNodeGroup::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeagueNodeGroup*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTALeagueNodeGroup.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 node_group_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_node_group_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 parent_node_group_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_parent_node_group_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 incoming_node_group_ids = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 32) {
          do {
            msg->add_incoming_node_group_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_incoming_node_group_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 advancing_node_group_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_advancing_node_group_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 advancing_team_count = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_advancing_team_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_count = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_team_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.ELeagueNodeGroupType node_group_type = 8 [default = INVALID_GROUP_TYPE];
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ELeagueNodeGroupType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(8, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_node_group_type(static_cast<::proto::dota::ELeagueNodeGroupType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.ELeagueNodeType default_node_type = 9 [default = INVALID_NODE_TYPE];
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ELeagueNodeType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(9, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_default_node_type(static_cast<::proto::dota::ELeagueNodeType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 round = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_round(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 max_rounds = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_max_rounds(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_tiebreaker = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_is_tiebreaker(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_final_group = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_is_final_group(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_completed = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_is_completed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding team_standings = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTALeagueNodeGroup_TeamStanding::_InternalParse;
          object = msg->add_team_standings();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 122 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgDOTALeagueNode nodes = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTALeagueNode::_InternalParse;
          object = msg->add_nodes();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 386 && (ptr += 2));
        break;
      }
      // repeated .proto.dota.CMsgDOTALeagueNodeGroup node_groups = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTALeagueNodeGroup::_InternalParse;
          object = msg->add_node_groups();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 394 && (ptr += 2));
        break;
      }
      // optional .proto.dota.ELeaguePhase phase = 18 [default = LEAGUE_PHASE_UNSET];
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ELeaguePhase_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(18, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_phase(static_cast<::proto::dota::ELeaguePhase>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.ELeagueRegion region = 19 [default = LEAGUE_REGION_UNSET];
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ELeagueRegion_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(19, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_region(static_cast<::proto::dota::ELeagueRegion>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 start_time = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_start_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 end_time = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_end_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeagueNodeGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeagueNodeGroup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTALeagueNodeGroup.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 node_group_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_node_group_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 parent_node_group_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_parent_node_group_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parent_node_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 incoming_node_group_ids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_incoming_node_group_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_incoming_node_group_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 advancing_node_group_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_advancing_node_group_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advancing_node_group_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 advancing_team_count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_advancing_team_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &advancing_team_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_team_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ELeagueNodeGroupType node_group_type = 8 [default = INVALID_GROUP_TYPE];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ELeagueNodeGroupType_IsValid(value)) {
            set_node_group_type(static_cast< ::proto::dota::ELeagueNodeGroupType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                8, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ELeagueNodeType default_node_type = 9 [default = INVALID_NODE_TYPE];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ELeagueNodeType_IsValid(value)) {
            set_default_node_type(static_cast< ::proto::dota::ELeagueNodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                9, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 round = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_round(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_rounds = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_max_rounds(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_rounds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_tiebreaker = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_is_tiebreaker(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_tiebreaker_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_final_group = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_is_final_group(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_final_group_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_completed = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_is_completed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_completed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding team_standings = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_team_standings()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTALeagueNode nodes = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTALeagueNodeGroup node_groups = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_node_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ELeaguePhase phase = 18 [default = LEAGUE_PHASE_UNSET];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ELeaguePhase_IsValid(value)) {
            set_phase(static_cast< ::proto::dota::ELeaguePhase >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                18, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ELeagueRegion region = 19 [default = LEAGUE_REGION_UNSET];
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ELeagueRegion_IsValid(value)) {
            set_region(static_cast< ::proto::dota::ELeagueRegion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                19, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_time = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_start_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 end_time = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_end_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeagueNodeGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeagueNodeGroup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeagueNodeGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeagueNodeGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeagueNodeGroup.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint32 node_group_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->node_group_id(), output);
  }

  // optional uint32 parent_node_group_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->parent_node_group_id(), output);
  }

  // repeated uint32 incoming_node_group_ids = 4;
  for (int i = 0, n = this->incoming_node_group_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->incoming_node_group_ids(i), output);
  }

  // optional uint32 advancing_node_group_id = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->advancing_node_group_id(), output);
  }

  // optional uint32 advancing_team_count = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->advancing_team_count(), output);
  }

  // optional uint32 team_count = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->team_count(), output);
  }

  // optional .proto.dota.ELeagueNodeGroupType node_group_type = 8 [default = INVALID_GROUP_TYPE];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->node_group_type(), output);
  }

  // optional .proto.dota.ELeagueNodeType default_node_type = 9 [default = INVALID_NODE_TYPE];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->default_node_type(), output);
  }

  // optional uint32 round = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->round(), output);
  }

  // optional uint32 max_rounds = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->max_rounds(), output);
  }

  // optional bool is_tiebreaker = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_tiebreaker(), output);
  }

  // optional bool is_final_group = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_final_group(), output);
  }

  // optional bool is_completed = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_completed(), output);
  }

  // repeated .proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding team_standings = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_standings_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15,
      this->team_standings(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgDOTALeagueNode nodes = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16,
      this->nodes(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgDOTALeagueNodeGroup node_groups = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_groups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17,
      this->node_groups(static_cast<int>(i)),
      output);
  }

  // optional .proto.dota.ELeaguePhase phase = 18 [default = LEAGUE_PHASE_UNSET];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->phase(), output);
  }

  // optional .proto.dota.ELeagueRegion region = 19 [default = LEAGUE_REGION_UNSET];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      19, this->region(), output);
  }

  // optional uint32 start_time = 20;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->start_time(), output);
  }

  // optional uint32 end_time = 21;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->end_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeagueNodeGroup)
}

::google::protobuf::uint8* CMsgDOTALeagueNodeGroup::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeagueNodeGroup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeagueNodeGroup.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint32 node_group_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->node_group_id(), target);
  }

  // optional uint32 parent_node_group_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->parent_node_group_id(), target);
  }

  // repeated uint32 incoming_node_group_ids = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->incoming_node_group_ids_, target);

  // optional uint32 advancing_node_group_id = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->advancing_node_group_id(), target);
  }

  // optional uint32 advancing_team_count = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->advancing_team_count(), target);
  }

  // optional uint32 team_count = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->team_count(), target);
  }

  // optional .proto.dota.ELeagueNodeGroupType node_group_type = 8 [default = INVALID_GROUP_TYPE];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->node_group_type(), target);
  }

  // optional .proto.dota.ELeagueNodeType default_node_type = 9 [default = INVALID_NODE_TYPE];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->default_node_type(), target);
  }

  // optional uint32 round = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->round(), target);
  }

  // optional uint32 max_rounds = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->max_rounds(), target);
  }

  // optional bool is_tiebreaker = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->is_tiebreaker(), target);
  }

  // optional bool is_final_group = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->is_final_group(), target);
  }

  // optional bool is_completed = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_completed(), target);
  }

  // repeated .proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding team_standings = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->team_standings_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->team_standings(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgDOTALeagueNode nodes = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->nodes(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgDOTALeagueNodeGroup node_groups = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_groups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->node_groups(static_cast<int>(i)), target);
  }

  // optional .proto.dota.ELeaguePhase phase = 18 [default = LEAGUE_PHASE_UNSET];
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      18, this->phase(), target);
  }

  // optional .proto.dota.ELeagueRegion region = 19 [default = LEAGUE_REGION_UNSET];
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      19, this->region(), target);
  }

  // optional uint32 start_time = 20;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->start_time(), target);
  }

  // optional uint32 end_time = 21;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->end_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeagueNodeGroup)
  return target;
}

size_t CMsgDOTALeagueNodeGroup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeagueNodeGroup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 incoming_node_group_ids = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->incoming_node_group_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->incoming_node_group_ids_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CMsgDOTALeagueNodeGroup.TeamStanding team_standings = 15;
  {
    unsigned int count = static_cast<unsigned int>(this->team_standings_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->team_standings(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTALeagueNode nodes = 16;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nodes(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTALeagueNodeGroup node_groups = 17;
  {
    unsigned int count = static_cast<unsigned int>(this->node_groups_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->node_groups(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 node_group_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_group_id());
    }

    // optional uint32 parent_node_group_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parent_node_group_id());
    }

    // optional uint32 advancing_node_group_id = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advancing_node_group_id());
    }

    // optional uint32 advancing_team_count = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->advancing_team_count());
    }

    // optional uint32 team_count = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_count());
    }

    // optional .proto.dota.ELeagueNodeGroupType node_group_type = 8 [default = INVALID_GROUP_TYPE];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->node_group_type());
    }

    // optional .proto.dota.ELeagueNodeType default_node_type = 9 [default = INVALID_NODE_TYPE];
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->default_node_type());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 round = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->round());
    }

    // optional uint32 max_rounds = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_rounds());
    }

    // optional bool is_tiebreaker = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 1;
    }

    // optional bool is_final_group = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional bool is_completed = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 1;
    }

    // optional .proto.dota.ELeaguePhase phase = 18 [default = LEAGUE_PHASE_UNSET];
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->phase());
    }

    // optional .proto.dota.ELeagueRegion region = 19 [default = LEAGUE_REGION_UNSET];
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->region());
    }

    // optional uint32 start_time = 20;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

  }
  // optional uint32 end_time = 21;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->end_time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueNodeGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeagueNodeGroup)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueNodeGroup* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeagueNodeGroup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeagueNodeGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeagueNodeGroup)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueNodeGroup::MergeFrom(const CMsgDOTALeagueNodeGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeagueNodeGroup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  incoming_node_group_ids_.MergeFrom(from.incoming_node_group_ids_);
  team_standings_.MergeFrom(from.team_standings_);
  nodes_.MergeFrom(from.nodes_);
  node_groups_.MergeFrom(from.node_groups_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      node_group_id_ = from.node_group_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      parent_node_group_id_ = from.parent_node_group_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      advancing_node_group_id_ = from.advancing_node_group_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      advancing_team_count_ = from.advancing_team_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      team_count_ = from.team_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      node_group_type_ = from.node_group_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      default_node_type_ = from.default_node_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      round_ = from.round_;
    }
    if (cached_has_bits & 0x00000200u) {
      max_rounds_ = from.max_rounds_;
    }
    if (cached_has_bits & 0x00000400u) {
      is_tiebreaker_ = from.is_tiebreaker_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_final_group_ = from.is_final_group_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_completed_ = from.is_completed_;
    }
    if (cached_has_bits & 0x00002000u) {
      phase_ = from.phase_;
    }
    if (cached_has_bits & 0x00004000u) {
      region_ = from.region_;
    }
    if (cached_has_bits & 0x00008000u) {
      start_time_ = from.start_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_end_time(from.end_time());
  }
}

void CMsgDOTALeagueNodeGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeagueNodeGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueNodeGroup::CopyFrom(const CMsgDOTALeagueNodeGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeagueNodeGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueNodeGroup::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueNodeGroup::Swap(CMsgDOTALeagueNodeGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeagueNodeGroup::InternalSwap(CMsgDOTALeagueNodeGroup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  incoming_node_group_ids_.InternalSwap(&other->incoming_node_group_ids_);
  CastToBase(&team_standings_)->InternalSwap(CastToBase(&other->team_standings_));
  CastToBase(&nodes_)->InternalSwap(CastToBase(&other->nodes_));
  CastToBase(&node_groups_)->InternalSwap(CastToBase(&other->node_groups_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(node_group_id_, other->node_group_id_);
  swap(parent_node_group_id_, other->parent_node_group_id_);
  swap(advancing_node_group_id_, other->advancing_node_group_id_);
  swap(advancing_team_count_, other->advancing_team_count_);
  swap(team_count_, other->team_count_);
  swap(node_group_type_, other->node_group_type_);
  swap(default_node_type_, other->default_node_type_);
  swap(round_, other->round_);
  swap(max_rounds_, other->max_rounds_);
  swap(is_tiebreaker_, other->is_tiebreaker_);
  swap(is_final_group_, other->is_final_group_);
  swap(is_completed_, other->is_completed_);
  swap(phase_, other->phase_);
  swap(region_, other->region_);
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
}

::google::protobuf::Metadata CMsgDOTALeagueNodeGroup::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeague_Info::InitAsDefaultInstance() {
}
class CMsgDOTALeague_Info::HasBitSetters {
 public:
  static void set_has_league_id(CMsgDOTALeague_Info* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_name(CMsgDOTALeague_Info* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_tier(CMsgDOTALeague_Info* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_region(CMsgDOTALeague_Info* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_url(CMsgDOTALeague_Info* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_description(CMsgDOTALeague_Info* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_notes(CMsgDOTALeague_Info* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_start_timestamp(CMsgDOTALeague_Info* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_end_timestamp(CMsgDOTALeague_Info* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_pro_circuit_points(CMsgDOTALeague_Info* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_image_bits(CMsgDOTALeague_Info* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_status(CMsgDOTALeague_Info* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_most_recent_activity(CMsgDOTALeague_Info* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_registration_period(CMsgDOTALeague_Info* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeague_Info::kLeagueIdFieldNumber;
const int CMsgDOTALeague_Info::kNameFieldNumber;
const int CMsgDOTALeague_Info::kTierFieldNumber;
const int CMsgDOTALeague_Info::kRegionFieldNumber;
const int CMsgDOTALeague_Info::kUrlFieldNumber;
const int CMsgDOTALeague_Info::kDescriptionFieldNumber;
const int CMsgDOTALeague_Info::kNotesFieldNumber;
const int CMsgDOTALeague_Info::kStartTimestampFieldNumber;
const int CMsgDOTALeague_Info::kEndTimestampFieldNumber;
const int CMsgDOTALeague_Info::kProCircuitPointsFieldNumber;
const int CMsgDOTALeague_Info::kImageBitsFieldNumber;
const int CMsgDOTALeague_Info::kStatusFieldNumber;
const int CMsgDOTALeague_Info::kMostRecentActivityFieldNumber;
const int CMsgDOTALeague_Info::kRegistrationPeriodFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeague_Info::CMsgDOTALeague_Info()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeague.Info)
}
CMsgDOTALeague_Info::CMsgDOTALeague_Info(const CMsgDOTALeague_Info& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_url()) {
    url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  notes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_notes()) {
    notes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notes_);
  }
  ::memcpy(&league_id_, &from.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&registration_period_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(registration_period_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeague.Info)
}

void CMsgDOTALeague_Info::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTALeague_Info_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&league_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&registration_period_) -
      reinterpret_cast<char*>(&league_id_)) + sizeof(registration_period_));
}

CMsgDOTALeague_Info::~CMsgDOTALeague_Info() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeague.Info)
  SharedDtor();
}

void CMsgDOTALeague_Info::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  notes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALeague_Info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeague_Info& CMsgDOTALeague_Info::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeague_Info_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeague_Info::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeague.Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      notes_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&start_timestamp_) -
        reinterpret_cast<char*>(&league_id_)) + sizeof(start_timestamp_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&end_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&registration_period_) -
        reinterpret_cast<char*>(&end_timestamp_)) + sizeof(registration_period_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeague_Info::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeague_Info*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTALeague.Info.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .proto.dota.ELeagueTier tier = 3 [default = LEAGUE_TIER_UNSET];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ELeagueTier_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_tier(static_cast<::proto::dota::ELeagueTier>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.ELeagueRegion region = 4 [default = LEAGUE_REGION_UNSET];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ELeagueRegion_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_region(static_cast<::proto::dota::ELeagueRegion>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string url = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTALeague.Info.url");
        object = msg->mutable_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string description = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTALeague.Info.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string notes = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTALeague.Info.notes");
        object = msg->mutable_notes();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 start_timestamp = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_start_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 end_timestamp = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_end_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 pro_circuit_points = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_pro_circuit_points(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 image_bits = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_image_bits(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.ELeagueStatus status = 12 [default = LEAGUE_STATUS_UNSET];
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ELeagueStatus_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(12, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_status(static_cast<::proto::dota::ELeagueStatus>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 most_recent_activity = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_most_recent_activity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 registration_period = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_registration_period(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeague_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeague.Info)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTALeague.Info.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ELeagueTier tier = 3 [default = LEAGUE_TIER_UNSET];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ELeagueTier_IsValid(value)) {
            set_tier(static_cast< ::proto::dota::ELeagueTier >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ELeagueRegion region = 4 [default = LEAGUE_REGION_UNSET];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ELeagueRegion_IsValid(value)) {
            set_region(static_cast< ::proto::dota::ELeagueRegion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string url = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->url().data(), static_cast<int>(this->url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTALeague.Info.url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTALeague.Info.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string notes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notes()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->notes().data(), static_cast<int>(this->notes().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTALeague.Info.notes");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_timestamp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_start_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 end_timestamp = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_end_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 pro_circuit_points = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_pro_circuit_points(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pro_circuit_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 image_bits = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_image_bits(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &image_bits_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ELeagueStatus status = 12 [default = LEAGUE_STATUS_UNSET];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ELeagueStatus_IsValid(value)) {
            set_status(static_cast< ::proto::dota::ELeagueStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                12, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 most_recent_activity = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_most_recent_activity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &most_recent_activity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 registration_period = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_registration_period(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &registration_period_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeague.Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeague.Info)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeague_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeague.Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->league_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeague.Info.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .proto.dota.ELeagueTier tier = 3 [default = LEAGUE_TIER_UNSET];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->tier(), output);
  }

  // optional .proto.dota.ELeagueRegion region = 4 [default = LEAGUE_REGION_UNSET];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->region(), output);
  }

  // optional string url = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeague.Info.url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->url(), output);
  }

  // optional string description = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeague.Info.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->description(), output);
  }

  // optional string notes = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notes().data(), static_cast<int>(this->notes().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeague.Info.notes");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->notes(), output);
  }

  // optional uint32 start_timestamp = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->start_timestamp(), output);
  }

  // optional uint32 end_timestamp = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->end_timestamp(), output);
  }

  // optional uint32 pro_circuit_points = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->pro_circuit_points(), output);
  }

  // optional uint32 image_bits = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->image_bits(), output);
  }

  // optional .proto.dota.ELeagueStatus status = 12 [default = LEAGUE_STATUS_UNSET];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->status(), output);
  }

  // optional uint32 most_recent_activity = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->most_recent_activity(), output);
  }

  // optional uint32 registration_period = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->registration_period(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeague.Info)
}

::google::protobuf::uint8* CMsgDOTALeague_Info::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeague.Info)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->league_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeague.Info.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .proto.dota.ELeagueTier tier = 3 [default = LEAGUE_TIER_UNSET];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->tier(), target);
  }

  // optional .proto.dota.ELeagueRegion region = 4 [default = LEAGUE_REGION_UNSET];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->region(), target);
  }

  // optional string url = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->url().data(), static_cast<int>(this->url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeague.Info.url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->url(), target);
  }

  // optional string description = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeague.Info.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->description(), target);
  }

  // optional string notes = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->notes().data(), static_cast<int>(this->notes().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeague.Info.notes");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->notes(), target);
  }

  // optional uint32 start_timestamp = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->start_timestamp(), target);
  }

  // optional uint32 end_timestamp = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->end_timestamp(), target);
  }

  // optional uint32 pro_circuit_points = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->pro_circuit_points(), target);
  }

  // optional uint32 image_bits = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->image_bits(), target);
  }

  // optional .proto.dota.ELeagueStatus status = 12 [default = LEAGUE_STATUS_UNSET];
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->status(), target);
  }

  // optional uint32 most_recent_activity = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->most_recent_activity(), target);
  }

  // optional uint32 registration_period = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->registration_period(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeague.Info)
  return target;
}

size_t CMsgDOTALeague_Info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeague.Info)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string url = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url());
    }

    // optional string description = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string notes = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notes());
    }

    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional .proto.dota.ELeagueTier tier = 3 [default = LEAGUE_TIER_UNSET];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tier());
    }

    // optional .proto.dota.ELeagueRegion region = 4 [default = LEAGUE_REGION_UNSET];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->region());
    }

    // optional uint32 start_timestamp = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_timestamp());
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional uint32 end_timestamp = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_timestamp());
    }

    // optional uint32 pro_circuit_points = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pro_circuit_points());
    }

    // optional uint32 image_bits = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->image_bits());
    }

    // optional .proto.dota.ELeagueStatus status = 12 [default = LEAGUE_STATUS_UNSET];
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint32 most_recent_activity = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->most_recent_activity());
    }

    // optional uint32 registration_period = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->registration_period());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeague_Info::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeague.Info)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeague_Info* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeague_Info>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeague.Info)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeague.Info)
    MergeFrom(*source);
  }
}

void CMsgDOTALeague_Info::MergeFrom(const CMsgDOTALeague_Info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeague.Info)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.url_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      notes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.notes_);
    }
    if (cached_has_bits & 0x00000010u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      tier_ = from.tier_;
    }
    if (cached_has_bits & 0x00000040u) {
      region_ = from.region_;
    }
    if (cached_has_bits & 0x00000080u) {
      start_timestamp_ = from.start_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      end_timestamp_ = from.end_timestamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      pro_circuit_points_ = from.pro_circuit_points_;
    }
    if (cached_has_bits & 0x00000400u) {
      image_bits_ = from.image_bits_;
    }
    if (cached_has_bits & 0x00000800u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00001000u) {
      most_recent_activity_ = from.most_recent_activity_;
    }
    if (cached_has_bits & 0x00002000u) {
      registration_period_ = from.registration_period_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeague_Info::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeague.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeague_Info::CopyFrom(const CMsgDOTALeague_Info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeague.Info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeague_Info::IsInitialized() const {
  return true;
}

void CMsgDOTALeague_Info::Swap(CMsgDOTALeague_Info* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeague_Info::InternalSwap(CMsgDOTALeague_Info* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  url_.Swap(&other->url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  notes_.Swap(&other->notes_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(league_id_, other->league_id_);
  swap(tier_, other->tier_);
  swap(region_, other->region_);
  swap(start_timestamp_, other->start_timestamp_);
  swap(end_timestamp_, other->end_timestamp_);
  swap(pro_circuit_points_, other->pro_circuit_points_);
  swap(image_bits_, other->image_bits_);
  swap(status_, other->status_);
  swap(most_recent_activity_, other->most_recent_activity_);
  swap(registration_period_, other->registration_period_);
}

::google::protobuf::Metadata CMsgDOTALeague_Info::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeague_Admin::InitAsDefaultInstance() {
}
class CMsgDOTALeague_Admin::HasBitSetters {
 public:
  static void set_has_account_id(CMsgDOTALeague_Admin* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_is_primary(CMsgDOTALeague_Admin* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_email_address(CMsgDOTALeague_Admin* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeague_Admin::kAccountIdFieldNumber;
const int CMsgDOTALeague_Admin::kIsPrimaryFieldNumber;
const int CMsgDOTALeague_Admin::kEmailAddressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeague_Admin::CMsgDOTALeague_Admin()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeague.Admin)
}
CMsgDOTALeague_Admin::CMsgDOTALeague_Admin(const CMsgDOTALeague_Admin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  email_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_email_address()) {
    email_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_address_);
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_primary_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(is_primary_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeague.Admin)
}

void CMsgDOTALeague_Admin::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTALeague_Admin_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  email_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_primary_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(is_primary_));
}

CMsgDOTALeague_Admin::~CMsgDOTALeague_Admin() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeague.Admin)
  SharedDtor();
}

void CMsgDOTALeague_Admin::SharedDtor() {
  email_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALeague_Admin::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeague_Admin& CMsgDOTALeague_Admin::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeague_Admin_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeague_Admin::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeague.Admin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    email_address_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_primary_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(is_primary_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeague_Admin::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeague_Admin*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_primary = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_is_primary(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string email_address = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTALeague.Admin.email_address");
        object = msg->mutable_email_address();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeague_Admin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeague.Admin)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_primary = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_is_primary(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_primary_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string email_address = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email_address()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email_address().data(), static_cast<int>(this->email_address().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTALeague.Admin.email_address");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeague.Admin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeague.Admin)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeague_Admin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeague.Admin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional bool is_primary = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_primary(), output);
  }

  // optional string email_address = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email_address().data(), static_cast<int>(this->email_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeague.Admin.email_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->email_address(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeague.Admin)
}

::google::protobuf::uint8* CMsgDOTALeague_Admin::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeague.Admin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional bool is_primary = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_primary(), target);
  }

  // optional string email_address = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email_address().data(), static_cast<int>(this->email_address().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeague.Admin.email_address");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->email_address(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeague.Admin)
  return target;
}

size_t CMsgDOTALeague_Admin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeague.Admin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string email_address = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->email_address());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional bool is_primary = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeague_Admin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeague.Admin)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeague_Admin* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeague_Admin>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeague.Admin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeague.Admin)
    MergeFrom(*source);
  }
}

void CMsgDOTALeague_Admin::MergeFrom(const CMsgDOTALeague_Admin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeague.Admin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      email_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_address_);
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_primary_ = from.is_primary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeague_Admin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeague.Admin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeague_Admin::CopyFrom(const CMsgDOTALeague_Admin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeague.Admin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeague_Admin::IsInitialized() const {
  return true;
}

void CMsgDOTALeague_Admin::Swap(CMsgDOTALeague_Admin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeague_Admin::InternalSwap(CMsgDOTALeague_Admin* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  email_address_.Swap(&other->email_address_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_id_, other->account_id_);
  swap(is_primary_, other->is_primary_);
}

::google::protobuf::Metadata CMsgDOTALeague_Admin::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeague_PrizePoolItem::InitAsDefaultInstance() {
}
class CMsgDOTALeague_PrizePoolItem::HasBitSetters {
 public:
  static void set_has_item_def(CMsgDOTALeague_PrizePoolItem* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_sales_stop_timestamp(CMsgDOTALeague_PrizePoolItem* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_revenue_pct(CMsgDOTALeague_PrizePoolItem* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_revenue_cents_per_sale(CMsgDOTALeague_PrizePoolItem* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeague_PrizePoolItem::kItemDefFieldNumber;
const int CMsgDOTALeague_PrizePoolItem::kSalesStopTimestampFieldNumber;
const int CMsgDOTALeague_PrizePoolItem::kRevenuePctFieldNumber;
const int CMsgDOTALeague_PrizePoolItem::kRevenueCentsPerSaleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeague_PrizePoolItem::CMsgDOTALeague_PrizePoolItem()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeague.PrizePoolItem)
}
CMsgDOTALeague_PrizePoolItem::CMsgDOTALeague_PrizePoolItem(const CMsgDOTALeague_PrizePoolItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&item_def_, &from.item_def_,
    static_cast<size_t>(reinterpret_cast<char*>(&revenue_cents_per_sale_) -
    reinterpret_cast<char*>(&item_def_)) + sizeof(revenue_cents_per_sale_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeague.PrizePoolItem)
}

void CMsgDOTALeague_PrizePoolItem::SharedCtor() {
  ::memset(&item_def_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&revenue_cents_per_sale_) -
      reinterpret_cast<char*>(&item_def_)) + sizeof(revenue_cents_per_sale_));
}

CMsgDOTALeague_PrizePoolItem::~CMsgDOTALeague_PrizePoolItem() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeague.PrizePoolItem)
  SharedDtor();
}

void CMsgDOTALeague_PrizePoolItem::SharedDtor() {
}

void CMsgDOTALeague_PrizePoolItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeague_PrizePoolItem& CMsgDOTALeague_PrizePoolItem::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeague_PrizePoolItem_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeague_PrizePoolItem::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeague.PrizePoolItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&item_def_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&revenue_cents_per_sale_) -
        reinterpret_cast<char*>(&item_def_)) + sizeof(revenue_cents_per_sale_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeague_PrizePoolItem::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeague_PrizePoolItem*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 item_def = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_item_def(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 sales_stop_timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_sales_stop_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 revenue_pct = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_revenue_pct(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 revenue_cents_per_sale = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_revenue_cents_per_sale(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeague_PrizePoolItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeague.PrizePoolItem)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 item_def = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_item_def(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &item_def_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sales_stop_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_sales_stop_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sales_stop_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 revenue_pct = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_revenue_pct(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revenue_pct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 revenue_cents_per_sale = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_revenue_cents_per_sale(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &revenue_cents_per_sale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeague.PrizePoolItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeague.PrizePoolItem)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeague_PrizePoolItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeague.PrizePoolItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->item_def(), output);
  }

  // optional uint32 sales_stop_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sales_stop_timestamp(), output);
  }

  // optional uint32 revenue_pct = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->revenue_pct(), output);
  }

  // optional uint32 revenue_cents_per_sale = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->revenue_cents_per_sale(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeague.PrizePoolItem)
}

::google::protobuf::uint8* CMsgDOTALeague_PrizePoolItem::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeague.PrizePoolItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 item_def = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->item_def(), target);
  }

  // optional uint32 sales_stop_timestamp = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sales_stop_timestamp(), target);
  }

  // optional uint32 revenue_pct = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->revenue_pct(), target);
  }

  // optional uint32 revenue_cents_per_sale = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->revenue_cents_per_sale(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeague.PrizePoolItem)
  return target;
}

size_t CMsgDOTALeague_PrizePoolItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeague.PrizePoolItem)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 item_def = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->item_def());
    }

    // optional uint32 sales_stop_timestamp = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sales_stop_timestamp());
    }

    // optional uint32 revenue_pct = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->revenue_pct());
    }

    // optional uint32 revenue_cents_per_sale = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->revenue_cents_per_sale());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeague_PrizePoolItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeague.PrizePoolItem)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeague_PrizePoolItem* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeague_PrizePoolItem>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeague.PrizePoolItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeague.PrizePoolItem)
    MergeFrom(*source);
  }
}

void CMsgDOTALeague_PrizePoolItem::MergeFrom(const CMsgDOTALeague_PrizePoolItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeague.PrizePoolItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      item_def_ = from.item_def_;
    }
    if (cached_has_bits & 0x00000002u) {
      sales_stop_timestamp_ = from.sales_stop_timestamp_;
    }
    if (cached_has_bits & 0x00000004u) {
      revenue_pct_ = from.revenue_pct_;
    }
    if (cached_has_bits & 0x00000008u) {
      revenue_cents_per_sale_ = from.revenue_cents_per_sale_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeague_PrizePoolItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeague.PrizePoolItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeague_PrizePoolItem::CopyFrom(const CMsgDOTALeague_PrizePoolItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeague.PrizePoolItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeague_PrizePoolItem::IsInitialized() const {
  return true;
}

void CMsgDOTALeague_PrizePoolItem::Swap(CMsgDOTALeague_PrizePoolItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeague_PrizePoolItem::InternalSwap(CMsgDOTALeague_PrizePoolItem* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(item_def_, other->item_def_);
  swap(sales_stop_timestamp_, other->sales_stop_timestamp_);
  swap(revenue_pct_, other->revenue_pct_);
  swap(revenue_cents_per_sale_, other->revenue_cents_per_sale_);
}

::google::protobuf::Metadata CMsgDOTALeague_PrizePoolItem::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeague_PrizePool::InitAsDefaultInstance() {
}
class CMsgDOTALeague_PrizePool::HasBitSetters {
 public:
  static void set_has_base_prize_pool(CMsgDOTALeague_PrizePool* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_total_prize_pool(CMsgDOTALeague_PrizePool* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeague_PrizePool::kBasePrizePoolFieldNumber;
const int CMsgDOTALeague_PrizePool::kTotalPrizePoolFieldNumber;
const int CMsgDOTALeague_PrizePool::kPrizeSplitPctX100FieldNumber;
const int CMsgDOTALeague_PrizePool::kPrizePoolItemsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeague_PrizePool::CMsgDOTALeague_PrizePool()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeague.PrizePool)
}
CMsgDOTALeague_PrizePool::CMsgDOTALeague_PrizePool(const CMsgDOTALeague_PrizePool& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      prize_split_pct_x100_(from.prize_split_pct_x100_),
      prize_pool_items_(from.prize_pool_items_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&base_prize_pool_, &from.base_prize_pool_,
    static_cast<size_t>(reinterpret_cast<char*>(&total_prize_pool_) -
    reinterpret_cast<char*>(&base_prize_pool_)) + sizeof(total_prize_pool_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeague.PrizePool)
}

void CMsgDOTALeague_PrizePool::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTALeague_PrizePool_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::memset(&base_prize_pool_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&total_prize_pool_) -
      reinterpret_cast<char*>(&base_prize_pool_)) + sizeof(total_prize_pool_));
}

CMsgDOTALeague_PrizePool::~CMsgDOTALeague_PrizePool() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeague.PrizePool)
  SharedDtor();
}

void CMsgDOTALeague_PrizePool::SharedDtor() {
}

void CMsgDOTALeague_PrizePool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeague_PrizePool& CMsgDOTALeague_PrizePool::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeague_PrizePool_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeague_PrizePool::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeague.PrizePool)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  prize_split_pct_x100_.Clear();
  prize_pool_items_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&base_prize_pool_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&total_prize_pool_) -
        reinterpret_cast<char*>(&base_prize_pool_)) + sizeof(total_prize_pool_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeague_PrizePool::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeague_PrizePool*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 base_prize_pool = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_base_prize_pool(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 total_prize_pool = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_total_prize_pool(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 prize_split_pct_x100 = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) == 24) {
          do {
            msg->add_prize_split_pct_x100(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 24 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_prize_split_pct_x100();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated .proto.dota.CMsgDOTALeague.PrizePoolItem prize_pool_items = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTALeague_PrizePoolItem::_InternalParse;
          object = msg->add_prize_pool_items();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeague_PrizePool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeague.PrizePool)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 base_prize_pool = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_base_prize_pool(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &base_prize_pool_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_prize_pool = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_total_prize_pool(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_prize_pool_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 prize_split_pct_x100 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_prize_split_pct_x100())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_prize_split_pct_x100())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTALeague.PrizePoolItem prize_pool_items = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_prize_pool_items()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeague.PrizePool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeague.PrizePool)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeague_PrizePool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeague.PrizePool)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 base_prize_pool = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->base_prize_pool(), output);
  }

  // optional uint32 total_prize_pool = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->total_prize_pool(), output);
  }

  // repeated uint32 prize_split_pct_x100 = 3;
  for (int i = 0, n = this->prize_split_pct_x100_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->prize_split_pct_x100(i), output);
  }

  // repeated .proto.dota.CMsgDOTALeague.PrizePoolItem prize_pool_items = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prize_pool_items_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->prize_pool_items(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeague.PrizePool)
}

::google::protobuf::uint8* CMsgDOTALeague_PrizePool::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeague.PrizePool)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 base_prize_pool = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->base_prize_pool(), target);
  }

  // optional uint32 total_prize_pool = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->total_prize_pool(), target);
  }

  // repeated uint32 prize_split_pct_x100 = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->prize_split_pct_x100_, target);

  // repeated .proto.dota.CMsgDOTALeague.PrizePoolItem prize_pool_items = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->prize_pool_items_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->prize_pool_items(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeague.PrizePool)
  return target;
}

size_t CMsgDOTALeague_PrizePool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeague.PrizePool)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 prize_split_pct_x100 = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->prize_split_pct_x100_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->prize_split_pct_x100_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CMsgDOTALeague.PrizePoolItem prize_pool_items = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->prize_pool_items_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->prize_pool_items(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 base_prize_pool = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->base_prize_pool());
    }

    // optional uint32 total_prize_pool = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_prize_pool());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeague_PrizePool::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeague.PrizePool)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeague_PrizePool* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeague_PrizePool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeague.PrizePool)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeague.PrizePool)
    MergeFrom(*source);
  }
}

void CMsgDOTALeague_PrizePool::MergeFrom(const CMsgDOTALeague_PrizePool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeague.PrizePool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  prize_split_pct_x100_.MergeFrom(from.prize_split_pct_x100_);
  prize_pool_items_.MergeFrom(from.prize_pool_items_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      base_prize_pool_ = from.base_prize_pool_;
    }
    if (cached_has_bits & 0x00000002u) {
      total_prize_pool_ = from.total_prize_pool_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeague_PrizePool::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeague.PrizePool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeague_PrizePool::CopyFrom(const CMsgDOTALeague_PrizePool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeague.PrizePool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeague_PrizePool::IsInitialized() const {
  return true;
}

void CMsgDOTALeague_PrizePool::Swap(CMsgDOTALeague_PrizePool* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeague_PrizePool::InternalSwap(CMsgDOTALeague_PrizePool* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  prize_split_pct_x100_.InternalSwap(&other->prize_split_pct_x100_);
  CastToBase(&prize_pool_items_)->InternalSwap(CastToBase(&other->prize_pool_items_));
  swap(base_prize_pool_, other->base_prize_pool_);
  swap(total_prize_pool_, other->total_prize_pool_);
}

::google::protobuf::Metadata CMsgDOTALeague_PrizePool::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeague_Stream::InitAsDefaultInstance() {
}
class CMsgDOTALeague_Stream::HasBitSetters {
 public:
  static void set_has_stream_id(CMsgDOTALeague_Stream* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_language(CMsgDOTALeague_Stream* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_name(CMsgDOTALeague_Stream* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_broadcast_provider(CMsgDOTALeague_Stream* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_stream_url(CMsgDOTALeague_Stream* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_vod_url(CMsgDOTALeague_Stream* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeague_Stream::kStreamIdFieldNumber;
const int CMsgDOTALeague_Stream::kLanguageFieldNumber;
const int CMsgDOTALeague_Stream::kNameFieldNumber;
const int CMsgDOTALeague_Stream::kBroadcastProviderFieldNumber;
const int CMsgDOTALeague_Stream::kStreamUrlFieldNumber;
const int CMsgDOTALeague_Stream::kVodUrlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeague_Stream::CMsgDOTALeague_Stream()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeague.Stream)
}
CMsgDOTALeague_Stream::CMsgDOTALeague_Stream(const CMsgDOTALeague_Stream& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  stream_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_stream_url()) {
    stream_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_url_);
  }
  vod_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_vod_url()) {
    vod_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vod_url_);
  }
  ::memcpy(&stream_id_, &from.stream_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&broadcast_provider_) -
    reinterpret_cast<char*>(&stream_id_)) + sizeof(broadcast_provider_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeague.Stream)
}

void CMsgDOTALeague_Stream::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTALeague_Stream_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vod_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stream_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&broadcast_provider_) -
      reinterpret_cast<char*>(&stream_id_)) + sizeof(broadcast_provider_));
}

CMsgDOTALeague_Stream::~CMsgDOTALeague_Stream() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeague.Stream)
  SharedDtor();
}

void CMsgDOTALeague_Stream::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vod_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALeague_Stream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeague_Stream& CMsgDOTALeague_Stream::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeague_Stream_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeague_Stream::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeague.Stream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      stream_url_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      vod_url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&stream_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&broadcast_provider_) -
        reinterpret_cast<char*>(&stream_id_)) + sizeof(broadcast_provider_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeague_Stream::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeague_Stream*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 stream_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_stream_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 language = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_language(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTALeague.Stream.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .proto.dota.ELeagueBroadcastProvider broadcast_provider = 4 [default = LEAGUE_BROADCAST_UNKNOWN];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ELeagueBroadcastProvider_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_broadcast_provider(static_cast<::proto::dota::ELeagueBroadcastProvider>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string stream_url = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTALeague.Stream.stream_url");
        object = msg->mutable_stream_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string vod_url = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTALeague.Stream.vod_url");
        object = msg->mutable_vod_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeague_Stream::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeague.Stream)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 stream_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_stream_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stream_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 language = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_language(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &language_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTALeague.Stream.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ELeagueBroadcastProvider broadcast_provider = 4 [default = LEAGUE_BROADCAST_UNKNOWN];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ELeagueBroadcastProvider_IsValid(value)) {
            set_broadcast_provider(static_cast< ::proto::dota::ELeagueBroadcastProvider >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string stream_url = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stream_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stream_url().data(), static_cast<int>(this->stream_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTALeague.Stream.stream_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string vod_url = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vod_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vod_url().data(), static_cast<int>(this->vod_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTALeague.Stream.vod_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeague.Stream)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeague.Stream)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeague_Stream::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeague.Stream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stream_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->stream_id(), output);
  }

  // optional uint32 language = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->language(), output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeague.Stream.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional .proto.dota.ELeagueBroadcastProvider broadcast_provider = 4 [default = LEAGUE_BROADCAST_UNKNOWN];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->broadcast_provider(), output);
  }

  // optional string stream_url = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_url().data(), static_cast<int>(this->stream_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeague.Stream.stream_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->stream_url(), output);
  }

  // optional string vod_url = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vod_url().data(), static_cast<int>(this->vod_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeague.Stream.vod_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->vod_url(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeague.Stream)
}

::google::protobuf::uint8* CMsgDOTALeague_Stream::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeague.Stream)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 stream_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->stream_id(), target);
  }

  // optional uint32 language = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->language(), target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeague.Stream.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional .proto.dota.ELeagueBroadcastProvider broadcast_provider = 4 [default = LEAGUE_BROADCAST_UNKNOWN];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->broadcast_provider(), target);
  }

  // optional string stream_url = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stream_url().data(), static_cast<int>(this->stream_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeague.Stream.stream_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->stream_url(), target);
  }

  // optional string vod_url = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vod_url().data(), static_cast<int>(this->vod_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeague.Stream.vod_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->vod_url(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeague.Stream)
  return target;
}

size_t CMsgDOTALeague_Stream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeague.Stream)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string stream_url = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->stream_url());
    }

    // optional string vod_url = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vod_url());
    }

    // optional uint32 stream_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stream_id());
    }

    // optional uint32 language = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->language());
    }

    // optional .proto.dota.ELeagueBroadcastProvider broadcast_provider = 4 [default = LEAGUE_BROADCAST_UNKNOWN];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->broadcast_provider());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeague_Stream::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeague.Stream)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeague_Stream* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeague_Stream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeague.Stream)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeague.Stream)
    MergeFrom(*source);
  }
}

void CMsgDOTALeague_Stream::MergeFrom(const CMsgDOTALeague_Stream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeague.Stream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      stream_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stream_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      vod_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vod_url_);
    }
    if (cached_has_bits & 0x00000008u) {
      stream_id_ = from.stream_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      language_ = from.language_;
    }
    if (cached_has_bits & 0x00000020u) {
      broadcast_provider_ = from.broadcast_provider_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeague_Stream::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeague.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeague_Stream::CopyFrom(const CMsgDOTALeague_Stream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeague.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeague_Stream::IsInitialized() const {
  return true;
}

void CMsgDOTALeague_Stream::Swap(CMsgDOTALeague_Stream* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeague_Stream::InternalSwap(CMsgDOTALeague_Stream* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  stream_url_.Swap(&other->stream_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  vod_url_.Swap(&other->vod_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stream_id_, other->stream_id_);
  swap(language_, other->language_);
  swap(broadcast_provider_, other->broadcast_provider_);
}

::google::protobuf::Metadata CMsgDOTALeague_Stream::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeague_SeriesInfo::InitAsDefaultInstance() {
}
class CMsgDOTALeague_SeriesInfo::HasBitSetters {
 public:
  static void set_has_series_id(CMsgDOTALeague_SeriesInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_series_type(CMsgDOTALeague_SeriesInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_start_time(CMsgDOTALeague_SeriesInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_team_id_1(CMsgDOTALeague_SeriesInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_team_id_2(CMsgDOTALeague_SeriesInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeague_SeriesInfo::kSeriesIdFieldNumber;
const int CMsgDOTALeague_SeriesInfo::kSeriesTypeFieldNumber;
const int CMsgDOTALeague_SeriesInfo::kStartTimeFieldNumber;
const int CMsgDOTALeague_SeriesInfo::kMatchIdsFieldNumber;
const int CMsgDOTALeague_SeriesInfo::kTeamId1FieldNumber;
const int CMsgDOTALeague_SeriesInfo::kTeamId2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeague_SeriesInfo::CMsgDOTALeague_SeriesInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeague.SeriesInfo)
}
CMsgDOTALeague_SeriesInfo::CMsgDOTALeague_SeriesInfo(const CMsgDOTALeague_SeriesInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      match_ids_(from.match_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&series_id_, &from.series_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_id_2_) -
    reinterpret_cast<char*>(&series_id_)) + sizeof(team_id_2_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeague.SeriesInfo)
}

void CMsgDOTALeague_SeriesInfo::SharedCtor() {
  ::memset(&series_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_id_2_) -
      reinterpret_cast<char*>(&series_id_)) + sizeof(team_id_2_));
}

CMsgDOTALeague_SeriesInfo::~CMsgDOTALeague_SeriesInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeague.SeriesInfo)
  SharedDtor();
}

void CMsgDOTALeague_SeriesInfo::SharedDtor() {
}

void CMsgDOTALeague_SeriesInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeague_SeriesInfo& CMsgDOTALeague_SeriesInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeague_SeriesInfo_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeague_SeriesInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeague.SeriesInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&series_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_2_) -
        reinterpret_cast<char*>(&series_id_)) + sizeof(team_id_2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeague_SeriesInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeague_SeriesInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 series_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_series_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 series_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_series_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 start_time = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_start_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint64 match_ids = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 32) {
          do {
            msg->add_match_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
        object = msg->mutable_match_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional uint32 team_id_1 = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_team_id_1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_id_2 = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_team_id_2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeague_SeriesInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeague.SeriesInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 series_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_series_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_series_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_start_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 match_ids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 32u, input, this->mutable_match_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_match_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id_1 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_team_id_1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id_2 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_team_id_2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeague.SeriesInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeague.SeriesInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeague_SeriesInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeague.SeriesInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 series_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->series_id(), output);
  }

  // optional uint32 series_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->series_type(), output);
  }

  // optional uint32 start_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->start_time(), output);
  }

  // repeated uint64 match_ids = 4;
  for (int i = 0, n = this->match_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      4, this->match_ids(i), output);
  }

  // optional uint32 team_id_1 = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_id_1(), output);
  }

  // optional uint32 team_id_2 = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->team_id_2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeague.SeriesInfo)
}

::google::protobuf::uint8* CMsgDOTALeague_SeriesInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeague.SeriesInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 series_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->series_id(), target);
  }

  // optional uint32 series_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->series_type(), target);
  }

  // optional uint32 start_time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->start_time(), target);
  }

  // repeated uint64 match_ids = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(4, this->match_ids_, target);

  // optional uint32 team_id_1 = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_id_1(), target);
  }

  // optional uint32 team_id_2 = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->team_id_2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeague.SeriesInfo)
  return target;
}

size_t CMsgDOTALeague_SeriesInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeague.SeriesInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 match_ids = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->match_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->match_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 series_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_id());
    }

    // optional uint32 series_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

    // optional uint32 start_time = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_time());
    }

    // optional uint32 team_id_1 = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id_1());
    }

    // optional uint32 team_id_2 = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id_2());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeague_SeriesInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeague.SeriesInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeague_SeriesInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeague_SeriesInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeague.SeriesInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeague.SeriesInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTALeague_SeriesInfo::MergeFrom(const CMsgDOTALeague_SeriesInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeague.SeriesInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_ids_.MergeFrom(from.match_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      series_id_ = from.series_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      series_type_ = from.series_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      start_time_ = from.start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_id_1_ = from.team_id_1_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_id_2_ = from.team_id_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeague_SeriesInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeague.SeriesInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeague_SeriesInfo::CopyFrom(const CMsgDOTALeague_SeriesInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeague.SeriesInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeague_SeriesInfo::IsInitialized() const {
  return true;
}

void CMsgDOTALeague_SeriesInfo::Swap(CMsgDOTALeague_SeriesInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeague_SeriesInfo::InternalSwap(CMsgDOTALeague_SeriesInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  match_ids_.InternalSwap(&other->match_ids_);
  swap(series_id_, other->series_id_);
  swap(series_type_, other->series_type_);
  swap(start_time_, other->start_time_);
  swap(team_id_1_, other->team_id_1_);
  swap(team_id_2_, other->team_id_2_);
}

::google::protobuf::Metadata CMsgDOTALeague_SeriesInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeague_Player::InitAsDefaultInstance() {
}
class CMsgDOTALeague_Player::HasBitSetters {
 public:
  static void set_has_account_id(CMsgDOTALeague_Player* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_name(CMsgDOTALeague_Player* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_id(CMsgDOTALeague_Player* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeague_Player::kAccountIdFieldNumber;
const int CMsgDOTALeague_Player::kNameFieldNumber;
const int CMsgDOTALeague_Player::kTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeague_Player::CMsgDOTALeague_Player()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeague.Player)
}
CMsgDOTALeague_Player::CMsgDOTALeague_Player(const CMsgDOTALeague_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(team_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeague.Player)
}

void CMsgDOTALeague_Player::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTALeague_Player_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_id_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(team_id_));
}

CMsgDOTALeague_Player::~CMsgDOTALeague_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeague.Player)
  SharedDtor();
}

void CMsgDOTALeague_Player::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALeague_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeague_Player& CMsgDOTALeague_Player::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeague_Player_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeague_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeague.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeague_Player::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeague_Player*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTALeague.Player.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 team_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeague_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeague.Player)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTALeague.Player.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeague.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeague.Player)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeague_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeague.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeague.Player.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 team_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeague.Player)
}

::google::protobuf::uint8* CMsgDOTALeague_Player::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeague.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeague.Player.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 team_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeague.Player)
  return target;
}

size_t CMsgDOTALeague_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeague.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 team_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeague_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeague.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeague_Player* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeague_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeague.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeague.Player)
    MergeFrom(*source);
  }
}

void CMsgDOTALeague_Player::MergeFrom(const CMsgDOTALeague_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeague.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeague_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeague.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeague_Player::CopyFrom(const CMsgDOTALeague_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeague.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeague_Player::IsInitialized() const {
  return true;
}

void CMsgDOTALeague_Player::Swap(CMsgDOTALeague_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeague_Player::InternalSwap(CMsgDOTALeague_Player* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_id_, other->account_id_);
  swap(team_id_, other->team_id_);
}

::google::protobuf::Metadata CMsgDOTALeague_Player::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeague::InitAsDefaultInstance() {
  ::proto::dota::_CMsgDOTALeague_default_instance_._instance.get_mutable()->info_ = const_cast< ::proto::dota::CMsgDOTALeague_Info*>(
      ::proto::dota::CMsgDOTALeague_Info::internal_default_instance());
  ::proto::dota::_CMsgDOTALeague_default_instance_._instance.get_mutable()->prize_pool_ = const_cast< ::proto::dota::CMsgDOTALeague_PrizePool*>(
      ::proto::dota::CMsgDOTALeague_PrizePool::internal_default_instance());
}
class CMsgDOTALeague::HasBitSetters {
 public:
  static const ::proto::dota::CMsgDOTALeague_Info& info(const CMsgDOTALeague* msg);
  static void set_has_info(CMsgDOTALeague* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::dota::CMsgDOTALeague_PrizePool& prize_pool(const CMsgDOTALeague* msg);
  static void set_has_prize_pool(CMsgDOTALeague* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::proto::dota::CMsgDOTALeague_Info&
CMsgDOTALeague::HasBitSetters::info(const CMsgDOTALeague* msg) {
  return *msg->info_;
}
const ::proto::dota::CMsgDOTALeague_PrizePool&
CMsgDOTALeague::HasBitSetters::prize_pool(const CMsgDOTALeague* msg) {
  return *msg->prize_pool_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeague::kInfoFieldNumber;
const int CMsgDOTALeague::kPrizePoolFieldNumber;
const int CMsgDOTALeague::kAdminsFieldNumber;
const int CMsgDOTALeague::kStreamsFieldNumber;
const int CMsgDOTALeague::kNodeGroupsFieldNumber;
const int CMsgDOTALeague::kSeriesInfosFieldNumber;
const int CMsgDOTALeague::kRegisteredPlayersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeague::CMsgDOTALeague()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeague)
}
CMsgDOTALeague::CMsgDOTALeague(const CMsgDOTALeague& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      admins_(from.admins_),
      streams_(from.streams_),
      node_groups_(from.node_groups_),
      series_infos_(from.series_infos_),
      registered_players_(from.registered_players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_info()) {
    info_ = new ::proto::dota::CMsgDOTALeague_Info(*from.info_);
  } else {
    info_ = nullptr;
  }
  if (from.has_prize_pool()) {
    prize_pool_ = new ::proto::dota::CMsgDOTALeague_PrizePool(*from.prize_pool_);
  } else {
    prize_pool_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeague)
}

void CMsgDOTALeague::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTALeague_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  ::memset(&info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prize_pool_) -
      reinterpret_cast<char*>(&info_)) + sizeof(prize_pool_));
}

CMsgDOTALeague::~CMsgDOTALeague() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeague)
  SharedDtor();
}

void CMsgDOTALeague::SharedDtor() {
  if (this != internal_default_instance()) delete info_;
  if (this != internal_default_instance()) delete prize_pool_;
}

void CMsgDOTALeague::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeague& CMsgDOTALeague::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeague_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeague::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeague)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  admins_.Clear();
  streams_.Clear();
  node_groups_.Clear();
  series_infos_.Clear();
  registered_players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(info_ != nullptr);
      info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(prize_pool_ != nullptr);
      prize_pool_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeague::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeague*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTALeague.Info info = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTALeague_Info::_InternalParse;
        object = msg->mutable_info();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgDOTALeague.PrizePool prize_pool = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTALeague_PrizePool::_InternalParse;
        object = msg->mutable_prize_pool();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .proto.dota.CMsgDOTALeague.Admin admins = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTALeague_Admin::_InternalParse;
          object = msg->add_admins();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgDOTALeague.Stream streams = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTALeague_Stream::_InternalParse;
          object = msg->add_streams();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 34 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgDOTALeagueNodeGroup node_groups = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTALeagueNodeGroup::_InternalParse;
          object = msg->add_node_groups();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgDOTALeague.SeriesInfo series_infos = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTALeague_SeriesInfo::_InternalParse;
          object = msg->add_series_infos();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 50 && (ptr += 1));
        break;
      }
      // repeated .proto.dota.CMsgDOTALeague.Player registered_players = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTALeague_Player::_InternalParse;
          object = msg->add_registered_players();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeague::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeague)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTALeague.Info info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTALeague.PrizePool prize_pool = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_prize_pool()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTALeague.Admin admins = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_admins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTALeague.Stream streams = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_streams()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTALeagueNodeGroup node_groups = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_node_groups()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTALeague.SeriesInfo series_infos = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_series_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTALeague.Player registered_players = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_registered_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeague)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeague)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeague::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeague)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTALeague.Info info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::info(this), output);
  }

  // optional .proto.dota.CMsgDOTALeague.PrizePool prize_pool = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::prize_pool(this), output);
  }

  // repeated .proto.dota.CMsgDOTALeague.Admin admins = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->admins_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->admins(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgDOTALeague.Stream streams = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->streams_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->streams(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgDOTALeagueNodeGroup node_groups = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_groups_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->node_groups(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgDOTALeague.SeriesInfo series_infos = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->series_infos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6,
      this->series_infos(static_cast<int>(i)),
      output);
  }

  // repeated .proto.dota.CMsgDOTALeague.Player registered_players = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->registered_players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->registered_players(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeague)
}

::google::protobuf::uint8* CMsgDOTALeague::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeague)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTALeague.Info info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::info(this), target);
  }

  // optional .proto.dota.CMsgDOTALeague.PrizePool prize_pool = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::prize_pool(this), target);
  }

  // repeated .proto.dota.CMsgDOTALeague.Admin admins = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->admins_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->admins(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgDOTALeague.Stream streams = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->streams_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->streams(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgDOTALeagueNodeGroup node_groups = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_groups_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->node_groups(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgDOTALeague.SeriesInfo series_infos = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->series_infos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->series_infos(static_cast<int>(i)), target);
  }

  // repeated .proto.dota.CMsgDOTALeague.Player registered_players = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->registered_players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->registered_players(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeague)
  return target;
}

size_t CMsgDOTALeague::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeague)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTALeague.Admin admins = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->admins_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->admins(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTALeague.Stream streams = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->streams_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->streams(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTALeagueNodeGroup node_groups = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->node_groups_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->node_groups(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTALeague.SeriesInfo series_infos = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->series_infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->series_infos(static_cast<int>(i)));
    }
  }

  // repeated .proto.dota.CMsgDOTALeague.Player registered_players = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->registered_players_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->registered_players(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CMsgDOTALeague.Info info = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *info_);
    }

    // optional .proto.dota.CMsgDOTALeague.PrizePool prize_pool = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *prize_pool_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeague::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeague)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeague* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeague>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeague)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeague)
    MergeFrom(*source);
  }
}

void CMsgDOTALeague::MergeFrom(const CMsgDOTALeague& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeague)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  admins_.MergeFrom(from.admins_);
  streams_.MergeFrom(from.streams_);
  node_groups_.MergeFrom(from.node_groups_);
  series_infos_.MergeFrom(from.series_infos_);
  registered_players_.MergeFrom(from.registered_players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_info()->::proto::dota::CMsgDOTALeague_Info::MergeFrom(from.info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_prize_pool()->::proto::dota::CMsgDOTALeague_PrizePool::MergeFrom(from.prize_pool());
    }
  }
}

void CMsgDOTALeague::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeague)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeague::CopyFrom(const CMsgDOTALeague& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeague)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeague::IsInitialized() const {
  return true;
}

void CMsgDOTALeague::Swap(CMsgDOTALeague* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeague::InternalSwap(CMsgDOTALeague* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&admins_)->InternalSwap(CastToBase(&other->admins_));
  CastToBase(&streams_)->InternalSwap(CastToBase(&other->streams_));
  CastToBase(&node_groups_)->InternalSwap(CastToBase(&other->node_groups_));
  CastToBase(&series_infos_)->InternalSwap(CastToBase(&other->series_infos_));
  CastToBase(&registered_players_)->InternalSwap(CastToBase(&other->registered_players_));
  swap(info_, other->info_);
  swap(prize_pool_, other->prize_pool_);
}

::google::protobuf::Metadata CMsgDOTALeague::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeagueInfo::InitAsDefaultInstance() {
}
class CMsgDOTALeagueInfo::HasBitSetters {
 public:
  static void set_has_league_id(CMsgDOTALeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_name(CMsgDOTALeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_tier(CMsgDOTALeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_region(CMsgDOTALeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_most_recent_activity(CMsgDOTALeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_total_prize_pool(CMsgDOTALeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_start_timestamp(CMsgDOTALeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_end_timestamp(CMsgDOTALeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_status(CMsgDOTALeagueInfo* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeagueInfo::kLeagueIdFieldNumber;
const int CMsgDOTALeagueInfo::kNameFieldNumber;
const int CMsgDOTALeagueInfo::kTierFieldNumber;
const int CMsgDOTALeagueInfo::kRegionFieldNumber;
const int CMsgDOTALeagueInfo::kMostRecentActivityFieldNumber;
const int CMsgDOTALeagueInfo::kTotalPrizePoolFieldNumber;
const int CMsgDOTALeagueInfo::kStartTimestampFieldNumber;
const int CMsgDOTALeagueInfo::kEndTimestampFieldNumber;
const int CMsgDOTALeagueInfo::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeagueInfo::CMsgDOTALeagueInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeagueInfo)
}
CMsgDOTALeagueInfo::CMsgDOTALeagueInfo(const CMsgDOTALeagueInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&league_id_, &from.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeagueInfo)
}

void CMsgDOTALeagueInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTALeagueInfo_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&league_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&league_id_)) + sizeof(status_));
}

CMsgDOTALeagueInfo::~CMsgDOTALeagueInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeagueInfo)
  SharedDtor();
}

void CMsgDOTALeagueInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALeagueInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeagueInfo& CMsgDOTALeagueInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeagueInfo_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeagueInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeagueInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&end_timestamp_) -
        reinterpret_cast<char*>(&league_id_)) + sizeof(end_timestamp_));
  }
  status_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeagueInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeagueInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTALeagueInfo.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .proto.dota.ELeagueTier tier = 3 [default = LEAGUE_TIER_UNSET];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ELeagueTier_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_tier(static_cast<::proto::dota::ELeagueTier>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.ELeagueRegion region = 4 [default = LEAGUE_REGION_UNSET];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::ELeagueRegion_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_region(static_cast<::proto::dota::ELeagueRegion>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 most_recent_activity = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_most_recent_activity(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 total_prize_pool = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_total_prize_pool(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 start_timestamp = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_start_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 end_timestamp = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_end_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 status = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_status(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeagueInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeagueInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTALeagueInfo.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ELeagueTier tier = 3 [default = LEAGUE_TIER_UNSET];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ELeagueTier_IsValid(value)) {
            set_tier(static_cast< ::proto::dota::ELeagueTier >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.ELeagueRegion region = 4 [default = LEAGUE_REGION_UNSET];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::ELeagueRegion_IsValid(value)) {
            set_region(static_cast< ::proto::dota::ELeagueRegion >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 most_recent_activity = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_most_recent_activity(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &most_recent_activity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 total_prize_pool = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_total_prize_pool(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &total_prize_pool_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_timestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_start_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 end_timestamp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_end_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &end_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_status(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeagueInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeagueInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeagueInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeagueInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->league_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeagueInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .proto.dota.ELeagueTier tier = 3 [default = LEAGUE_TIER_UNSET];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->tier(), output);
  }

  // optional .proto.dota.ELeagueRegion region = 4 [default = LEAGUE_REGION_UNSET];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->region(), output);
  }

  // optional uint32 most_recent_activity = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->most_recent_activity(), output);
  }

  // optional uint32 total_prize_pool = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->total_prize_pool(), output);
  }

  // optional uint32 start_timestamp = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->start_timestamp(), output);
  }

  // optional uint32 end_timestamp = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->end_timestamp(), output);
  }

  // optional uint32 status = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeagueInfo)
}

::google::protobuf::uint8* CMsgDOTALeagueInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeagueInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->league_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeagueInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .proto.dota.ELeagueTier tier = 3 [default = LEAGUE_TIER_UNSET];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->tier(), target);
  }

  // optional .proto.dota.ELeagueRegion region = 4 [default = LEAGUE_REGION_UNSET];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->region(), target);
  }

  // optional uint32 most_recent_activity = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->most_recent_activity(), target);
  }

  // optional uint32 total_prize_pool = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->total_prize_pool(), target);
  }

  // optional uint32 start_timestamp = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->start_timestamp(), target);
  }

  // optional uint32 end_timestamp = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->end_timestamp(), target);
  }

  // optional uint32 status = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeagueInfo)
  return target;
}

size_t CMsgDOTALeagueInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeagueInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional .proto.dota.ELeagueTier tier = 3 [default = LEAGUE_TIER_UNSET];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tier());
    }

    // optional .proto.dota.ELeagueRegion region = 4 [default = LEAGUE_REGION_UNSET];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->region());
    }

    // optional uint32 most_recent_activity = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->most_recent_activity());
    }

    // optional uint32 total_prize_pool = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->total_prize_pool());
    }

    // optional uint32 start_timestamp = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_timestamp());
    }

    // optional uint32 end_timestamp = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->end_timestamp());
    }

  }
  // optional uint32 status = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeagueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeagueInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeagueInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeagueInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueInfo::MergeFrom(const CMsgDOTALeagueInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeagueInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      tier_ = from.tier_;
    }
    if (cached_has_bits & 0x00000008u) {
      region_ = from.region_;
    }
    if (cached_has_bits & 0x00000010u) {
      most_recent_activity_ = from.most_recent_activity_;
    }
    if (cached_has_bits & 0x00000020u) {
      total_prize_pool_ = from.total_prize_pool_;
    }
    if (cached_has_bits & 0x00000040u) {
      start_timestamp_ = from.start_timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      end_timestamp_ = from.end_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_status(from.status());
  }
}

void CMsgDOTALeagueInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeagueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueInfo::CopyFrom(const CMsgDOTALeagueInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeagueInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueInfo::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueInfo::Swap(CMsgDOTALeagueInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeagueInfo::InternalSwap(CMsgDOTALeagueInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(league_id_, other->league_id_);
  swap(tier_, other->tier_);
  swap(region_, other->region_);
  swap(most_recent_activity_, other->most_recent_activity_);
  swap(total_prize_pool_, other->total_prize_pool_);
  swap(start_timestamp_, other->start_timestamp_);
  swap(end_timestamp_, other->end_timestamp_);
  swap(status_, other->status_);
}

::google::protobuf::Metadata CMsgDOTALeagueInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeagueInfoList::InitAsDefaultInstance() {
}
class CMsgDOTALeagueInfoList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeagueInfoList::kInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeagueInfoList::CMsgDOTALeagueInfoList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeagueInfoList)
}
CMsgDOTALeagueInfoList::CMsgDOTALeagueInfoList(const CMsgDOTALeagueInfoList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      infos_(from.infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeagueInfoList)
}

void CMsgDOTALeagueInfoList::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTALeagueInfoList_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
}

CMsgDOTALeagueInfoList::~CMsgDOTALeagueInfoList() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeagueInfoList)
  SharedDtor();
}

void CMsgDOTALeagueInfoList::SharedDtor() {
}

void CMsgDOTALeagueInfoList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeagueInfoList& CMsgDOTALeagueInfoList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeagueInfoList_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeagueInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeagueInfoList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  infos_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeagueInfoList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeagueInfoList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTALeagueInfo infos = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTALeagueInfo::_InternalParse;
          object = msg->add_infos();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeagueInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeagueInfoList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTALeagueInfo infos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeagueInfoList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeagueInfoList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeagueInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeagueInfoList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTALeagueInfo infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->infos(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeagueInfoList)
}

::google::protobuf::uint8* CMsgDOTALeagueInfoList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeagueInfoList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTALeagueInfo infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->infos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->infos(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeagueInfoList)
  return target;
}

size_t CMsgDOTALeagueInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeagueInfoList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTALeagueInfo infos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->infos(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueInfoList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeagueInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueInfoList* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeagueInfoList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeagueInfoList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeagueInfoList)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueInfoList::MergeFrom(const CMsgDOTALeagueInfoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeagueInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  infos_.MergeFrom(from.infos_);
}

void CMsgDOTALeagueInfoList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeagueInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueInfoList::CopyFrom(const CMsgDOTALeagueInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeagueInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueInfoList::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueInfoList::Swap(CMsgDOTALeagueInfoList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeagueInfoList::InternalSwap(CMsgDOTALeagueInfoList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&infos_)->InternalSwap(CastToBase(&other->infos_));
}

::google::protobuf::Metadata CMsgDOTALeagueInfoList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeagueLiveGames_LiveGame::InitAsDefaultInstance() {
}
class CMsgDOTALeagueLiveGames_LiveGame::HasBitSetters {
 public:
  static void set_has_league_id(CMsgDOTALeagueLiveGames_LiveGame* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_server_steam_id(CMsgDOTALeagueLiveGames_LiveGame* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_radiant_name(CMsgDOTALeagueLiveGames_LiveGame* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_radiant_logo(CMsgDOTALeagueLiveGames_LiveGame* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_radiant_team_id(CMsgDOTALeagueLiveGames_LiveGame* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_dire_name(CMsgDOTALeagueLiveGames_LiveGame* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_dire_logo(CMsgDOTALeagueLiveGames_LiveGame* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_dire_team_id(CMsgDOTALeagueLiveGames_LiveGame* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_time(CMsgDOTALeagueLiveGames_LiveGame* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_spectators(CMsgDOTALeagueLiveGames_LiveGame* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeagueLiveGames_LiveGame::kLeagueIdFieldNumber;
const int CMsgDOTALeagueLiveGames_LiveGame::kServerSteamIdFieldNumber;
const int CMsgDOTALeagueLiveGames_LiveGame::kRadiantNameFieldNumber;
const int CMsgDOTALeagueLiveGames_LiveGame::kRadiantLogoFieldNumber;
const int CMsgDOTALeagueLiveGames_LiveGame::kRadiantTeamIdFieldNumber;
const int CMsgDOTALeagueLiveGames_LiveGame::kDireNameFieldNumber;
const int CMsgDOTALeagueLiveGames_LiveGame::kDireLogoFieldNumber;
const int CMsgDOTALeagueLiveGames_LiveGame::kDireTeamIdFieldNumber;
const int CMsgDOTALeagueLiveGames_LiveGame::kTimeFieldNumber;
const int CMsgDOTALeagueLiveGames_LiveGame::kSpectatorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeagueLiveGames_LiveGame::CMsgDOTALeagueLiveGames_LiveGame()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeagueLiveGames.LiveGame)
}
CMsgDOTALeagueLiveGames_LiveGame::CMsgDOTALeagueLiveGames_LiveGame(const CMsgDOTALeagueLiveGames_LiveGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  radiant_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_radiant_name()) {
    radiant_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radiant_name_);
  }
  dire_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_dire_name()) {
    dire_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dire_name_);
  }
  ::memcpy(&server_steam_id_, &from.server_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dire_team_id_) -
    reinterpret_cast<char*>(&server_steam_id_)) + sizeof(dire_team_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeagueLiveGames.LiveGame)
}

void CMsgDOTALeagueLiveGames_LiveGame::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTALeagueLiveGames_LiveGame_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  radiant_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dire_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dire_team_id_) -
      reinterpret_cast<char*>(&server_steam_id_)) + sizeof(dire_team_id_));
}

CMsgDOTALeagueLiveGames_LiveGame::~CMsgDOTALeagueLiveGames_LiveGame() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeagueLiveGames.LiveGame)
  SharedDtor();
}

void CMsgDOTALeagueLiveGames_LiveGame::SharedDtor() {
  radiant_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dire_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALeagueLiveGames_LiveGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeagueLiveGames_LiveGame& CMsgDOTALeagueLiveGames_LiveGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeagueLiveGames_LiveGame_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeagueLiveGames_LiveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeagueLiveGames.LiveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      radiant_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      dire_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&server_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&spectators_) -
        reinterpret_cast<char*>(&server_steam_id_)) + sizeof(spectators_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&radiant_team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dire_team_id_) -
        reinterpret_cast<char*>(&radiant_team_id_)) + sizeof(dire_team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeagueLiveGames_LiveGame::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeagueLiveGames_LiveGame*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 server_steam_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_server_steam_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string radiant_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTALeagueLiveGames.LiveGame.radiant_name");
        object = msg->mutable_radiant_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 radiant_logo = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_radiant_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string dire_name = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTALeagueLiveGames.LiveGame.dire_name");
        object = msg->mutable_dire_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint64 dire_logo = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_dire_logo(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 time = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 spectators = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_spectators(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 radiant_team_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_radiant_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 dire_team_id = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_dire_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeagueLiveGames_LiveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeagueLiveGames.LiveGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 server_steam_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_server_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string radiant_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radiant_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radiant_name().data(), static_cast<int>(this->radiant_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTALeagueLiveGames.LiveGame.radiant_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 radiant_logo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_radiant_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &radiant_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string dire_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dire_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dire_name().data(), static_cast<int>(this->dire_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTALeagueLiveGames.LiveGame.dire_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 dire_logo = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_dire_logo(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &dire_logo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 spectators = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_spectators(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spectators_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radiant_team_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_radiant_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dire_team_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_dire_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeagueLiveGames.LiveGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeagueLiveGames.LiveGame)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeagueLiveGames_LiveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeagueLiveGames.LiveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->league_id(), output);
  }

  // optional uint64 server_steam_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->server_steam_id(), output);
  }

  // optional string radiant_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_name().data(), static_cast<int>(this->radiant_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeagueLiveGames.LiveGame.radiant_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->radiant_name(), output);
  }

  // optional uint64 radiant_logo = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->radiant_logo(), output);
  }

  // optional string dire_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_name().data(), static_cast<int>(this->dire_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeagueLiveGames.LiveGame.dire_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->dire_name(), output);
  }

  // optional uint64 dire_logo = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->dire_logo(), output);
  }

  // optional uint32 time = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->time(), output);
  }

  // optional uint32 spectators = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->spectators(), output);
  }

  // optional uint32 radiant_team_id = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->radiant_team_id(), output);
  }

  // optional uint32 dire_team_id = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->dire_team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeagueLiveGames.LiveGame)
}

::google::protobuf::uint8* CMsgDOTALeagueLiveGames_LiveGame::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeagueLiveGames.LiveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->league_id(), target);
  }

  // optional uint64 server_steam_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->server_steam_id(), target);
  }

  // optional string radiant_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radiant_name().data(), static_cast<int>(this->radiant_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeagueLiveGames.LiveGame.radiant_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->radiant_name(), target);
  }

  // optional uint64 radiant_logo = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->radiant_logo(), target);
  }

  // optional string dire_name = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dire_name().data(), static_cast<int>(this->dire_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeagueLiveGames.LiveGame.dire_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->dire_name(), target);
  }

  // optional uint64 dire_logo = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->dire_logo(), target);
  }

  // optional uint32 time = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->time(), target);
  }

  // optional uint32 spectators = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->spectators(), target);
  }

  // optional uint32 radiant_team_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->radiant_team_id(), target);
  }

  // optional uint32 dire_team_id = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->dire_team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeagueLiveGames.LiveGame)
  return target;
}

size_t CMsgDOTALeagueLiveGames_LiveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeagueLiveGames.LiveGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string radiant_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radiant_name());
    }

    // optional string dire_name = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dire_name());
    }

    // optional uint64 server_steam_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_steam_id());
    }

    // optional uint64 radiant_logo = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->radiant_logo());
    }

    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 time = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint64 dire_logo = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->dire_logo());
    }

    // optional uint32 spectators = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spectators());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 radiant_team_id = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_team_id());
    }

    // optional uint32 dire_team_id = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_team_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueLiveGames_LiveGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeagueLiveGames.LiveGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueLiveGames_LiveGame* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeagueLiveGames_LiveGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeagueLiveGames.LiveGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeagueLiveGames.LiveGame)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueLiveGames_LiveGame::MergeFrom(const CMsgDOTALeagueLiveGames_LiveGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeagueLiveGames.LiveGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      radiant_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radiant_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      dire_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dire_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      server_steam_id_ = from.server_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      radiant_logo_ = from.radiant_logo_;
    }
    if (cached_has_bits & 0x00000010u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000040u) {
      dire_logo_ = from.dire_logo_;
    }
    if (cached_has_bits & 0x00000080u) {
      spectators_ = from.spectators_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      radiant_team_id_ = from.radiant_team_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      dire_team_id_ = from.dire_team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeagueLiveGames_LiveGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeagueLiveGames.LiveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueLiveGames_LiveGame::CopyFrom(const CMsgDOTALeagueLiveGames_LiveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeagueLiveGames.LiveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueLiveGames_LiveGame::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueLiveGames_LiveGame::Swap(CMsgDOTALeagueLiveGames_LiveGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeagueLiveGames_LiveGame::InternalSwap(CMsgDOTALeagueLiveGames_LiveGame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  radiant_name_.Swap(&other->radiant_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dire_name_.Swap(&other->dire_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_steam_id_, other->server_steam_id_);
  swap(radiant_logo_, other->radiant_logo_);
  swap(league_id_, other->league_id_);
  swap(time_, other->time_);
  swap(dire_logo_, other->dire_logo_);
  swap(spectators_, other->spectators_);
  swap(radiant_team_id_, other->radiant_team_id_);
  swap(dire_team_id_, other->dire_team_id_);
}

::google::protobuf::Metadata CMsgDOTALeagueLiveGames_LiveGame::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeagueLiveGames::InitAsDefaultInstance() {
}
class CMsgDOTALeagueLiveGames::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeagueLiveGames::kGamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeagueLiveGames::CMsgDOTALeagueLiveGames()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeagueLiveGames)
}
CMsgDOTALeagueLiveGames::CMsgDOTALeagueLiveGames(const CMsgDOTALeagueLiveGames& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      games_(from.games_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeagueLiveGames)
}

void CMsgDOTALeagueLiveGames::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTALeagueLiveGames_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
}

CMsgDOTALeagueLiveGames::~CMsgDOTALeagueLiveGames() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeagueLiveGames)
  SharedDtor();
}

void CMsgDOTALeagueLiveGames::SharedDtor() {
}

void CMsgDOTALeagueLiveGames::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeagueLiveGames& CMsgDOTALeagueLiveGames::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeagueLiveGames_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeagueLiveGames::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeagueLiveGames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  games_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeagueLiveGames::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeagueLiveGames*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTALeagueLiveGames.LiveGame games = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTALeagueLiveGames_LiveGame::_InternalParse;
          object = msg->add_games();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeagueLiveGames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeagueLiveGames)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTALeagueLiveGames.LiveGame games = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_games()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeagueLiveGames)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeagueLiveGames)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeagueLiveGames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeagueLiveGames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTALeagueLiveGames.LiveGame games = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->games_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->games(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeagueLiveGames)
}

::google::protobuf::uint8* CMsgDOTALeagueLiveGames::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeagueLiveGames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTALeagueLiveGames.LiveGame games = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->games_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->games(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeagueLiveGames)
  return target;
}

size_t CMsgDOTALeagueLiveGames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeagueLiveGames)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTALeagueLiveGames.LiveGame games = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->games_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->games(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueLiveGames::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeagueLiveGames)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueLiveGames* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeagueLiveGames>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeagueLiveGames)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeagueLiveGames)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueLiveGames::MergeFrom(const CMsgDOTALeagueLiveGames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeagueLiveGames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  games_.MergeFrom(from.games_);
}

void CMsgDOTALeagueLiveGames::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeagueLiveGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueLiveGames::CopyFrom(const CMsgDOTALeagueLiveGames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeagueLiveGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueLiveGames::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueLiveGames::Swap(CMsgDOTALeagueLiveGames* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeagueLiveGames::InternalSwap(CMsgDOTALeagueLiveGames* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&games_)->InternalSwap(CastToBase(&other->games_));
}

::google::protobuf::Metadata CMsgDOTALeagueLiveGames::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeagueMessages_Message::InitAsDefaultInstance() {
}
class CMsgDOTALeagueMessages_Message::HasBitSetters {
 public:
  static void set_has_author_account_id(CMsgDOTALeagueMessages_Message* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_timestamp(CMsgDOTALeagueMessages_Message* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_message(CMsgDOTALeagueMessages_Message* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeagueMessages_Message::kAuthorAccountIdFieldNumber;
const int CMsgDOTALeagueMessages_Message::kTimestampFieldNumber;
const int CMsgDOTALeagueMessages_Message::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeagueMessages_Message::CMsgDOTALeagueMessages_Message()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeagueMessages.Message)
}
CMsgDOTALeagueMessages_Message::CMsgDOTALeagueMessages_Message(const CMsgDOTALeagueMessages_Message& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&author_account_id_, &from.author_account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&author_account_id_)) + sizeof(timestamp_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeagueMessages.Message)
}

void CMsgDOTALeagueMessages_Message::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTALeagueMessages_Message_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&author_account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&author_account_id_)) + sizeof(timestamp_));
}

CMsgDOTALeagueMessages_Message::~CMsgDOTALeagueMessages_Message() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeagueMessages.Message)
  SharedDtor();
}

void CMsgDOTALeagueMessages_Message::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALeagueMessages_Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeagueMessages_Message& CMsgDOTALeagueMessages_Message::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeagueMessages_Message_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeagueMessages_Message::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeagueMessages.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&author_account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timestamp_) -
        reinterpret_cast<char*>(&author_account_id_)) + sizeof(timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeagueMessages_Message::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeagueMessages_Message*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 author_account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_author_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 timestamp = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string message = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTALeagueMessages.Message.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeagueMessages_Message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeagueMessages.Message)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 author_account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_author_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &author_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTALeagueMessages.Message.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeagueMessages.Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeagueMessages.Message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeagueMessages_Message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeagueMessages.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 author_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->author_account_id(), output);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->timestamp(), output);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeagueMessages.Message.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeagueMessages.Message)
}

::google::protobuf::uint8* CMsgDOTALeagueMessages_Message::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeagueMessages.Message)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 author_account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->author_account_id(), target);
  }

  // optional uint32 timestamp = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->timestamp(), target);
  }

  // optional string message = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeagueMessages.Message.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeagueMessages.Message)
  return target;
}

size_t CMsgDOTALeagueMessages_Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeagueMessages.Message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string message = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 author_account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->author_account_id());
    }

    // optional uint32 timestamp = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueMessages_Message::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeagueMessages.Message)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueMessages_Message* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeagueMessages_Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeagueMessages.Message)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeagueMessages.Message)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueMessages_Message::MergeFrom(const CMsgDOTALeagueMessages_Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeagueMessages.Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      author_account_id_ = from.author_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeagueMessages_Message::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeagueMessages.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueMessages_Message::CopyFrom(const CMsgDOTALeagueMessages_Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeagueMessages.Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueMessages_Message::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueMessages_Message::Swap(CMsgDOTALeagueMessages_Message* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeagueMessages_Message::InternalSwap(CMsgDOTALeagueMessages_Message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(author_account_id_, other->author_account_id_);
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata CMsgDOTALeagueMessages_Message::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeagueMessages::InitAsDefaultInstance() {
}
class CMsgDOTALeagueMessages::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeagueMessages::kMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeagueMessages::CMsgDOTALeagueMessages()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeagueMessages)
}
CMsgDOTALeagueMessages::CMsgDOTALeagueMessages(const CMsgDOTALeagueMessages& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeagueMessages)
}

void CMsgDOTALeagueMessages::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTALeagueMessages_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
}

CMsgDOTALeagueMessages::~CMsgDOTALeagueMessages() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeagueMessages)
  SharedDtor();
}

void CMsgDOTALeagueMessages::SharedDtor() {
}

void CMsgDOTALeagueMessages::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeagueMessages& CMsgDOTALeagueMessages::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeagueMessages_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeagueMessages::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeagueMessages)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeagueMessages::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeagueMessages*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTALeagueMessages.Message messages = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTALeagueMessages_Message::_InternalParse;
          object = msg->add_messages();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeagueMessages::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeagueMessages)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTALeagueMessages.Message messages = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeagueMessages)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeagueMessages)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeagueMessages::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeagueMessages)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTALeagueMessages.Message messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->messages(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeagueMessages)
}

::google::protobuf::uint8* CMsgDOTALeagueMessages::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeagueMessages)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTALeagueMessages.Message messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->messages(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeagueMessages)
  return target;
}

size_t CMsgDOTALeagueMessages::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeagueMessages)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTALeagueMessages.Message messages = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->messages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->messages(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueMessages::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeagueMessages)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueMessages* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeagueMessages>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeagueMessages)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeagueMessages)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueMessages::MergeFrom(const CMsgDOTALeagueMessages& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeagueMessages)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
}

void CMsgDOTALeagueMessages::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeagueMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueMessages::CopyFrom(const CMsgDOTALeagueMessages& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeagueMessages)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueMessages::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueMessages::Swap(CMsgDOTALeagueMessages* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeagueMessages::InternalSwap(CMsgDOTALeagueMessages* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&messages_)->InternalSwap(CastToBase(&other->messages_));
}

::google::protobuf::Metadata CMsgDOTALeagueMessages::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeaguePrizePool::InitAsDefaultInstance() {
}
class CMsgDOTALeaguePrizePool::HasBitSetters {
 public:
  static void set_has_prize_pool(CMsgDOTALeaguePrizePool* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_increment_per_second(CMsgDOTALeaguePrizePool* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeaguePrizePool::kPrizePoolFieldNumber;
const int CMsgDOTALeaguePrizePool::kIncrementPerSecondFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeaguePrizePool::CMsgDOTALeaguePrizePool()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeaguePrizePool)
}
CMsgDOTALeaguePrizePool::CMsgDOTALeaguePrizePool(const CMsgDOTALeaguePrizePool& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&prize_pool_, &from.prize_pool_,
    static_cast<size_t>(reinterpret_cast<char*>(&increment_per_second_) -
    reinterpret_cast<char*>(&prize_pool_)) + sizeof(increment_per_second_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeaguePrizePool)
}

void CMsgDOTALeaguePrizePool::SharedCtor() {
  ::memset(&prize_pool_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&increment_per_second_) -
      reinterpret_cast<char*>(&prize_pool_)) + sizeof(increment_per_second_));
}

CMsgDOTALeaguePrizePool::~CMsgDOTALeaguePrizePool() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeaguePrizePool)
  SharedDtor();
}

void CMsgDOTALeaguePrizePool::SharedDtor() {
}

void CMsgDOTALeaguePrizePool::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeaguePrizePool& CMsgDOTALeaguePrizePool::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeaguePrizePool_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeaguePrizePool::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeaguePrizePool)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&prize_pool_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&increment_per_second_) -
        reinterpret_cast<char*>(&prize_pool_)) + sizeof(increment_per_second_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeaguePrizePool::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeaguePrizePool*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 prize_pool = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_prize_pool(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float increment_per_second = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_increment_per_second(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeaguePrizePool::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeaguePrizePool)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 prize_pool = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_prize_pool(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prize_pool_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float increment_per_second = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_increment_per_second(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &increment_per_second_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeaguePrizePool)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeaguePrizePool)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeaguePrizePool::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeaguePrizePool)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 prize_pool = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prize_pool(), output);
  }

  // optional float increment_per_second = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->increment_per_second(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeaguePrizePool)
}

::google::protobuf::uint8* CMsgDOTALeaguePrizePool::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeaguePrizePool)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 prize_pool = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prize_pool(), target);
  }

  // optional float increment_per_second = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->increment_per_second(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeaguePrizePool)
  return target;
}

size_t CMsgDOTALeaguePrizePool::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeaguePrizePool)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 prize_pool = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prize_pool());
    }

    // optional float increment_per_second = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeaguePrizePool::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeaguePrizePool)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeaguePrizePool* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeaguePrizePool>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeaguePrizePool)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeaguePrizePool)
    MergeFrom(*source);
  }
}

void CMsgDOTALeaguePrizePool::MergeFrom(const CMsgDOTALeaguePrizePool& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeaguePrizePool)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      prize_pool_ = from.prize_pool_;
    }
    if (cached_has_bits & 0x00000002u) {
      increment_per_second_ = from.increment_per_second_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeaguePrizePool::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeaguePrizePool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeaguePrizePool::CopyFrom(const CMsgDOTALeaguePrizePool& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeaguePrizePool)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeaguePrizePool::IsInitialized() const {
  return true;
}

void CMsgDOTALeaguePrizePool::Swap(CMsgDOTALeaguePrizePool* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeaguePrizePool::InternalSwap(CMsgDOTALeaguePrizePool* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(prize_pool_, other->prize_pool_);
  swap(increment_per_second_, other->increment_per_second_);
}

::google::protobuf::Metadata CMsgDOTALeaguePrizePool::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeagueInfoListAdminsRequest::InitAsDefaultInstance() {
}
class CMsgDOTALeagueInfoListAdminsRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeagueInfoListAdminsRequest::CMsgDOTALeagueInfoListAdminsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeagueInfoListAdminsRequest)
}
CMsgDOTALeagueInfoListAdminsRequest::CMsgDOTALeagueInfoListAdminsRequest(const CMsgDOTALeagueInfoListAdminsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeagueInfoListAdminsRequest)
}

void CMsgDOTALeagueInfoListAdminsRequest::SharedCtor() {
}

CMsgDOTALeagueInfoListAdminsRequest::~CMsgDOTALeagueInfoListAdminsRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeagueInfoListAdminsRequest)
  SharedDtor();
}

void CMsgDOTALeagueInfoListAdminsRequest::SharedDtor() {
}

void CMsgDOTALeagueInfoListAdminsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeagueInfoListAdminsRequest& CMsgDOTALeagueInfoListAdminsRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeagueInfoListAdminsRequest_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeagueInfoListAdminsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeagueInfoListAdminsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeagueInfoListAdminsRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeagueInfoListAdminsRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeagueInfoListAdminsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeagueInfoListAdminsRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeagueInfoListAdminsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeagueInfoListAdminsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeagueInfoListAdminsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeagueInfoListAdminsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeagueInfoListAdminsRequest)
}

::google::protobuf::uint8* CMsgDOTALeagueInfoListAdminsRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeagueInfoListAdminsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeagueInfoListAdminsRequest)
  return target;
}

size_t CMsgDOTALeagueInfoListAdminsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeagueInfoListAdminsRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueInfoListAdminsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeagueInfoListAdminsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueInfoListAdminsRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeagueInfoListAdminsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeagueInfoListAdminsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeagueInfoListAdminsRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueInfoListAdminsRequest::MergeFrom(const CMsgDOTALeagueInfoListAdminsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeagueInfoListAdminsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgDOTALeagueInfoListAdminsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeagueInfoListAdminsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueInfoListAdminsRequest::CopyFrom(const CMsgDOTALeagueInfoListAdminsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeagueInfoListAdminsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueInfoListAdminsRequest::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueInfoListAdminsRequest::Swap(CMsgDOTALeagueInfoListAdminsRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeagueInfoListAdminsRequest::InternalSwap(CMsgDOTALeagueInfoListAdminsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgDOTALeagueInfoListAdminsRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeagueNodeRequest::InitAsDefaultInstance() {
}
class CMsgDOTALeagueNodeRequest::HasBitSetters {
 public:
  static void set_has_league_id(CMsgDOTALeagueNodeRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_node_id(CMsgDOTALeagueNodeRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeagueNodeRequest::kLeagueIdFieldNumber;
const int CMsgDOTALeagueNodeRequest::kNodeIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeagueNodeRequest::CMsgDOTALeagueNodeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeagueNodeRequest)
}
CMsgDOTALeagueNodeRequest::CMsgDOTALeagueNodeRequest(const CMsgDOTALeagueNodeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&league_id_, &from.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_id_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(node_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeagueNodeRequest)
}

void CMsgDOTALeagueNodeRequest::SharedCtor() {
  ::memset(&league_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_id_) -
      reinterpret_cast<char*>(&league_id_)) + sizeof(node_id_));
}

CMsgDOTALeagueNodeRequest::~CMsgDOTALeagueNodeRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeagueNodeRequest)
  SharedDtor();
}

void CMsgDOTALeagueNodeRequest::SharedDtor() {
}

void CMsgDOTALeagueNodeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeagueNodeRequest& CMsgDOTALeagueNodeRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeagueNodeRequest_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeagueNodeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeagueNodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&node_id_) -
        reinterpret_cast<char*>(&league_id_)) + sizeof(node_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeagueNodeRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeagueNodeRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 node_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_node_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeagueNodeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeagueNodeRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_node_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeagueNodeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeagueNodeRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeagueNodeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeagueNodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->league_id(), output);
  }

  // optional uint32 node_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->node_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeagueNodeRequest)
}

::google::protobuf::uint8* CMsgDOTALeagueNodeRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeagueNodeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->league_id(), target);
  }

  // optional uint32 node_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->node_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeagueNodeRequest)
  return target;
}

size_t CMsgDOTALeagueNodeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeagueNodeRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 league_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 node_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueNodeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeagueNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueNodeRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeagueNodeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeagueNodeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeagueNodeRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueNodeRequest::MergeFrom(const CMsgDOTALeagueNodeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeagueNodeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      node_id_ = from.node_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeagueNodeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeagueNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueNodeRequest::CopyFrom(const CMsgDOTALeagueNodeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeagueNodeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueNodeRequest::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueNodeRequest::Swap(CMsgDOTALeagueNodeRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeagueNodeRequest::InternalSwap(CMsgDOTALeagueNodeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(league_id_, other->league_id_);
  swap(node_id_, other->node_id_);
}

::google::protobuf::Metadata CMsgDOTALeagueNodeRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeagueNodeResponse::InitAsDefaultInstance() {
  ::proto::dota::_CMsgDOTALeagueNodeResponse_default_instance_._instance.get_mutable()->node_ = const_cast< ::proto::dota::CMsgDOTALeagueNode*>(
      ::proto::dota::CMsgDOTALeagueNode::internal_default_instance());
}
class CMsgDOTALeagueNodeResponse::HasBitSetters {
 public:
  static const ::proto::dota::CMsgDOTALeagueNode& node(const CMsgDOTALeagueNodeResponse* msg);
  static void set_has_node(CMsgDOTALeagueNodeResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgDOTALeagueNode&
CMsgDOTALeagueNodeResponse::HasBitSetters::node(const CMsgDOTALeagueNodeResponse* msg) {
  return *msg->node_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeagueNodeResponse::kNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeagueNodeResponse::CMsgDOTALeagueNodeResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeagueNodeResponse)
}
CMsgDOTALeagueNodeResponse::CMsgDOTALeagueNodeResponse(const CMsgDOTALeagueNodeResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_node()) {
    node_ = new ::proto::dota::CMsgDOTALeagueNode(*from.node_);
  } else {
    node_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeagueNodeResponse)
}

void CMsgDOTALeagueNodeResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTALeagueNodeResponse_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  node_ = nullptr;
}

CMsgDOTALeagueNodeResponse::~CMsgDOTALeagueNodeResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeagueNodeResponse)
  SharedDtor();
}

void CMsgDOTALeagueNodeResponse::SharedDtor() {
  if (this != internal_default_instance()) delete node_;
}

void CMsgDOTALeagueNodeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeagueNodeResponse& CMsgDOTALeagueNodeResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeagueNodeResponse_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeagueNodeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeagueNodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(node_ != nullptr);
    node_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeagueNodeResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeagueNodeResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTALeagueNode node = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTALeagueNode::_InternalParse;
        object = msg->mutable_node();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeagueNodeResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeagueNodeResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTALeagueNode node = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeagueNodeResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeagueNodeResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeagueNodeResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeagueNodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTALeagueNode node = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::node(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeagueNodeResponse)
}

::google::protobuf::uint8* CMsgDOTALeagueNodeResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeagueNodeResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTALeagueNode node = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::node(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeagueNodeResponse)
  return target;
}

size_t CMsgDOTALeagueNodeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeagueNodeResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgDOTALeagueNode node = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *node_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueNodeResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeagueNodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueNodeResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeagueNodeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeagueNodeResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeagueNodeResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueNodeResponse::MergeFrom(const CMsgDOTALeagueNodeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeagueNodeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_node()) {
    mutable_node()->::proto::dota::CMsgDOTALeagueNode::MergeFrom(from.node());
  }
}

void CMsgDOTALeagueNodeResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeagueNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueNodeResponse::CopyFrom(const CMsgDOTALeagueNodeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeagueNodeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueNodeResponse::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueNodeResponse::Swap(CMsgDOTALeagueNodeResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeagueNodeResponse::InternalSwap(CMsgDOTALeagueNodeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(node_, other->node_);
}

::google::protobuf::Metadata CMsgDOTALeagueNodeResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeagueAvailableLobbyNodesRequest::InitAsDefaultInstance() {
}
class CMsgDOTALeagueAvailableLobbyNodesRequest::HasBitSetters {
 public:
  static void set_has_league_id(CMsgDOTALeagueAvailableLobbyNodesRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeagueAvailableLobbyNodesRequest::kLeagueIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeagueAvailableLobbyNodesRequest::CMsgDOTALeagueAvailableLobbyNodesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeagueAvailableLobbyNodesRequest)
}
CMsgDOTALeagueAvailableLobbyNodesRequest::CMsgDOTALeagueAvailableLobbyNodesRequest(const CMsgDOTALeagueAvailableLobbyNodesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  league_id_ = from.league_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeagueAvailableLobbyNodesRequest)
}

void CMsgDOTALeagueAvailableLobbyNodesRequest::SharedCtor() {
  league_id_ = 0u;
}

CMsgDOTALeagueAvailableLobbyNodesRequest::~CMsgDOTALeagueAvailableLobbyNodesRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeagueAvailableLobbyNodesRequest)
  SharedDtor();
}

void CMsgDOTALeagueAvailableLobbyNodesRequest::SharedDtor() {
}

void CMsgDOTALeagueAvailableLobbyNodesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeagueAvailableLobbyNodesRequest& CMsgDOTALeagueAvailableLobbyNodesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeagueAvailableLobbyNodesRequest_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeagueAvailableLobbyNodesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeagueAvailableLobbyNodesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  league_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeagueAvailableLobbyNodesRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeagueAvailableLobbyNodesRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeagueAvailableLobbyNodesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeagueAvailableLobbyNodesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 league_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeagueAvailableLobbyNodesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeagueAvailableLobbyNodesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeagueAvailableLobbyNodesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeagueAvailableLobbyNodesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->league_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeagueAvailableLobbyNodesRequest)
}

::google::protobuf::uint8* CMsgDOTALeagueAvailableLobbyNodesRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeagueAvailableLobbyNodesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 league_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->league_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeagueAvailableLobbyNodesRequest)
  return target;
}

size_t CMsgDOTALeagueAvailableLobbyNodesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeagueAvailableLobbyNodesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 league_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->league_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueAvailableLobbyNodesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeagueAvailableLobbyNodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueAvailableLobbyNodesRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeagueAvailableLobbyNodesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeagueAvailableLobbyNodesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeagueAvailableLobbyNodesRequest)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueAvailableLobbyNodesRequest::MergeFrom(const CMsgDOTALeagueAvailableLobbyNodesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeagueAvailableLobbyNodesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_league_id()) {
    set_league_id(from.league_id());
  }
}

void CMsgDOTALeagueAvailableLobbyNodesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeagueAvailableLobbyNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueAvailableLobbyNodesRequest::CopyFrom(const CMsgDOTALeagueAvailableLobbyNodesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeagueAvailableLobbyNodesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueAvailableLobbyNodesRequest::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueAvailableLobbyNodesRequest::Swap(CMsgDOTALeagueAvailableLobbyNodesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeagueAvailableLobbyNodesRequest::InternalSwap(CMsgDOTALeagueAvailableLobbyNodesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(league_id_, other->league_id_);
}

::google::protobuf::Metadata CMsgDOTALeagueAvailableLobbyNodesRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::InitAsDefaultInstance() {
}
class CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::HasBitSetters {
 public:
  static void set_has_node_id(CMsgDOTALeagueAvailableLobbyNodes_NodeInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_node_name(CMsgDOTALeagueAvailableLobbyNodes_NodeInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_node_group_name(CMsgDOTALeagueAvailableLobbyNodes_NodeInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_team_id_1(CMsgDOTALeagueAvailableLobbyNodes_NodeInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_team_id_2(CMsgDOTALeagueAvailableLobbyNodes_NodeInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::kNodeIdFieldNumber;
const int CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::kNodeNameFieldNumber;
const int CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::kNodeGroupNameFieldNumber;
const int CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::kTeamId1FieldNumber;
const int CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::kTeamId2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
}
CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo(const CMsgDOTALeagueAvailableLobbyNodes_NodeInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_node_name()) {
    node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
  }
  node_group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_node_group_name()) {
    node_group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_group_name_);
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_id_2_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(team_id_2_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
}

void CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTALeagueAvailableLobbyNodes_NodeInfo_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_group_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_id_2_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(team_id_2_));
}

CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::~CMsgDOTALeagueAvailableLobbyNodes_NodeInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
  SharedDtor();
}

void CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::SharedDtor() {
  node_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_group_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeagueAvailableLobbyNodes_NodeInfo& CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeagueAvailableLobbyNodes_NodeInfo_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      node_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      node_group_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&node_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_2_) -
        reinterpret_cast<char*>(&node_id_)) + sizeof(team_id_2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeagueAvailableLobbyNodes_NodeInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 node_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_node_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string node_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo.node_name");
        object = msg->mutable_node_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string node_group_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo.node_group_name");
        object = msg->mutable_node_group_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 team_id_1 = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_team_id_1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_id_2 = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_team_id_2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_node_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string node_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->node_name().data(), static_cast<int>(this->node_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo.node_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string node_group_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->node_group_name().data(), static_cast<int>(this->node_group_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo.node_group_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id_1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_team_id_1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id_2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_team_id_2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 node_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->node_id(), output);
  }

  // optional string node_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_name().data(), static_cast<int>(this->node_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo.node_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->node_name(), output);
  }

  // optional string node_group_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_group_name().data(), static_cast<int>(this->node_group_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo.node_group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->node_group_name(), output);
  }

  // optional uint32 team_id_1 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team_id_1(), output);
  }

  // optional uint32 team_id_2 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_id_2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
}

::google::protobuf::uint8* CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 node_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->node_id(), target);
  }

  // optional string node_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_name().data(), static_cast<int>(this->node_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo.node_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->node_name(), target);
  }

  // optional string node_group_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_group_name().data(), static_cast<int>(this->node_group_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo.node_group_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->node_group_name(), target);
  }

  // optional uint32 team_id_1 = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team_id_1(), target);
  }

  // optional uint32 team_id_2 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_id_2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
  return target;
}

size_t CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string node_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_name());
    }

    // optional string node_group_name = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_group_name());
    }

    // optional uint32 node_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_id());
    }

    // optional uint32 team_id_1 = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id_1());
    }

    // optional uint32 team_id_2 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id_2());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueAvailableLobbyNodes_NodeInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeagueAvailableLobbyNodes_NodeInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::MergeFrom(const CMsgDOTALeagueAvailableLobbyNodes_NodeInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      node_group_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_group_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      node_id_ = from.node_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_id_1_ = from.team_id_1_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_id_2_ = from.team_id_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::CopyFrom(const CMsgDOTALeagueAvailableLobbyNodes_NodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::Swap(CMsgDOTALeagueAvailableLobbyNodes_NodeInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::InternalSwap(CMsgDOTALeagueAvailableLobbyNodes_NodeInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  node_name_.Swap(&other->node_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  node_group_name_.Swap(&other->node_group_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(node_id_, other->node_id_);
  swap(team_id_1_, other->team_id_1_);
  swap(team_id_2_, other->team_id_2_);
}

::google::protobuf::Metadata CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeagueAvailableLobbyNodes::InitAsDefaultInstance() {
}
class CMsgDOTALeagueAvailableLobbyNodes::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeagueAvailableLobbyNodes::kNodeInfosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeagueAvailableLobbyNodes::CMsgDOTALeagueAvailableLobbyNodes()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeagueAvailableLobbyNodes)
}
CMsgDOTALeagueAvailableLobbyNodes::CMsgDOTALeagueAvailableLobbyNodes(const CMsgDOTALeagueAvailableLobbyNodes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      node_infos_(from.node_infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeagueAvailableLobbyNodes)
}

void CMsgDOTALeagueAvailableLobbyNodes::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTALeagueAvailableLobbyNodes_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
}

CMsgDOTALeagueAvailableLobbyNodes::~CMsgDOTALeagueAvailableLobbyNodes() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeagueAvailableLobbyNodes)
  SharedDtor();
}

void CMsgDOTALeagueAvailableLobbyNodes::SharedDtor() {
}

void CMsgDOTALeagueAvailableLobbyNodes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeagueAvailableLobbyNodes& CMsgDOTALeagueAvailableLobbyNodes::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeagueAvailableLobbyNodes_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeagueAvailableLobbyNodes::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeagueAvailableLobbyNodes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_infos_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeagueAvailableLobbyNodes::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeagueAvailableLobbyNodes*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo node_infos = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo::_InternalParse;
          object = msg->add_node_infos();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeagueAvailableLobbyNodes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeagueAvailableLobbyNodes)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo node_infos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_node_infos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeagueAvailableLobbyNodes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeagueAvailableLobbyNodes)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeagueAvailableLobbyNodes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeagueAvailableLobbyNodes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo node_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_infos_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->node_infos(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeagueAvailableLobbyNodes)
}

::google::protobuf::uint8* CMsgDOTALeagueAvailableLobbyNodes::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeagueAvailableLobbyNodes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo node_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_infos_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->node_infos(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeagueAvailableLobbyNodes)
  return target;
}

size_t CMsgDOTALeagueAvailableLobbyNodes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeagueAvailableLobbyNodes)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTALeagueAvailableLobbyNodes.NodeInfo node_infos = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->node_infos_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->node_infos(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueAvailableLobbyNodes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeagueAvailableLobbyNodes)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueAvailableLobbyNodes* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeagueAvailableLobbyNodes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeagueAvailableLobbyNodes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeagueAvailableLobbyNodes)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueAvailableLobbyNodes::MergeFrom(const CMsgDOTALeagueAvailableLobbyNodes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeagueAvailableLobbyNodes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_infos_.MergeFrom(from.node_infos_);
}

void CMsgDOTALeagueAvailableLobbyNodes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeagueAvailableLobbyNodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueAvailableLobbyNodes::CopyFrom(const CMsgDOTALeagueAvailableLobbyNodes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeagueAvailableLobbyNodes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueAvailableLobbyNodes::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueAvailableLobbyNodes::Swap(CMsgDOTALeagueAvailableLobbyNodes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeagueAvailableLobbyNodes::InternalSwap(CMsgDOTALeagueAvailableLobbyNodes* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&node_infos_)->InternalSwap(CastToBase(&other->node_infos_));
}

::google::protobuf::Metadata CMsgDOTALeagueAvailableLobbyNodes::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeagueNodeResults_Result::InitAsDefaultInstance() {
}
class CMsgDOTALeagueNodeResults_Result::HasBitSetters {
 public:
  static void set_has_node_id(CMsgDOTALeagueNodeResults_Result* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_winning_node_id(CMsgDOTALeagueNodeResults_Result* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_losing_node_id(CMsgDOTALeagueNodeResults_Result* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_incoming_node_id_1(CMsgDOTALeagueNodeResults_Result* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_incoming_node_id_2(CMsgDOTALeagueNodeResults_Result* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_team_id_1(CMsgDOTALeagueNodeResults_Result* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_team_id_2(CMsgDOTALeagueNodeResults_Result* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_team_1_name(CMsgDOTALeagueNodeResults_Result* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_2_name(CMsgDOTALeagueNodeResults_Result* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_team_1_wins(CMsgDOTALeagueNodeResults_Result* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_team_2_wins(CMsgDOTALeagueNodeResults_Result* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_winning_team_id(CMsgDOTALeagueNodeResults_Result* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_losing_team_id(CMsgDOTALeagueNodeResults_Result* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_has_started(CMsgDOTALeagueNodeResults_Result* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_is_completed(CMsgDOTALeagueNodeResults_Result* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_scheduled_time(CMsgDOTALeagueNodeResults_Result* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeagueNodeResults_Result::kNodeIdFieldNumber;
const int CMsgDOTALeagueNodeResults_Result::kWinningNodeIdFieldNumber;
const int CMsgDOTALeagueNodeResults_Result::kLosingNodeIdFieldNumber;
const int CMsgDOTALeagueNodeResults_Result::kIncomingNodeId1FieldNumber;
const int CMsgDOTALeagueNodeResults_Result::kIncomingNodeId2FieldNumber;
const int CMsgDOTALeagueNodeResults_Result::kTeamId1FieldNumber;
const int CMsgDOTALeagueNodeResults_Result::kTeamId2FieldNumber;
const int CMsgDOTALeagueNodeResults_Result::kTeam1NameFieldNumber;
const int CMsgDOTALeagueNodeResults_Result::kTeam2NameFieldNumber;
const int CMsgDOTALeagueNodeResults_Result::kTeam1WinsFieldNumber;
const int CMsgDOTALeagueNodeResults_Result::kTeam2WinsFieldNumber;
const int CMsgDOTALeagueNodeResults_Result::kWinningTeamIdFieldNumber;
const int CMsgDOTALeagueNodeResults_Result::kLosingTeamIdFieldNumber;
const int CMsgDOTALeagueNodeResults_Result::kHasStartedFieldNumber;
const int CMsgDOTALeagueNodeResults_Result::kIsCompletedFieldNumber;
const int CMsgDOTALeagueNodeResults_Result::kScheduledTimeFieldNumber;
const int CMsgDOTALeagueNodeResults_Result::kMatchIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeagueNodeResults_Result::CMsgDOTALeagueNodeResults_Result()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeagueNodeResults.Result)
}
CMsgDOTALeagueNodeResults_Result::CMsgDOTALeagueNodeResults_Result(const CMsgDOTALeagueNodeResults_Result& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      match_ids_(from.match_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_1_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_1_name()) {
    team_1_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_1_name_);
  }
  team_2_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_2_name()) {
    team_2_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_2_name_);
  }
  ::memcpy(&node_id_, &from.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&scheduled_time_) -
    reinterpret_cast<char*>(&node_id_)) + sizeof(scheduled_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeagueNodeResults.Result)
}

void CMsgDOTALeagueNodeResults_Result::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTALeagueNodeResults_Result_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  team_1_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_2_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scheduled_time_) -
      reinterpret_cast<char*>(&node_id_)) + sizeof(scheduled_time_));
}

CMsgDOTALeagueNodeResults_Result::~CMsgDOTALeagueNodeResults_Result() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeagueNodeResults.Result)
  SharedDtor();
}

void CMsgDOTALeagueNodeResults_Result::SharedDtor() {
  team_1_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_2_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTALeagueNodeResults_Result::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeagueNodeResults_Result& CMsgDOTALeagueNodeResults_Result::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeagueNodeResults_Result_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeagueNodeResults_Result::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeagueNodeResults.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      team_1_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      team_2_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&node_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_1_) -
        reinterpret_cast<char*>(&node_id_)) + sizeof(team_id_1_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&team_id_2_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&scheduled_time_) -
        reinterpret_cast<char*>(&team_id_2_)) + sizeof(scheduled_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeagueNodeResults_Result::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeagueNodeResults_Result*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 node_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_node_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 winning_node_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_winning_node_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 losing_node_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_losing_node_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 incoming_node_id_1 = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_incoming_node_id_1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 incoming_node_id_2 = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_incoming_node_id_2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_id_1 = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_team_id_1(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_id_2 = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_team_id_2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string team_1_name = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTALeagueNodeResults.Result.team_1_name");
        object = msg->mutable_team_1_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string team_2_name = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTALeagueNodeResults.Result.team_2_name");
        object = msg->mutable_team_2_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 team_1_wins = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_team_1_wins(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_2_wins = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_team_2_wins(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 winning_team_id = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_winning_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 losing_team_id = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_losing_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool has_started = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_has_started(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool is_completed = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_is_completed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 scheduled_time = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_scheduled_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint64 match_ids = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) == 136) {
          do {
            msg->add_match_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 392 && (ptr += 2));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
        object = msg->mutable_match_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeagueNodeResults_Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeagueNodeResults.Result)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 node_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_node_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 winning_node_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_winning_node_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winning_node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 losing_node_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_losing_node_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losing_node_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 incoming_node_id_1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_incoming_node_id_1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &incoming_node_id_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 incoming_node_id_2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_incoming_node_id_2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &incoming_node_id_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id_1 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_team_id_1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id_2 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_team_id_2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_1_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_1_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_1_name().data(), static_cast<int>(this->team_1_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTALeagueNodeResults.Result.team_1_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_2_name = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_2_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_2_name().data(), static_cast<int>(this->team_2_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTALeagueNodeResults.Result.team_2_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_1_wins = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_team_1_wins(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_1_wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_2_wins = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_team_2_wins(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_2_wins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 winning_team_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_winning_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winning_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 losing_team_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_losing_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &losing_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool has_started = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_has_started(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &has_started_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_completed = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_is_completed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_completed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 scheduled_time = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_scheduled_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scheduled_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 match_ids = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 2, 136u, input, this->mutable_match_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_match_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeagueNodeResults.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeagueNodeResults.Result)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeagueNodeResults_Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeagueNodeResults.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 node_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->node_id(), output);
  }

  // optional uint32 winning_node_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->winning_node_id(), output);
  }

  // optional uint32 losing_node_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->losing_node_id(), output);
  }

  // optional uint32 incoming_node_id_1 = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->incoming_node_id_1(), output);
  }

  // optional uint32 incoming_node_id_2 = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->incoming_node_id_2(), output);
  }

  // optional uint32 team_id_1 = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->team_id_1(), output);
  }

  // optional uint32 team_id_2 = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->team_id_2(), output);
  }

  // optional string team_1_name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_1_name().data(), static_cast<int>(this->team_1_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeagueNodeResults.Result.team_1_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->team_1_name(), output);
  }

  // optional string team_2_name = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_2_name().data(), static_cast<int>(this->team_2_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeagueNodeResults.Result.team_2_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->team_2_name(), output);
  }

  // optional uint32 team_1_wins = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->team_1_wins(), output);
  }

  // optional uint32 team_2_wins = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->team_2_wins(), output);
  }

  // optional uint32 winning_team_id = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->winning_team_id(), output);
  }

  // optional uint32 losing_team_id = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->losing_team_id(), output);
  }

  // optional bool has_started = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->has_started(), output);
  }

  // optional bool is_completed = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->is_completed(), output);
  }

  // optional uint32 scheduled_time = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->scheduled_time(), output);
  }

  // repeated uint64 match_ids = 17;
  for (int i = 0, n = this->match_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      17, this->match_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeagueNodeResults.Result)
}

::google::protobuf::uint8* CMsgDOTALeagueNodeResults_Result::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeagueNodeResults.Result)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 node_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->node_id(), target);
  }

  // optional uint32 winning_node_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->winning_node_id(), target);
  }

  // optional uint32 losing_node_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->losing_node_id(), target);
  }

  // optional uint32 incoming_node_id_1 = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->incoming_node_id_1(), target);
  }

  // optional uint32 incoming_node_id_2 = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->incoming_node_id_2(), target);
  }

  // optional uint32 team_id_1 = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->team_id_1(), target);
  }

  // optional uint32 team_id_2 = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->team_id_2(), target);
  }

  // optional string team_1_name = 8;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_1_name().data(), static_cast<int>(this->team_1_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeagueNodeResults.Result.team_1_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->team_1_name(), target);
  }

  // optional string team_2_name = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_2_name().data(), static_cast<int>(this->team_2_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTALeagueNodeResults.Result.team_2_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->team_2_name(), target);
  }

  // optional uint32 team_1_wins = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->team_1_wins(), target);
  }

  // optional uint32 team_2_wins = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->team_2_wins(), target);
  }

  // optional uint32 winning_team_id = 12;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->winning_team_id(), target);
  }

  // optional uint32 losing_team_id = 13;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->losing_team_id(), target);
  }

  // optional bool has_started = 14;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->has_started(), target);
  }

  // optional bool is_completed = 15;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->is_completed(), target);
  }

  // optional uint32 scheduled_time = 16;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->scheduled_time(), target);
  }

  // repeated uint64 match_ids = 17;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(17, this->match_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeagueNodeResults.Result)
  return target;
}

size_t CMsgDOTALeagueNodeResults_Result::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeagueNodeResults.Result)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 match_ids = 17;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->match_ids_);
    total_size += 2 *
                  ::google::protobuf::internal::FromIntSize(this->match_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string team_1_name = 8;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_1_name());
    }

    // optional string team_2_name = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_2_name());
    }

    // optional uint32 node_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_id());
    }

    // optional uint32 winning_node_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winning_node_id());
    }

    // optional uint32 losing_node_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losing_node_id());
    }

    // optional uint32 incoming_node_id_1 = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->incoming_node_id_1());
    }

    // optional uint32 incoming_node_id_2 = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->incoming_node_id_2());
    }

    // optional uint32 team_id_1 = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id_1());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 team_id_2 = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id_2());
    }

    // optional uint32 team_1_wins = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_1_wins());
    }

    // optional uint32 team_2_wins = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_2_wins());
    }

    // optional uint32 winning_team_id = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winning_team_id());
    }

    // optional uint32 losing_team_id = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->losing_team_id());
    }

    // optional bool has_started = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 1;
    }

    // optional bool is_completed = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 1;
    }

    // optional uint32 scheduled_time = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->scheduled_time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueNodeResults_Result::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeagueNodeResults.Result)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueNodeResults_Result* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeagueNodeResults_Result>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeagueNodeResults.Result)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeagueNodeResults.Result)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueNodeResults_Result::MergeFrom(const CMsgDOTALeagueNodeResults_Result& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeagueNodeResults.Result)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_ids_.MergeFrom(from.match_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      team_1_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_1_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      team_2_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_2_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      node_id_ = from.node_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      winning_node_id_ = from.winning_node_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      losing_node_id_ = from.losing_node_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      incoming_node_id_1_ = from.incoming_node_id_1_;
    }
    if (cached_has_bits & 0x00000040u) {
      incoming_node_id_2_ = from.incoming_node_id_2_;
    }
    if (cached_has_bits & 0x00000080u) {
      team_id_1_ = from.team_id_1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      team_id_2_ = from.team_id_2_;
    }
    if (cached_has_bits & 0x00000200u) {
      team_1_wins_ = from.team_1_wins_;
    }
    if (cached_has_bits & 0x00000400u) {
      team_2_wins_ = from.team_2_wins_;
    }
    if (cached_has_bits & 0x00000800u) {
      winning_team_id_ = from.winning_team_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      losing_team_id_ = from.losing_team_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      has_started_ = from.has_started_;
    }
    if (cached_has_bits & 0x00004000u) {
      is_completed_ = from.is_completed_;
    }
    if (cached_has_bits & 0x00008000u) {
      scheduled_time_ = from.scheduled_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTALeagueNodeResults_Result::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeagueNodeResults.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueNodeResults_Result::CopyFrom(const CMsgDOTALeagueNodeResults_Result& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeagueNodeResults.Result)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueNodeResults_Result::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueNodeResults_Result::Swap(CMsgDOTALeagueNodeResults_Result* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeagueNodeResults_Result::InternalSwap(CMsgDOTALeagueNodeResults_Result* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  match_ids_.InternalSwap(&other->match_ids_);
  team_1_name_.Swap(&other->team_1_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team_2_name_.Swap(&other->team_2_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(node_id_, other->node_id_);
  swap(winning_node_id_, other->winning_node_id_);
  swap(losing_node_id_, other->losing_node_id_);
  swap(incoming_node_id_1_, other->incoming_node_id_1_);
  swap(incoming_node_id_2_, other->incoming_node_id_2_);
  swap(team_id_1_, other->team_id_1_);
  swap(team_id_2_, other->team_id_2_);
  swap(team_1_wins_, other->team_1_wins_);
  swap(team_2_wins_, other->team_2_wins_);
  swap(winning_team_id_, other->winning_team_id_);
  swap(losing_team_id_, other->losing_team_id_);
  swap(has_started_, other->has_started_);
  swap(is_completed_, other->is_completed_);
  swap(scheduled_time_, other->scheduled_time_);
}

::google::protobuf::Metadata CMsgDOTALeagueNodeResults_Result::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeagueNodeResults::InitAsDefaultInstance() {
}
class CMsgDOTALeagueNodeResults::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeagueNodeResults::kNodeResultsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeagueNodeResults::CMsgDOTALeagueNodeResults()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeagueNodeResults)
}
CMsgDOTALeagueNodeResults::CMsgDOTALeagueNodeResults(const CMsgDOTALeagueNodeResults& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      node_results_(from.node_results_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeagueNodeResults)
}

void CMsgDOTALeagueNodeResults::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTALeagueNodeResults_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
}

CMsgDOTALeagueNodeResults::~CMsgDOTALeagueNodeResults() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeagueNodeResults)
  SharedDtor();
}

void CMsgDOTALeagueNodeResults::SharedDtor() {
}

void CMsgDOTALeagueNodeResults::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeagueNodeResults& CMsgDOTALeagueNodeResults::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeagueNodeResults_dota_5fgcmessages_5fcommon_5fleague_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeagueNodeResults::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeagueNodeResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_results_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeagueNodeResults::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeagueNodeResults*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTALeagueNodeResults.Result node_results = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTALeagueNodeResults_Result::_InternalParse;
          object = msg->add_node_results();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeagueNodeResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeagueNodeResults)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTALeagueNodeResults.Result node_results = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_node_results()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeagueNodeResults)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeagueNodeResults)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeagueNodeResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeagueNodeResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTALeagueNodeResults.Result node_results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_results_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->node_results(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeagueNodeResults)
}

::google::protobuf::uint8* CMsgDOTALeagueNodeResults::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeagueNodeResults)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTALeagueNodeResults.Result node_results = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->node_results_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->node_results(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeagueNodeResults)
  return target;
}

size_t CMsgDOTALeagueNodeResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeagueNodeResults)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTALeagueNodeResults.Result node_results = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->node_results_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->node_results(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeagueNodeResults::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeagueNodeResults)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeagueNodeResults* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeagueNodeResults>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeagueNodeResults)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeagueNodeResults)
    MergeFrom(*source);
  }
}

void CMsgDOTALeagueNodeResults::MergeFrom(const CMsgDOTALeagueNodeResults& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeagueNodeResults)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  node_results_.MergeFrom(from.node_results_);
}

void CMsgDOTALeagueNodeResults::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeagueNodeResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeagueNodeResults::CopyFrom(const CMsgDOTALeagueNodeResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeagueNodeResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeagueNodeResults::IsInitialized() const {
  return true;
}

void CMsgDOTALeagueNodeResults::Swap(CMsgDOTALeagueNodeResults* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeagueNodeResults::InternalSwap(CMsgDOTALeagueNodeResults* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&node_results_)->InternalSwap(CastToBase(&other->node_results_));
}

::google::protobuf::Metadata CMsgDOTALeagueNodeResults::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fcommon_5fleague_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fcommon_5fleague_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeagueNode_MatchDetails* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeagueNode_MatchDetails >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeagueNode_MatchDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeagueNode* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeagueNode >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeagueNode >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeagueNodeGroup_TeamStanding* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeagueNodeGroup_TeamStanding >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeagueNodeGroup_TeamStanding >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeagueNodeGroup* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeagueNodeGroup >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeagueNodeGroup >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeague_Info* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeague_Info >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeague_Info >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeague_Admin* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeague_Admin >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeague_Admin >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeague_PrizePoolItem* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeague_PrizePoolItem >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeague_PrizePoolItem >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeague_PrizePool* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeague_PrizePool >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeague_PrizePool >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeague_Stream* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeague_Stream >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeague_Stream >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeague_SeriesInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeague_SeriesInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeague_SeriesInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeague_Player* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeague_Player >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeague_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeague* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeague >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeague >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeagueInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeagueInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeagueInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeagueInfoList* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeagueInfoList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeagueInfoList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeagueLiveGames_LiveGame* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeagueLiveGames_LiveGame >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeagueLiveGames_LiveGame >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeagueLiveGames* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeagueLiveGames >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeagueLiveGames >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeagueMessages_Message* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeagueMessages_Message >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeagueMessages_Message >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeagueMessages* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeagueMessages >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeagueMessages >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeaguePrizePool* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeaguePrizePool >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeaguePrizePool >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeagueInfoListAdminsRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeagueInfoListAdminsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeagueInfoListAdminsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeagueNodeRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeagueNodeRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeagueNodeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeagueNodeResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeagueNodeResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeagueNodeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeagueAvailableLobbyNodesRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeagueAvailableLobbyNodesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeagueAvailableLobbyNodesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeagueAvailableLobbyNodes_NodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeagueAvailableLobbyNodes* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeagueAvailableLobbyNodes >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeagueAvailableLobbyNodes >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeagueNodeResults_Result* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeagueNodeResults_Result >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeagueNodeResults_Result >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeagueNodeResults* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeagueNodeResults >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeagueNodeResults >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
