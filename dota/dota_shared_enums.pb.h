// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_shared_enums.proto

#ifndef PROTOBUF_INCLUDED_dota_5fshared_5fenums_2eproto
#define PROTOBUF_INCLUDED_dota_5fshared_5fenums_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dota_5fshared_5fenums_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_dota_5fshared_5fenums_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_dota_5fshared_5fenums_2eproto();
namespace proto {
namespace dota {
class CDOTAClientHardwareSpecs;
class CDOTAClientHardwareSpecsDefaultTypeInternal;
extern CDOTAClientHardwareSpecsDefaultTypeInternal _CDOTAClientHardwareSpecs_default_instance_;
class CDOTASaveGame;
class CDOTASaveGameDefaultTypeInternal;
extern CDOTASaveGameDefaultTypeInternal _CDOTASaveGame_default_instance_;
class CDOTASaveGame_Player;
class CDOTASaveGame_PlayerDefaultTypeInternal;
extern CDOTASaveGame_PlayerDefaultTypeInternal _CDOTASaveGame_Player_default_instance_;
class CDOTASaveGame_SaveInstance;
class CDOTASaveGame_SaveInstanceDefaultTypeInternal;
extern CDOTASaveGame_SaveInstanceDefaultTypeInternal _CDOTASaveGame_SaveInstance_default_instance_;
class CDOTASaveGame_SaveInstance_PlayerPositions;
class CDOTASaveGame_SaveInstance_PlayerPositionsDefaultTypeInternal;
extern CDOTASaveGame_SaveInstance_PlayerPositionsDefaultTypeInternal _CDOTASaveGame_SaveInstance_PlayerPositions_default_instance_;
class CMsgDOTACombatLogEntry;
class CMsgDOTACombatLogEntryDefaultTypeInternal;
extern CMsgDOTACombatLogEntryDefaultTypeInternal _CMsgDOTACombatLogEntry_default_instance_;
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> ::proto::dota::CDOTAClientHardwareSpecs* Arena::CreateMaybeMessage<::proto::dota::CDOTAClientHardwareSpecs>(Arena*);
template<> ::proto::dota::CDOTASaveGame* Arena::CreateMaybeMessage<::proto::dota::CDOTASaveGame>(Arena*);
template<> ::proto::dota::CDOTASaveGame_Player* Arena::CreateMaybeMessage<::proto::dota::CDOTASaveGame_Player>(Arena*);
template<> ::proto::dota::CDOTASaveGame_SaveInstance* Arena::CreateMaybeMessage<::proto::dota::CDOTASaveGame_SaveInstance>(Arena*);
template<> ::proto::dota::CDOTASaveGame_SaveInstance_PlayerPositions* Arena::CreateMaybeMessage<::proto::dota::CDOTASaveGame_SaveInstance_PlayerPositions>(Arena*);
template<> ::proto::dota::CMsgDOTACombatLogEntry* Arena::CreateMaybeMessage<::proto::dota::CMsgDOTACombatLogEntry>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace proto {
namespace dota {

enum DOTA_GameMode {
  DOTA_GAMEMODE_NONE = 0,
  DOTA_GAMEMODE_AP = 1,
  DOTA_GAMEMODE_CM = 2,
  DOTA_GAMEMODE_RD = 3,
  DOTA_GAMEMODE_SD = 4,
  DOTA_GAMEMODE_AR = 5,
  DOTA_GAMEMODE_INTRO = 6,
  DOTA_GAMEMODE_HW = 7,
  DOTA_GAMEMODE_REVERSE_CM = 8,
  DOTA_GAMEMODE_XMAS = 9,
  DOTA_GAMEMODE_TUTORIAL = 10,
  DOTA_GAMEMODE_MO = 11,
  DOTA_GAMEMODE_LP = 12,
  DOTA_GAMEMODE_POOL1 = 13,
  DOTA_GAMEMODE_FH = 14,
  DOTA_GAMEMODE_CUSTOM = 15,
  DOTA_GAMEMODE_CD = 16,
  DOTA_GAMEMODE_BD = 17,
  DOTA_GAMEMODE_ABILITY_DRAFT = 18,
  DOTA_GAMEMODE_EVENT = 19,
  DOTA_GAMEMODE_ARDM = 20,
  DOTA_GAMEMODE_1V1MID = 21,
  DOTA_GAMEMODE_ALL_DRAFT = 22,
  DOTA_GAMEMODE_TURBO = 23,
  DOTA_GAMEMODE_MUTATION = 24
};
bool DOTA_GameMode_IsValid(int value);
const DOTA_GameMode DOTA_GameMode_MIN = DOTA_GAMEMODE_NONE;
const DOTA_GameMode DOTA_GameMode_MAX = DOTA_GAMEMODE_MUTATION;
const int DOTA_GameMode_ARRAYSIZE = DOTA_GameMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_GameMode_descriptor();
inline const ::std::string& DOTA_GameMode_Name(DOTA_GameMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_GameMode_descriptor(), value);
}
inline bool DOTA_GameMode_Parse(
    const ::std::string& name, DOTA_GameMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_GameMode>(
    DOTA_GameMode_descriptor(), name, value);
}
enum DOTA_GameState {
  DOTA_GAMERULES_STATE_INIT = 0,
  DOTA_GAMERULES_STATE_WAIT_FOR_PLAYERS_TO_LOAD = 1,
  DOTA_GAMERULES_STATE_HERO_SELECTION = 2,
  DOTA_GAMERULES_STATE_STRATEGY_TIME = 3,
  DOTA_GAMERULES_STATE_PRE_GAME = 4,
  DOTA_GAMERULES_STATE_GAME_IN_PROGRESS = 5,
  DOTA_GAMERULES_STATE_POST_GAME = 6,
  DOTA_GAMERULES_STATE_DISCONNECT = 7,
  DOTA_GAMERULES_STATE_TEAM_SHOWCASE = 8,
  DOTA_GAMERULES_STATE_CUSTOM_GAME_SETUP = 9,
  DOTA_GAMERULES_STATE_WAIT_FOR_MAP_TO_LOAD = 10,
  DOTA_GAMERULES_STATE_LAST = 11
};
bool DOTA_GameState_IsValid(int value);
const DOTA_GameState DOTA_GameState_MIN = DOTA_GAMERULES_STATE_INIT;
const DOTA_GameState DOTA_GameState_MAX = DOTA_GAMERULES_STATE_LAST;
const int DOTA_GameState_ARRAYSIZE = DOTA_GameState_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_GameState_descriptor();
inline const ::std::string& DOTA_GameState_Name(DOTA_GameState value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_GameState_descriptor(), value);
}
inline bool DOTA_GameState_Parse(
    const ::std::string& name, DOTA_GameState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_GameState>(
    DOTA_GameState_descriptor(), name, value);
}
enum DOTA_GC_TEAM {
  DOTA_GC_TEAM_GOOD_GUYS = 0,
  DOTA_GC_TEAM_BAD_GUYS = 1,
  DOTA_GC_TEAM_BROADCASTER = 2,
  DOTA_GC_TEAM_SPECTATOR = 3,
  DOTA_GC_TEAM_PLAYER_POOL = 4,
  DOTA_GC_TEAM_NOTEAM = 5
};
bool DOTA_GC_TEAM_IsValid(int value);
const DOTA_GC_TEAM DOTA_GC_TEAM_MIN = DOTA_GC_TEAM_GOOD_GUYS;
const DOTA_GC_TEAM DOTA_GC_TEAM_MAX = DOTA_GC_TEAM_NOTEAM;
const int DOTA_GC_TEAM_ARRAYSIZE = DOTA_GC_TEAM_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_GC_TEAM_descriptor();
inline const ::std::string& DOTA_GC_TEAM_Name(DOTA_GC_TEAM value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_GC_TEAM_descriptor(), value);
}
inline bool DOTA_GC_TEAM_Parse(
    const ::std::string& name, DOTA_GC_TEAM* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_GC_TEAM>(
    DOTA_GC_TEAM_descriptor(), name, value);
}
enum EEvent {
  EVENT_ID_NONE = 0,
  EVENT_ID_DIRETIDE = 1,
  EVENT_ID_SPRING_FESTIVAL = 2,
  EVENT_ID_FROSTIVUS_2013 = 3,
  EVENT_ID_COMPENDIUM_2014 = 4,
  EVENT_ID_PWRD_DAC_2015 = 6,
  EVENT_ID_NEW_BLOOM_2015 = 7,
  EVENT_ID_INTERNATIONAL_2015 = 8,
  EVENT_ID_FALL_MAJOR_2015 = 9,
  EVENT_ID_ORACLE_PA = 10,
  EVENT_ID_NEW_BLOOM_2015_PREBEAST = 11,
  EVENT_ID_FROSTIVUS = 12,
  EVENT_ID_WINTER_MAJOR_2016 = 13,
  EVENT_ID_INTERNATIONAL_2016 = 14,
  EVENT_ID_FALL_MAJOR_2016 = 15,
  EVENT_ID_WINTER_MAJOR_2017 = 16,
  EVENT_ID_NEW_BLOOM_2017 = 17,
  EVENT_ID_INTERNATIONAL_2017 = 18,
  EVENT_ID_PLUS_SUBSCRIPTION = 19,
  EVENT_ID_SINGLES_DAY_2017 = 20,
  EVENT_ID_FROSTIVUS_2017 = 21,
  EVENT_ID_INTERNATIONAL_2018 = 22,
  EVENT_ID_FROSTIVUS_2018 = 23,
  EVENT_ID_NEW_BLOOM_2019 = 24,
  EVENT_ID_COUNT = 25
};
bool EEvent_IsValid(int value);
const EEvent EEvent_MIN = EVENT_ID_NONE;
const EEvent EEvent_MAX = EVENT_ID_COUNT;
const int EEvent_ARRAYSIZE = EEvent_MAX + 1;

const ::google::protobuf::EnumDescriptor* EEvent_descriptor();
inline const ::std::string& EEvent_Name(EEvent value) {
  return ::google::protobuf::internal::NameOfEnum(
    EEvent_descriptor(), value);
}
inline bool EEvent_Parse(
    const ::std::string& name, EEvent* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EEvent>(
    EEvent_descriptor(), name, value);
}
enum DOTALeaverStatus_t {
  DOTA_LEAVER_NONE = 0,
  DOTA_LEAVER_DISCONNECTED = 1,
  DOTA_LEAVER_DISCONNECTED_TOO_LONG = 2,
  DOTA_LEAVER_ABANDONED = 3,
  DOTA_LEAVER_AFK = 4,
  DOTA_LEAVER_NEVER_CONNECTED = 5,
  DOTA_LEAVER_NEVER_CONNECTED_TOO_LONG = 6,
  DOTA_LEAVER_FAILED_TO_READY_UP = 7,
  DOTA_LEAVER_DECLINED = 8
};
bool DOTALeaverStatus_t_IsValid(int value);
const DOTALeaverStatus_t DOTALeaverStatus_t_MIN = DOTA_LEAVER_NONE;
const DOTALeaverStatus_t DOTALeaverStatus_t_MAX = DOTA_LEAVER_DECLINED;
const int DOTALeaverStatus_t_ARRAYSIZE = DOTALeaverStatus_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTALeaverStatus_t_descriptor();
inline const ::std::string& DOTALeaverStatus_t_Name(DOTALeaverStatus_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTALeaverStatus_t_descriptor(), value);
}
inline bool DOTALeaverStatus_t_Parse(
    const ::std::string& name, DOTALeaverStatus_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTALeaverStatus_t>(
    DOTALeaverStatus_t_descriptor(), name, value);
}
enum DOTAConnectionState_t {
  DOTA_CONNECTION_STATE_UNKNOWN = 0,
  DOTA_CONNECTION_STATE_NOT_YET_CONNECTED = 1,
  DOTA_CONNECTION_STATE_CONNECTED = 2,
  DOTA_CONNECTION_STATE_DISCONNECTED = 3,
  DOTA_CONNECTION_STATE_ABANDONED = 4,
  DOTA_CONNECTION_STATE_LOADING = 5,
  DOTA_CONNECTION_STATE_FAILED = 6
};
bool DOTAConnectionState_t_IsValid(int value);
const DOTAConnectionState_t DOTAConnectionState_t_MIN = DOTA_CONNECTION_STATE_UNKNOWN;
const DOTAConnectionState_t DOTAConnectionState_t_MAX = DOTA_CONNECTION_STATE_FAILED;
const int DOTAConnectionState_t_ARRAYSIZE = DOTAConnectionState_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTAConnectionState_t_descriptor();
inline const ::std::string& DOTAConnectionState_t_Name(DOTAConnectionState_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTAConnectionState_t_descriptor(), value);
}
inline bool DOTAConnectionState_t_Parse(
    const ::std::string& name, DOTAConnectionState_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTAConnectionState_t>(
    DOTAConnectionState_t_descriptor(), name, value);
}
enum Fantasy_Roles {
  FANTASY_ROLE_UNDEFINED = 0,
  FANTASY_ROLE_CORE = 1,
  FANTASY_ROLE_SUPPORT = 2,
  FANTASY_ROLE_OFFLANE = 3,
  FANTASY_ROLE_MID = 4
};
bool Fantasy_Roles_IsValid(int value);
const Fantasy_Roles Fantasy_Roles_MIN = FANTASY_ROLE_UNDEFINED;
const Fantasy_Roles Fantasy_Roles_MAX = FANTASY_ROLE_MID;
const int Fantasy_Roles_ARRAYSIZE = Fantasy_Roles_MAX + 1;

const ::google::protobuf::EnumDescriptor* Fantasy_Roles_descriptor();
inline const ::std::string& Fantasy_Roles_Name(Fantasy_Roles value) {
  return ::google::protobuf::internal::NameOfEnum(
    Fantasy_Roles_descriptor(), value);
}
inline bool Fantasy_Roles_Parse(
    const ::std::string& name, Fantasy_Roles* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Fantasy_Roles>(
    Fantasy_Roles_descriptor(), name, value);
}
enum Fantasy_Team_Slots {
  FANTASY_SLOT_NONE = 0,
  FANTASY_SLOT_CORE = 1,
  FANTASY_SLOT_SUPPORT = 2,
  FANTASY_SLOT_ANY = 3,
  FANTASY_SLOT_BENCH = 4
};
bool Fantasy_Team_Slots_IsValid(int value);
const Fantasy_Team_Slots Fantasy_Team_Slots_MIN = FANTASY_SLOT_NONE;
const Fantasy_Team_Slots Fantasy_Team_Slots_MAX = FANTASY_SLOT_BENCH;
const int Fantasy_Team_Slots_ARRAYSIZE = Fantasy_Team_Slots_MAX + 1;

const ::google::protobuf::EnumDescriptor* Fantasy_Team_Slots_descriptor();
inline const ::std::string& Fantasy_Team_Slots_Name(Fantasy_Team_Slots value) {
  return ::google::protobuf::internal::NameOfEnum(
    Fantasy_Team_Slots_descriptor(), value);
}
inline bool Fantasy_Team_Slots_Parse(
    const ::std::string& name, Fantasy_Team_Slots* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Fantasy_Team_Slots>(
    Fantasy_Team_Slots_descriptor(), name, value);
}
enum Fantasy_Selection_Mode {
  FANTASY_SELECTION_INVALID = 0,
  FANTASY_SELECTION_LOCKED = 1,
  FANTASY_SELECTION_SHUFFLE = 2,
  FANTASY_SELECTION_FREE_PICK = 3,
  FANTASY_SELECTION_ENDED = 4,
  FANTASY_SELECTION_PRE_SEASON = 5,
  FANTASY_SELECTION_PRE_DRAFT = 6,
  FANTASY_SELECTION_DRAFTING = 7,
  FANTASY_SELECTION_REGULAR_SEASON = 8,
  FANTASY_SELECTION_CARD_BASED = 9
};
bool Fantasy_Selection_Mode_IsValid(int value);
const Fantasy_Selection_Mode Fantasy_Selection_Mode_MIN = FANTASY_SELECTION_INVALID;
const Fantasy_Selection_Mode Fantasy_Selection_Mode_MAX = FANTASY_SELECTION_CARD_BASED;
const int Fantasy_Selection_Mode_ARRAYSIZE = Fantasy_Selection_Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* Fantasy_Selection_Mode_descriptor();
inline const ::std::string& Fantasy_Selection_Mode_Name(Fantasy_Selection_Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    Fantasy_Selection_Mode_descriptor(), value);
}
inline bool Fantasy_Selection_Mode_Parse(
    const ::std::string& name, Fantasy_Selection_Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Fantasy_Selection_Mode>(
    Fantasy_Selection_Mode_descriptor(), name, value);
}
enum DOTAChatChannelType_t {
  DOTAChannelType_Regional = 0,
  DOTAChannelType_Custom = 1,
  DOTAChannelType_Party = 2,
  DOTAChannelType_Lobby = 3,
  DOTAChannelType_Team = 4,
  DOTAChannelType_Guild = 5,
  DOTAChannelType_Fantasy = 6,
  DOTAChannelType_Whisper = 7,
  DOTAChannelType_Console = 8,
  DOTAChannelType_Tab = 9,
  DOTAChannelType_Invalid = 10,
  DOTAChannelType_GameAll = 11,
  DOTAChannelType_GameAllies = 12,
  DOTAChannelType_GameSpectator = 13,
  DOTAChannelType_Cafe = 15,
  DOTAChannelType_CustomGame = 16,
  DOTAChannelType_Private = 17,
  DOTAChannelType_PostGame = 18,
  DOTAChannelType_BattleCup = 19,
  DOTAChannelType_HLTVSpectator = 20,
  DOTAChannelType_GameEvents = 21,
  DOTAChannelType_Trivia = 22
};
bool DOTAChatChannelType_t_IsValid(int value);
const DOTAChatChannelType_t DOTAChatChannelType_t_MIN = DOTAChannelType_Regional;
const DOTAChatChannelType_t DOTAChatChannelType_t_MAX = DOTAChannelType_Trivia;
const int DOTAChatChannelType_t_ARRAYSIZE = DOTAChatChannelType_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTAChatChannelType_t_descriptor();
inline const ::std::string& DOTAChatChannelType_t_Name(DOTAChatChannelType_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTAChatChannelType_t_descriptor(), value);
}
inline bool DOTAChatChannelType_t_Parse(
    const ::std::string& name, DOTAChatChannelType_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTAChatChannelType_t>(
    DOTAChatChannelType_t_descriptor(), name, value);
}
enum EProfileCardSlotType {
  k_EProfileCardSlotType_Empty = 0,
  k_EProfileCardSlotType_Stat = 1,
  k_EProfileCardSlotType_Trophy = 2,
  k_EProfileCardSlotType_Item = 3,
  k_EProfileCardSlotType_Hero = 4,
  k_EProfileCardSlotType_Emoticon = 5,
  k_EProfileCardSlotType_Team = 6
};
bool EProfileCardSlotType_IsValid(int value);
const EProfileCardSlotType EProfileCardSlotType_MIN = k_EProfileCardSlotType_Empty;
const EProfileCardSlotType EProfileCardSlotType_MAX = k_EProfileCardSlotType_Team;
const int EProfileCardSlotType_ARRAYSIZE = EProfileCardSlotType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EProfileCardSlotType_descriptor();
inline const ::std::string& EProfileCardSlotType_Name(EProfileCardSlotType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EProfileCardSlotType_descriptor(), value);
}
inline bool EProfileCardSlotType_Parse(
    const ::std::string& name, EProfileCardSlotType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EProfileCardSlotType>(
    EProfileCardSlotType_descriptor(), name, value);
}
enum EMatchGroupServerStatus {
  k_EMatchGroupServerStatus_OK = 0,
  k_EMatchGroupServerStatus_LimitedAvailability = 1,
  k_EMatchGroupServerStatus_Offline = 2
};
bool EMatchGroupServerStatus_IsValid(int value);
const EMatchGroupServerStatus EMatchGroupServerStatus_MIN = k_EMatchGroupServerStatus_OK;
const EMatchGroupServerStatus EMatchGroupServerStatus_MAX = k_EMatchGroupServerStatus_Offline;
const int EMatchGroupServerStatus_ARRAYSIZE = EMatchGroupServerStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMatchGroupServerStatus_descriptor();
inline const ::std::string& EMatchGroupServerStatus_Name(EMatchGroupServerStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMatchGroupServerStatus_descriptor(), value);
}
inline bool EMatchGroupServerStatus_Parse(
    const ::std::string& name, EMatchGroupServerStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMatchGroupServerStatus>(
    EMatchGroupServerStatus_descriptor(), name, value);
}
enum DOTA_CM_PICK {
  DOTA_CM_RANDOM = 0,
  DOTA_CM_GOOD_GUYS = 1,
  DOTA_CM_BAD_GUYS = 2
};
bool DOTA_CM_PICK_IsValid(int value);
const DOTA_CM_PICK DOTA_CM_PICK_MIN = DOTA_CM_RANDOM;
const DOTA_CM_PICK DOTA_CM_PICK_MAX = DOTA_CM_BAD_GUYS;
const int DOTA_CM_PICK_ARRAYSIZE = DOTA_CM_PICK_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_CM_PICK_descriptor();
inline const ::std::string& DOTA_CM_PICK_Name(DOTA_CM_PICK value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_CM_PICK_descriptor(), value);
}
inline bool DOTA_CM_PICK_Parse(
    const ::std::string& name, DOTA_CM_PICK* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_CM_PICK>(
    DOTA_CM_PICK_descriptor(), name, value);
}
enum DOTALowPriorityBanType {
  DOTA_LOW_PRIORITY_BAN_ABANDON = 0,
  DOTA_LOW_PRIORITY_BAN_REPORTS = 1,
  DOTA_LOW_PRIORITY_BAN_SECONDARY_ABANDON = 2
};
bool DOTALowPriorityBanType_IsValid(int value);
const DOTALowPriorityBanType DOTALowPriorityBanType_MIN = DOTA_LOW_PRIORITY_BAN_ABANDON;
const DOTALowPriorityBanType DOTALowPriorityBanType_MAX = DOTA_LOW_PRIORITY_BAN_SECONDARY_ABANDON;
const int DOTALowPriorityBanType_ARRAYSIZE = DOTALowPriorityBanType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTALowPriorityBanType_descriptor();
inline const ::std::string& DOTALowPriorityBanType_Name(DOTALowPriorityBanType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTALowPriorityBanType_descriptor(), value);
}
inline bool DOTALowPriorityBanType_Parse(
    const ::std::string& name, DOTALowPriorityBanType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTALowPriorityBanType>(
    DOTALowPriorityBanType_descriptor(), name, value);
}
enum DOTALobbyReadyState {
  DOTALobbyReadyState_UNDECLARED = 0,
  DOTALobbyReadyState_ACCEPTED = 1,
  DOTALobbyReadyState_DECLINED = 2
};
bool DOTALobbyReadyState_IsValid(int value);
const DOTALobbyReadyState DOTALobbyReadyState_MIN = DOTALobbyReadyState_UNDECLARED;
const DOTALobbyReadyState DOTALobbyReadyState_MAX = DOTALobbyReadyState_DECLINED;
const int DOTALobbyReadyState_ARRAYSIZE = DOTALobbyReadyState_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTALobbyReadyState_descriptor();
inline const ::std::string& DOTALobbyReadyState_Name(DOTALobbyReadyState value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTALobbyReadyState_descriptor(), value);
}
inline bool DOTALobbyReadyState_Parse(
    const ::std::string& name, DOTALobbyReadyState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTALobbyReadyState>(
    DOTALobbyReadyState_descriptor(), name, value);
}
enum DOTAGameVersion {
  GAME_VERSION_CURRENT = 0,
  GAME_VERSION_STABLE = 1
};
bool DOTAGameVersion_IsValid(int value);
const DOTAGameVersion DOTAGameVersion_MIN = GAME_VERSION_CURRENT;
const DOTAGameVersion DOTAGameVersion_MAX = GAME_VERSION_STABLE;
const int DOTAGameVersion_ARRAYSIZE = DOTAGameVersion_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTAGameVersion_descriptor();
inline const ::std::string& DOTAGameVersion_Name(DOTAGameVersion value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTAGameVersion_descriptor(), value);
}
inline bool DOTAGameVersion_Parse(
    const ::std::string& name, DOTAGameVersion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTAGameVersion>(
    DOTAGameVersion_descriptor(), name, value);
}
enum DOTAJoinLobbyResult {
  DOTA_JOIN_RESULT_SUCCESS = 0,
  DOTA_JOIN_RESULT_ALREADY_IN_GAME = 1,
  DOTA_JOIN_RESULT_INVALID_LOBBY = 2,
  DOTA_JOIN_RESULT_INCORRECT_PASSWORD = 3,
  DOTA_JOIN_RESULT_ACCESS_DENIED = 4,
  DOTA_JOIN_RESULT_GENERIC_ERROR = 5,
  DOTA_JOIN_RESULT_INCORRECT_VERSION = 6,
  DOTA_JOIN_RESULT_IN_TEAM_PARTY = 7,
  DOTA_JOIN_RESULT_NO_LOBBY_FOUND = 8,
  DOTA_JOIN_RESULT_LOBBY_FULL = 9,
  DOTA_JOIN_RESULT_CUSTOM_GAME_INCORRECT_VERSION = 10,
  DOTA_JOIN_RESULT_TIMEOUT = 11,
  DOTA_JOIN_RESULT_CUSTOM_GAME_COOLDOWN = 12
};
bool DOTAJoinLobbyResult_IsValid(int value);
const DOTAJoinLobbyResult DOTAJoinLobbyResult_MIN = DOTA_JOIN_RESULT_SUCCESS;
const DOTAJoinLobbyResult DOTAJoinLobbyResult_MAX = DOTA_JOIN_RESULT_CUSTOM_GAME_COOLDOWN;
const int DOTAJoinLobbyResult_ARRAYSIZE = DOTAJoinLobbyResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTAJoinLobbyResult_descriptor();
inline const ::std::string& DOTAJoinLobbyResult_Name(DOTAJoinLobbyResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTAJoinLobbyResult_descriptor(), value);
}
inline bool DOTAJoinLobbyResult_Parse(
    const ::std::string& name, DOTAJoinLobbyResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTAJoinLobbyResult>(
    DOTAJoinLobbyResult_descriptor(), name, value);
}
enum DOTASelectionPriorityRules {
  k_DOTASelectionPriorityRules_Manual = 0,
  k_DOTASelectionPriorityRules_Automatic = 1
};
bool DOTASelectionPriorityRules_IsValid(int value);
const DOTASelectionPriorityRules DOTASelectionPriorityRules_MIN = k_DOTASelectionPriorityRules_Manual;
const DOTASelectionPriorityRules DOTASelectionPriorityRules_MAX = k_DOTASelectionPriorityRules_Automatic;
const int DOTASelectionPriorityRules_ARRAYSIZE = DOTASelectionPriorityRules_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTASelectionPriorityRules_descriptor();
inline const ::std::string& DOTASelectionPriorityRules_Name(DOTASelectionPriorityRules value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTASelectionPriorityRules_descriptor(), value);
}
inline bool DOTASelectionPriorityRules_Parse(
    const ::std::string& name, DOTASelectionPriorityRules* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTASelectionPriorityRules>(
    DOTASelectionPriorityRules_descriptor(), name, value);
}
enum DOTASelectionPriorityChoice {
  k_DOTASelectionPriorityChoice_Invalid = 0,
  k_DOTASelectionPriorityChoice_FirstPick = 1,
  k_DOTASelectionPriorityChoice_SecondPick = 2,
  k_DOTASelectionPriorityChoice_Radiant = 3,
  k_DOTASelectionPriorityChoice_Dire = 4
};
bool DOTASelectionPriorityChoice_IsValid(int value);
const DOTASelectionPriorityChoice DOTASelectionPriorityChoice_MIN = k_DOTASelectionPriorityChoice_Invalid;
const DOTASelectionPriorityChoice DOTASelectionPriorityChoice_MAX = k_DOTASelectionPriorityChoice_Dire;
const int DOTASelectionPriorityChoice_ARRAYSIZE = DOTASelectionPriorityChoice_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTASelectionPriorityChoice_descriptor();
inline const ::std::string& DOTASelectionPriorityChoice_Name(DOTASelectionPriorityChoice value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTASelectionPriorityChoice_descriptor(), value);
}
inline bool DOTASelectionPriorityChoice_Parse(
    const ::std::string& name, DOTASelectionPriorityChoice* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTASelectionPriorityChoice>(
    DOTASelectionPriorityChoice_descriptor(), name, value);
}
enum DOTAMatchVote {
  DOTAMatchVote_INVALID = 0,
  DOTAMatchVote_POSITIVE = 1,
  DOTAMatchVote_NEGATIVE = 2
};
bool DOTAMatchVote_IsValid(int value);
const DOTAMatchVote DOTAMatchVote_MIN = DOTAMatchVote_INVALID;
const DOTAMatchVote DOTAMatchVote_MAX = DOTAMatchVote_NEGATIVE;
const int DOTAMatchVote_ARRAYSIZE = DOTAMatchVote_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTAMatchVote_descriptor();
inline const ::std::string& DOTAMatchVote_Name(DOTAMatchVote value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTAMatchVote_descriptor(), value);
}
inline bool DOTAMatchVote_Parse(
    const ::std::string& name, DOTAMatchVote* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTAMatchVote>(
    DOTAMatchVote_descriptor(), name, value);
}
enum DOTA_LobbyMemberXPBonus {
  DOTA_LobbyMemberXPBonus_DEFAULT = 0,
  DOTA_LobbyMemberXPBonus_BATTLE_BOOSTER = 1,
  DOTA_LobbyMemberXPBonus_SHARE_BONUS = 2,
  DOTA_LobbyMemberXPBonus_PARTY = 3,
  DOTA_LobbyMemberXPBonus_RECRUITMENT = 4,
  DOTA_LobbyMemberXPBonus_PCBANG = 5
};
bool DOTA_LobbyMemberXPBonus_IsValid(int value);
const DOTA_LobbyMemberXPBonus DOTA_LobbyMemberXPBonus_MIN = DOTA_LobbyMemberXPBonus_DEFAULT;
const DOTA_LobbyMemberXPBonus DOTA_LobbyMemberXPBonus_MAX = DOTA_LobbyMemberXPBonus_PCBANG;
const int DOTA_LobbyMemberXPBonus_ARRAYSIZE = DOTA_LobbyMemberXPBonus_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_LobbyMemberXPBonus_descriptor();
inline const ::std::string& DOTA_LobbyMemberXPBonus_Name(DOTA_LobbyMemberXPBonus value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_LobbyMemberXPBonus_descriptor(), value);
}
inline bool DOTA_LobbyMemberXPBonus_Parse(
    const ::std::string& name, DOTA_LobbyMemberXPBonus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_LobbyMemberXPBonus>(
    DOTA_LobbyMemberXPBonus_descriptor(), name, value);
}
enum DOTALobbyVisibility {
  DOTALobbyVisibility_Public = 0,
  DOTALobbyVisibility_Friends = 1,
  DOTALobbyVisibility_Unlisted = 2
};
bool DOTALobbyVisibility_IsValid(int value);
const DOTALobbyVisibility DOTALobbyVisibility_MIN = DOTALobbyVisibility_Public;
const DOTALobbyVisibility DOTALobbyVisibility_MAX = DOTALobbyVisibility_Unlisted;
const int DOTALobbyVisibility_ARRAYSIZE = DOTALobbyVisibility_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTALobbyVisibility_descriptor();
inline const ::std::string& DOTALobbyVisibility_Name(DOTALobbyVisibility value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTALobbyVisibility_descriptor(), value);
}
inline bool DOTALobbyVisibility_Parse(
    const ::std::string& name, DOTALobbyVisibility* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTALobbyVisibility>(
    DOTALobbyVisibility_descriptor(), name, value);
}
enum EDOTAPlayerMMRType {
  k_EDOTAPlayerMMRType_Invalid = 0,
  k_EDOTAPlayerMMRType_GeneralHidden = 1,
  k_EDOTAPlayerMMRType_GeneralCompetitive = 3,
  k_EDOTAPlayerMMRType_SoloCompetitive = 4,
  k_EDOTAPlayerMMRType_1v1Competitive_UNUSED = 5,
  k_EDOTAPlayerMMRType_GeneralSeasonalRanked = 6,
  k_EDOTAPlayerMMRType_SoloSeasonalRanked = 7
};
bool EDOTAPlayerMMRType_IsValid(int value);
const EDOTAPlayerMMRType EDOTAPlayerMMRType_MIN = k_EDOTAPlayerMMRType_Invalid;
const EDOTAPlayerMMRType EDOTAPlayerMMRType_MAX = k_EDOTAPlayerMMRType_SoloSeasonalRanked;
const int EDOTAPlayerMMRType_ARRAYSIZE = EDOTAPlayerMMRType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDOTAPlayerMMRType_descriptor();
inline const ::std::string& EDOTAPlayerMMRType_Name(EDOTAPlayerMMRType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDOTAPlayerMMRType_descriptor(), value);
}
inline bool EDOTAPlayerMMRType_Parse(
    const ::std::string& name, EDOTAPlayerMMRType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDOTAPlayerMMRType>(
    EDOTAPlayerMMRType_descriptor(), name, value);
}
enum MatchType {
  MATCH_TYPE_CASUAL = 0,
  MATCH_TYPE_COOP_BOTS = 1,
  MATCH_TYPE_TEAM_RANKED = 2,
  MATCH_TYPE_LEGACY_SOLO_QUEUE = 3,
  MATCH_TYPE_COMPETITIVE = 4,
  MATCH_TYPE_WEEKEND_TOURNEY = 5,
  MATCH_TYPE_CASUAL_1V1 = 6,
  MATCH_TYPE_EVENT = 7,
  MATCH_TYPE_SEASONAL_RANKED = 8,
  MATCH_TYPE_LOWPRI_DEPRECATED = 9,
  MATCH_TYPE_STEAM_GROUP = 10,
  MATCH_TYPE_MUTATION = 11
};
bool MatchType_IsValid(int value);
const MatchType MatchType_MIN = MATCH_TYPE_CASUAL;
const MatchType MatchType_MAX = MATCH_TYPE_MUTATION;
const int MatchType_ARRAYSIZE = MatchType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MatchType_descriptor();
inline const ::std::string& MatchType_Name(MatchType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MatchType_descriptor(), value);
}
inline bool MatchType_Parse(
    const ::std::string& name, MatchType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MatchType>(
    MatchType_descriptor(), name, value);
}
enum DOTABotDifficulty {
  BOT_DIFFICULTY_PASSIVE = 0,
  BOT_DIFFICULTY_EASY = 1,
  BOT_DIFFICULTY_MEDIUM = 2,
  BOT_DIFFICULTY_HARD = 3,
  BOT_DIFFICULTY_UNFAIR = 4,
  BOT_DIFFICULTY_INVALID = 5,
  BOT_DIFFICULTY_EXTRA1 = 6,
  BOT_DIFFICULTY_EXTRA2 = 7,
  BOT_DIFFICULTY_EXTRA3 = 8
};
bool DOTABotDifficulty_IsValid(int value);
const DOTABotDifficulty DOTABotDifficulty_MIN = BOT_DIFFICULTY_PASSIVE;
const DOTABotDifficulty DOTABotDifficulty_MAX = BOT_DIFFICULTY_EXTRA3;
const int DOTABotDifficulty_ARRAYSIZE = DOTABotDifficulty_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTABotDifficulty_descriptor();
inline const ::std::string& DOTABotDifficulty_Name(DOTABotDifficulty value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTABotDifficulty_descriptor(), value);
}
inline bool DOTABotDifficulty_Parse(
    const ::std::string& name, DOTABotDifficulty* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTABotDifficulty>(
    DOTABotDifficulty_descriptor(), name, value);
}
enum DOTA_BOT_MODE {
  DOTA_BOT_MODE_NONE = 0,
  DOTA_BOT_MODE_LANING = 1,
  DOTA_BOT_MODE_ATTACK = 2,
  DOTA_BOT_MODE_ROAM = 3,
  DOTA_BOT_MODE_RETREAT = 4,
  DOTA_BOT_MODE_SECRET_SHOP = 5,
  DOTA_BOT_MODE_SIDE_SHOP = 6,
  DOTA_BOT_MODE_RUNE = 7,
  DOTA_BOT_MODE_PUSH_TOWER_TOP = 8,
  DOTA_BOT_MODE_PUSH_TOWER_MID = 9,
  DOTA_BOT_MODE_PUSH_TOWER_BOT = 10,
  DOTA_BOT_MODE_DEFEND_TOWER_TOP = 11,
  DOTA_BOT_MODE_DEFEND_TOWER_MID = 12,
  DOTA_BOT_MODE_DEFEND_TOWER_BOT = 13,
  DOTA_BOT_MODE_ASSEMBLE = 14,
  DOTA_BOT_MODE_ASSEMBLE_WITH_HUMANS = 15,
  DOTA_BOT_MODE_TEAM_ROAM = 16,
  DOTA_BOT_MODE_FARM = 17,
  DOTA_BOT_MODE_DEFEND_ALLY = 18,
  DOTA_BOT_MODE_EVASIVE_MANEUVERS = 19,
  DOTA_BOT_MODE_ROSHAN = 20,
  DOTA_BOT_MODE_ITEM = 21,
  DOTA_BOT_MODE_WARD = 22,
  DOTA_BOT_MODE_COMPANION = 23,
  DOTA_BOT_MODE_TUTORIAL_BOSS = 24,
  DOTA_BOT_MODE_MINION = 25
};
bool DOTA_BOT_MODE_IsValid(int value);
const DOTA_BOT_MODE DOTA_BOT_MODE_MIN = DOTA_BOT_MODE_NONE;
const DOTA_BOT_MODE DOTA_BOT_MODE_MAX = DOTA_BOT_MODE_MINION;
const int DOTA_BOT_MODE_ARRAYSIZE = DOTA_BOT_MODE_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_BOT_MODE_descriptor();
inline const ::std::string& DOTA_BOT_MODE_Name(DOTA_BOT_MODE value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_BOT_MODE_descriptor(), value);
}
inline bool DOTA_BOT_MODE_Parse(
    const ::std::string& name, DOTA_BOT_MODE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_BOT_MODE>(
    DOTA_BOT_MODE_descriptor(), name, value);
}
enum MatchLanguages {
  MATCH_LANGUAGE_INVALID = 0,
  MATCH_LANGUAGE_ENGLISH = 1,
  MATCH_LANGUAGE_RUSSIAN = 2,
  MATCH_LANGUAGE_CHINESE = 3,
  MATCH_LANGUAGE_KOREAN = 4,
  MATCH_LANGUAGE_SPANISH = 5,
  MATCH_LANGUAGE_PORTUGUESE = 6,
  MATCH_LANGUAGE_ENGLISH2 = 7
};
bool MatchLanguages_IsValid(int value);
const MatchLanguages MatchLanguages_MIN = MATCH_LANGUAGE_INVALID;
const MatchLanguages MatchLanguages_MAX = MATCH_LANGUAGE_ENGLISH2;
const int MatchLanguages_ARRAYSIZE = MatchLanguages_MAX + 1;

const ::google::protobuf::EnumDescriptor* MatchLanguages_descriptor();
inline const ::std::string& MatchLanguages_Name(MatchLanguages value) {
  return ::google::protobuf::internal::NameOfEnum(
    MatchLanguages_descriptor(), value);
}
inline bool MatchLanguages_Parse(
    const ::std::string& name, MatchLanguages* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MatchLanguages>(
    MatchLanguages_descriptor(), name, value);
}
enum ETourneyQueueDeadlineState {
  k_ETourneyQueueDeadlineState_Normal = 0,
  k_ETourneyQueueDeadlineState_Missed = 1,
  k_ETourneyQueueDeadlineState_ExpiredOK = 2,
  k_ETourneyQueueDeadlineState_SeekingBye = 3,
  k_ETourneyQueueDeadlineState_EligibleForRefund = 4,
  k_ETourneyQueueDeadlineState_NA = -1,
  k_ETourneyQueueDeadlineState_ExpiringSoon = 101
};
bool ETourneyQueueDeadlineState_IsValid(int value);
const ETourneyQueueDeadlineState ETourneyQueueDeadlineState_MIN = k_ETourneyQueueDeadlineState_NA;
const ETourneyQueueDeadlineState ETourneyQueueDeadlineState_MAX = k_ETourneyQueueDeadlineState_ExpiringSoon;
const int ETourneyQueueDeadlineState_ARRAYSIZE = ETourneyQueueDeadlineState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ETourneyQueueDeadlineState_descriptor();
inline const ::std::string& ETourneyQueueDeadlineState_Name(ETourneyQueueDeadlineState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ETourneyQueueDeadlineState_descriptor(), value);
}
inline bool ETourneyQueueDeadlineState_Parse(
    const ::std::string& name, ETourneyQueueDeadlineState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ETourneyQueueDeadlineState>(
    ETourneyQueueDeadlineState_descriptor(), name, value);
}
enum EMatchOutcome {
  k_EMatchOutcome_Unknown = 0,
  k_EMatchOutcome_RadVictory = 2,
  k_EMatchOutcome_DireVictory = 3,
  k_EMatchOutcome_NotScored_PoorNetworkConditions = 64,
  k_EMatchOutcome_NotScored_Leaver = 65,
  k_EMatchOutcome_NotScored_ServerCrash = 66,
  k_EMatchOutcome_NotScored_NeverStarted = 67,
  k_EMatchOutcome_NotScored_Canceled = 68
};
bool EMatchOutcome_IsValid(int value);
const EMatchOutcome EMatchOutcome_MIN = k_EMatchOutcome_Unknown;
const EMatchOutcome EMatchOutcome_MAX = k_EMatchOutcome_NotScored_Canceled;
const int EMatchOutcome_ARRAYSIZE = EMatchOutcome_MAX + 1;

const ::google::protobuf::EnumDescriptor* EMatchOutcome_descriptor();
inline const ::std::string& EMatchOutcome_Name(EMatchOutcome value) {
  return ::google::protobuf::internal::NameOfEnum(
    EMatchOutcome_descriptor(), value);
}
inline bool EMatchOutcome_Parse(
    const ::std::string& name, EMatchOutcome* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EMatchOutcome>(
    EMatchOutcome_descriptor(), name, value);
}
enum ELaneType {
  LANE_TYPE_UNKNOWN = 0,
  LANE_TYPE_SAFE = 1,
  LANE_TYPE_OFF = 2,
  LANE_TYPE_MID = 3,
  LANE_TYPE_JUNGLE = 4,
  LANE_TYPE_ROAM = 5
};
bool ELaneType_IsValid(int value);
const ELaneType ELaneType_MIN = LANE_TYPE_UNKNOWN;
const ELaneType ELaneType_MAX = LANE_TYPE_ROAM;
const int ELaneType_ARRAYSIZE = ELaneType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ELaneType_descriptor();
inline const ::std::string& ELaneType_Name(ELaneType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ELaneType_descriptor(), value);
}
inline bool ELaneType_Parse(
    const ::std::string& name, ELaneType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ELaneType>(
    ELaneType_descriptor(), name, value);
}
enum EBadgeType {
  k_EBadgeType_TI7_Midweek = 1,
  k_EBadgeType_TI7_Finals = 2,
  k_EBadgeType_TI7_AllEvent = 3,
  k_EBadgeType_TI8_Midweek = 4,
  k_EBadgeType_TI8_Finals = 5,
  k_EBadgeType_TI8_AllEvent = 6
};
bool EBadgeType_IsValid(int value);
const EBadgeType EBadgeType_MIN = k_EBadgeType_TI7_Midweek;
const EBadgeType EBadgeType_MAX = k_EBadgeType_TI8_AllEvent;
const int EBadgeType_ARRAYSIZE = EBadgeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EBadgeType_descriptor();
inline const ::std::string& EBadgeType_Name(EBadgeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EBadgeType_descriptor(), value);
}
inline bool EBadgeType_Parse(
    const ::std::string& name, EBadgeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EBadgeType>(
    EBadgeType_descriptor(), name, value);
}
enum ELeagueStatus {
  LEAGUE_STATUS_UNSET = 0,
  LEAGUE_STATUS_UNSUBMITTED = 1,
  LEAGUE_STATUS_SUBMITTED = 2,
  LEAGUE_STATUS_ACCEPTED = 3,
  LEAGUE_STATUS_REJECTED = 4,
  LEAGUE_STATUS_CONCLUDED = 5,
  LEAGUE_STATUS_DELETED = 6
};
bool ELeagueStatus_IsValid(int value);
const ELeagueStatus ELeagueStatus_MIN = LEAGUE_STATUS_UNSET;
const ELeagueStatus ELeagueStatus_MAX = LEAGUE_STATUS_DELETED;
const int ELeagueStatus_ARRAYSIZE = ELeagueStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ELeagueStatus_descriptor();
inline const ::std::string& ELeagueStatus_Name(ELeagueStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ELeagueStatus_descriptor(), value);
}
inline bool ELeagueStatus_Parse(
    const ::std::string& name, ELeagueStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ELeagueStatus>(
    ELeagueStatus_descriptor(), name, value);
}
enum ELeagueRegion {
  LEAGUE_REGION_UNSET = 0,
  LEAGUE_REGION_NA = 1,
  LEAGUE_REGION_SA = 2,
  LEAGUE_REGION_EUROPE = 3,
  LEAGUE_REGION_CIS = 4,
  LEAGUE_REGION_CHINA = 5,
  LEAGUE_REGION_SEA = 6
};
bool ELeagueRegion_IsValid(int value);
const ELeagueRegion ELeagueRegion_MIN = LEAGUE_REGION_UNSET;
const ELeagueRegion ELeagueRegion_MAX = LEAGUE_REGION_SEA;
const int ELeagueRegion_ARRAYSIZE = ELeagueRegion_MAX + 1;

const ::google::protobuf::EnumDescriptor* ELeagueRegion_descriptor();
inline const ::std::string& ELeagueRegion_Name(ELeagueRegion value) {
  return ::google::protobuf::internal::NameOfEnum(
    ELeagueRegion_descriptor(), value);
}
inline bool ELeagueRegion_Parse(
    const ::std::string& name, ELeagueRegion* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ELeagueRegion>(
    ELeagueRegion_descriptor(), name, value);
}
enum ELeagueTier {
  LEAGUE_TIER_UNSET = 0,
  LEAGUE_TIER_AMATEUR = 1,
  LEAGUE_TIER_PROFESSIONAL = 2,
  LEAGUE_TIER_MINOR = 3,
  LEAGUE_TIER_MAJOR = 4,
  LEAGUE_TIER_INTERNATIONAL = 5
};
bool ELeagueTier_IsValid(int value);
const ELeagueTier ELeagueTier_MIN = LEAGUE_TIER_UNSET;
const ELeagueTier ELeagueTier_MAX = LEAGUE_TIER_INTERNATIONAL;
const int ELeagueTier_ARRAYSIZE = ELeagueTier_MAX + 1;

const ::google::protobuf::EnumDescriptor* ELeagueTier_descriptor();
inline const ::std::string& ELeagueTier_Name(ELeagueTier value) {
  return ::google::protobuf::internal::NameOfEnum(
    ELeagueTier_descriptor(), value);
}
inline bool ELeagueTier_Parse(
    const ::std::string& name, ELeagueTier* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ELeagueTier>(
    ELeagueTier_descriptor(), name, value);
}
enum ELeagueTierCategory {
  LEAGUE_TIER_CATEGORY_AMATEUR = 1,
  LEAGUE_TIER_CATEGORY_PROFESSIONAL = 2,
  LEAGUE_TIER_CATEGORY_DPC = 3
};
bool ELeagueTierCategory_IsValid(int value);
const ELeagueTierCategory ELeagueTierCategory_MIN = LEAGUE_TIER_CATEGORY_AMATEUR;
const ELeagueTierCategory ELeagueTierCategory_MAX = LEAGUE_TIER_CATEGORY_DPC;
const int ELeagueTierCategory_ARRAYSIZE = ELeagueTierCategory_MAX + 1;

const ::google::protobuf::EnumDescriptor* ELeagueTierCategory_descriptor();
inline const ::std::string& ELeagueTierCategory_Name(ELeagueTierCategory value) {
  return ::google::protobuf::internal::NameOfEnum(
    ELeagueTierCategory_descriptor(), value);
}
inline bool ELeagueTierCategory_Parse(
    const ::std::string& name, ELeagueTierCategory* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ELeagueTierCategory>(
    ELeagueTierCategory_descriptor(), name, value);
}
enum ELeagueFlags {
  LEAGUE_FLAGS_NONE = 0,
  LEAGUE_ACCEPTED_AGREEMENT = 1,
  LEAGUE_PAYMENT_EMAIL_SENT = 2,
  LEAGUE_COMPENDIUM_ALLOWED = 4,
  LEAGUE_COMPENDIUM_PUBLIC = 8
};
bool ELeagueFlags_IsValid(int value);
const ELeagueFlags ELeagueFlags_MIN = LEAGUE_FLAGS_NONE;
const ELeagueFlags ELeagueFlags_MAX = LEAGUE_COMPENDIUM_PUBLIC;
const int ELeagueFlags_ARRAYSIZE = ELeagueFlags_MAX + 1;

const ::google::protobuf::EnumDescriptor* ELeagueFlags_descriptor();
inline const ::std::string& ELeagueFlags_Name(ELeagueFlags value) {
  return ::google::protobuf::internal::NameOfEnum(
    ELeagueFlags_descriptor(), value);
}
inline bool ELeagueFlags_Parse(
    const ::std::string& name, ELeagueFlags* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ELeagueFlags>(
    ELeagueFlags_descriptor(), name, value);
}
enum ELeagueBroadcastProvider {
  LEAGUE_BROADCAST_UNKNOWN = 0,
  LEAGUE_BROADCAST_STEAM = 1,
  LEAGUE_BROADCAST_TWITCH = 2,
  LEAGUE_BROADCAST_YOUTUBE = 3,
  LEAGUE_BROADCAST_OTHER = 100
};
bool ELeagueBroadcastProvider_IsValid(int value);
const ELeagueBroadcastProvider ELeagueBroadcastProvider_MIN = LEAGUE_BROADCAST_UNKNOWN;
const ELeagueBroadcastProvider ELeagueBroadcastProvider_MAX = LEAGUE_BROADCAST_OTHER;
const int ELeagueBroadcastProvider_ARRAYSIZE = ELeagueBroadcastProvider_MAX + 1;

const ::google::protobuf::EnumDescriptor* ELeagueBroadcastProvider_descriptor();
inline const ::std::string& ELeagueBroadcastProvider_Name(ELeagueBroadcastProvider value) {
  return ::google::protobuf::internal::NameOfEnum(
    ELeagueBroadcastProvider_descriptor(), value);
}
inline bool ELeagueBroadcastProvider_Parse(
    const ::std::string& name, ELeagueBroadcastProvider* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ELeagueBroadcastProvider>(
    ELeagueBroadcastProvider_descriptor(), name, value);
}
enum ELeaguePhase {
  LEAGUE_PHASE_UNSET = 0,
  LEAGUE_PHASE_REGIONAL_QUALIFIER = 1,
  LEAGUE_PHASE_GROUP_STAGE = 2,
  LEAGUE_PHASE_MAIN_EVENT = 3
};
bool ELeaguePhase_IsValid(int value);
const ELeaguePhase ELeaguePhase_MIN = LEAGUE_PHASE_UNSET;
const ELeaguePhase ELeaguePhase_MAX = LEAGUE_PHASE_MAIN_EVENT;
const int ELeaguePhase_ARRAYSIZE = ELeaguePhase_MAX + 1;

const ::google::protobuf::EnumDescriptor* ELeaguePhase_descriptor();
inline const ::std::string& ELeaguePhase_Name(ELeaguePhase value) {
  return ::google::protobuf::internal::NameOfEnum(
    ELeaguePhase_descriptor(), value);
}
inline bool ELeaguePhase_Parse(
    const ::std::string& name, ELeaguePhase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ELeaguePhase>(
    ELeaguePhase_descriptor(), name, value);
}
enum ELeagueFantasyPhase {
  LEAGUE_FANTASY_PHASE_UNSET = 0,
  LEAGUE_FANTASY_PHASE_MAIN = 1,
  LEAGUE_FANTASY_PHASE_QUALIFIER_NA = 2,
  LEAGUE_FANTASY_PHASE_QUALIFIER_SA = 3,
  LEAGUE_FANTASY_PHASE_QUALIFIER_EUROPE = 4,
  LEAGUE_FANTASY_PHASE_QUALIFIER_CIS = 5,
  LEAGUE_FANTASY_PHASE_QUALIFIER_CHINA = 6,
  LEAGUE_FANTASY_PHASE_QUALIFIER_SEA = 7
};
bool ELeagueFantasyPhase_IsValid(int value);
const ELeagueFantasyPhase ELeagueFantasyPhase_MIN = LEAGUE_FANTASY_PHASE_UNSET;
const ELeagueFantasyPhase ELeagueFantasyPhase_MAX = LEAGUE_FANTASY_PHASE_QUALIFIER_SEA;
const int ELeagueFantasyPhase_ARRAYSIZE = ELeagueFantasyPhase_MAX + 1;

const ::google::protobuf::EnumDescriptor* ELeagueFantasyPhase_descriptor();
inline const ::std::string& ELeagueFantasyPhase_Name(ELeagueFantasyPhase value) {
  return ::google::protobuf::internal::NameOfEnum(
    ELeagueFantasyPhase_descriptor(), value);
}
inline bool ELeagueFantasyPhase_Parse(
    const ::std::string& name, ELeagueFantasyPhase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ELeagueFantasyPhase>(
    ELeagueFantasyPhase_descriptor(), name, value);
}
enum ELeagueAuditAction {
  LEAGUE_AUDIT_ACTION_INVALID = 0,
  LEAGUE_AUDIT_ACTION_LEAGUE_CREATE = 1,
  LEAGUE_AUDIT_ACTION_LEAGUE_EDIT = 2,
  LEAGUE_AUDIT_ACTION_LEAGUE_DELETE = 3,
  LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_ADD = 4,
  LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_REVOKE = 5,
  LEAGUE_AUDIT_ACTION_LEAGUE_ADMIN_PROMOTE = 6,
  LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_ADD = 7,
  LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_REMOVE = 8,
  LEAGUE_AUDIT_ACTION_LEAGUE_IMAGE_UPDATED = 9,
  LEAGUE_AUDIT_ACTION_LEAGUE_MESSAGE_ADDED = 10,
  LEAGUE_AUDIT_ACTION_LEAGUE_SUBMITTED = 11,
  LEAGUE_AUDIT_ACTION_LEAGUE_SET_PRIZE_POOL = 12,
  LEAGUE_AUDIT_ACTION_LEAGUE_ADD_PRIZE_POOL_ITEM = 13,
  LEAGUE_AUDIT_ACTION_LEAGUE_REMOVE_PRIZE_POOL_ITEM = 14,
  LEAGUE_AUDIT_ACTION_LEAGUE_MATCH_START = 15,
  LEAGUE_AUDIT_ACTION_LEAGUE_MATCH_END = 16,
  LEAGUE_AUDIT_ACTION_LEAGUE_ADD_INVITED_TEAM = 17,
  LEAGUE_AUDIT_ACTION_LEAGUE_REMOVE_INVITED_TEAM = 18,
  LEAGUE_AUDIT_ACTION_LEAGUE_STATUS_CHANGED = 19,
  LEAGUE_AUDIT_ACTION_LEAGUE_STREAM_EDIT = 20,
  LEAGUE_AUDIT_ACTION_NODEGROUP_CREATE = 100,
  LEAGUE_AUDIT_ACTION_NODEGROUP_DESTROY = 101,
  LEAGUE_AUDIT_ACTION_NODEGROUP_ADD_TEAM = 102,
  LEAGUE_AUDIT_ACTION_NODEGROUP_REMOVE_TEAM = 103,
  LEAGUE_AUDIT_ACTION_NODEGROUP_SET_ADVANCING = 104,
  LEAGUE_AUDIT_ACTION_NODEGROUP_EDIT = 105,
  LEAGUE_AUDIT_ACTION_NODEGROUP_POPULATE = 106,
  LEAGUE_AUDIT_ACTION_NODEGROUP_COMPLETED = 107,
  LEAGUE_AUDIT_ACTION_NODE_CREATE = 200,
  LEAGUE_AUDIT_ACTION_NODE_DESTROY = 201,
  LEAGUE_AUDIT_ACTION_NODE_AUTOCREATE = 202,
  LEAGUE_AUDIT_ACTION_NODE_SET_TEAM = 203,
  LEAGUE_AUDIT_ACTION_NODE_SET_SERIES_ID = 204,
  LEAGUE_AUDIT_ACTION_NODE_SET_ADVANCING = 205,
  LEAGUE_AUDIT_ACTION_NODE_SET_TIME = 206,
  LEAGUE_AUDIT_ACTION_NODE_MATCH_COMPLETED = 207,
  LEAGUE_AUDIT_ACTION_NODE_COMPLETED = 208,
  LEAGUE_AUDIT_ACTION_NODE_EDIT = 209
};
bool ELeagueAuditAction_IsValid(int value);
const ELeagueAuditAction ELeagueAuditAction_MIN = LEAGUE_AUDIT_ACTION_INVALID;
const ELeagueAuditAction ELeagueAuditAction_MAX = LEAGUE_AUDIT_ACTION_NODE_EDIT;
const int ELeagueAuditAction_ARRAYSIZE = ELeagueAuditAction_MAX + 1;

const ::google::protobuf::EnumDescriptor* ELeagueAuditAction_descriptor();
inline const ::std::string& ELeagueAuditAction_Name(ELeagueAuditAction value) {
  return ::google::protobuf::internal::NameOfEnum(
    ELeagueAuditAction_descriptor(), value);
}
inline bool ELeagueAuditAction_Parse(
    const ::std::string& name, ELeagueAuditAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ELeagueAuditAction>(
    ELeagueAuditAction_descriptor(), name, value);
}
enum DOTA_COMBATLOG_TYPES {
  DOTA_COMBATLOG_INVALID = -1,
  DOTA_COMBATLOG_DAMAGE = 0,
  DOTA_COMBATLOG_HEAL = 1,
  DOTA_COMBATLOG_MODIFIER_ADD = 2,
  DOTA_COMBATLOG_MODIFIER_REMOVE = 3,
  DOTA_COMBATLOG_DEATH = 4,
  DOTA_COMBATLOG_ABILITY = 5,
  DOTA_COMBATLOG_ITEM = 6,
  DOTA_COMBATLOG_LOCATION = 7,
  DOTA_COMBATLOG_GOLD = 8,
  DOTA_COMBATLOG_GAME_STATE = 9,
  DOTA_COMBATLOG_XP = 10,
  DOTA_COMBATLOG_PURCHASE = 11,
  DOTA_COMBATLOG_BUYBACK = 12,
  DOTA_COMBATLOG_ABILITY_TRIGGER = 13,
  DOTA_COMBATLOG_PLAYERSTATS = 14,
  DOTA_COMBATLOG_MULTIKILL = 15,
  DOTA_COMBATLOG_KILLSTREAK = 16,
  DOTA_COMBATLOG_TEAM_BUILDING_KILL = 17,
  DOTA_COMBATLOG_FIRST_BLOOD = 18,
  DOTA_COMBATLOG_MODIFIER_STACK_EVENT = 19,
  DOTA_COMBATLOG_NEUTRAL_CAMP_STACK = 20,
  DOTA_COMBATLOG_PICKUP_RUNE = 21,
  DOTA_COMBATLOG_REVEALED_INVISIBLE = 22,
  DOTA_COMBATLOG_HERO_SAVED = 23,
  DOTA_COMBATLOG_MANA_RESTORED = 24,
  DOTA_COMBATLOG_HERO_LEVELUP = 25,
  DOTA_COMBATLOG_BOTTLE_HEAL_ALLY = 26,
  DOTA_COMBATLOG_ENDGAME_STATS = 27,
  DOTA_COMBATLOG_INTERRUPT_CHANNEL = 28,
  DOTA_COMBATLOG_ALLIED_GOLD = 29,
  DOTA_COMBATLOG_AEGIS_TAKEN = 30,
  DOTA_COMBATLOG_MANA_DAMAGE = 31,
  DOTA_COMBATLOG_PHYSICAL_DAMAGE_PREVENTED = 32,
  DOTA_COMBATLOG_UNIT_SUMMONED = 33,
  DOTA_COMBATLOG_ATTACK_EVADE = 34,
  DOTA_COMBATLOG_TREE_CUT = 35,
  DOTA_COMBATLOG_SUCCESSFUL_SCAN = 36,
  DOTA_COMBATLOG_END_KILLSTREAK = 37,
  DOTA_COMBATLOG_BLOODSTONE_CHARGE = 38,
  DOTA_COMBATLOG_CRITICAL_DAMAGE = 39,
  DOTA_COMBATLOG_SPELL_ABSORB = 40,
  DOTA_COMBATLOG_UNIT_TELEPORTED = 41,
  DOTA_COMBATLOG_KILL_EATER_EVENT = 42
};
bool DOTA_COMBATLOG_TYPES_IsValid(int value);
const DOTA_COMBATLOG_TYPES DOTA_COMBATLOG_TYPES_MIN = DOTA_COMBATLOG_INVALID;
const DOTA_COMBATLOG_TYPES DOTA_COMBATLOG_TYPES_MAX = DOTA_COMBATLOG_KILL_EATER_EVENT;
const int DOTA_COMBATLOG_TYPES_ARRAYSIZE = DOTA_COMBATLOG_TYPES_MAX + 1;

const ::google::protobuf::EnumDescriptor* DOTA_COMBATLOG_TYPES_descriptor();
inline const ::std::string& DOTA_COMBATLOG_TYPES_Name(DOTA_COMBATLOG_TYPES value) {
  return ::google::protobuf::internal::NameOfEnum(
    DOTA_COMBATLOG_TYPES_descriptor(), value);
}
inline bool DOTA_COMBATLOG_TYPES_Parse(
    const ::std::string& name, DOTA_COMBATLOG_TYPES* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DOTA_COMBATLOG_TYPES>(
    DOTA_COMBATLOG_TYPES_descriptor(), name, value);
}
enum EDPCFavoriteType {
  FAVORITE_TYPE_ALL = 0,
  FAVORITE_TYPE_PLAYER = 1,
  FAVORITE_TYPE_TEAM = 2,
  FAVORITE_TYPE_LEAGUE = 3
};
bool EDPCFavoriteType_IsValid(int value);
const EDPCFavoriteType EDPCFavoriteType_MIN = FAVORITE_TYPE_ALL;
const EDPCFavoriteType EDPCFavoriteType_MAX = FAVORITE_TYPE_LEAGUE;
const int EDPCFavoriteType_ARRAYSIZE = EDPCFavoriteType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDPCFavoriteType_descriptor();
inline const ::std::string& EDPCFavoriteType_Name(EDPCFavoriteType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDPCFavoriteType_descriptor(), value);
}
inline bool EDPCFavoriteType_Parse(
    const ::std::string& name, EDPCFavoriteType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDPCFavoriteType>(
    EDPCFavoriteType_descriptor(), name, value);
}
enum EDPCPushNotification {
  DPC_PUSH_NOTIFICATION_MATCH_STARTING = 1,
  DPC_PUSH_NOTIFICATION_PLAYER_LEFT_TEAM = 10,
  DPC_PUSH_NOTIFICATION_PLAYER_JOINED_TEAM = 11,
  DPC_PUSH_NOTIFICATION_LEAGUE_RESULT = 20,
  DPC_PUSH_NOTIFICATION_PREDICTION_MATCHES_AVAILABLE = 30,
  DPC_PUSH_NOTIFICATION_PREDICTION_RESULT = 31,
  DPC_PUSH_NOTIFICATION_FANTASY_PLAYER_CLEARED = 40,
  DPC_PUSH_NOTIFICATION_FANTASY_DAILY_SUMMARY = 41,
  DPC_PUSH_NOTIFICATION_FANTASY_FINAL_RESULTS = 42
};
bool EDPCPushNotification_IsValid(int value);
const EDPCPushNotification EDPCPushNotification_MIN = DPC_PUSH_NOTIFICATION_MATCH_STARTING;
const EDPCPushNotification EDPCPushNotification_MAX = DPC_PUSH_NOTIFICATION_FANTASY_FINAL_RESULTS;
const int EDPCPushNotification_ARRAYSIZE = EDPCPushNotification_MAX + 1;

const ::google::protobuf::EnumDescriptor* EDPCPushNotification_descriptor();
inline const ::std::string& EDPCPushNotification_Name(EDPCPushNotification value) {
  return ::google::protobuf::internal::NameOfEnum(
    EDPCPushNotification_descriptor(), value);
}
inline bool EDPCPushNotification_Parse(
    const ::std::string& name, EDPCPushNotification* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EDPCPushNotification>(
    EDPCPushNotification_descriptor(), name, value);
}
// ===================================================================

class CDOTAClientHardwareSpecs final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTAClientHardwareSpecs) */ {
 public:
  CDOTAClientHardwareSpecs();
  virtual ~CDOTAClientHardwareSpecs();

  CDOTAClientHardwareSpecs(const CDOTAClientHardwareSpecs& from);

  inline CDOTAClientHardwareSpecs& operator=(const CDOTAClientHardwareSpecs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTAClientHardwareSpecs(CDOTAClientHardwareSpecs&& from) noexcept
    : CDOTAClientHardwareSpecs() {
    *this = ::std::move(from);
  }

  inline CDOTAClientHardwareSpecs& operator=(CDOTAClientHardwareSpecs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTAClientHardwareSpecs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTAClientHardwareSpecs* internal_default_instance() {
    return reinterpret_cast<const CDOTAClientHardwareSpecs*>(
               &_CDOTAClientHardwareSpecs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CDOTAClientHardwareSpecs* other);
  friend void swap(CDOTAClientHardwareSpecs& a, CDOTAClientHardwareSpecs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTAClientHardwareSpecs* New() const final {
    return CreateMaybeMessage<CDOTAClientHardwareSpecs>(nullptr);
  }

  CDOTAClientHardwareSpecs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTAClientHardwareSpecs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTAClientHardwareSpecs& from);
  void MergeFrom(const CDOTAClientHardwareSpecs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTAClientHardwareSpecs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional fixed64 cpu_cycles_per_second = 2;
  bool has_cpu_cycles_per_second() const;
  void clear_cpu_cycles_per_second();
  static const int kCpuCyclesPerSecondFieldNumber = 2;
  ::google::protobuf::uint64 cpu_cycles_per_second() const;
  void set_cpu_cycles_per_second(::google::protobuf::uint64 value);

  // optional fixed64 total_physical_memory = 3;
  bool has_total_physical_memory() const;
  void clear_total_physical_memory();
  static const int kTotalPhysicalMemoryFieldNumber = 3;
  ::google::protobuf::uint64 total_physical_memory() const;
  void set_total_physical_memory(::google::protobuf::uint64 value);

  // optional uint32 logical_processors = 1;
  bool has_logical_processors() const;
  void clear_logical_processors();
  static const int kLogicalProcessorsFieldNumber = 1;
  ::google::protobuf::uint32 logical_processors() const;
  void set_logical_processors(::google::protobuf::uint32 value);

  // optional bool is_64_bit_os = 4;
  bool has_is_64_bit_os() const;
  void clear_is_64_bit_os();
  static const int kIs64BitOsFieldNumber = 4;
  bool is_64_bit_os() const;
  void set_is_64_bit_os(bool value);

  // optional bool prefer_not_host = 6;
  bool has_prefer_not_host() const;
  void clear_prefer_not_host();
  static const int kPreferNotHostFieldNumber = 6;
  bool prefer_not_host() const;
  void set_prefer_not_host(bool value);

  // optional uint64 upload_measurement = 5;
  bool has_upload_measurement() const;
  void clear_upload_measurement();
  static const int kUploadMeasurementFieldNumber = 5;
  ::google::protobuf::uint64 upload_measurement() const;
  void set_upload_measurement(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTAClientHardwareSpecs)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 cpu_cycles_per_second_;
  ::google::protobuf::uint64 total_physical_memory_;
  ::google::protobuf::uint32 logical_processors_;
  bool is_64_bit_os_;
  bool prefer_not_host_;
  ::google::protobuf::uint64 upload_measurement_;
  friend struct ::TableStruct_dota_5fshared_5fenums_2eproto;
};
// -------------------------------------------------------------------

class CDOTASaveGame_Player final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTASaveGame.Player) */ {
 public:
  CDOTASaveGame_Player();
  virtual ~CDOTASaveGame_Player();

  CDOTASaveGame_Player(const CDOTASaveGame_Player& from);

  inline CDOTASaveGame_Player& operator=(const CDOTASaveGame_Player& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTASaveGame_Player(CDOTASaveGame_Player&& from) noexcept
    : CDOTASaveGame_Player() {
    *this = ::std::move(from);
  }

  inline CDOTASaveGame_Player& operator=(CDOTASaveGame_Player&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTASaveGame_Player& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTASaveGame_Player* internal_default_instance() {
    return reinterpret_cast<const CDOTASaveGame_Player*>(
               &_CDOTASaveGame_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CDOTASaveGame_Player* other);
  friend void swap(CDOTASaveGame_Player& a, CDOTASaveGame_Player& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTASaveGame_Player* New() const final {
    return CreateMaybeMessage<CDOTASaveGame_Player>(nullptr);
  }

  CDOTASaveGame_Player* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTASaveGame_Player>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTASaveGame_Player& from);
  void MergeFrom(const CDOTASaveGame_Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTASaveGame_Player* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string hero = 3;
  bool has_hero() const;
  void clear_hero();
  static const int kHeroFieldNumber = 3;
  const ::std::string& hero() const;
  void set_hero(const ::std::string& value);
  #if LANG_CXX11
  void set_hero(::std::string&& value);
  #endif
  void set_hero(const char* value);
  void set_hero(const char* value, size_t size);
  ::std::string* mutable_hero();
  ::std::string* release_hero();
  void set_allocated_hero(::std::string* hero);

  // optional .proto.dota.DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
  bool has_team() const;
  void clear_team();
  static const int kTeamFieldNumber = 1;
  ::proto::dota::DOTA_GC_TEAM team() const;
  void set_team(::proto::dota::DOTA_GC_TEAM value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTASaveGame.Player)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr hero_;
  int team_;
  friend struct ::TableStruct_dota_5fshared_5fenums_2eproto;
};
// -------------------------------------------------------------------

class CDOTASaveGame_SaveInstance_PlayerPositions final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions) */ {
 public:
  CDOTASaveGame_SaveInstance_PlayerPositions();
  virtual ~CDOTASaveGame_SaveInstance_PlayerPositions();

  CDOTASaveGame_SaveInstance_PlayerPositions(const CDOTASaveGame_SaveInstance_PlayerPositions& from);

  inline CDOTASaveGame_SaveInstance_PlayerPositions& operator=(const CDOTASaveGame_SaveInstance_PlayerPositions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTASaveGame_SaveInstance_PlayerPositions(CDOTASaveGame_SaveInstance_PlayerPositions&& from) noexcept
    : CDOTASaveGame_SaveInstance_PlayerPositions() {
    *this = ::std::move(from);
  }

  inline CDOTASaveGame_SaveInstance_PlayerPositions& operator=(CDOTASaveGame_SaveInstance_PlayerPositions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTASaveGame_SaveInstance_PlayerPositions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTASaveGame_SaveInstance_PlayerPositions* internal_default_instance() {
    return reinterpret_cast<const CDOTASaveGame_SaveInstance_PlayerPositions*>(
               &_CDOTASaveGame_SaveInstance_PlayerPositions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CDOTASaveGame_SaveInstance_PlayerPositions* other);
  friend void swap(CDOTASaveGame_SaveInstance_PlayerPositions& a, CDOTASaveGame_SaveInstance_PlayerPositions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTASaveGame_SaveInstance_PlayerPositions* New() const final {
    return CreateMaybeMessage<CDOTASaveGame_SaveInstance_PlayerPositions>(nullptr);
  }

  CDOTASaveGame_SaveInstance_PlayerPositions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTASaveGame_SaveInstance_PlayerPositions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTASaveGame_SaveInstance_PlayerPositions& from);
  void MergeFrom(const CDOTASaveGame_SaveInstance_PlayerPositions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTASaveGame_SaveInstance_PlayerPositions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  friend struct ::TableStruct_dota_5fshared_5fenums_2eproto;
};
// -------------------------------------------------------------------

class CDOTASaveGame_SaveInstance final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTASaveGame.SaveInstance) */ {
 public:
  CDOTASaveGame_SaveInstance();
  virtual ~CDOTASaveGame_SaveInstance();

  CDOTASaveGame_SaveInstance(const CDOTASaveGame_SaveInstance& from);

  inline CDOTASaveGame_SaveInstance& operator=(const CDOTASaveGame_SaveInstance& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTASaveGame_SaveInstance(CDOTASaveGame_SaveInstance&& from) noexcept
    : CDOTASaveGame_SaveInstance() {
    *this = ::std::move(from);
  }

  inline CDOTASaveGame_SaveInstance& operator=(CDOTASaveGame_SaveInstance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTASaveGame_SaveInstance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTASaveGame_SaveInstance* internal_default_instance() {
    return reinterpret_cast<const CDOTASaveGame_SaveInstance*>(
               &_CDOTASaveGame_SaveInstance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CDOTASaveGame_SaveInstance* other);
  friend void swap(CDOTASaveGame_SaveInstance& a, CDOTASaveGame_SaveInstance& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTASaveGame_SaveInstance* New() const final {
    return CreateMaybeMessage<CDOTASaveGame_SaveInstance>(nullptr);
  }

  CDOTASaveGame_SaveInstance* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTASaveGame_SaveInstance>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTASaveGame_SaveInstance& from);
  void MergeFrom(const CDOTASaveGame_SaveInstance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTASaveGame_SaveInstance* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CDOTASaveGame_SaveInstance_PlayerPositions PlayerPositions;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
  int player_positions_size() const;
  void clear_player_positions();
  static const int kPlayerPositionsFieldNumber = 5;
  ::proto::dota::CDOTASaveGame_SaveInstance_PlayerPositions* mutable_player_positions(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTASaveGame_SaveInstance_PlayerPositions >*
      mutable_player_positions();
  const ::proto::dota::CDOTASaveGame_SaveInstance_PlayerPositions& player_positions(int index) const;
  ::proto::dota::CDOTASaveGame_SaveInstance_PlayerPositions* add_player_positions();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTASaveGame_SaveInstance_PlayerPositions >&
      player_positions() const;

  // optional uint32 game_time = 2;
  bool has_game_time() const;
  void clear_game_time();
  static const int kGameTimeFieldNumber = 2;
  ::google::protobuf::uint32 game_time() const;
  void set_game_time(::google::protobuf::uint32 value);

  // optional uint32 team1_score = 3;
  bool has_team1_score() const;
  void clear_team1_score();
  static const int kTeam1ScoreFieldNumber = 3;
  ::google::protobuf::uint32 team1_score() const;
  void set_team1_score(::google::protobuf::uint32 value);

  // optional uint32 team2_score = 4;
  bool has_team2_score() const;
  void clear_team2_score();
  static const int kTeam2ScoreFieldNumber = 4;
  ::google::protobuf::uint32 team2_score() const;
  void set_team2_score(::google::protobuf::uint32 value);

  // optional uint32 save_id = 6;
  bool has_save_id() const;
  void clear_save_id();
  static const int kSaveIdFieldNumber = 6;
  ::google::protobuf::uint32 save_id() const;
  void set_save_id(::google::protobuf::uint32 value);

  // optional uint32 save_time = 7;
  bool has_save_time() const;
  void clear_save_time();
  static const int kSaveTimeFieldNumber = 7;
  ::google::protobuf::uint32 save_time() const;
  void set_save_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTASaveGame.SaveInstance)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTASaveGame_SaveInstance_PlayerPositions > player_positions_;
  ::google::protobuf::uint32 game_time_;
  ::google::protobuf::uint32 team1_score_;
  ::google::protobuf::uint32 team2_score_;
  ::google::protobuf::uint32 save_id_;
  ::google::protobuf::uint32 save_time_;
  friend struct ::TableStruct_dota_5fshared_5fenums_2eproto;
};
// -------------------------------------------------------------------

class CDOTASaveGame final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CDOTASaveGame) */ {
 public:
  CDOTASaveGame();
  virtual ~CDOTASaveGame();

  CDOTASaveGame(const CDOTASaveGame& from);

  inline CDOTASaveGame& operator=(const CDOTASaveGame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CDOTASaveGame(CDOTASaveGame&& from) noexcept
    : CDOTASaveGame() {
    *this = ::std::move(from);
  }

  inline CDOTASaveGame& operator=(CDOTASaveGame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CDOTASaveGame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CDOTASaveGame* internal_default_instance() {
    return reinterpret_cast<const CDOTASaveGame*>(
               &_CDOTASaveGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(CDOTASaveGame* other);
  friend void swap(CDOTASaveGame& a, CDOTASaveGame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CDOTASaveGame* New() const final {
    return CreateMaybeMessage<CDOTASaveGame>(nullptr);
  }

  CDOTASaveGame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CDOTASaveGame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CDOTASaveGame& from);
  void MergeFrom(const CDOTASaveGame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDOTASaveGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CDOTASaveGame_Player Player;
  typedef CDOTASaveGame_SaveInstance SaveInstance;

  // accessors -------------------------------------------------------

  // repeated .proto.dota.CDOTASaveGame.Player players = 3;
  int players_size() const;
  void clear_players();
  static const int kPlayersFieldNumber = 3;
  ::proto::dota::CDOTASaveGame_Player* mutable_players(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTASaveGame_Player >*
      mutable_players();
  const ::proto::dota::CDOTASaveGame_Player& players(int index) const;
  ::proto::dota::CDOTASaveGame_Player* add_players();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTASaveGame_Player >&
      players() const;

  // repeated .proto.dota.CDOTASaveGame.SaveInstance save_instances = 4;
  int save_instances_size() const;
  void clear_save_instances();
  static const int kSaveInstancesFieldNumber = 4;
  ::proto::dota::CDOTASaveGame_SaveInstance* mutable_save_instances(int index);
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTASaveGame_SaveInstance >*
      mutable_save_instances();
  const ::proto::dota::CDOTASaveGame_SaveInstance& save_instances(int index) const;
  ::proto::dota::CDOTASaveGame_SaveInstance* add_save_instances();
  const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTASaveGame_SaveInstance >&
      save_instances() const;

  // optional uint64 match_id = 5;
  bool has_match_id() const;
  void clear_match_id();
  static const int kMatchIdFieldNumber = 5;
  ::google::protobuf::uint64 match_id() const;
  void set_match_id(::google::protobuf::uint64 value);

  // optional uint32 save_time = 2;
  bool has_save_time() const;
  void clear_save_time();
  static const int kSaveTimeFieldNumber = 2;
  ::google::protobuf::uint32 save_time() const;
  void set_save_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.dota.CDOTASaveGame)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTASaveGame_Player > players_;
  ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTASaveGame_SaveInstance > save_instances_;
  ::google::protobuf::uint64 match_id_;
  ::google::protobuf::uint32 save_time_;
  friend struct ::TableStruct_dota_5fshared_5fenums_2eproto;
};
// -------------------------------------------------------------------

class CMsgDOTACombatLogEntry final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:proto.dota.CMsgDOTACombatLogEntry) */ {
 public:
  CMsgDOTACombatLogEntry();
  virtual ~CMsgDOTACombatLogEntry();

  CMsgDOTACombatLogEntry(const CMsgDOTACombatLogEntry& from);

  inline CMsgDOTACombatLogEntry& operator=(const CMsgDOTACombatLogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CMsgDOTACombatLogEntry(CMsgDOTACombatLogEntry&& from) noexcept
    : CMsgDOTACombatLogEntry() {
    *this = ::std::move(from);
  }

  inline CMsgDOTACombatLogEntry& operator=(CMsgDOTACombatLogEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CMsgDOTACombatLogEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CMsgDOTACombatLogEntry* internal_default_instance() {
    return reinterpret_cast<const CMsgDOTACombatLogEntry*>(
               &_CMsgDOTACombatLogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(CMsgDOTACombatLogEntry* other);
  friend void swap(CMsgDOTACombatLogEntry& a, CMsgDOTACombatLogEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CMsgDOTACombatLogEntry* New() const final {
    return CreateMaybeMessage<CMsgDOTACombatLogEntry>(nullptr);
  }

  CMsgDOTACombatLogEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CMsgDOTACombatLogEntry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CMsgDOTACombatLogEntry& from);
  void MergeFrom(const CMsgDOTACombatLogEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CMsgDOTACombatLogEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 assist_players = 40;
  int assist_players_size() const;
  void clear_assist_players();
  static const int kAssistPlayersFieldNumber = 40;
  ::google::protobuf::uint32 assist_players(int index) const;
  void set_assist_players(int index, ::google::protobuf::uint32 value);
  void add_assist_players(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      assist_players() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_assist_players();

  // optional uint32 target_name = 2;
  bool has_target_name() const;
  void clear_target_name();
  static const int kTargetNameFieldNumber = 2;
  ::google::protobuf::uint32 target_name() const;
  void set_target_name(::google::protobuf::uint32 value);

  // optional uint32 target_source_name = 3;
  bool has_target_source_name() const;
  void clear_target_source_name();
  static const int kTargetSourceNameFieldNumber = 3;
  ::google::protobuf::uint32 target_source_name() const;
  void set_target_source_name(::google::protobuf::uint32 value);

  // optional uint32 attacker_name = 4;
  bool has_attacker_name() const;
  void clear_attacker_name();
  static const int kAttackerNameFieldNumber = 4;
  ::google::protobuf::uint32 attacker_name() const;
  void set_attacker_name(::google::protobuf::uint32 value);

  // optional uint32 damage_source_name = 5;
  bool has_damage_source_name() const;
  void clear_damage_source_name();
  static const int kDamageSourceNameFieldNumber = 5;
  ::google::protobuf::uint32 damage_source_name() const;
  void set_damage_source_name(::google::protobuf::uint32 value);

  // optional uint32 inflictor_name = 6;
  bool has_inflictor_name() const;
  void clear_inflictor_name();
  static const int kInflictorNameFieldNumber = 6;
  ::google::protobuf::uint32 inflictor_name() const;
  void set_inflictor_name(::google::protobuf::uint32 value);

  // optional bool is_attacker_illusion = 7;
  bool has_is_attacker_illusion() const;
  void clear_is_attacker_illusion();
  static const int kIsAttackerIllusionFieldNumber = 7;
  bool is_attacker_illusion() const;
  void set_is_attacker_illusion(bool value);

  // optional bool is_attacker_hero = 8;
  bool has_is_attacker_hero() const;
  void clear_is_attacker_hero();
  static const int kIsAttackerHeroFieldNumber = 8;
  bool is_attacker_hero() const;
  void set_is_attacker_hero(bool value);

  // optional bool is_target_illusion = 9;
  bool has_is_target_illusion() const;
  void clear_is_target_illusion();
  static const int kIsTargetIllusionFieldNumber = 9;
  bool is_target_illusion() const;
  void set_is_target_illusion(bool value);

  // optional bool is_target_hero = 10;
  bool has_is_target_hero() const;
  void clear_is_target_hero();
  static const int kIsTargetHeroFieldNumber = 10;
  bool is_target_hero() const;
  void set_is_target_hero(bool value);

  // optional uint32 value = 13;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 13;
  ::google::protobuf::uint32 value() const;
  void set_value(::google::protobuf::uint32 value);

  // optional int32 health = 14;
  bool has_health() const;
  void clear_health();
  static const int kHealthFieldNumber = 14;
  ::google::protobuf::int32 health() const;
  void set_health(::google::protobuf::int32 value);

  // optional float timestamp = 15;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 15;
  float timestamp() const;
  void set_timestamp(float value);

  // optional bool is_visible_radiant = 11;
  bool has_is_visible_radiant() const;
  void clear_is_visible_radiant();
  static const int kIsVisibleRadiantFieldNumber = 11;
  bool is_visible_radiant() const;
  void set_is_visible_radiant(bool value);

  // optional bool is_visible_dire = 12;
  bool has_is_visible_dire() const;
  void clear_is_visible_dire();
  static const int kIsVisibleDireFieldNumber = 12;
  bool is_visible_dire() const;
  void set_is_visible_dire(bool value);

  // optional bool is_ability_toggle_on = 18;
  bool has_is_ability_toggle_on() const;
  void clear_is_ability_toggle_on();
  static const int kIsAbilityToggleOnFieldNumber = 18;
  bool is_ability_toggle_on() const;
  void set_is_ability_toggle_on(bool value);

  // optional bool is_ability_toggle_off = 19;
  bool has_is_ability_toggle_off() const;
  void clear_is_ability_toggle_off();
  static const int kIsAbilityToggleOffFieldNumber = 19;
  bool is_ability_toggle_off() const;
  void set_is_ability_toggle_off(bool value);

  // optional float stun_duration = 16;
  bool has_stun_duration() const;
  void clear_stun_duration();
  static const int kStunDurationFieldNumber = 16;
  float stun_duration() const;
  void set_stun_duration(float value);

  // optional float slow_duration = 17;
  bool has_slow_duration() const;
  void clear_slow_duration();
  static const int kSlowDurationFieldNumber = 17;
  float slow_duration() const;
  void set_slow_duration(float value);

  // optional uint32 ability_level = 20;
  bool has_ability_level() const;
  void clear_ability_level();
  static const int kAbilityLevelFieldNumber = 20;
  ::google::protobuf::uint32 ability_level() const;
  void set_ability_level(::google::protobuf::uint32 value);

  // optional float location_x = 21;
  bool has_location_x() const;
  void clear_location_x();
  static const int kLocationXFieldNumber = 21;
  float location_x() const;
  void set_location_x(float value);

  // optional float location_y = 22;
  bool has_location_y() const;
  void clear_location_y();
  static const int kLocationYFieldNumber = 22;
  float location_y() const;
  void set_location_y(float value);

  // optional uint32 gold_reason = 23;
  bool has_gold_reason() const;
  void clear_gold_reason();
  static const int kGoldReasonFieldNumber = 23;
  ::google::protobuf::uint32 gold_reason() const;
  void set_gold_reason(::google::protobuf::uint32 value);

  // optional float timestamp_raw = 24;
  bool has_timestamp_raw() const;
  void clear_timestamp_raw();
  static const int kTimestampRawFieldNumber = 24;
  float timestamp_raw() const;
  void set_timestamp_raw(float value);

  // optional float modifier_duration = 25;
  bool has_modifier_duration() const;
  void clear_modifier_duration();
  static const int kModifierDurationFieldNumber = 25;
  float modifier_duration() const;
  void set_modifier_duration(float value);

  // optional uint32 xp_reason = 26;
  bool has_xp_reason() const;
  void clear_xp_reason();
  static const int kXpReasonFieldNumber = 26;
  ::google::protobuf::uint32 xp_reason() const;
  void set_xp_reason(::google::protobuf::uint32 value);

  // optional uint32 last_hits = 27;
  bool has_last_hits() const;
  void clear_last_hits();
  static const int kLastHitsFieldNumber = 27;
  ::google::protobuf::uint32 last_hits() const;
  void set_last_hits(::google::protobuf::uint32 value);

  // optional uint32 attacker_team = 28;
  bool has_attacker_team() const;
  void clear_attacker_team();
  static const int kAttackerTeamFieldNumber = 28;
  ::google::protobuf::uint32 attacker_team() const;
  void set_attacker_team(::google::protobuf::uint32 value);

  // optional uint32 target_team = 29;
  bool has_target_team() const;
  void clear_target_team();
  static const int kTargetTeamFieldNumber = 29;
  ::google::protobuf::uint32 target_team() const;
  void set_target_team(::google::protobuf::uint32 value);

  // optional uint32 obs_wards_placed = 30;
  bool has_obs_wards_placed() const;
  void clear_obs_wards_placed();
  static const int kObsWardsPlacedFieldNumber = 30;
  ::google::protobuf::uint32 obs_wards_placed() const;
  void set_obs_wards_placed(::google::protobuf::uint32 value);

  // optional uint32 assist_player0 = 31;
  bool has_assist_player0() const;
  void clear_assist_player0();
  static const int kAssistPlayer0FieldNumber = 31;
  ::google::protobuf::uint32 assist_player0() const;
  void set_assist_player0(::google::protobuf::uint32 value);

  // optional uint32 assist_player1 = 32;
  bool has_assist_player1() const;
  void clear_assist_player1();
  static const int kAssistPlayer1FieldNumber = 32;
  ::google::protobuf::uint32 assist_player1() const;
  void set_assist_player1(::google::protobuf::uint32 value);

  // optional uint32 assist_player2 = 33;
  bool has_assist_player2() const;
  void clear_assist_player2();
  static const int kAssistPlayer2FieldNumber = 33;
  ::google::protobuf::uint32 assist_player2() const;
  void set_assist_player2(::google::protobuf::uint32 value);

  // optional uint32 assist_player3 = 34;
  bool has_assist_player3() const;
  void clear_assist_player3();
  static const int kAssistPlayer3FieldNumber = 34;
  ::google::protobuf::uint32 assist_player3() const;
  void set_assist_player3(::google::protobuf::uint32 value);

  // optional uint32 stack_count = 35;
  bool has_stack_count() const;
  void clear_stack_count();
  static const int kStackCountFieldNumber = 35;
  ::google::protobuf::uint32 stack_count() const;
  void set_stack_count(::google::protobuf::uint32 value);

  // optional uint32 neutral_camp_type = 38;
  bool has_neutral_camp_type() const;
  void clear_neutral_camp_type();
  static const int kNeutralCampTypeFieldNumber = 38;
  ::google::protobuf::uint32 neutral_camp_type() const;
  void set_neutral_camp_type(::google::protobuf::uint32 value);

  // optional uint32 rune_type = 39;
  bool has_rune_type() const;
  void clear_rune_type();
  static const int kRuneTypeFieldNumber = 39;
  ::google::protobuf::uint32 rune_type() const;
  void set_rune_type(::google::protobuf::uint32 value);

  // optional bool hidden_modifier = 36;
  bool has_hidden_modifier() const;
  void clear_hidden_modifier();
  static const int kHiddenModifierFieldNumber = 36;
  bool hidden_modifier() const;
  void set_hidden_modifier(bool value);

  // optional bool is_target_building = 37;
  bool has_is_target_building() const;
  void clear_is_target_building();
  static const int kIsTargetBuildingFieldNumber = 37;
  bool is_target_building() const;
  void set_is_target_building(bool value);

  // optional bool is_heal_save = 41;
  bool has_is_heal_save() const;
  void clear_is_heal_save();
  static const int kIsHealSaveFieldNumber = 41;
  bool is_heal_save() const;
  void set_is_heal_save(bool value);

  // optional bool is_ultimate_ability = 42;
  bool has_is_ultimate_ability() const;
  void clear_is_ultimate_ability();
  static const int kIsUltimateAbilityFieldNumber = 42;
  bool is_ultimate_ability() const;
  void set_is_ultimate_ability(bool value);

  // optional uint32 attacker_hero_level = 43;
  bool has_attacker_hero_level() const;
  void clear_attacker_hero_level();
  static const int kAttackerHeroLevelFieldNumber = 43;
  ::google::protobuf::uint32 attacker_hero_level() const;
  void set_attacker_hero_level(::google::protobuf::uint32 value);

  // optional uint32 target_hero_level = 44;
  bool has_target_hero_level() const;
  void clear_target_hero_level();
  static const int kTargetHeroLevelFieldNumber = 44;
  ::google::protobuf::uint32 target_hero_level() const;
  void set_target_hero_level(::google::protobuf::uint32 value);

  // optional uint32 xpm = 45;
  bool has_xpm() const;
  void clear_xpm();
  static const int kXpmFieldNumber = 45;
  ::google::protobuf::uint32 xpm() const;
  void set_xpm(::google::protobuf::uint32 value);

  // optional uint32 gpm = 46;
  bool has_gpm() const;
  void clear_gpm();
  static const int kGpmFieldNumber = 46;
  ::google::protobuf::uint32 gpm() const;
  void set_gpm(::google::protobuf::uint32 value);

  // optional uint32 event_location = 47;
  bool has_event_location() const;
  void clear_event_location();
  static const int kEventLocationFieldNumber = 47;
  ::google::protobuf::uint32 event_location() const;
  void set_event_location(::google::protobuf::uint32 value);

  // optional uint32 damage_type = 49;
  bool has_damage_type() const;
  void clear_damage_type();
  static const int kDamageTypeFieldNumber = 49;
  ::google::protobuf::uint32 damage_type() const;
  void set_damage_type(::google::protobuf::uint32 value);

  // optional uint32 damage_category = 51;
  bool has_damage_category() const;
  void clear_damage_category();
  static const int kDamageCategoryFieldNumber = 51;
  ::google::protobuf::uint32 damage_category() const;
  void set_damage_category(::google::protobuf::uint32 value);

  // optional uint32 networth = 52;
  bool has_networth() const;
  void clear_networth();
  static const int kNetworthFieldNumber = 52;
  ::google::protobuf::uint32 networth() const;
  void set_networth(::google::protobuf::uint32 value);

  // optional bool target_is_self = 48;
  bool has_target_is_self() const;
  void clear_target_is_self();
  static const int kTargetIsSelfFieldNumber = 48;
  bool target_is_self() const;
  void set_target_is_self(bool value);

  // optional bool invisibility_modifier = 50;
  bool has_invisibility_modifier() const;
  void clear_invisibility_modifier();
  static const int kInvisibilityModifierFieldNumber = 50;
  bool invisibility_modifier() const;
  void set_invisibility_modifier(bool value);

  // optional bool silence_modifier = 55;
  bool has_silence_modifier() const;
  void clear_silence_modifier();
  static const int kSilenceModifierFieldNumber = 55;
  bool silence_modifier() const;
  void set_silence_modifier(bool value);

  // optional bool heal_from_lifesteal = 56;
  bool has_heal_from_lifesteal() const;
  void clear_heal_from_lifesteal();
  static const int kHealFromLifestealFieldNumber = 56;
  bool heal_from_lifesteal() const;
  void set_heal_from_lifesteal(bool value);

  // optional uint32 building_type = 53;
  bool has_building_type() const;
  void clear_building_type();
  static const int kBuildingTypeFieldNumber = 53;
  ::google::protobuf::uint32 building_type() const;
  void set_building_type(::google::protobuf::uint32 value);

  // optional float modifier_elapsed_duration = 54;
  bool has_modifier_elapsed_duration() const;
  void clear_modifier_elapsed_duration();
  static const int kModifierElapsedDurationFieldNumber = 54;
  float modifier_elapsed_duration() const;
  void set_modifier_elapsed_duration(float value);

  // optional bool modifier_purged = 57;
  bool has_modifier_purged() const;
  void clear_modifier_purged();
  static const int kModifierPurgedFieldNumber = 57;
  bool modifier_purged() const;
  void set_modifier_purged(bool value);

  // optional bool spell_evaded = 58;
  bool has_spell_evaded() const;
  void clear_spell_evaded();
  static const int kSpellEvadedFieldNumber = 58;
  bool spell_evaded() const;
  void set_spell_evaded(bool value);

  // optional bool motion_controller_modifier = 59;
  bool has_motion_controller_modifier() const;
  void clear_motion_controller_modifier();
  static const int kMotionControllerModifierFieldNumber = 59;
  bool motion_controller_modifier() const;
  void set_motion_controller_modifier(bool value);

  // optional bool long_range_kill = 60;
  bool has_long_range_kill() const;
  void clear_long_range_kill();
  static const int kLongRangeKillFieldNumber = 60;
  bool long_range_kill() const;
  void set_long_range_kill(bool value);

  // optional uint32 modifier_purge_ability = 61;
  bool has_modifier_purge_ability() const;
  void clear_modifier_purge_ability();
  static const int kModifierPurgeAbilityFieldNumber = 61;
  ::google::protobuf::uint32 modifier_purge_ability() const;
  void set_modifier_purge_ability(::google::protobuf::uint32 value);

  // optional uint32 modifier_purge_npc = 62;
  bool has_modifier_purge_npc() const;
  void clear_modifier_purge_npc();
  static const int kModifierPurgeNpcFieldNumber = 62;
  ::google::protobuf::uint32 modifier_purge_npc() const;
  void set_modifier_purge_npc(::google::protobuf::uint32 value);

  // optional uint32 total_unit_death_count = 64;
  bool has_total_unit_death_count() const;
  void clear_total_unit_death_count();
  static const int kTotalUnitDeathCountFieldNumber = 64;
  ::google::protobuf::uint32 total_unit_death_count() const;
  void set_total_unit_death_count(::google::protobuf::uint32 value);

  // optional bool root_modifier = 63;
  bool has_root_modifier() const;
  void clear_root_modifier();
  static const int kRootModifierFieldNumber = 63;
  bool root_modifier() const;
  void set_root_modifier(bool value);

  // optional bool aura_modifier = 65;
  bool has_aura_modifier() const;
  void clear_aura_modifier();
  static const int kAuraModifierFieldNumber = 65;
  bool aura_modifier() const;
  void set_aura_modifier(bool value);

  // optional bool armor_debuff_modifier = 66;
  bool has_armor_debuff_modifier() const;
  void clear_armor_debuff_modifier();
  static const int kArmorDebuffModifierFieldNumber = 66;
  bool armor_debuff_modifier() const;
  void set_armor_debuff_modifier(bool value);

  // optional bool no_physical_damage_modifier = 67;
  bool has_no_physical_damage_modifier() const;
  void clear_no_physical_damage_modifier();
  static const int kNoPhysicalDamageModifierFieldNumber = 67;
  bool no_physical_damage_modifier() const;
  void set_no_physical_damage_modifier(bool value);

  // optional uint32 modifier_ability = 68;
  bool has_modifier_ability() const;
  void clear_modifier_ability();
  static const int kModifierAbilityFieldNumber = 68;
  ::google::protobuf::uint32 modifier_ability() const;
  void set_modifier_ability(::google::protobuf::uint32 value);

  // optional bool modifier_hidden = 69;
  bool has_modifier_hidden() const;
  void clear_modifier_hidden();
  static const int kModifierHiddenFieldNumber = 69;
  bool modifier_hidden() const;
  void set_modifier_hidden(bool value);

  // optional bool inflictor_is_stolen_ability = 70;
  bool has_inflictor_is_stolen_ability() const;
  void clear_inflictor_is_stolen_ability();
  static const int kInflictorIsStolenAbilityFieldNumber = 70;
  bool inflictor_is_stolen_ability() const;
  void set_inflictor_is_stolen_ability(bool value);

  // optional uint32 kill_eater_event = 71;
  bool has_kill_eater_event() const;
  void clear_kill_eater_event();
  static const int kKillEaterEventFieldNumber = 71;
  ::google::protobuf::uint32 kill_eater_event() const;
  void set_kill_eater_event(::google::protobuf::uint32 value);

  // optional uint32 unit_status_label = 72;
  bool has_unit_status_label() const;
  void clear_unit_status_label();
  static const int kUnitStatusLabelFieldNumber = 72;
  ::google::protobuf::uint32 unit_status_label() const;
  void set_unit_status_label(::google::protobuf::uint32 value);

  // optional .proto.dota.DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_INVALID];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::proto::dota::DOTA_COMBATLOG_TYPES type() const;
  void set_type(::proto::dota::DOTA_COMBATLOG_TYPES value);

  // @@protoc_insertion_point(class_scope:proto.dota.CMsgDOTACombatLogEntry)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<3> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > assist_players_;
  ::google::protobuf::uint32 target_name_;
  ::google::protobuf::uint32 target_source_name_;
  ::google::protobuf::uint32 attacker_name_;
  ::google::protobuf::uint32 damage_source_name_;
  ::google::protobuf::uint32 inflictor_name_;
  bool is_attacker_illusion_;
  bool is_attacker_hero_;
  bool is_target_illusion_;
  bool is_target_hero_;
  ::google::protobuf::uint32 value_;
  ::google::protobuf::int32 health_;
  float timestamp_;
  bool is_visible_radiant_;
  bool is_visible_dire_;
  bool is_ability_toggle_on_;
  bool is_ability_toggle_off_;
  float stun_duration_;
  float slow_duration_;
  ::google::protobuf::uint32 ability_level_;
  float location_x_;
  float location_y_;
  ::google::protobuf::uint32 gold_reason_;
  float timestamp_raw_;
  float modifier_duration_;
  ::google::protobuf::uint32 xp_reason_;
  ::google::protobuf::uint32 last_hits_;
  ::google::protobuf::uint32 attacker_team_;
  ::google::protobuf::uint32 target_team_;
  ::google::protobuf::uint32 obs_wards_placed_;
  ::google::protobuf::uint32 assist_player0_;
  ::google::protobuf::uint32 assist_player1_;
  ::google::protobuf::uint32 assist_player2_;
  ::google::protobuf::uint32 assist_player3_;
  ::google::protobuf::uint32 stack_count_;
  ::google::protobuf::uint32 neutral_camp_type_;
  ::google::protobuf::uint32 rune_type_;
  bool hidden_modifier_;
  bool is_target_building_;
  bool is_heal_save_;
  bool is_ultimate_ability_;
  ::google::protobuf::uint32 attacker_hero_level_;
  ::google::protobuf::uint32 target_hero_level_;
  ::google::protobuf::uint32 xpm_;
  ::google::protobuf::uint32 gpm_;
  ::google::protobuf::uint32 event_location_;
  ::google::protobuf::uint32 damage_type_;
  ::google::protobuf::uint32 damage_category_;
  ::google::protobuf::uint32 networth_;
  bool target_is_self_;
  bool invisibility_modifier_;
  bool silence_modifier_;
  bool heal_from_lifesteal_;
  ::google::protobuf::uint32 building_type_;
  float modifier_elapsed_duration_;
  bool modifier_purged_;
  bool spell_evaded_;
  bool motion_controller_modifier_;
  bool long_range_kill_;
  ::google::protobuf::uint32 modifier_purge_ability_;
  ::google::protobuf::uint32 modifier_purge_npc_;
  ::google::protobuf::uint32 total_unit_death_count_;
  bool root_modifier_;
  bool aura_modifier_;
  bool armor_debuff_modifier_;
  bool no_physical_damage_modifier_;
  ::google::protobuf::uint32 modifier_ability_;
  bool modifier_hidden_;
  bool inflictor_is_stolen_ability_;
  ::google::protobuf::uint32 kill_eater_event_;
  ::google::protobuf::uint32 unit_status_label_;
  int type_;
  friend struct ::TableStruct_dota_5fshared_5fenums_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CDOTAClientHardwareSpecs

// optional uint32 logical_processors = 1;
inline bool CDOTAClientHardwareSpecs::has_logical_processors() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTAClientHardwareSpecs::clear_logical_processors() {
  logical_processors_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CDOTAClientHardwareSpecs::logical_processors() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientHardwareSpecs.logical_processors)
  return logical_processors_;
}
inline void CDOTAClientHardwareSpecs::set_logical_processors(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  logical_processors_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientHardwareSpecs.logical_processors)
}

// optional fixed64 cpu_cycles_per_second = 2;
inline bool CDOTAClientHardwareSpecs::has_cpu_cycles_per_second() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTAClientHardwareSpecs::clear_cpu_cycles_per_second() {
  cpu_cycles_per_second_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CDOTAClientHardwareSpecs::cpu_cycles_per_second() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientHardwareSpecs.cpu_cycles_per_second)
  return cpu_cycles_per_second_;
}
inline void CDOTAClientHardwareSpecs::set_cpu_cycles_per_second(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  cpu_cycles_per_second_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientHardwareSpecs.cpu_cycles_per_second)
}

// optional fixed64 total_physical_memory = 3;
inline bool CDOTAClientHardwareSpecs::has_total_physical_memory() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTAClientHardwareSpecs::clear_total_physical_memory() {
  total_physical_memory_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint64 CDOTAClientHardwareSpecs::total_physical_memory() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientHardwareSpecs.total_physical_memory)
  return total_physical_memory_;
}
inline void CDOTAClientHardwareSpecs::set_total_physical_memory(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000002u;
  total_physical_memory_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientHardwareSpecs.total_physical_memory)
}

// optional bool is_64_bit_os = 4;
inline bool CDOTAClientHardwareSpecs::has_is_64_bit_os() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTAClientHardwareSpecs::clear_is_64_bit_os() {
  is_64_bit_os_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool CDOTAClientHardwareSpecs::is_64_bit_os() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientHardwareSpecs.is_64_bit_os)
  return is_64_bit_os_;
}
inline void CDOTAClientHardwareSpecs::set_is_64_bit_os(bool value) {
  _has_bits_[0] |= 0x00000008u;
  is_64_bit_os_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientHardwareSpecs.is_64_bit_os)
}

// optional uint64 upload_measurement = 5;
inline bool CDOTAClientHardwareSpecs::has_upload_measurement() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CDOTAClientHardwareSpecs::clear_upload_measurement() {
  upload_measurement_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::google::protobuf::uint64 CDOTAClientHardwareSpecs::upload_measurement() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientHardwareSpecs.upload_measurement)
  return upload_measurement_;
}
inline void CDOTAClientHardwareSpecs::set_upload_measurement(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  upload_measurement_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientHardwareSpecs.upload_measurement)
}

// optional bool prefer_not_host = 6;
inline bool CDOTAClientHardwareSpecs::has_prefer_not_host() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTAClientHardwareSpecs::clear_prefer_not_host() {
  prefer_not_host_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool CDOTAClientHardwareSpecs::prefer_not_host() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTAClientHardwareSpecs.prefer_not_host)
  return prefer_not_host_;
}
inline void CDOTAClientHardwareSpecs::set_prefer_not_host(bool value) {
  _has_bits_[0] |= 0x00000010u;
  prefer_not_host_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTAClientHardwareSpecs.prefer_not_host)
}

// -------------------------------------------------------------------

// CDOTASaveGame_Player

// optional .proto.dota.DOTA_GC_TEAM team = 1 [default = DOTA_GC_TEAM_GOOD_GUYS];
inline bool CDOTASaveGame_Player::has_team() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTASaveGame_Player::clear_team() {
  team_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::proto::dota::DOTA_GC_TEAM CDOTASaveGame_Player::team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.Player.team)
  return static_cast< ::proto::dota::DOTA_GC_TEAM >(team_);
}
inline void CDOTASaveGame_Player::set_team(::proto::dota::DOTA_GC_TEAM value) {
  assert(::proto::dota::DOTA_GC_TEAM_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTASaveGame.Player.team)
}

// optional string name = 2;
inline bool CDOTASaveGame_Player::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTASaveGame_Player::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& CDOTASaveGame_Player::name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.Player.name)
  return name_.GetNoArena();
}
inline void CDOTASaveGame_Player::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTASaveGame.Player.name)
}
#if LANG_CXX11
inline void CDOTASaveGame_Player::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTASaveGame.Player.name)
}
#endif
inline void CDOTASaveGame_Player::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTASaveGame.Player.name)
}
inline void CDOTASaveGame_Player::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTASaveGame.Player.name)
}
inline ::std::string* CDOTASaveGame_Player::mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTASaveGame.Player.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDOTASaveGame_Player::release_name() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTASaveGame.Player.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDOTASaveGame_Player::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTASaveGame.Player.name)
}

// optional string hero = 3;
inline bool CDOTASaveGame_Player::has_hero() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTASaveGame_Player::clear_hero() {
  hero_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& CDOTASaveGame_Player::hero() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.Player.hero)
  return hero_.GetNoArena();
}
inline void CDOTASaveGame_Player::set_hero(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  hero_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.dota.CDOTASaveGame.Player.hero)
}
#if LANG_CXX11
inline void CDOTASaveGame_Player::set_hero(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  hero_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.dota.CDOTASaveGame.Player.hero)
}
#endif
inline void CDOTASaveGame_Player::set_hero(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  hero_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.dota.CDOTASaveGame.Player.hero)
}
inline void CDOTASaveGame_Player::set_hero(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  hero_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.dota.CDOTASaveGame.Player.hero)
}
inline ::std::string* CDOTASaveGame_Player::mutable_hero() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTASaveGame.Player.hero)
  return hero_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CDOTASaveGame_Player::release_hero() {
  // @@protoc_insertion_point(field_release:proto.dota.CDOTASaveGame.Player.hero)
  if (!has_hero()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return hero_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CDOTASaveGame_Player::set_allocated_hero(::std::string* hero) {
  if (hero != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  hero_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hero);
  // @@protoc_insertion_point(field_set_allocated:proto.dota.CDOTASaveGame.Player.hero)
}

// -------------------------------------------------------------------

// CDOTASaveGame_SaveInstance_PlayerPositions

// optional float x = 1;
inline bool CDOTASaveGame_SaveInstance_PlayerPositions::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float CDOTASaveGame_SaveInstance_PlayerPositions::x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions.x)
  return x_;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::set_x(float value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions.x)
}

// optional float y = 2;
inline bool CDOTASaveGame_SaveInstance_PlayerPositions::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CDOTASaveGame_SaveInstance_PlayerPositions::y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions.y)
  return y_;
}
inline void CDOTASaveGame_SaveInstance_PlayerPositions::set_y(float value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions.y)
}

// -------------------------------------------------------------------

// CDOTASaveGame_SaveInstance

// optional uint32 game_time = 2;
inline bool CDOTASaveGame_SaveInstance::has_game_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTASaveGame_SaveInstance::clear_game_time() {
  game_time_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CDOTASaveGame_SaveInstance::game_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.SaveInstance.game_time)
  return game_time_;
}
inline void CDOTASaveGame_SaveInstance::set_game_time(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  game_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTASaveGame.SaveInstance.game_time)
}

// optional uint32 team1_score = 3;
inline bool CDOTASaveGame_SaveInstance::has_team1_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTASaveGame_SaveInstance::clear_team1_score() {
  team1_score_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CDOTASaveGame_SaveInstance::team1_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.SaveInstance.team1_score)
  return team1_score_;
}
inline void CDOTASaveGame_SaveInstance::set_team1_score(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  team1_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTASaveGame.SaveInstance.team1_score)
}

// optional uint32 team2_score = 4;
inline bool CDOTASaveGame_SaveInstance::has_team2_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CDOTASaveGame_SaveInstance::clear_team2_score() {
  team2_score_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CDOTASaveGame_SaveInstance::team2_score() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.SaveInstance.team2_score)
  return team2_score_;
}
inline void CDOTASaveGame_SaveInstance::set_team2_score(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  team2_score_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTASaveGame.SaveInstance.team2_score)
}

// repeated .proto.dota.CDOTASaveGame.SaveInstance.PlayerPositions player_positions = 5;
inline int CDOTASaveGame_SaveInstance::player_positions_size() const {
  return player_positions_.size();
}
inline void CDOTASaveGame_SaveInstance::clear_player_positions() {
  player_positions_.Clear();
}
inline ::proto::dota::CDOTASaveGame_SaveInstance_PlayerPositions* CDOTASaveGame_SaveInstance::mutable_player_positions(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTASaveGame.SaveInstance.player_positions)
  return player_positions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTASaveGame_SaveInstance_PlayerPositions >*
CDOTASaveGame_SaveInstance::mutable_player_positions() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTASaveGame.SaveInstance.player_positions)
  return &player_positions_;
}
inline const ::proto::dota::CDOTASaveGame_SaveInstance_PlayerPositions& CDOTASaveGame_SaveInstance::player_positions(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.SaveInstance.player_positions)
  return player_positions_.Get(index);
}
inline ::proto::dota::CDOTASaveGame_SaveInstance_PlayerPositions* CDOTASaveGame_SaveInstance::add_player_positions() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTASaveGame.SaveInstance.player_positions)
  return player_positions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTASaveGame_SaveInstance_PlayerPositions >&
CDOTASaveGame_SaveInstance::player_positions() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTASaveGame.SaveInstance.player_positions)
  return player_positions_;
}

// optional uint32 save_id = 6;
inline bool CDOTASaveGame_SaveInstance::has_save_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CDOTASaveGame_SaveInstance::clear_save_id() {
  save_id_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CDOTASaveGame_SaveInstance::save_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.SaveInstance.save_id)
  return save_id_;
}
inline void CDOTASaveGame_SaveInstance::set_save_id(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  save_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTASaveGame.SaveInstance.save_id)
}

// optional uint32 save_time = 7;
inline bool CDOTASaveGame_SaveInstance::has_save_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CDOTASaveGame_SaveInstance::clear_save_time() {
  save_time_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CDOTASaveGame_SaveInstance::save_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.SaveInstance.save_time)
  return save_time_;
}
inline void CDOTASaveGame_SaveInstance::set_save_time(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  save_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTASaveGame.SaveInstance.save_time)
}

// -------------------------------------------------------------------

// CDOTASaveGame

// optional uint64 match_id = 5;
inline bool CDOTASaveGame::has_match_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CDOTASaveGame::clear_match_id() {
  match_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint64 CDOTASaveGame::match_id() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.match_id)
  return match_id_;
}
inline void CDOTASaveGame::set_match_id(::google::protobuf::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  match_id_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTASaveGame.match_id)
}

// optional uint32 save_time = 2;
inline bool CDOTASaveGame::has_save_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CDOTASaveGame::clear_save_time() {
  save_time_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CDOTASaveGame::save_time() const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.save_time)
  return save_time_;
}
inline void CDOTASaveGame::set_save_time(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  save_time_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CDOTASaveGame.save_time)
}

// repeated .proto.dota.CDOTASaveGame.Player players = 3;
inline int CDOTASaveGame::players_size() const {
  return players_.size();
}
inline void CDOTASaveGame::clear_players() {
  players_.Clear();
}
inline ::proto::dota::CDOTASaveGame_Player* CDOTASaveGame::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTASaveGame.players)
  return players_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTASaveGame_Player >*
CDOTASaveGame::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTASaveGame.players)
  return &players_;
}
inline const ::proto::dota::CDOTASaveGame_Player& CDOTASaveGame::players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.players)
  return players_.Get(index);
}
inline ::proto::dota::CDOTASaveGame_Player* CDOTASaveGame::add_players() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTASaveGame.players)
  return players_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTASaveGame_Player >&
CDOTASaveGame::players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTASaveGame.players)
  return players_;
}

// repeated .proto.dota.CDOTASaveGame.SaveInstance save_instances = 4;
inline int CDOTASaveGame::save_instances_size() const {
  return save_instances_.size();
}
inline void CDOTASaveGame::clear_save_instances() {
  save_instances_.Clear();
}
inline ::proto::dota::CDOTASaveGame_SaveInstance* CDOTASaveGame::mutable_save_instances(int index) {
  // @@protoc_insertion_point(field_mutable:proto.dota.CDOTASaveGame.save_instances)
  return save_instances_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTASaveGame_SaveInstance >*
CDOTASaveGame::mutable_save_instances() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CDOTASaveGame.save_instances)
  return &save_instances_;
}
inline const ::proto::dota::CDOTASaveGame_SaveInstance& CDOTASaveGame::save_instances(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CDOTASaveGame.save_instances)
  return save_instances_.Get(index);
}
inline ::proto::dota::CDOTASaveGame_SaveInstance* CDOTASaveGame::add_save_instances() {
  // @@protoc_insertion_point(field_add:proto.dota.CDOTASaveGame.save_instances)
  return save_instances_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::dota::CDOTASaveGame_SaveInstance >&
CDOTASaveGame::save_instances() const {
  // @@protoc_insertion_point(field_list:proto.dota.CDOTASaveGame.save_instances)
  return save_instances_;
}

// -------------------------------------------------------------------

// CMsgDOTACombatLogEntry

// optional .proto.dota.DOTA_COMBATLOG_TYPES type = 1 [default = DOTA_COMBATLOG_INVALID];
inline bool CMsgDOTACombatLogEntry::has_type() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_type() {
  type_ = -1;
  _has_bits_[2] &= ~0x00000040u;
}
inline ::proto::dota::DOTA_COMBATLOG_TYPES CMsgDOTACombatLogEntry::type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.type)
  return static_cast< ::proto::dota::DOTA_COMBATLOG_TYPES >(type_);
}
inline void CMsgDOTACombatLogEntry::set_type(::proto::dota::DOTA_COMBATLOG_TYPES value) {
  assert(::proto::dota::DOTA_COMBATLOG_TYPES_IsValid(value));
  _has_bits_[2] |= 0x00000040u;
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.type)
}

// optional uint32 target_name = 2;
inline bool CMsgDOTACombatLogEntry::has_target_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_target_name() {
  target_name_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::target_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.target_name)
  return target_name_;
}
inline void CMsgDOTACombatLogEntry::set_target_name(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  target_name_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.target_name)
}

// optional uint32 target_source_name = 3;
inline bool CMsgDOTACombatLogEntry::has_target_source_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_target_source_name() {
  target_source_name_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::target_source_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.target_source_name)
  return target_source_name_;
}
inline void CMsgDOTACombatLogEntry::set_target_source_name(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  target_source_name_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.target_source_name)
}

// optional uint32 attacker_name = 4;
inline bool CMsgDOTACombatLogEntry::has_attacker_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_attacker_name() {
  attacker_name_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::attacker_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.attacker_name)
  return attacker_name_;
}
inline void CMsgDOTACombatLogEntry::set_attacker_name(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  attacker_name_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.attacker_name)
}

// optional uint32 damage_source_name = 5;
inline bool CMsgDOTACombatLogEntry::has_damage_source_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_damage_source_name() {
  damage_source_name_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::damage_source_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.damage_source_name)
  return damage_source_name_;
}
inline void CMsgDOTACombatLogEntry::set_damage_source_name(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  damage_source_name_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.damage_source_name)
}

// optional uint32 inflictor_name = 6;
inline bool CMsgDOTACombatLogEntry::has_inflictor_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_inflictor_name() {
  inflictor_name_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::inflictor_name() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.inflictor_name)
  return inflictor_name_;
}
inline void CMsgDOTACombatLogEntry::set_inflictor_name(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  inflictor_name_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.inflictor_name)
}

// optional bool is_attacker_illusion = 7;
inline bool CMsgDOTACombatLogEntry::has_is_attacker_illusion() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_is_attacker_illusion() {
  is_attacker_illusion_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool CMsgDOTACombatLogEntry::is_attacker_illusion() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.is_attacker_illusion)
  return is_attacker_illusion_;
}
inline void CMsgDOTACombatLogEntry::set_is_attacker_illusion(bool value) {
  _has_bits_[0] |= 0x00000020u;
  is_attacker_illusion_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.is_attacker_illusion)
}

// optional bool is_attacker_hero = 8;
inline bool CMsgDOTACombatLogEntry::has_is_attacker_hero() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_is_attacker_hero() {
  is_attacker_hero_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool CMsgDOTACombatLogEntry::is_attacker_hero() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.is_attacker_hero)
  return is_attacker_hero_;
}
inline void CMsgDOTACombatLogEntry::set_is_attacker_hero(bool value) {
  _has_bits_[0] |= 0x00000040u;
  is_attacker_hero_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.is_attacker_hero)
}

// optional bool is_target_illusion = 9;
inline bool CMsgDOTACombatLogEntry::has_is_target_illusion() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_is_target_illusion() {
  is_target_illusion_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool CMsgDOTACombatLogEntry::is_target_illusion() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.is_target_illusion)
  return is_target_illusion_;
}
inline void CMsgDOTACombatLogEntry::set_is_target_illusion(bool value) {
  _has_bits_[0] |= 0x00000080u;
  is_target_illusion_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.is_target_illusion)
}

// optional bool is_target_hero = 10;
inline bool CMsgDOTACombatLogEntry::has_is_target_hero() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_is_target_hero() {
  is_target_hero_ = false;
  _has_bits_[0] &= ~0x00000100u;
}
inline bool CMsgDOTACombatLogEntry::is_target_hero() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.is_target_hero)
  return is_target_hero_;
}
inline void CMsgDOTACombatLogEntry::set_is_target_hero(bool value) {
  _has_bits_[0] |= 0x00000100u;
  is_target_hero_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.is_target_hero)
}

// optional bool is_visible_radiant = 11;
inline bool CMsgDOTACombatLogEntry::has_is_visible_radiant() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_is_visible_radiant() {
  is_visible_radiant_ = false;
  _has_bits_[0] &= ~0x00001000u;
}
inline bool CMsgDOTACombatLogEntry::is_visible_radiant() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.is_visible_radiant)
  return is_visible_radiant_;
}
inline void CMsgDOTACombatLogEntry::set_is_visible_radiant(bool value) {
  _has_bits_[0] |= 0x00001000u;
  is_visible_radiant_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.is_visible_radiant)
}

// optional bool is_visible_dire = 12;
inline bool CMsgDOTACombatLogEntry::has_is_visible_dire() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_is_visible_dire() {
  is_visible_dire_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool CMsgDOTACombatLogEntry::is_visible_dire() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.is_visible_dire)
  return is_visible_dire_;
}
inline void CMsgDOTACombatLogEntry::set_is_visible_dire(bool value) {
  _has_bits_[0] |= 0x00002000u;
  is_visible_dire_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.is_visible_dire)
}

// optional uint32 value = 13;
inline bool CMsgDOTACombatLogEntry::has_value() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_value() {
  value_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::value() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.value)
  return value_;
}
inline void CMsgDOTACombatLogEntry::set_value(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  value_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.value)
}

// optional int32 health = 14;
inline bool CMsgDOTACombatLogEntry::has_health() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_health() {
  health_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::google::protobuf::int32 CMsgDOTACombatLogEntry::health() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.health)
  return health_;
}
inline void CMsgDOTACombatLogEntry::set_health(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  health_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.health)
}

// optional float timestamp = 15;
inline bool CMsgDOTACombatLogEntry::has_timestamp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_timestamp() {
  timestamp_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float CMsgDOTACombatLogEntry::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.timestamp)
  return timestamp_;
}
inline void CMsgDOTACombatLogEntry::set_timestamp(float value) {
  _has_bits_[0] |= 0x00000800u;
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.timestamp)
}

// optional float stun_duration = 16;
inline bool CMsgDOTACombatLogEntry::has_stun_duration() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_stun_duration() {
  stun_duration_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float CMsgDOTACombatLogEntry::stun_duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.stun_duration)
  return stun_duration_;
}
inline void CMsgDOTACombatLogEntry::set_stun_duration(float value) {
  _has_bits_[0] |= 0x00010000u;
  stun_duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.stun_duration)
}

// optional float slow_duration = 17;
inline bool CMsgDOTACombatLogEntry::has_slow_duration() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_slow_duration() {
  slow_duration_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float CMsgDOTACombatLogEntry::slow_duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.slow_duration)
  return slow_duration_;
}
inline void CMsgDOTACombatLogEntry::set_slow_duration(float value) {
  _has_bits_[0] |= 0x00020000u;
  slow_duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.slow_duration)
}

// optional bool is_ability_toggle_on = 18;
inline bool CMsgDOTACombatLogEntry::has_is_ability_toggle_on() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_is_ability_toggle_on() {
  is_ability_toggle_on_ = false;
  _has_bits_[0] &= ~0x00004000u;
}
inline bool CMsgDOTACombatLogEntry::is_ability_toggle_on() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.is_ability_toggle_on)
  return is_ability_toggle_on_;
}
inline void CMsgDOTACombatLogEntry::set_is_ability_toggle_on(bool value) {
  _has_bits_[0] |= 0x00004000u;
  is_ability_toggle_on_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.is_ability_toggle_on)
}

// optional bool is_ability_toggle_off = 19;
inline bool CMsgDOTACombatLogEntry::has_is_ability_toggle_off() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_is_ability_toggle_off() {
  is_ability_toggle_off_ = false;
  _has_bits_[0] &= ~0x00008000u;
}
inline bool CMsgDOTACombatLogEntry::is_ability_toggle_off() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.is_ability_toggle_off)
  return is_ability_toggle_off_;
}
inline void CMsgDOTACombatLogEntry::set_is_ability_toggle_off(bool value) {
  _has_bits_[0] |= 0x00008000u;
  is_ability_toggle_off_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.is_ability_toggle_off)
}

// optional uint32 ability_level = 20;
inline bool CMsgDOTACombatLogEntry::has_ability_level() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_ability_level() {
  ability_level_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::ability_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.ability_level)
  return ability_level_;
}
inline void CMsgDOTACombatLogEntry::set_ability_level(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  ability_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.ability_level)
}

// optional float location_x = 21;
inline bool CMsgDOTACombatLogEntry::has_location_x() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_location_x() {
  location_x_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float CMsgDOTACombatLogEntry::location_x() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.location_x)
  return location_x_;
}
inline void CMsgDOTACombatLogEntry::set_location_x(float value) {
  _has_bits_[0] |= 0x00080000u;
  location_x_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.location_x)
}

// optional float location_y = 22;
inline bool CMsgDOTACombatLogEntry::has_location_y() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_location_y() {
  location_y_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline float CMsgDOTACombatLogEntry::location_y() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.location_y)
  return location_y_;
}
inline void CMsgDOTACombatLogEntry::set_location_y(float value) {
  _has_bits_[0] |= 0x00100000u;
  location_y_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.location_y)
}

// optional uint32 gold_reason = 23;
inline bool CMsgDOTACombatLogEntry::has_gold_reason() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_gold_reason() {
  gold_reason_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::gold_reason() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.gold_reason)
  return gold_reason_;
}
inline void CMsgDOTACombatLogEntry::set_gold_reason(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  gold_reason_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.gold_reason)
}

// optional float timestamp_raw = 24;
inline bool CMsgDOTACombatLogEntry::has_timestamp_raw() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_timestamp_raw() {
  timestamp_raw_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline float CMsgDOTACombatLogEntry::timestamp_raw() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.timestamp_raw)
  return timestamp_raw_;
}
inline void CMsgDOTACombatLogEntry::set_timestamp_raw(float value) {
  _has_bits_[0] |= 0x00400000u;
  timestamp_raw_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.timestamp_raw)
}

// optional float modifier_duration = 25;
inline bool CMsgDOTACombatLogEntry::has_modifier_duration() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_modifier_duration() {
  modifier_duration_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float CMsgDOTACombatLogEntry::modifier_duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.modifier_duration)
  return modifier_duration_;
}
inline void CMsgDOTACombatLogEntry::set_modifier_duration(float value) {
  _has_bits_[0] |= 0x00800000u;
  modifier_duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.modifier_duration)
}

// optional uint32 xp_reason = 26;
inline bool CMsgDOTACombatLogEntry::has_xp_reason() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_xp_reason() {
  xp_reason_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::xp_reason() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.xp_reason)
  return xp_reason_;
}
inline void CMsgDOTACombatLogEntry::set_xp_reason(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  xp_reason_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.xp_reason)
}

// optional uint32 last_hits = 27;
inline bool CMsgDOTACombatLogEntry::has_last_hits() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_last_hits() {
  last_hits_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::last_hits() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.last_hits)
  return last_hits_;
}
inline void CMsgDOTACombatLogEntry::set_last_hits(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  last_hits_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.last_hits)
}

// optional uint32 attacker_team = 28;
inline bool CMsgDOTACombatLogEntry::has_attacker_team() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_attacker_team() {
  attacker_team_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::attacker_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.attacker_team)
  return attacker_team_;
}
inline void CMsgDOTACombatLogEntry::set_attacker_team(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  attacker_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.attacker_team)
}

// optional uint32 target_team = 29;
inline bool CMsgDOTACombatLogEntry::has_target_team() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_target_team() {
  target_team_ = 0u;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::target_team() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.target_team)
  return target_team_;
}
inline void CMsgDOTACombatLogEntry::set_target_team(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x08000000u;
  target_team_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.target_team)
}

// optional uint32 obs_wards_placed = 30;
inline bool CMsgDOTACombatLogEntry::has_obs_wards_placed() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_obs_wards_placed() {
  obs_wards_placed_ = 0u;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::obs_wards_placed() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.obs_wards_placed)
  return obs_wards_placed_;
}
inline void CMsgDOTACombatLogEntry::set_obs_wards_placed(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x10000000u;
  obs_wards_placed_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.obs_wards_placed)
}

// optional uint32 assist_player0 = 31;
inline bool CMsgDOTACombatLogEntry::has_assist_player0() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_assist_player0() {
  assist_player0_ = 0u;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::assist_player0() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.assist_player0)
  return assist_player0_;
}
inline void CMsgDOTACombatLogEntry::set_assist_player0(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x20000000u;
  assist_player0_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.assist_player0)
}

// optional uint32 assist_player1 = 32;
inline bool CMsgDOTACombatLogEntry::has_assist_player1() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_assist_player1() {
  assist_player1_ = 0u;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::assist_player1() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.assist_player1)
  return assist_player1_;
}
inline void CMsgDOTACombatLogEntry::set_assist_player1(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x40000000u;
  assist_player1_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.assist_player1)
}

// optional uint32 assist_player2 = 33;
inline bool CMsgDOTACombatLogEntry::has_assist_player2() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_assist_player2() {
  assist_player2_ = 0u;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::assist_player2() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.assist_player2)
  return assist_player2_;
}
inline void CMsgDOTACombatLogEntry::set_assist_player2(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x80000000u;
  assist_player2_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.assist_player2)
}

// optional uint32 assist_player3 = 34;
inline bool CMsgDOTACombatLogEntry::has_assist_player3() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_assist_player3() {
  assist_player3_ = 0u;
  _has_bits_[1] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::assist_player3() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.assist_player3)
  return assist_player3_;
}
inline void CMsgDOTACombatLogEntry::set_assist_player3(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000001u;
  assist_player3_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.assist_player3)
}

// optional uint32 stack_count = 35;
inline bool CMsgDOTACombatLogEntry::has_stack_count() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_stack_count() {
  stack_count_ = 0u;
  _has_bits_[1] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::stack_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.stack_count)
  return stack_count_;
}
inline void CMsgDOTACombatLogEntry::set_stack_count(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000002u;
  stack_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.stack_count)
}

// optional bool hidden_modifier = 36;
inline bool CMsgDOTACombatLogEntry::has_hidden_modifier() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_hidden_modifier() {
  hidden_modifier_ = false;
  _has_bits_[1] &= ~0x00000010u;
}
inline bool CMsgDOTACombatLogEntry::hidden_modifier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.hidden_modifier)
  return hidden_modifier_;
}
inline void CMsgDOTACombatLogEntry::set_hidden_modifier(bool value) {
  _has_bits_[1] |= 0x00000010u;
  hidden_modifier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.hidden_modifier)
}

// optional bool is_target_building = 37;
inline bool CMsgDOTACombatLogEntry::has_is_target_building() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_is_target_building() {
  is_target_building_ = false;
  _has_bits_[1] &= ~0x00000020u;
}
inline bool CMsgDOTACombatLogEntry::is_target_building() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.is_target_building)
  return is_target_building_;
}
inline void CMsgDOTACombatLogEntry::set_is_target_building(bool value) {
  _has_bits_[1] |= 0x00000020u;
  is_target_building_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.is_target_building)
}

// optional uint32 neutral_camp_type = 38;
inline bool CMsgDOTACombatLogEntry::has_neutral_camp_type() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_neutral_camp_type() {
  neutral_camp_type_ = 0u;
  _has_bits_[1] &= ~0x00000004u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::neutral_camp_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.neutral_camp_type)
  return neutral_camp_type_;
}
inline void CMsgDOTACombatLogEntry::set_neutral_camp_type(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000004u;
  neutral_camp_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.neutral_camp_type)
}

// optional uint32 rune_type = 39;
inline bool CMsgDOTACombatLogEntry::has_rune_type() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_rune_type() {
  rune_type_ = 0u;
  _has_bits_[1] &= ~0x00000008u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::rune_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.rune_type)
  return rune_type_;
}
inline void CMsgDOTACombatLogEntry::set_rune_type(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000008u;
  rune_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.rune_type)
}

// repeated uint32 assist_players = 40;
inline int CMsgDOTACombatLogEntry::assist_players_size() const {
  return assist_players_.size();
}
inline void CMsgDOTACombatLogEntry::clear_assist_players() {
  assist_players_.Clear();
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::assist_players(int index) const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.assist_players)
  return assist_players_.Get(index);
}
inline void CMsgDOTACombatLogEntry::set_assist_players(int index, ::google::protobuf::uint32 value) {
  assist_players_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.assist_players)
}
inline void CMsgDOTACombatLogEntry::add_assist_players(::google::protobuf::uint32 value) {
  assist_players_.Add(value);
  // @@protoc_insertion_point(field_add:proto.dota.CMsgDOTACombatLogEntry.assist_players)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CMsgDOTACombatLogEntry::assist_players() const {
  // @@protoc_insertion_point(field_list:proto.dota.CMsgDOTACombatLogEntry.assist_players)
  return assist_players_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CMsgDOTACombatLogEntry::mutable_assist_players() {
  // @@protoc_insertion_point(field_mutable_list:proto.dota.CMsgDOTACombatLogEntry.assist_players)
  return &assist_players_;
}

// optional bool is_heal_save = 41;
inline bool CMsgDOTACombatLogEntry::has_is_heal_save() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_is_heal_save() {
  is_heal_save_ = false;
  _has_bits_[1] &= ~0x00000040u;
}
inline bool CMsgDOTACombatLogEntry::is_heal_save() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.is_heal_save)
  return is_heal_save_;
}
inline void CMsgDOTACombatLogEntry::set_is_heal_save(bool value) {
  _has_bits_[1] |= 0x00000040u;
  is_heal_save_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.is_heal_save)
}

// optional bool is_ultimate_ability = 42;
inline bool CMsgDOTACombatLogEntry::has_is_ultimate_ability() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_is_ultimate_ability() {
  is_ultimate_ability_ = false;
  _has_bits_[1] &= ~0x00000080u;
}
inline bool CMsgDOTACombatLogEntry::is_ultimate_ability() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.is_ultimate_ability)
  return is_ultimate_ability_;
}
inline void CMsgDOTACombatLogEntry::set_is_ultimate_ability(bool value) {
  _has_bits_[1] |= 0x00000080u;
  is_ultimate_ability_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.is_ultimate_ability)
}

// optional uint32 attacker_hero_level = 43;
inline bool CMsgDOTACombatLogEntry::has_attacker_hero_level() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_attacker_hero_level() {
  attacker_hero_level_ = 0u;
  _has_bits_[1] &= ~0x00000100u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::attacker_hero_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.attacker_hero_level)
  return attacker_hero_level_;
}
inline void CMsgDOTACombatLogEntry::set_attacker_hero_level(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000100u;
  attacker_hero_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.attacker_hero_level)
}

// optional uint32 target_hero_level = 44;
inline bool CMsgDOTACombatLogEntry::has_target_hero_level() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_target_hero_level() {
  target_hero_level_ = 0u;
  _has_bits_[1] &= ~0x00000200u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::target_hero_level() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.target_hero_level)
  return target_hero_level_;
}
inline void CMsgDOTACombatLogEntry::set_target_hero_level(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000200u;
  target_hero_level_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.target_hero_level)
}

// optional uint32 xpm = 45;
inline bool CMsgDOTACombatLogEntry::has_xpm() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_xpm() {
  xpm_ = 0u;
  _has_bits_[1] &= ~0x00000400u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::xpm() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.xpm)
  return xpm_;
}
inline void CMsgDOTACombatLogEntry::set_xpm(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000400u;
  xpm_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.xpm)
}

// optional uint32 gpm = 46;
inline bool CMsgDOTACombatLogEntry::has_gpm() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_gpm() {
  gpm_ = 0u;
  _has_bits_[1] &= ~0x00000800u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::gpm() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.gpm)
  return gpm_;
}
inline void CMsgDOTACombatLogEntry::set_gpm(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00000800u;
  gpm_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.gpm)
}

// optional uint32 event_location = 47;
inline bool CMsgDOTACombatLogEntry::has_event_location() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_event_location() {
  event_location_ = 0u;
  _has_bits_[1] &= ~0x00001000u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::event_location() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.event_location)
  return event_location_;
}
inline void CMsgDOTACombatLogEntry::set_event_location(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00001000u;
  event_location_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.event_location)
}

// optional bool target_is_self = 48;
inline bool CMsgDOTACombatLogEntry::has_target_is_self() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_target_is_self() {
  target_is_self_ = false;
  _has_bits_[1] &= ~0x00010000u;
}
inline bool CMsgDOTACombatLogEntry::target_is_self() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.target_is_self)
  return target_is_self_;
}
inline void CMsgDOTACombatLogEntry::set_target_is_self(bool value) {
  _has_bits_[1] |= 0x00010000u;
  target_is_self_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.target_is_self)
}

// optional uint32 damage_type = 49;
inline bool CMsgDOTACombatLogEntry::has_damage_type() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_damage_type() {
  damage_type_ = 0u;
  _has_bits_[1] &= ~0x00002000u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::damage_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.damage_type)
  return damage_type_;
}
inline void CMsgDOTACombatLogEntry::set_damage_type(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00002000u;
  damage_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.damage_type)
}

// optional bool invisibility_modifier = 50;
inline bool CMsgDOTACombatLogEntry::has_invisibility_modifier() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_invisibility_modifier() {
  invisibility_modifier_ = false;
  _has_bits_[1] &= ~0x00020000u;
}
inline bool CMsgDOTACombatLogEntry::invisibility_modifier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.invisibility_modifier)
  return invisibility_modifier_;
}
inline void CMsgDOTACombatLogEntry::set_invisibility_modifier(bool value) {
  _has_bits_[1] |= 0x00020000u;
  invisibility_modifier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.invisibility_modifier)
}

// optional uint32 damage_category = 51;
inline bool CMsgDOTACombatLogEntry::has_damage_category() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_damage_category() {
  damage_category_ = 0u;
  _has_bits_[1] &= ~0x00004000u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::damage_category() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.damage_category)
  return damage_category_;
}
inline void CMsgDOTACombatLogEntry::set_damage_category(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00004000u;
  damage_category_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.damage_category)
}

// optional uint32 networth = 52;
inline bool CMsgDOTACombatLogEntry::has_networth() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_networth() {
  networth_ = 0u;
  _has_bits_[1] &= ~0x00008000u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::networth() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.networth)
  return networth_;
}
inline void CMsgDOTACombatLogEntry::set_networth(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00008000u;
  networth_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.networth)
}

// optional uint32 building_type = 53;
inline bool CMsgDOTACombatLogEntry::has_building_type() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_building_type() {
  building_type_ = 0u;
  _has_bits_[1] &= ~0x00100000u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::building_type() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.building_type)
  return building_type_;
}
inline void CMsgDOTACombatLogEntry::set_building_type(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x00100000u;
  building_type_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.building_type)
}

// optional float modifier_elapsed_duration = 54;
inline bool CMsgDOTACombatLogEntry::has_modifier_elapsed_duration() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_modifier_elapsed_duration() {
  modifier_elapsed_duration_ = 0;
  _has_bits_[1] &= ~0x00200000u;
}
inline float CMsgDOTACombatLogEntry::modifier_elapsed_duration() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.modifier_elapsed_duration)
  return modifier_elapsed_duration_;
}
inline void CMsgDOTACombatLogEntry::set_modifier_elapsed_duration(float value) {
  _has_bits_[1] |= 0x00200000u;
  modifier_elapsed_duration_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.modifier_elapsed_duration)
}

// optional bool silence_modifier = 55;
inline bool CMsgDOTACombatLogEntry::has_silence_modifier() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_silence_modifier() {
  silence_modifier_ = false;
  _has_bits_[1] &= ~0x00040000u;
}
inline bool CMsgDOTACombatLogEntry::silence_modifier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.silence_modifier)
  return silence_modifier_;
}
inline void CMsgDOTACombatLogEntry::set_silence_modifier(bool value) {
  _has_bits_[1] |= 0x00040000u;
  silence_modifier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.silence_modifier)
}

// optional bool heal_from_lifesteal = 56;
inline bool CMsgDOTACombatLogEntry::has_heal_from_lifesteal() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_heal_from_lifesteal() {
  heal_from_lifesteal_ = false;
  _has_bits_[1] &= ~0x00080000u;
}
inline bool CMsgDOTACombatLogEntry::heal_from_lifesteal() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.heal_from_lifesteal)
  return heal_from_lifesteal_;
}
inline void CMsgDOTACombatLogEntry::set_heal_from_lifesteal(bool value) {
  _has_bits_[1] |= 0x00080000u;
  heal_from_lifesteal_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.heal_from_lifesteal)
}

// optional bool modifier_purged = 57;
inline bool CMsgDOTACombatLogEntry::has_modifier_purged() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_modifier_purged() {
  modifier_purged_ = false;
  _has_bits_[1] &= ~0x00400000u;
}
inline bool CMsgDOTACombatLogEntry::modifier_purged() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.modifier_purged)
  return modifier_purged_;
}
inline void CMsgDOTACombatLogEntry::set_modifier_purged(bool value) {
  _has_bits_[1] |= 0x00400000u;
  modifier_purged_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.modifier_purged)
}

// optional bool spell_evaded = 58;
inline bool CMsgDOTACombatLogEntry::has_spell_evaded() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_spell_evaded() {
  spell_evaded_ = false;
  _has_bits_[1] &= ~0x00800000u;
}
inline bool CMsgDOTACombatLogEntry::spell_evaded() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.spell_evaded)
  return spell_evaded_;
}
inline void CMsgDOTACombatLogEntry::set_spell_evaded(bool value) {
  _has_bits_[1] |= 0x00800000u;
  spell_evaded_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.spell_evaded)
}

// optional bool motion_controller_modifier = 59;
inline bool CMsgDOTACombatLogEntry::has_motion_controller_modifier() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_motion_controller_modifier() {
  motion_controller_modifier_ = false;
  _has_bits_[1] &= ~0x01000000u;
}
inline bool CMsgDOTACombatLogEntry::motion_controller_modifier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.motion_controller_modifier)
  return motion_controller_modifier_;
}
inline void CMsgDOTACombatLogEntry::set_motion_controller_modifier(bool value) {
  _has_bits_[1] |= 0x01000000u;
  motion_controller_modifier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.motion_controller_modifier)
}

// optional bool long_range_kill = 60;
inline bool CMsgDOTACombatLogEntry::has_long_range_kill() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_long_range_kill() {
  long_range_kill_ = false;
  _has_bits_[1] &= ~0x02000000u;
}
inline bool CMsgDOTACombatLogEntry::long_range_kill() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.long_range_kill)
  return long_range_kill_;
}
inline void CMsgDOTACombatLogEntry::set_long_range_kill(bool value) {
  _has_bits_[1] |= 0x02000000u;
  long_range_kill_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.long_range_kill)
}

// optional uint32 modifier_purge_ability = 61;
inline bool CMsgDOTACombatLogEntry::has_modifier_purge_ability() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_modifier_purge_ability() {
  modifier_purge_ability_ = 0u;
  _has_bits_[1] &= ~0x04000000u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::modifier_purge_ability() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.modifier_purge_ability)
  return modifier_purge_ability_;
}
inline void CMsgDOTACombatLogEntry::set_modifier_purge_ability(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x04000000u;
  modifier_purge_ability_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.modifier_purge_ability)
}

// optional uint32 modifier_purge_npc = 62;
inline bool CMsgDOTACombatLogEntry::has_modifier_purge_npc() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_modifier_purge_npc() {
  modifier_purge_npc_ = 0u;
  _has_bits_[1] &= ~0x08000000u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::modifier_purge_npc() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.modifier_purge_npc)
  return modifier_purge_npc_;
}
inline void CMsgDOTACombatLogEntry::set_modifier_purge_npc(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x08000000u;
  modifier_purge_npc_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.modifier_purge_npc)
}

// optional bool root_modifier = 63;
inline bool CMsgDOTACombatLogEntry::has_root_modifier() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_root_modifier() {
  root_modifier_ = false;
  _has_bits_[1] &= ~0x20000000u;
}
inline bool CMsgDOTACombatLogEntry::root_modifier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.root_modifier)
  return root_modifier_;
}
inline void CMsgDOTACombatLogEntry::set_root_modifier(bool value) {
  _has_bits_[1] |= 0x20000000u;
  root_modifier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.root_modifier)
}

// optional uint32 total_unit_death_count = 64;
inline bool CMsgDOTACombatLogEntry::has_total_unit_death_count() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_total_unit_death_count() {
  total_unit_death_count_ = 0u;
  _has_bits_[1] &= ~0x10000000u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::total_unit_death_count() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.total_unit_death_count)
  return total_unit_death_count_;
}
inline void CMsgDOTACombatLogEntry::set_total_unit_death_count(::google::protobuf::uint32 value) {
  _has_bits_[1] |= 0x10000000u;
  total_unit_death_count_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.total_unit_death_count)
}

// optional bool aura_modifier = 65;
inline bool CMsgDOTACombatLogEntry::has_aura_modifier() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_aura_modifier() {
  aura_modifier_ = false;
  _has_bits_[1] &= ~0x40000000u;
}
inline bool CMsgDOTACombatLogEntry::aura_modifier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.aura_modifier)
  return aura_modifier_;
}
inline void CMsgDOTACombatLogEntry::set_aura_modifier(bool value) {
  _has_bits_[1] |= 0x40000000u;
  aura_modifier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.aura_modifier)
}

// optional bool armor_debuff_modifier = 66;
inline bool CMsgDOTACombatLogEntry::has_armor_debuff_modifier() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_armor_debuff_modifier() {
  armor_debuff_modifier_ = false;
  _has_bits_[1] &= ~0x80000000u;
}
inline bool CMsgDOTACombatLogEntry::armor_debuff_modifier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.armor_debuff_modifier)
  return armor_debuff_modifier_;
}
inline void CMsgDOTACombatLogEntry::set_armor_debuff_modifier(bool value) {
  _has_bits_[1] |= 0x80000000u;
  armor_debuff_modifier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.armor_debuff_modifier)
}

// optional bool no_physical_damage_modifier = 67;
inline bool CMsgDOTACombatLogEntry::has_no_physical_damage_modifier() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_no_physical_damage_modifier() {
  no_physical_damage_modifier_ = false;
  _has_bits_[2] &= ~0x00000001u;
}
inline bool CMsgDOTACombatLogEntry::no_physical_damage_modifier() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.no_physical_damage_modifier)
  return no_physical_damage_modifier_;
}
inline void CMsgDOTACombatLogEntry::set_no_physical_damage_modifier(bool value) {
  _has_bits_[2] |= 0x00000001u;
  no_physical_damage_modifier_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.no_physical_damage_modifier)
}

// optional uint32 modifier_ability = 68;
inline bool CMsgDOTACombatLogEntry::has_modifier_ability() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_modifier_ability() {
  modifier_ability_ = 0u;
  _has_bits_[2] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::modifier_ability() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.modifier_ability)
  return modifier_ability_;
}
inline void CMsgDOTACombatLogEntry::set_modifier_ability(::google::protobuf::uint32 value) {
  _has_bits_[2] |= 0x00000002u;
  modifier_ability_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.modifier_ability)
}

// optional bool modifier_hidden = 69;
inline bool CMsgDOTACombatLogEntry::has_modifier_hidden() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_modifier_hidden() {
  modifier_hidden_ = false;
  _has_bits_[2] &= ~0x00000004u;
}
inline bool CMsgDOTACombatLogEntry::modifier_hidden() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.modifier_hidden)
  return modifier_hidden_;
}
inline void CMsgDOTACombatLogEntry::set_modifier_hidden(bool value) {
  _has_bits_[2] |= 0x00000004u;
  modifier_hidden_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.modifier_hidden)
}

// optional bool inflictor_is_stolen_ability = 70;
inline bool CMsgDOTACombatLogEntry::has_inflictor_is_stolen_ability() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_inflictor_is_stolen_ability() {
  inflictor_is_stolen_ability_ = false;
  _has_bits_[2] &= ~0x00000008u;
}
inline bool CMsgDOTACombatLogEntry::inflictor_is_stolen_ability() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.inflictor_is_stolen_ability)
  return inflictor_is_stolen_ability_;
}
inline void CMsgDOTACombatLogEntry::set_inflictor_is_stolen_ability(bool value) {
  _has_bits_[2] |= 0x00000008u;
  inflictor_is_stolen_ability_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.inflictor_is_stolen_ability)
}

// optional uint32 kill_eater_event = 71;
inline bool CMsgDOTACombatLogEntry::has_kill_eater_event() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_kill_eater_event() {
  kill_eater_event_ = 0u;
  _has_bits_[2] &= ~0x00000010u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::kill_eater_event() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.kill_eater_event)
  return kill_eater_event_;
}
inline void CMsgDOTACombatLogEntry::set_kill_eater_event(::google::protobuf::uint32 value) {
  _has_bits_[2] |= 0x00000010u;
  kill_eater_event_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.kill_eater_event)
}

// optional uint32 unit_status_label = 72;
inline bool CMsgDOTACombatLogEntry::has_unit_status_label() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void CMsgDOTACombatLogEntry::clear_unit_status_label() {
  unit_status_label_ = 0u;
  _has_bits_[2] &= ~0x00000020u;
}
inline ::google::protobuf::uint32 CMsgDOTACombatLogEntry::unit_status_label() const {
  // @@protoc_insertion_point(field_get:proto.dota.CMsgDOTACombatLogEntry.unit_status_label)
  return unit_status_label_;
}
inline void CMsgDOTACombatLogEntry::set_unit_status_label(::google::protobuf::uint32 value) {
  _has_bits_[2] |= 0x00000020u;
  unit_status_label_ = value;
  // @@protoc_insertion_point(field_set:proto.dota.CMsgDOTACombatLogEntry.unit_status_label)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dota
}  // namespace proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::dota::DOTA_GameMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::DOTA_GameMode>() {
  return ::proto::dota::DOTA_GameMode_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::DOTA_GameState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::DOTA_GameState>() {
  return ::proto::dota::DOTA_GameState_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::DOTA_GC_TEAM> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::DOTA_GC_TEAM>() {
  return ::proto::dota::DOTA_GC_TEAM_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::EEvent> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::EEvent>() {
  return ::proto::dota::EEvent_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::DOTALeaverStatus_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::DOTALeaverStatus_t>() {
  return ::proto::dota::DOTALeaverStatus_t_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::DOTAConnectionState_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::DOTAConnectionState_t>() {
  return ::proto::dota::DOTAConnectionState_t_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::Fantasy_Roles> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::Fantasy_Roles>() {
  return ::proto::dota::Fantasy_Roles_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::Fantasy_Team_Slots> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::Fantasy_Team_Slots>() {
  return ::proto::dota::Fantasy_Team_Slots_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::Fantasy_Selection_Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::Fantasy_Selection_Mode>() {
  return ::proto::dota::Fantasy_Selection_Mode_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::DOTAChatChannelType_t> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::DOTAChatChannelType_t>() {
  return ::proto::dota::DOTAChatChannelType_t_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::EProfileCardSlotType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::EProfileCardSlotType>() {
  return ::proto::dota::EProfileCardSlotType_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::EMatchGroupServerStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::EMatchGroupServerStatus>() {
  return ::proto::dota::EMatchGroupServerStatus_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::DOTA_CM_PICK> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::DOTA_CM_PICK>() {
  return ::proto::dota::DOTA_CM_PICK_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::DOTALowPriorityBanType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::DOTALowPriorityBanType>() {
  return ::proto::dota::DOTALowPriorityBanType_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::DOTALobbyReadyState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::DOTALobbyReadyState>() {
  return ::proto::dota::DOTALobbyReadyState_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::DOTAGameVersion> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::DOTAGameVersion>() {
  return ::proto::dota::DOTAGameVersion_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::DOTAJoinLobbyResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::DOTAJoinLobbyResult>() {
  return ::proto::dota::DOTAJoinLobbyResult_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::DOTASelectionPriorityRules> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::DOTASelectionPriorityRules>() {
  return ::proto::dota::DOTASelectionPriorityRules_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::DOTASelectionPriorityChoice> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::DOTASelectionPriorityChoice>() {
  return ::proto::dota::DOTASelectionPriorityChoice_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::DOTAMatchVote> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::DOTAMatchVote>() {
  return ::proto::dota::DOTAMatchVote_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::DOTA_LobbyMemberXPBonus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::DOTA_LobbyMemberXPBonus>() {
  return ::proto::dota::DOTA_LobbyMemberXPBonus_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::DOTALobbyVisibility> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::DOTALobbyVisibility>() {
  return ::proto::dota::DOTALobbyVisibility_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::EDOTAPlayerMMRType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::EDOTAPlayerMMRType>() {
  return ::proto::dota::EDOTAPlayerMMRType_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::MatchType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::MatchType>() {
  return ::proto::dota::MatchType_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::DOTABotDifficulty> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::DOTABotDifficulty>() {
  return ::proto::dota::DOTABotDifficulty_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::DOTA_BOT_MODE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::DOTA_BOT_MODE>() {
  return ::proto::dota::DOTA_BOT_MODE_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::MatchLanguages> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::MatchLanguages>() {
  return ::proto::dota::MatchLanguages_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::ETourneyQueueDeadlineState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::ETourneyQueueDeadlineState>() {
  return ::proto::dota::ETourneyQueueDeadlineState_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::EMatchOutcome> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::EMatchOutcome>() {
  return ::proto::dota::EMatchOutcome_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::ELaneType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::ELaneType>() {
  return ::proto::dota::ELaneType_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::EBadgeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::EBadgeType>() {
  return ::proto::dota::EBadgeType_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::ELeagueStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::ELeagueStatus>() {
  return ::proto::dota::ELeagueStatus_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::ELeagueRegion> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::ELeagueRegion>() {
  return ::proto::dota::ELeagueRegion_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::ELeagueTier> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::ELeagueTier>() {
  return ::proto::dota::ELeagueTier_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::ELeagueTierCategory> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::ELeagueTierCategory>() {
  return ::proto::dota::ELeagueTierCategory_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::ELeagueFlags> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::ELeagueFlags>() {
  return ::proto::dota::ELeagueFlags_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::ELeagueBroadcastProvider> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::ELeagueBroadcastProvider>() {
  return ::proto::dota::ELeagueBroadcastProvider_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::ELeaguePhase> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::ELeaguePhase>() {
  return ::proto::dota::ELeaguePhase_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::ELeagueFantasyPhase> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::ELeagueFantasyPhase>() {
  return ::proto::dota::ELeagueFantasyPhase_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::ELeagueAuditAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::ELeagueAuditAction>() {
  return ::proto::dota::ELeagueAuditAction_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::DOTA_COMBATLOG_TYPES> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::DOTA_COMBATLOG_TYPES>() {
  return ::proto::dota::DOTA_COMBATLOG_TYPES_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::EDPCFavoriteType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::EDPCFavoriteType>() {
  return ::proto::dota::EDPCFavoriteType_descriptor();
}
template <> struct is_proto_enum< ::proto::dota::EDPCPushNotification> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto::dota::EDPCPushNotification>() {
  return ::proto::dota::EDPCPushNotification_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_dota_5fshared_5fenums_2eproto
