// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_watch.proto

#include "dota_gcmessages_client_watch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fwatch_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTASeries_TeamInfo_dota_5fgcmessages_5fclient_5fwatch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fwatch_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CSourceTVGameSmall_Player_dota_5fgcmessages_5fclient_5fwatch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fwatch_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTASeries_LiveGame_dota_5fgcmessages_5fclient_5fwatch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fwatch_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CSourceTVGameSmall_dota_5fgcmessages_5fclient_5fwatch_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CMsgDOTAMatchMinimal_dota_5fgcmessages_5fcommon_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_CMsgDOTAMatch_dota_5fgcmessages_5fcommon_2eproto;
namespace proto {
namespace dota {
class CSourceTVGameSmall_PlayerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSourceTVGameSmall_Player> _instance;
} _CSourceTVGameSmall_Player_default_instance_;
class CSourceTVGameSmallDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CSourceTVGameSmall> _instance;
} _CSourceTVGameSmall_default_instance_;
class CMsgClientToGCFindTopSourceTVGamesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCFindTopSourceTVGames> _instance;
} _CMsgClientToGCFindTopSourceTVGames_default_instance_;
class CMsgGCToClientFindTopSourceTVGamesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientFindTopSourceTVGamesResponse> _instance;
} _CMsgGCToClientFindTopSourceTVGamesResponse_default_instance_;
class CMsgGCToClientTopWeekendTourneyGamesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientTopWeekendTourneyGames> _instance;
} _CMsgGCToClientTopWeekendTourneyGames_default_instance_;
class CMsgClientToGCTopMatchesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCTopMatchesRequest> _instance;
} _CMsgClientToGCTopMatchesRequest_default_instance_;
class CMsgClientToGCTopLeagueMatchesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCTopLeagueMatchesRequest> _instance;
} _CMsgClientToGCTopLeagueMatchesRequest_default_instance_;
class CMsgClientToGCTopFriendMatchesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCTopFriendMatchesRequest> _instance;
} _CMsgClientToGCTopFriendMatchesRequest_default_instance_;
class CMsgClientToGCMatchesMinimalRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCMatchesMinimalRequest> _instance;
} _CMsgClientToGCMatchesMinimalRequest_default_instance_;
class CMsgClientToGCMatchesMinimalResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCMatchesMinimalResponse> _instance;
} _CMsgClientToGCMatchesMinimalResponse_default_instance_;
class CMsgGCToClientTopLeagueMatchesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientTopLeagueMatchesResponse> _instance;
} _CMsgGCToClientTopLeagueMatchesResponse_default_instance_;
class CMsgGCToClientTopFriendMatchesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientTopFriendMatchesResponse> _instance;
} _CMsgGCToClientTopFriendMatchesResponse_default_instance_;
class CMsgClientToGCFindTopMatchesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCFindTopMatches> _instance;
} _CMsgClientToGCFindTopMatches_default_instance_;
class CMsgGCToClientFindTopLeagueMatchesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientFindTopLeagueMatchesResponse> _instance;
} _CMsgGCToClientFindTopLeagueMatchesResponse_default_instance_;
class CMsgSpectateFriendGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSpectateFriendGame> _instance;
} _CMsgSpectateFriendGame_default_instance_;
class CMsgSpectateFriendGameResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgSpectateFriendGameResponse> _instance;
} _CMsgSpectateFriendGameResponse_default_instance_;
class CDOTAReplayDownloadInfo_HighlightDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAReplayDownloadInfo_Highlight> _instance;
} _CDOTAReplayDownloadInfo_Highlight_default_instance_;
class CDOTAReplayDownloadInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTAReplayDownloadInfo> _instance;
} _CDOTAReplayDownloadInfo_default_instance_;
class CMsgWatchGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgWatchGame> _instance;
} _CMsgWatchGame_default_instance_;
class CMsgCancelWatchGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgCancelWatchGame> _instance;
} _CMsgCancelWatchGame_default_instance_;
class CMsgWatchGameResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgWatchGameResponse> _instance;
} _CMsgWatchGameResponse_default_instance_;
class CMsgPartyLeaderWatchGamePromptDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgPartyLeaderWatchGamePrompt> _instance;
} _CMsgPartyLeaderWatchGamePrompt_default_instance_;
class CDOTABroadcasterInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CDOTABroadcasterInfo> _instance;
} _CDOTABroadcasterInfo_default_instance_;
class CMsgDOTASeries_TeamInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASeries_TeamInfo> _instance;
} _CMsgDOTASeries_TeamInfo_default_instance_;
class CMsgDOTASeries_LiveGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASeries_LiveGame> _instance;
} _CMsgDOTASeries_LiveGame_default_instance_;
class CMsgDOTASeriesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTASeries> _instance;
} _CMsgDOTASeries_default_instance_;
}  // namespace dota
}  // namespace proto
static void InitDefaultsCSourceTVGameSmall_Player_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSourceTVGameSmall_Player_default_instance_;
    new (ptr) ::proto::dota::CSourceTVGameSmall_Player();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSourceTVGameSmall_Player::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CSourceTVGameSmall_Player_dota_5fgcmessages_5fclient_5fwatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCSourceTVGameSmall_Player_dota_5fgcmessages_5fclient_5fwatch_2eproto}, {}};

static void InitDefaultsCSourceTVGameSmall_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CSourceTVGameSmall_default_instance_;
    new (ptr) ::proto::dota::CSourceTVGameSmall();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CSourceTVGameSmall::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CSourceTVGameSmall_dota_5fgcmessages_5fclient_5fwatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCSourceTVGameSmall_dota_5fgcmessages_5fclient_5fwatch_2eproto}, {
      &scc_info_CSourceTVGameSmall_Player_dota_5fgcmessages_5fclient_5fwatch_2eproto.base,}};

static void InitDefaultsCMsgClientToGCFindTopSourceTVGames_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgClientToGCFindTopSourceTVGames_default_instance_;
    new (ptr) ::proto::dota::CMsgClientToGCFindTopSourceTVGames();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgClientToGCFindTopSourceTVGames::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientToGCFindTopSourceTVGames_dota_5fgcmessages_5fclient_5fwatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientToGCFindTopSourceTVGames_dota_5fgcmessages_5fclient_5fwatch_2eproto}, {}};

static void InitDefaultsCMsgGCToClientFindTopSourceTVGamesResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToClientFindTopSourceTVGamesResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToClientFindTopSourceTVGamesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToClientFindTopSourceTVGamesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCToClientFindTopSourceTVGamesResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCToClientFindTopSourceTVGamesResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto}, {
      &scc_info_CSourceTVGameSmall_dota_5fgcmessages_5fclient_5fwatch_2eproto.base,}};

static void InitDefaultsCMsgGCToClientTopWeekendTourneyGames_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToClientTopWeekendTourneyGames_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToClientTopWeekendTourneyGames();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToClientTopWeekendTourneyGames::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCToClientTopWeekendTourneyGames_dota_5fgcmessages_5fclient_5fwatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCToClientTopWeekendTourneyGames_dota_5fgcmessages_5fclient_5fwatch_2eproto}, {
      &scc_info_CSourceTVGameSmall_dota_5fgcmessages_5fclient_5fwatch_2eproto.base,}};

static void InitDefaultsCMsgClientToGCTopMatchesRequest_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgClientToGCTopMatchesRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgClientToGCTopMatchesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgClientToGCTopMatchesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientToGCTopMatchesRequest_dota_5fgcmessages_5fclient_5fwatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientToGCTopMatchesRequest_dota_5fgcmessages_5fclient_5fwatch_2eproto}, {}};

static void InitDefaultsCMsgClientToGCTopLeagueMatchesRequest_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgClientToGCTopLeagueMatchesRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgClientToGCTopLeagueMatchesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgClientToGCTopLeagueMatchesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientToGCTopLeagueMatchesRequest_dota_5fgcmessages_5fclient_5fwatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientToGCTopLeagueMatchesRequest_dota_5fgcmessages_5fclient_5fwatch_2eproto}, {}};

static void InitDefaultsCMsgClientToGCTopFriendMatchesRequest_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgClientToGCTopFriendMatchesRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgClientToGCTopFriendMatchesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgClientToGCTopFriendMatchesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientToGCTopFriendMatchesRequest_dota_5fgcmessages_5fclient_5fwatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientToGCTopFriendMatchesRequest_dota_5fgcmessages_5fclient_5fwatch_2eproto}, {}};

static void InitDefaultsCMsgClientToGCMatchesMinimalRequest_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgClientToGCMatchesMinimalRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgClientToGCMatchesMinimalRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgClientToGCMatchesMinimalRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientToGCMatchesMinimalRequest_dota_5fgcmessages_5fclient_5fwatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientToGCMatchesMinimalRequest_dota_5fgcmessages_5fclient_5fwatch_2eproto}, {}};

static void InitDefaultsCMsgClientToGCMatchesMinimalResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgClientToGCMatchesMinimalResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgClientToGCMatchesMinimalResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgClientToGCMatchesMinimalResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgClientToGCMatchesMinimalResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgClientToGCMatchesMinimalResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto}, {
      &scc_info_CMsgDOTAMatchMinimal_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgGCToClientTopLeagueMatchesResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToClientTopLeagueMatchesResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToClientTopLeagueMatchesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToClientTopLeagueMatchesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCToClientTopLeagueMatchesResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCToClientTopLeagueMatchesResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto}, {
      &scc_info_CMsgDOTAMatchMinimal_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgGCToClientTopFriendMatchesResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToClientTopFriendMatchesResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToClientTopFriendMatchesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToClientTopFriendMatchesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCToClientTopFriendMatchesResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCToClientTopFriendMatchesResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto}, {
      &scc_info_CMsgDOTAMatchMinimal_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgClientToGCFindTopMatches_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgClientToGCFindTopMatches_default_instance_;
    new (ptr) ::proto::dota::CMsgClientToGCFindTopMatches();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgClientToGCFindTopMatches::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientToGCFindTopMatches_dota_5fgcmessages_5fclient_5fwatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientToGCFindTopMatches_dota_5fgcmessages_5fclient_5fwatch_2eproto}, {}};

static void InitDefaultsCMsgGCToClientFindTopLeagueMatchesResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToClientFindTopLeagueMatchesResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToClientFindTopLeagueMatchesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToClientFindTopLeagueMatchesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCToClientFindTopLeagueMatchesResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCToClientFindTopLeagueMatchesResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto}, {
      &scc_info_CMsgDOTAMatch_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgSpectateFriendGame_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSpectateFriendGame_default_instance_;
    new (ptr) ::proto::dota::CMsgSpectateFriendGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSpectateFriendGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSpectateFriendGame_dota_5fgcmessages_5fclient_5fwatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSpectateFriendGame_dota_5fgcmessages_5fclient_5fwatch_2eproto}, {}};

static void InitDefaultsCMsgSpectateFriendGameResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgSpectateFriendGameResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgSpectateFriendGameResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgSpectateFriendGameResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgSpectateFriendGameResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgSpectateFriendGameResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto}, {}};

static void InitDefaultsCDOTAReplayDownloadInfo_Highlight_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAReplayDownloadInfo_Highlight_default_instance_;
    new (ptr) ::proto::dota::CDOTAReplayDownloadInfo_Highlight();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAReplayDownloadInfo_Highlight::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTAReplayDownloadInfo_Highlight_dota_5fgcmessages_5fclient_5fwatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTAReplayDownloadInfo_Highlight_dota_5fgcmessages_5fclient_5fwatch_2eproto}, {}};

static void InitDefaultsCDOTAReplayDownloadInfo_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTAReplayDownloadInfo_default_instance_;
    new (ptr) ::proto::dota::CDOTAReplayDownloadInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTAReplayDownloadInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CDOTAReplayDownloadInfo_dota_5fgcmessages_5fclient_5fwatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCDOTAReplayDownloadInfo_dota_5fgcmessages_5fclient_5fwatch_2eproto}, {
      &scc_info_CMsgDOTAMatchMinimal_dota_5fgcmessages_5fcommon_2eproto.base,}};

static void InitDefaultsCMsgWatchGame_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgWatchGame_default_instance_;
    new (ptr) ::proto::dota::CMsgWatchGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgWatchGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgWatchGame_dota_5fgcmessages_5fclient_5fwatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgWatchGame_dota_5fgcmessages_5fclient_5fwatch_2eproto}, {}};

static void InitDefaultsCMsgCancelWatchGame_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgCancelWatchGame_default_instance_;
    new (ptr) ::proto::dota::CMsgCancelWatchGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgCancelWatchGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgCancelWatchGame_dota_5fgcmessages_5fclient_5fwatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgCancelWatchGame_dota_5fgcmessages_5fclient_5fwatch_2eproto}, {}};

static void InitDefaultsCMsgWatchGameResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgWatchGameResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgWatchGameResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgWatchGameResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgWatchGameResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgWatchGameResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto}, {}};

static void InitDefaultsCMsgPartyLeaderWatchGamePrompt_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgPartyLeaderWatchGamePrompt_default_instance_;
    new (ptr) ::proto::dota::CMsgPartyLeaderWatchGamePrompt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgPartyLeaderWatchGamePrompt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgPartyLeaderWatchGamePrompt_dota_5fgcmessages_5fclient_5fwatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgPartyLeaderWatchGamePrompt_dota_5fgcmessages_5fclient_5fwatch_2eproto}, {}};

static void InitDefaultsCDOTABroadcasterInfo_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CDOTABroadcasterInfo_default_instance_;
    new (ptr) ::proto::dota::CDOTABroadcasterInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CDOTABroadcasterInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CDOTABroadcasterInfo_dota_5fgcmessages_5fclient_5fwatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCDOTABroadcasterInfo_dota_5fgcmessages_5fclient_5fwatch_2eproto}, {}};

static void InitDefaultsCMsgDOTASeries_TeamInfo_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTASeries_TeamInfo_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTASeries_TeamInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTASeries_TeamInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTASeries_TeamInfo_dota_5fgcmessages_5fclient_5fwatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTASeries_TeamInfo_dota_5fgcmessages_5fclient_5fwatch_2eproto}, {}};

static void InitDefaultsCMsgDOTASeries_LiveGame_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTASeries_LiveGame_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTASeries_LiveGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTASeries_LiveGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTASeries_LiveGame_dota_5fgcmessages_5fclient_5fwatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTASeries_LiveGame_dota_5fgcmessages_5fclient_5fwatch_2eproto}, {
      &scc_info_CMsgDOTASeries_TeamInfo_dota_5fgcmessages_5fclient_5fwatch_2eproto.base,}};

static void InitDefaultsCMsgDOTASeries_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTASeries_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTASeries();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTASeries::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_CMsgDOTASeries_dota_5fgcmessages_5fclient_5fwatch_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsCMsgDOTASeries_dota_5fgcmessages_5fclient_5fwatch_2eproto}, {
      &scc_info_CMsgDOTASeries_TeamInfo_dota_5fgcmessages_5fclient_5fwatch_2eproto.base,
      &scc_info_CMsgDOTAMatchMinimal_dota_5fgcmessages_5fcommon_2eproto.base,
      &scc_info_CMsgDOTASeries_LiveGame_dota_5fgcmessages_5fclient_5fwatch_2eproto.base,}};

void InitDefaults_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CSourceTVGameSmall_Player_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CSourceTVGameSmall_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientToGCFindTopSourceTVGames_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToClientFindTopSourceTVGamesResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToClientTopWeekendTourneyGames_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientToGCTopMatchesRequest_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientToGCTopLeagueMatchesRequest_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientToGCTopFriendMatchesRequest_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientToGCMatchesMinimalRequest_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientToGCMatchesMinimalResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToClientTopLeagueMatchesResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToClientTopFriendMatchesResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientToGCFindTopMatches_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToClientFindTopLeagueMatchesResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSpectateFriendGame_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgSpectateFriendGameResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAReplayDownloadInfo_Highlight_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTAReplayDownloadInfo_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgWatchGame_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgCancelWatchGame_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgWatchGameResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgPartyLeaderWatchGamePrompt_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CDOTABroadcasterInfo_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTASeries_TeamInfo_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTASeries_LiveGame_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTASeries_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[26];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fwatch_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fclient_5fwatch_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall_Player, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall_Player, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall_Player, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall_Player, hero_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, activate_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, deactivate_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, lobby_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, game_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, delay_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, spectators_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, game_mode_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, average_mmr_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, match_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, series_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, team_name_radiant_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, team_name_dire_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, team_logo_radiant_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, team_logo_dire_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, team_id_radiant_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, team_id_dire_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, sort_score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, last_update_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, radiant_lead_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, radiant_score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, dire_score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, players_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, building_state_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, weekend_tourney_tournament_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, weekend_tourney_division_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, weekend_tourney_skill_level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CSourceTVGameSmall, weekend_tourney_bracket_round_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  13,
  12,
  14,
  0,
  1,
  21,
  22,
  27,
  28,
  15,
  16,
  17,
  18,
  19,
  ~0u,
  20,
  23,
  24,
  25,
  26,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCFindTopSourceTVGames, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCFindTopSourceTVGames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCFindTopSourceTVGames, search_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCFindTopSourceTVGames, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCFindTopSourceTVGames, hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCFindTopSourceTVGames, start_game_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCFindTopSourceTVGames, game_list_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCFindTopSourceTVGames, lobby_ids_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientFindTopSourceTVGamesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientFindTopSourceTVGamesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientFindTopSourceTVGamesResponse, search_key_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientFindTopSourceTVGamesResponse, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientFindTopSourceTVGamesResponse, hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientFindTopSourceTVGamesResponse, start_game_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientFindTopSourceTVGamesResponse, num_games_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientFindTopSourceTVGamesResponse, game_list_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientFindTopSourceTVGamesResponse, game_list_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientFindTopSourceTVGamesResponse, specific_games_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientFindTopSourceTVGamesResponse, bot_game_),
  0,
  2,
  3,
  4,
  5,
  6,
  ~0u,
  7,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientTopWeekendTourneyGames, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientTopWeekendTourneyGames, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientTopWeekendTourneyGames, live_games_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCTopMatchesRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCTopMatchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCTopMatchesRequest, hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCTopMatchesRequest, player_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCTopMatchesRequest, team_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCTopLeagueMatchesRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCTopLeagueMatchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCTopFriendMatchesRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCTopFriendMatchesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCMatchesMinimalRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCMatchesMinimalRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCMatchesMinimalRequest, match_ids_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCMatchesMinimalResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCMatchesMinimalResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCMatchesMinimalResponse, matches_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCMatchesMinimalResponse, last_match_),
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientTopLeagueMatchesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientTopLeagueMatchesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientTopLeagueMatchesResponse, matches_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientTopFriendMatchesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientTopFriendMatchesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientTopFriendMatchesResponse, matches_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCFindTopMatches, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCFindTopMatches, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCFindTopMatches, start_game_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCFindTopMatches, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCFindTopMatches, hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCFindTopMatches, friend_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCFindTopMatches, friend_list_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCFindTopMatches, league_list_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientFindTopLeagueMatchesResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientFindTopLeagueMatchesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientFindTopLeagueMatchesResponse, start_game_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientFindTopLeagueMatchesResponse, league_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientFindTopLeagueMatchesResponse, hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientFindTopLeagueMatchesResponse, match_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientFindTopLeagueMatchesResponse, matches_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectateFriendGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectateFriendGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectateFriendGame, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectateFriendGame, live_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectateFriendGameResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectateFriendGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectateFriendGameResponse, server_steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgSpectateFriendGameResponse, watch_live_result_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAReplayDownloadInfo_Highlight, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAReplayDownloadInfo_Highlight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAReplayDownloadInfo_Highlight, timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAReplayDownloadInfo_Highlight, description_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAReplayDownloadInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAReplayDownloadInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAReplayDownloadInfo, match_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAReplayDownloadInfo, title_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAReplayDownloadInfo, description_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAReplayDownloadInfo, size_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAReplayDownloadInfo, tags_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTAReplayDownloadInfo, exists_on_disk_),
  2,
  0,
  1,
  3,
  ~0u,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWatchGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWatchGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWatchGame, server_steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWatchGame, client_version_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWatchGame, watch_server_steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWatchGame, lobby_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWatchGame, regions_),
  0,
  3,
  1,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgCancelWatchGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgCancelWatchGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWatchGameResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWatchGameResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWatchGameResponse, watch_game_result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWatchGameResponse, source_tv_public_addr_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWatchGameResponse, source_tv_private_addr_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWatchGameResponse, source_tv_port_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWatchGameResponse, game_server_steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWatchGameResponse, watch_server_steamid_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgWatchGameResponse, watch_tv_unique_secret_code_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPartyLeaderWatchGamePrompt, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPartyLeaderWatchGamePrompt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgPartyLeaderWatchGamePrompt, game_server_steamid_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcasterInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcasterInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcasterInfo, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcasterInfo, server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcasterInfo, live_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcasterInfo, team_name_radiant_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcasterInfo, team_name_dire_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcasterInfo, series_game_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcasterInfo, upcoming_broadcast_timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcasterInfo, allow_live_video_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcasterInfo, node_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CDOTABroadcasterInfo, node_name_),
  4,
  3,
  5,
  0,
  1,
  7,
  8,
  6,
  9,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeries_TeamInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeries_TeamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeries_TeamInfo, team_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeries_TeamInfo, team_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeries_TeamInfo, team_logo_url_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeries_TeamInfo, wager_count_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeries_LiveGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeries_LiveGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeries_LiveGame, server_steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeries_LiveGame, team_radiant_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeries_LiveGame, team_dire_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeries_LiveGame, team_radiant_score_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeries_LiveGame, team_dire_score_),
  2,
  0,
  1,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeries, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeries, series_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeries, series_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeries, team_1_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeries, team_2_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeries, match_minimal_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTASeries, live_game_),
  3,
  4,
  0,
  1,
  ~0u,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::proto::dota::CSourceTVGameSmall_Player)},
  { 9, 44, sizeof(::proto::dota::CSourceTVGameSmall)},
  { 74, 85, sizeof(::proto::dota::CMsgClientToGCFindTopSourceTVGames)},
  { 91, 105, sizeof(::proto::dota::CMsgGCToClientFindTopSourceTVGamesResponse)},
  { 114, 120, sizeof(::proto::dota::CMsgGCToClientTopWeekendTourneyGames)},
  { 121, 129, sizeof(::proto::dota::CMsgClientToGCTopMatchesRequest)},
  { 132, 137, sizeof(::proto::dota::CMsgClientToGCTopLeagueMatchesRequest)},
  { 137, 142, sizeof(::proto::dota::CMsgClientToGCTopFriendMatchesRequest)},
  { 142, 148, sizeof(::proto::dota::CMsgClientToGCMatchesMinimalRequest)},
  { 149, 156, sizeof(::proto::dota::CMsgClientToGCMatchesMinimalResponse)},
  { 158, 164, sizeof(::proto::dota::CMsgGCToClientTopLeagueMatchesResponse)},
  { 165, 171, sizeof(::proto::dota::CMsgGCToClientTopFriendMatchesResponse)},
  { 172, 183, sizeof(::proto::dota::CMsgClientToGCFindTopMatches)},
  { 189, 199, sizeof(::proto::dota::CMsgGCToClientFindTopLeagueMatchesResponse)},
  { 204, 211, sizeof(::proto::dota::CMsgSpectateFriendGame)},
  { 213, 220, sizeof(::proto::dota::CMsgSpectateFriendGameResponse)},
  { 222, 229, sizeof(::proto::dota::CDOTAReplayDownloadInfo_Highlight)},
  { 231, 242, sizeof(::proto::dota::CDOTAReplayDownloadInfo)},
  { 248, 258, sizeof(::proto::dota::CMsgWatchGame)},
  { 263, 268, sizeof(::proto::dota::CMsgCancelWatchGame)},
  { 268, 280, sizeof(::proto::dota::CMsgWatchGameResponse)},
  { 287, 293, sizeof(::proto::dota::CMsgPartyLeaderWatchGamePrompt)},
  { 294, 309, sizeof(::proto::dota::CDOTABroadcasterInfo)},
  { 319, 328, sizeof(::proto::dota::CMsgDOTASeries_TeamInfo)},
  { 332, 342, sizeof(::proto::dota::CMsgDOTASeries_LiveGame)},
  { 347, 358, sizeof(::proto::dota::CMsgDOTASeries)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSourceTVGameSmall_Player_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CSourceTVGameSmall_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgClientToGCFindTopSourceTVGames_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToClientFindTopSourceTVGamesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToClientTopWeekendTourneyGames_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgClientToGCTopMatchesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgClientToGCTopLeagueMatchesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgClientToGCTopFriendMatchesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgClientToGCMatchesMinimalRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgClientToGCMatchesMinimalResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToClientTopLeagueMatchesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToClientTopFriendMatchesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgClientToGCFindTopMatches_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToClientFindTopLeagueMatchesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSpectateFriendGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgSpectateFriendGameResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAReplayDownloadInfo_Highlight_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTAReplayDownloadInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgWatchGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgCancelWatchGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgWatchGameResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgPartyLeaderWatchGamePrompt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CDOTABroadcasterInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTASeries_TeamInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTASeries_LiveGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTASeries_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto = {
  {}, AddDescriptors_dota_5fgcmessages_5fclient_5fwatch_2eproto, "dota_gcmessages_client_watch.proto", schemas,
  file_default_instances, TableStruct_dota_5fgcmessages_5fclient_5fwatch_2eproto::offsets,
  file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto, 26, file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fwatch_2eproto, file_level_service_descriptors_dota_5fgcmessages_5fclient_5fwatch_2eproto,
};

const char descriptor_table_protodef_dota_5fgcmessages_5fclient_5fwatch_2eproto[] =
  "\n\"dota_gcmessages_client_watch.proto\022\npr"
  "oto.dota\032\034dota_gcmessages_common.proto\"\261"
  "\006\n\022CSourceTVGameSmall\022\025\n\ractivate_time\030\001"
  " \001(\r\022\027\n\017deactivate_time\030\002 \001(\r\022\027\n\017server_"
  "steam_id\030\003 \001(\004\022\020\n\010lobby_id\030\004 \001(\004\022\021\n\tleag"
  "ue_id\030\005 \001(\r\022\022\n\nlobby_type\030\006 \001(\r\022\021\n\tgame_"
  "time\030\007 \001(\005\022\r\n\005delay\030\010 \001(\r\022\022\n\nspectators\030"
  "\t \001(\r\022\021\n\tgame_mode\030\n \001(\r\022\023\n\013average_mmr\030"
  "\013 \001(\r\022\020\n\010match_id\030\014 \001(\004\022\021\n\tseries_id\030\r \001"
  "(\r\022\031\n\021team_name_radiant\030\017 \001(\t\022\026\n\016team_na"
  "me_dire\030\020 \001(\t\022\031\n\021team_logo_radiant\030\030 \001(\006"
  "\022\026\n\016team_logo_dire\030\031 \001(\006\022\027\n\017team_id_radi"
  "ant\030\036 \001(\r\022\024\n\014team_id_dire\030\037 \001(\r\022\022\n\nsort_"
  "score\030\021 \001(\r\022\030\n\020last_update_time\030\022 \001(\002\022\024\n"
  "\014radiant_lead\030\023 \001(\005\022\025\n\rradiant_score\030\024 \001"
  "(\r\022\022\n\ndire_score\030\025 \001(\r\0226\n\007players\030\026 \003(\0132"
  "%.proto.dota.CSourceTVGameSmall.Player\022\026"
  "\n\016building_state\030\027 \001(\007\022%\n\035weekend_tourne"
  "y_tournament_id\030\032 \001(\r\022 \n\030weekend_tourney"
  "_division\030\033 \001(\r\022#\n\033weekend_tourney_skill"
  "_level\030\034 \001(\r\022%\n\035weekend_tourney_bracket_"
  "round\030\035 \001(\r\032-\n\006Player\022\022\n\naccount_id\030\001 \001("
  "\r\022\017\n\007hero_id\030\002 \001(\r\"\234\001\n\"CMsgClientToGCFin"
  "dTopSourceTVGames\022\022\n\nsearch_key\030\001 \001(\t\022\021\n"
  "\tleague_id\030\002 \001(\r\022\017\n\007hero_id\030\003 \001(\r\022\022\n\nsta"
  "rt_game\030\004 \001(\r\022\027\n\017game_list_index\030\005 \001(\r\022\021"
  "\n\tlobby_ids\030\006 \003(\004\"\241\002\n*CMsgGCToClientFind"
  "TopSourceTVGamesResponse\022\022\n\nsearch_key\030\001"
  " \001(\t\022\021\n\tleague_id\030\002 \001(\r\022\017\n\007hero_id\030\003 \001(\r"
  "\022\022\n\nstart_game\030\004 \001(\r\022\021\n\tnum_games\030\005 \001(\r\022"
  "\027\n\017game_list_index\030\006 \001(\r\0221\n\tgame_list\030\007 "
  "\003(\0132\036.proto.dota.CSourceTVGameSmall\022\026\n\016s"
  "pecific_games\030\010 \001(\010\0220\n\010bot_game\030\t \001(\0132\036."
  "proto.dota.CSourceTVGameSmall\"Z\n$CMsgGCT"
  "oClientTopWeekendTourneyGames\0222\n\nlive_ga"
  "mes\030\001 \003(\0132\036.proto.dota.CSourceTVGameSmal"
  "l\"^\n\037CMsgClientToGCTopMatchesRequest\022\017\n\007"
  "hero_id\030\001 \001(\r\022\031\n\021player_account_id\030\002 \001(\r"
  "\022\017\n\007team_id\030\003 \001(\r\"\'\n%CMsgClientToGCTopLe"
  "agueMatchesRequest\"\'\n%CMsgClientToGCTopF"
  "riendMatchesRequest\"8\n#CMsgClientToGCMat"
  "chesMinimalRequest\022\021\n\tmatch_ids\030\001 \003(\004\"m\n"
  "$CMsgClientToGCMatchesMinimalResponse\0221\n"
  "\007matches\030\001 \003(\0132 .proto.dota.CMsgDOTAMatc"
  "hMinimal\022\022\n\nlast_match\030\002 \001(\010\"[\n&CMsgGCTo"
  "ClientTopLeagueMatchesResponse\0221\n\007matche"
  "s\030\002 \003(\0132 .proto.dota.CMsgDOTAMatchMinima"
  "l\"[\n&CMsgGCToClientTopFriendMatchesRespo"
  "nse\0221\n\007matches\030\001 \003(\0132 .proto.dota.CMsgDO"
  "TAMatchMinimal\"\223\001\n\034CMsgClientToGCFindTop"
  "Matches\022\022\n\nstart_game\030\001 \001(\r\022\021\n\tleague_id"
  "\030\002 \001(\r\022\017\n\007hero_id\030\003 \001(\r\022\021\n\tfriend_id\030\004 \001"
  "(\r\022\023\n\013friend_list\030\005 \001(\010\022\023\n\013league_list\030\006"
  " \001(\010\"\243\001\n*CMsgGCToClientFindTopLeagueMatc"
  "hesResponse\022\022\n\nstart_game\030\001 \001(\r\022\021\n\tleagu"
  "e_id\030\002 \001(\r\022\017\n\007hero_id\030\003 \001(\r\022\021\n\tmatch_ids"
  "\030\004 \003(\r\022*\n\007matches\030\005 \003(\0132\031.proto.dota.CMs"
  "gDOTAMatch\"8\n\026CMsgSpectateFriendGame\022\020\n\010"
  "steam_id\030\001 \001(\006\022\014\n\004live\030\002 \001(\010\"\250\004\n\036CMsgSpe"
  "ctateFriendGameResponse\022\026\n\016server_steami"
  "d\030\004 \001(\006\022_\n\021watch_live_result\030\005 \001(\0162;.pro"
  "to.dota.CMsgSpectateFriendGameResponse.E"
  "WatchLiveResult:\007SUCCESS\"\214\003\n\020EWatchLiveR"
  "esult\022\013\n\007SUCCESS\020\000\022\021\n\rERROR_GENERIC\020\001\022\021\n"
  "\rERROR_NO_PLUS\020\002\022\025\n\021ERROR_NOT_FRIENDS\020\003\022"
  "\031\n\025ERROR_LOBBY_NOT_FOUND\020\004\022\036\n\032ERROR_SPEC"
  "TATOR_IN_A_LOBBY\020\005\022\026\n\022ERROR_LOBBY_IS_LAN"
  "\020\006\022\032\n\026ERROR_WRONG_LOBBY_TYPE\020\007\022\033\n\027ERROR_"
  "WRONG_LOBBY_STATE\020\010\022\033\n\027ERROR_PLAYER_NOT_"
  "PLAYER\020\t\022\035\n\031ERROR_TOO_MANY_SPECTATORS\020\n\022"
  "\"\n\036ERROR_SPECTATOR_SWITCHED_TEAMS\020\013\022\037\n\033E"
  "RROR_FRIENDS_ON_BOTH_SIDES\020\014\022!\n\035ERROR_SP"
  "ECTATOR_IN_THIS_LOBBY\020\r\"\327\001\n\027CDOTAReplayD"
  "ownloadInfo\022/\n\005match\030\001 \001(\0132 .proto.dota."
  "CMsgDOTAMatchMinimal\022\r\n\005title\030\002 \001(\t\022\023\n\013d"
  "escription\030\003 \001(\t\022\014\n\004size\030\004 \001(\r\022\014\n\004tags\030\005"
  " \003(\t\022\026\n\016exists_on_disk\030\006 \001(\010\0323\n\tHighligh"
  "t\022\021\n\ttimestamp\030\001 \001(\r\022\023\n\013description\030\002 \001("
  "\t\"\200\001\n\rCMsgWatchGame\022\026\n\016server_steamid\030\001 "
  "\001(\006\022\026\n\016client_version\030\002 \001(\r\022\034\n\024watch_ser"
  "ver_steamid\030\003 \001(\006\022\020\n\010lobby_id\030\004 \001(\004\022\017\n\007r"
  "egions\030\005 \003(\r\"\025\n\023CMsgCancelWatchGame\"\324\003\n\025"
  "CMsgWatchGameResponse\022U\n\021watch_game_resu"
  "lt\030\001 \001(\01621.proto.dota.CMsgWatchGameRespo"
  "nse.WatchGameResult:\007PENDING\022\035\n\025source_t"
  "v_public_addr\030\002 \001(\r\022\036\n\026source_tv_private"
  "_addr\030\003 \001(\r\022\026\n\016source_tv_port\030\004 \001(\r\022\033\n\023g"
  "ame_server_steamid\030\005 \001(\006\022\034\n\024watch_server"
  "_steamid\030\006 \001(\006\022#\n\033watch_tv_unique_secret"
  "_code\030\007 \001(\006\"\254\001\n\017WatchGameResult\022\013\n\007PENDI"
  "NG\020\000\022\t\n\005READY\020\001\022\026\n\022GAMESERVERNOTFOUND\020\002\022"
  "\017\n\013UNAVAILABLE\020\003\022\r\n\tCANCELLED\020\004\022\027\n\023INCOM"
  "PATIBLEVERSION\020\005\022\035\n\031MISSINGLEAGUESUBSCRI"
  "PTION\020\006\022\021\n\rLOBBYNOTFOUND\020\007\"=\n\036CMsgPartyL"
  "eaderWatchGamePrompt\022\033\n\023game_server_stea"
  "mid\030\005 \001(\006\"\377\001\n\024CDOTABroadcasterInfo\022\022\n\nac"
  "count_id\030\001 \001(\r\022\027\n\017server_steam_id\030\002 \001(\006\022"
  "\014\n\004live\030\003 \001(\010\022\031\n\021team_name_radiant\030\004 \001(\t"
  "\022\026\n\016team_name_dire\030\005 \001(\t\022\023\n\013series_game\030"
  "\007 \001(\r\022$\n\034upcoming_broadcast_timestamp\030\t "
  "\001(\r\022\030\n\020allow_live_video\030\n \001(\010\022\021\n\tnode_ty"
  "pe\030\013 \001(\r\022\021\n\tnode_name\030\014 \001(\t\"\275\004\n\016CMsgDOTA"
  "Series\022\021\n\tseries_id\030\001 \001(\r\022\023\n\013series_type"
  "\030\002 \001(\r\0223\n\006team_1\030\003 \001(\0132#.proto.dota.CMsg"
  "DOTASeries.TeamInfo\0223\n\006team_2\030\004 \001(\0132#.pr"
  "oto.dota.CMsgDOTASeries.TeamInfo\0227\n\rmatc"
  "h_minimal\030\005 \003(\0132 .proto.dota.CMsgDOTAMat"
  "chMinimal\0226\n\tlive_game\030\006 \001(\0132#.proto.dot"
  "a.CMsgDOTASeries.LiveGame\032Z\n\010TeamInfo\022\017\n"
  "\007team_id\030\001 \001(\r\022\021\n\tteam_name\030\002 \001(\t\022\025\n\rtea"
  "m_logo_url\030\003 \001(\t\022\023\n\013wager_count\030\004 \001(\r\032\313\001"
  "\n\010LiveGame\022\027\n\017server_steam_id\030\001 \001(\006\0229\n\014t"
  "eam_radiant\030\002 \001(\0132#.proto.dota.CMsgDOTAS"
  "eries.TeamInfo\0226\n\tteam_dire\030\003 \001(\0132#.prot"
  "o.dota.CMsgDOTASeries.TeamInfo\022\032\n\022team_r"
  "adiant_score\030\004 \001(\r\022\027\n\017team_dire_score\030\005 "
  "\001(\rB\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto = {
  false, InitDefaults_dota_5fgcmessages_5fclient_5fwatch_2eproto, 
  descriptor_table_protodef_dota_5fgcmessages_5fclient_5fwatch_2eproto,
  "dota_gcmessages_client_watch.proto", &assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto, 4650,
};

void AddDescriptors_dota_5fgcmessages_5fclient_5fwatch_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_dota_5fgcmessages_5fcommon_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fwatch_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dota_5fgcmessages_5fclient_5fwatch_2eproto = []() { AddDescriptors_dota_5fgcmessages_5fclient_5fwatch_2eproto(); return true; }();
namespace proto {
namespace dota {
const ::google::protobuf::EnumDescriptor* CMsgSpectateFriendGameResponse_EWatchLiveResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fwatch_2eproto[0];
}
bool CMsgSpectateFriendGameResponse_EWatchLiveResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::SUCCESS;
const CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_GENERIC;
const CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_NO_PLUS;
const CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_NOT_FRIENDS;
const CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_LOBBY_NOT_FOUND;
const CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_SPECTATOR_IN_A_LOBBY;
const CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_LOBBY_IS_LAN;
const CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_WRONG_LOBBY_TYPE;
const CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_WRONG_LOBBY_STATE;
const CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_PLAYER_NOT_PLAYER;
const CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_TOO_MANY_SPECTATORS;
const CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_SPECTATOR_SWITCHED_TEAMS;
const CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_FRIENDS_ON_BOTH_SIDES;
const CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::ERROR_SPECTATOR_IN_THIS_LOBBY;
const CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::EWatchLiveResult_MIN;
const CMsgSpectateFriendGameResponse_EWatchLiveResult CMsgSpectateFriendGameResponse::EWatchLiveResult_MAX;
const int CMsgSpectateFriendGameResponse::EWatchLiveResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgWatchGameResponse_WatchGameResult_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fwatch_2eproto[1];
}
bool CMsgWatchGameResponse_WatchGameResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::PENDING;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::READY;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::GAMESERVERNOTFOUND;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::UNAVAILABLE;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::CANCELLED;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::INCOMPATIBLEVERSION;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::MISSINGLEAGUESUBSCRIPTION;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::LOBBYNOTFOUND;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::WatchGameResult_MIN;
const CMsgWatchGameResponse_WatchGameResult CMsgWatchGameResponse::WatchGameResult_MAX;
const int CMsgWatchGameResponse::WatchGameResult_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void CSourceTVGameSmall_Player::InitAsDefaultInstance() {
}
class CSourceTVGameSmall_Player::HasBitSetters {
 public:
  static void set_has_account_id(CSourceTVGameSmall_Player* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_hero_id(CSourceTVGameSmall_Player* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSourceTVGameSmall_Player::kAccountIdFieldNumber;
const int CSourceTVGameSmall_Player::kHeroIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSourceTVGameSmall_Player::CSourceTVGameSmall_Player()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSourceTVGameSmall.Player)
}
CSourceTVGameSmall_Player::CSourceTVGameSmall_Player(const CSourceTVGameSmall_Player& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSourceTVGameSmall.Player)
}

void CSourceTVGameSmall_Player::SharedCtor() {
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hero_id_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(hero_id_));
}

CSourceTVGameSmall_Player::~CSourceTVGameSmall_Player() {
  // @@protoc_insertion_point(destructor:proto.dota.CSourceTVGameSmall.Player)
  SharedDtor();
}

void CSourceTVGameSmall_Player::SharedDtor() {
}

void CSourceTVGameSmall_Player::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSourceTVGameSmall_Player& CSourceTVGameSmall_Player::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSourceTVGameSmall_Player_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  return *internal_default_instance();
}


void CSourceTVGameSmall_Player::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSourceTVGameSmall.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSourceTVGameSmall_Player::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSourceTVGameSmall_Player*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSourceTVGameSmall_Player::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSourceTVGameSmall.Player)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSourceTVGameSmall.Player)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSourceTVGameSmall.Player)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSourceTVGameSmall_Player::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSourceTVGameSmall.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hero_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSourceTVGameSmall.Player)
}

::google::protobuf::uint8* CSourceTVGameSmall_Player::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSourceTVGameSmall.Player)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint32 hero_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hero_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSourceTVGameSmall.Player)
  return target;
}

size_t CSourceTVGameSmall_Player::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSourceTVGameSmall.Player)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 hero_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSourceTVGameSmall_Player::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSourceTVGameSmall.Player)
  GOOGLE_DCHECK_NE(&from, this);
  const CSourceTVGameSmall_Player* source =
      ::google::protobuf::DynamicCastToGenerated<CSourceTVGameSmall_Player>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSourceTVGameSmall.Player)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSourceTVGameSmall.Player)
    MergeFrom(*source);
  }
}

void CSourceTVGameSmall_Player::MergeFrom(const CSourceTVGameSmall_Player& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSourceTVGameSmall.Player)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSourceTVGameSmall_Player::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSourceTVGameSmall.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSourceTVGameSmall_Player::CopyFrom(const CSourceTVGameSmall_Player& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSourceTVGameSmall.Player)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSourceTVGameSmall_Player::IsInitialized() const {
  return true;
}

void CSourceTVGameSmall_Player::Swap(CSourceTVGameSmall_Player* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSourceTVGameSmall_Player::InternalSwap(CSourceTVGameSmall_Player* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(account_id_, other->account_id_);
  swap(hero_id_, other->hero_id_);
}

::google::protobuf::Metadata CSourceTVGameSmall_Player::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CSourceTVGameSmall::InitAsDefaultInstance() {
}
class CSourceTVGameSmall::HasBitSetters {
 public:
  static void set_has_activate_time(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_deactivate_time(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_server_steam_id(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_lobby_id(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_league_id(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_lobby_type(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_game_time(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_delay(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_spectators(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_game_mode(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_average_mmr(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_match_id(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_series_id(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_team_name_radiant(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_name_dire(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_team_logo_radiant(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_team_logo_dire(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_team_id_radiant(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x08000000u;
  }
  static void set_has_team_id_dire(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x10000000u;
  }
  static void set_has_sort_score(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_last_update_time(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static void set_has_radiant_lead(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_radiant_score(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_dire_score(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_building_state(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_weekend_tourney_tournament_id(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_weekend_tourney_division(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static void set_has_weekend_tourney_skill_level(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
  static void set_has_weekend_tourney_bracket_round(CSourceTVGameSmall* msg) {
    msg->_has_bits_[0] |= 0x04000000u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSourceTVGameSmall::kActivateTimeFieldNumber;
const int CSourceTVGameSmall::kDeactivateTimeFieldNumber;
const int CSourceTVGameSmall::kServerSteamIdFieldNumber;
const int CSourceTVGameSmall::kLobbyIdFieldNumber;
const int CSourceTVGameSmall::kLeagueIdFieldNumber;
const int CSourceTVGameSmall::kLobbyTypeFieldNumber;
const int CSourceTVGameSmall::kGameTimeFieldNumber;
const int CSourceTVGameSmall::kDelayFieldNumber;
const int CSourceTVGameSmall::kSpectatorsFieldNumber;
const int CSourceTVGameSmall::kGameModeFieldNumber;
const int CSourceTVGameSmall::kAverageMmrFieldNumber;
const int CSourceTVGameSmall::kMatchIdFieldNumber;
const int CSourceTVGameSmall::kSeriesIdFieldNumber;
const int CSourceTVGameSmall::kTeamNameRadiantFieldNumber;
const int CSourceTVGameSmall::kTeamNameDireFieldNumber;
const int CSourceTVGameSmall::kTeamLogoRadiantFieldNumber;
const int CSourceTVGameSmall::kTeamLogoDireFieldNumber;
const int CSourceTVGameSmall::kTeamIdRadiantFieldNumber;
const int CSourceTVGameSmall::kTeamIdDireFieldNumber;
const int CSourceTVGameSmall::kSortScoreFieldNumber;
const int CSourceTVGameSmall::kLastUpdateTimeFieldNumber;
const int CSourceTVGameSmall::kRadiantLeadFieldNumber;
const int CSourceTVGameSmall::kRadiantScoreFieldNumber;
const int CSourceTVGameSmall::kDireScoreFieldNumber;
const int CSourceTVGameSmall::kPlayersFieldNumber;
const int CSourceTVGameSmall::kBuildingStateFieldNumber;
const int CSourceTVGameSmall::kWeekendTourneyTournamentIdFieldNumber;
const int CSourceTVGameSmall::kWeekendTourneyDivisionFieldNumber;
const int CSourceTVGameSmall::kWeekendTourneySkillLevelFieldNumber;
const int CSourceTVGameSmall::kWeekendTourneyBracketRoundFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSourceTVGameSmall::CSourceTVGameSmall()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CSourceTVGameSmall)
}
CSourceTVGameSmall::CSourceTVGameSmall(const CSourceTVGameSmall& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      players_(from.players_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_radiant_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name_radiant()) {
    team_name_radiant_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_radiant_);
  }
  team_name_dire_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name_dire()) {
    team_name_dire_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_dire_);
  }
  ::memcpy(&activate_time_, &from.activate_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_id_dire_) -
    reinterpret_cast<char*>(&activate_time_)) + sizeof(team_id_dire_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CSourceTVGameSmall)
}

void CSourceTVGameSmall::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CSourceTVGameSmall_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  team_name_radiant_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_dire_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&activate_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_id_dire_) -
      reinterpret_cast<char*>(&activate_time_)) + sizeof(team_id_dire_));
}

CSourceTVGameSmall::~CSourceTVGameSmall() {
  // @@protoc_insertion_point(destructor:proto.dota.CSourceTVGameSmall)
  SharedDtor();
}

void CSourceTVGameSmall::SharedDtor() {
  team_name_radiant_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_dire_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CSourceTVGameSmall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CSourceTVGameSmall& CSourceTVGameSmall::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CSourceTVGameSmall_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  return *internal_default_instance();
}


void CSourceTVGameSmall::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CSourceTVGameSmall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  players_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      team_name_radiant_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      team_name_dire_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&activate_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lobby_type_) -
        reinterpret_cast<char*>(&activate_time_)) + sizeof(lobby_type_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&game_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sort_score_) -
        reinterpret_cast<char*>(&game_time_)) + sizeof(sort_score_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&last_update_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&weekend_tourney_tournament_id_) -
        reinterpret_cast<char*>(&last_update_time_)) + sizeof(weekend_tourney_tournament_id_));
  }
  if (cached_has_bits & 0x1f000000u) {
    ::memset(&weekend_tourney_division_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_dire_) -
        reinterpret_cast<char*>(&weekend_tourney_division_)) + sizeof(team_id_dire_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CSourceTVGameSmall::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CSourceTVGameSmall*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 activate_time = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_activate_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 deactivate_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_deactivate_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 server_steam_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_server_steam_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 lobby_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_lobby_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 league_id = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 lobby_type = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_lobby_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 game_time = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_game_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 delay = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_delay(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 spectators = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_spectators(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 game_mode = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_game_mode(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 average_mmr = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_average_mmr(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 match_id = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_match_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 series_id = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_series_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string team_name_radiant = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CSourceTVGameSmall.team_name_radiant");
        object = msg->mutable_team_name_radiant();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string team_name_dire = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CSourceTVGameSmall.team_name_dire");
        object = msg->mutable_team_name_dire();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 sort_score = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 136) goto handle_unusual;
        msg->set_sort_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float last_update_time = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 149) goto handle_unusual;
        msg->set_last_update_time(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional int32 radiant_lead = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_radiant_lead(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 radiant_score = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_radiant_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 dire_score = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 168) goto handle_unusual;
        msg->set_dire_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CSourceTVGameSmall.Player players = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 178) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CSourceTVGameSmall_Player::_InternalParse;
          object = msg->add_players();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 65535) == 434 && (ptr += 2));
        break;
      }
      // optional fixed32 building_state = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 189) goto handle_unusual;
        msg->set_building_state(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed64 team_logo_radiant = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 193) goto handle_unusual;
        msg->set_team_logo_radiant(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 team_logo_dire = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 201) goto handle_unusual;
        msg->set_team_logo_dire(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 weekend_tourney_tournament_id = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_weekend_tourney_tournament_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 weekend_tourney_division = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 216) goto handle_unusual;
        msg->set_weekend_tourney_division(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 weekend_tourney_skill_level = 28;
      case 28: {
        if (static_cast<::google::protobuf::uint8>(tag) != 224) goto handle_unusual;
        msg->set_weekend_tourney_skill_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 weekend_tourney_bracket_round = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_weekend_tourney_bracket_round(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_id_radiant = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_team_id_radiant(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_id_dire = 31;
      case 31: {
        if (static_cast<::google::protobuf::uint8>(tag) != 248) goto handle_unusual;
        msg->set_team_id_dire(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CSourceTVGameSmall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CSourceTVGameSmall)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 activate_time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_activate_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activate_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 deactivate_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_deactivate_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &deactivate_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 server_steam_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_server_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 lobby_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_lobby_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 lobby_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_lobby_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lobby_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 game_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_game_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &game_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 delay = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_delay(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &delay_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 spectators = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_spectators(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spectators_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_mode = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_game_mode(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 average_mmr = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_average_mmr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &average_mmr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 match_id = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_match_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &match_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_id = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_series_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name_radiant = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name_radiant()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name_radiant().data(), static_cast<int>(this->team_name_radiant().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSourceTVGameSmall.team_name_radiant");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name_dire = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name_dire()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name_dire().data(), static_cast<int>(this->team_name_dire().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CSourceTVGameSmall.team_name_dire");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 sort_score = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (136 & 0xFF)) {
          HasBitSetters::set_has_sort_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sort_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float last_update_time = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (149 & 0xFF)) {
          HasBitSetters::set_has_last_update_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &last_update_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 radiant_lead = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_radiant_lead(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &radiant_lead_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 radiant_score = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_radiant_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &radiant_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 dire_score = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (168 & 0xFF)) {
          HasBitSetters::set_has_dire_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dire_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSourceTVGameSmall.Player players = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (178 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_players()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 building_state = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (189 & 0xFF)) {
          HasBitSetters::set_has_building_state(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &building_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 team_logo_radiant = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (193 & 0xFF)) {
          HasBitSetters::set_has_team_logo_radiant(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &team_logo_radiant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 team_logo_dire = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (201 & 0xFF)) {
          HasBitSetters::set_has_team_logo_dire(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &team_logo_dire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weekend_tourney_tournament_id = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (208 & 0xFF)) {
          HasBitSetters::set_has_weekend_tourney_tournament_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_tournament_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weekend_tourney_division = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (216 & 0xFF)) {
          HasBitSetters::set_has_weekend_tourney_division(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_division_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weekend_tourney_skill_level = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (224 & 0xFF)) {
          HasBitSetters::set_has_weekend_tourney_skill_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_skill_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 weekend_tourney_bracket_round = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (232 & 0xFF)) {
          HasBitSetters::set_has_weekend_tourney_bracket_round(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &weekend_tourney_bracket_round_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id_radiant = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (240 & 0xFF)) {
          HasBitSetters::set_has_team_id_radiant(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_radiant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id_dire = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (248 & 0xFF)) {
          HasBitSetters::set_has_team_id_dire(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_dire_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CSourceTVGameSmall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CSourceTVGameSmall)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CSourceTVGameSmall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CSourceTVGameSmall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 activate_time = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->activate_time(), output);
  }

  // optional uint32 deactivate_time = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->deactivate_time(), output);
  }

  // optional uint64 server_steam_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->server_steam_id(), output);
  }

  // optional uint64 lobby_id = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lobby_id(), output);
  }

  // optional uint32 league_id = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->league_id(), output);
  }

  // optional uint32 lobby_type = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lobby_type(), output);
  }

  // optional int32 game_time = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->game_time(), output);
  }

  // optional uint32 delay = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->delay(), output);
  }

  // optional uint32 spectators = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->spectators(), output);
  }

  // optional uint32 game_mode = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->game_mode(), output);
  }

  // optional uint32 average_mmr = 11;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->average_mmr(), output);
  }

  // optional uint64 match_id = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->match_id(), output);
  }

  // optional uint32 series_id = 13;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->series_id(), output);
  }

  // optional string team_name_radiant = 15;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name_radiant().data(), static_cast<int>(this->team_name_radiant().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSourceTVGameSmall.team_name_radiant");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->team_name_radiant(), output);
  }

  // optional string team_name_dire = 16;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name_dire().data(), static_cast<int>(this->team_name_dire().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSourceTVGameSmall.team_name_dire");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->team_name_dire(), output);
  }

  // optional uint32 sort_score = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->sort_score(), output);
  }

  // optional float last_update_time = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->last_update_time(), output);
  }

  // optional int32 radiant_lead = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->radiant_lead(), output);
  }

  // optional uint32 radiant_score = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->radiant_score(), output);
  }

  // optional uint32 dire_score = 21;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->dire_score(), output);
  }

  // repeated .proto.dota.CSourceTVGameSmall.Player players = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22,
      this->players(static_cast<int>(i)),
      output);
  }

  // optional fixed32 building_state = 23;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(23, this->building_state(), output);
  }

  // optional fixed64 team_logo_radiant = 24;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(24, this->team_logo_radiant(), output);
  }

  // optional fixed64 team_logo_dire = 25;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(25, this->team_logo_dire(), output);
  }

  // optional uint32 weekend_tourney_tournament_id = 26;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->weekend_tourney_tournament_id(), output);
  }

  // optional uint32 weekend_tourney_division = 27;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->weekend_tourney_division(), output);
  }

  // optional uint32 weekend_tourney_skill_level = 28;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(28, this->weekend_tourney_skill_level(), output);
  }

  // optional uint32 weekend_tourney_bracket_round = 29;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->weekend_tourney_bracket_round(), output);
  }

  // optional uint32 team_id_radiant = 30;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->team_id_radiant(), output);
  }

  // optional uint32 team_id_dire = 31;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(31, this->team_id_dire(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CSourceTVGameSmall)
}

::google::protobuf::uint8* CSourceTVGameSmall::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CSourceTVGameSmall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 activate_time = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->activate_time(), target);
  }

  // optional uint32 deactivate_time = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->deactivate_time(), target);
  }

  // optional uint64 server_steam_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->server_steam_id(), target);
  }

  // optional uint64 lobby_id = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lobby_id(), target);
  }

  // optional uint32 league_id = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->league_id(), target);
  }

  // optional uint32 lobby_type = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->lobby_type(), target);
  }

  // optional int32 game_time = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->game_time(), target);
  }

  // optional uint32 delay = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->delay(), target);
  }

  // optional uint32 spectators = 9;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->spectators(), target);
  }

  // optional uint32 game_mode = 10;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->game_mode(), target);
  }

  // optional uint32 average_mmr = 11;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->average_mmr(), target);
  }

  // optional uint64 match_id = 12;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->match_id(), target);
  }

  // optional uint32 series_id = 13;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->series_id(), target);
  }

  // optional string team_name_radiant = 15;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name_radiant().data(), static_cast<int>(this->team_name_radiant().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSourceTVGameSmall.team_name_radiant");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->team_name_radiant(), target);
  }

  // optional string team_name_dire = 16;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name_dire().data(), static_cast<int>(this->team_name_dire().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CSourceTVGameSmall.team_name_dire");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->team_name_dire(), target);
  }

  // optional uint32 sort_score = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->sort_score(), target);
  }

  // optional float last_update_time = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->last_update_time(), target);
  }

  // optional int32 radiant_lead = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->radiant_lead(), target);
  }

  // optional uint32 radiant_score = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->radiant_score(), target);
  }

  // optional uint32 dire_score = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->dire_score(), target);
  }

  // repeated .proto.dota.CSourceTVGameSmall.Player players = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->players_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        22, this->players(static_cast<int>(i)), target);
  }

  // optional fixed32 building_state = 23;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(23, this->building_state(), target);
  }

  // optional fixed64 team_logo_radiant = 24;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(24, this->team_logo_radiant(), target);
  }

  // optional fixed64 team_logo_dire = 25;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(25, this->team_logo_dire(), target);
  }

  // optional uint32 weekend_tourney_tournament_id = 26;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->weekend_tourney_tournament_id(), target);
  }

  // optional uint32 weekend_tourney_division = 27;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->weekend_tourney_division(), target);
  }

  // optional uint32 weekend_tourney_skill_level = 28;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(28, this->weekend_tourney_skill_level(), target);
  }

  // optional uint32 weekend_tourney_bracket_round = 29;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->weekend_tourney_bracket_round(), target);
  }

  // optional uint32 team_id_radiant = 30;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->team_id_radiant(), target);
  }

  // optional uint32 team_id_dire = 31;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(31, this->team_id_dire(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CSourceTVGameSmall)
  return target;
}

size_t CSourceTVGameSmall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CSourceTVGameSmall)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CSourceTVGameSmall.Player players = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->players_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->players(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string team_name_radiant = 15;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name_radiant());
    }

    // optional string team_name_dire = 16;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name_dire());
    }

    // optional uint32 activate_time = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activate_time());
    }

    // optional uint32 deactivate_time = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->deactivate_time());
    }

    // optional uint64 server_steam_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->server_steam_id());
    }

    // optional uint64 lobby_id = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

    // optional uint32 league_id = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 lobby_type = 6;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lobby_type());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional int32 game_time = 7;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->game_time());
    }

    // optional uint32 delay = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->delay());
    }

    // optional uint32 spectators = 9;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spectators());
    }

    // optional uint32 game_mode = 10;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_mode());
    }

    // optional uint64 match_id = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->match_id());
    }

    // optional uint32 average_mmr = 11;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->average_mmr());
    }

    // optional uint32 series_id = 13;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_id());
    }

    // optional uint32 sort_score = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sort_score());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float last_update_time = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional int32 radiant_lead = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->radiant_lead());
    }

    // optional uint32 radiant_score = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->radiant_score());
    }

    // optional uint32 dire_score = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dire_score());
    }

    // optional fixed32 building_state = 23;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional fixed64 team_logo_radiant = 24;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 8;
    }

    // optional fixed64 team_logo_dire = 25;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional uint32 weekend_tourney_tournament_id = 26;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_tournament_id());
    }

  }
  if (cached_has_bits & 0x1f000000u) {
    // optional uint32 weekend_tourney_division = 27;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_division());
    }

    // optional uint32 weekend_tourney_skill_level = 28;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_skill_level());
    }

    // optional uint32 weekend_tourney_bracket_round = 29;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->weekend_tourney_bracket_round());
    }

    // optional uint32 team_id_radiant = 30;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id_radiant());
    }

    // optional uint32 team_id_dire = 31;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id_dire());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CSourceTVGameSmall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CSourceTVGameSmall)
  GOOGLE_DCHECK_NE(&from, this);
  const CSourceTVGameSmall* source =
      ::google::protobuf::DynamicCastToGenerated<CSourceTVGameSmall>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CSourceTVGameSmall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CSourceTVGameSmall)
    MergeFrom(*source);
  }
}

void CSourceTVGameSmall::MergeFrom(const CSourceTVGameSmall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CSourceTVGameSmall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  players_.MergeFrom(from.players_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      team_name_radiant_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_radiant_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      team_name_dire_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_dire_);
    }
    if (cached_has_bits & 0x00000004u) {
      activate_time_ = from.activate_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      deactivate_time_ = from.deactivate_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      server_steam_id_ = from.server_steam_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      lobby_type_ = from.lobby_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      game_time_ = from.game_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      delay_ = from.delay_;
    }
    if (cached_has_bits & 0x00000400u) {
      spectators_ = from.spectators_;
    }
    if (cached_has_bits & 0x00000800u) {
      game_mode_ = from.game_mode_;
    }
    if (cached_has_bits & 0x00001000u) {
      match_id_ = from.match_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      average_mmr_ = from.average_mmr_;
    }
    if (cached_has_bits & 0x00004000u) {
      series_id_ = from.series_id_;
    }
    if (cached_has_bits & 0x00008000u) {
      sort_score_ = from.sort_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      last_update_time_ = from.last_update_time_;
    }
    if (cached_has_bits & 0x00020000u) {
      radiant_lead_ = from.radiant_lead_;
    }
    if (cached_has_bits & 0x00040000u) {
      radiant_score_ = from.radiant_score_;
    }
    if (cached_has_bits & 0x00080000u) {
      dire_score_ = from.dire_score_;
    }
    if (cached_has_bits & 0x00100000u) {
      building_state_ = from.building_state_;
    }
    if (cached_has_bits & 0x00200000u) {
      team_logo_radiant_ = from.team_logo_radiant_;
    }
    if (cached_has_bits & 0x00400000u) {
      team_logo_dire_ = from.team_logo_dire_;
    }
    if (cached_has_bits & 0x00800000u) {
      weekend_tourney_tournament_id_ = from.weekend_tourney_tournament_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x1f000000u) {
    if (cached_has_bits & 0x01000000u) {
      weekend_tourney_division_ = from.weekend_tourney_division_;
    }
    if (cached_has_bits & 0x02000000u) {
      weekend_tourney_skill_level_ = from.weekend_tourney_skill_level_;
    }
    if (cached_has_bits & 0x04000000u) {
      weekend_tourney_bracket_round_ = from.weekend_tourney_bracket_round_;
    }
    if (cached_has_bits & 0x08000000u) {
      team_id_radiant_ = from.team_id_radiant_;
    }
    if (cached_has_bits & 0x10000000u) {
      team_id_dire_ = from.team_id_dire_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CSourceTVGameSmall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CSourceTVGameSmall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSourceTVGameSmall::CopyFrom(const CSourceTVGameSmall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CSourceTVGameSmall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSourceTVGameSmall::IsInitialized() const {
  return true;
}

void CSourceTVGameSmall::Swap(CSourceTVGameSmall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSourceTVGameSmall::InternalSwap(CSourceTVGameSmall* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&players_)->InternalSwap(CastToBase(&other->players_));
  team_name_radiant_.Swap(&other->team_name_radiant_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team_name_dire_.Swap(&other->team_name_dire_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(activate_time_, other->activate_time_);
  swap(deactivate_time_, other->deactivate_time_);
  swap(server_steam_id_, other->server_steam_id_);
  swap(lobby_id_, other->lobby_id_);
  swap(league_id_, other->league_id_);
  swap(lobby_type_, other->lobby_type_);
  swap(game_time_, other->game_time_);
  swap(delay_, other->delay_);
  swap(spectators_, other->spectators_);
  swap(game_mode_, other->game_mode_);
  swap(match_id_, other->match_id_);
  swap(average_mmr_, other->average_mmr_);
  swap(series_id_, other->series_id_);
  swap(sort_score_, other->sort_score_);
  swap(last_update_time_, other->last_update_time_);
  swap(radiant_lead_, other->radiant_lead_);
  swap(radiant_score_, other->radiant_score_);
  swap(dire_score_, other->dire_score_);
  swap(building_state_, other->building_state_);
  swap(team_logo_radiant_, other->team_logo_radiant_);
  swap(team_logo_dire_, other->team_logo_dire_);
  swap(weekend_tourney_tournament_id_, other->weekend_tourney_tournament_id_);
  swap(weekend_tourney_division_, other->weekend_tourney_division_);
  swap(weekend_tourney_skill_level_, other->weekend_tourney_skill_level_);
  swap(weekend_tourney_bracket_round_, other->weekend_tourney_bracket_round_);
  swap(team_id_radiant_, other->team_id_radiant_);
  swap(team_id_dire_, other->team_id_dire_);
}

::google::protobuf::Metadata CSourceTVGameSmall::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientToGCFindTopSourceTVGames::InitAsDefaultInstance() {
}
class CMsgClientToGCFindTopSourceTVGames::HasBitSetters {
 public:
  static void set_has_search_key(CMsgClientToGCFindTopSourceTVGames* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_league_id(CMsgClientToGCFindTopSourceTVGames* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_hero_id(CMsgClientToGCFindTopSourceTVGames* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_start_game(CMsgClientToGCFindTopSourceTVGames* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_game_list_index(CMsgClientToGCFindTopSourceTVGames* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCFindTopSourceTVGames::kSearchKeyFieldNumber;
const int CMsgClientToGCFindTopSourceTVGames::kLeagueIdFieldNumber;
const int CMsgClientToGCFindTopSourceTVGames::kHeroIdFieldNumber;
const int CMsgClientToGCFindTopSourceTVGames::kStartGameFieldNumber;
const int CMsgClientToGCFindTopSourceTVGames::kGameListIndexFieldNumber;
const int CMsgClientToGCFindTopSourceTVGames::kLobbyIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCFindTopSourceTVGames::CMsgClientToGCFindTopSourceTVGames()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCFindTopSourceTVGames)
}
CMsgClientToGCFindTopSourceTVGames::CMsgClientToGCFindTopSourceTVGames(const CMsgClientToGCFindTopSourceTVGames& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      lobby_ids_(from.lobby_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  search_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_search_key()) {
    search_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_key_);
  }
  ::memcpy(&league_id_, &from.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&game_list_index_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(game_list_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCFindTopSourceTVGames)
}

void CMsgClientToGCFindTopSourceTVGames::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientToGCFindTopSourceTVGames_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  search_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&league_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&game_list_index_) -
      reinterpret_cast<char*>(&league_id_)) + sizeof(game_list_index_));
}

CMsgClientToGCFindTopSourceTVGames::~CMsgClientToGCFindTopSourceTVGames() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCFindTopSourceTVGames)
  SharedDtor();
}

void CMsgClientToGCFindTopSourceTVGames::SharedDtor() {
  search_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientToGCFindTopSourceTVGames::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientToGCFindTopSourceTVGames& CMsgClientToGCFindTopSourceTVGames::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientToGCFindTopSourceTVGames_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientToGCFindTopSourceTVGames::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCFindTopSourceTVGames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  lobby_ids_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    search_key_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&game_list_index_) -
        reinterpret_cast<char*>(&league_id_)) + sizeof(game_list_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientToGCFindTopSourceTVGames::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientToGCFindTopSourceTVGames*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string search_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key");
        object = msg->mutable_search_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 league_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 start_game = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_start_game(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 game_list_index = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_game_list_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint64 lobby_ids = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) == 48) {
          do {
            msg->add_lobby_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 48 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
        object = msg->mutable_lobby_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientToGCFindTopSourceTVGames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCFindTopSourceTVGames)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string search_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_key().data(), static_cast<int>(this->search_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_game = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_start_game(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_list_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_game_list_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_list_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 lobby_ids = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 48u, input, this->mutable_lobby_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_lobby_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCFindTopSourceTVGames)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCFindTopSourceTVGames)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientToGCFindTopSourceTVGames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCFindTopSourceTVGames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), static_cast<int>(this->search_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->search_key(), output);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->league_id(), output);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  // optional uint32 start_game = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_game(), output);
  }

  // optional uint32 game_list_index = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->game_list_index(), output);
  }

  // repeated uint64 lobby_ids = 6;
  for (int i = 0, n = this->lobby_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      6, this->lobby_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCFindTopSourceTVGames)
}

::google::protobuf::uint8* CMsgClientToGCFindTopSourceTVGames::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCFindTopSourceTVGames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), static_cast<int>(this->search_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCFindTopSourceTVGames.search_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->search_key(), target);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->league_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  // optional uint32 start_game = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_game(), target);
  }

  // optional uint32 game_list_index = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->game_list_index(), target);
  }

  // repeated uint64 lobby_ids = 6;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(6, this->lobby_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCFindTopSourceTVGames)
  return target;
}

size_t CMsgClientToGCFindTopSourceTVGames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCFindTopSourceTVGames)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 lobby_ids = 6;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->lobby_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->lobby_ids_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string search_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_key());
    }

    // optional uint32 league_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 start_game = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_game());
    }

    // optional uint32 game_list_index = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_list_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCFindTopSourceTVGames::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCFindTopSourceTVGames)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCFindTopSourceTVGames* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientToGCFindTopSourceTVGames>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCFindTopSourceTVGames)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCFindTopSourceTVGames)
    MergeFrom(*source);
  }
}

void CMsgClientToGCFindTopSourceTVGames::MergeFrom(const CMsgClientToGCFindTopSourceTVGames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCFindTopSourceTVGames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  lobby_ids_.MergeFrom(from.lobby_ids_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      search_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      start_game_ = from.start_game_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_list_index_ = from.game_list_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCFindTopSourceTVGames::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCFindTopSourceTVGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCFindTopSourceTVGames::CopyFrom(const CMsgClientToGCFindTopSourceTVGames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCFindTopSourceTVGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCFindTopSourceTVGames::IsInitialized() const {
  return true;
}

void CMsgClientToGCFindTopSourceTVGames::Swap(CMsgClientToGCFindTopSourceTVGames* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCFindTopSourceTVGames::InternalSwap(CMsgClientToGCFindTopSourceTVGames* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lobby_ids_.InternalSwap(&other->lobby_ids_);
  search_key_.Swap(&other->search_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(league_id_, other->league_id_);
  swap(hero_id_, other->hero_id_);
  swap(start_game_, other->start_game_);
  swap(game_list_index_, other->game_list_index_);
}

::google::protobuf::Metadata CMsgClientToGCFindTopSourceTVGames::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToClientFindTopSourceTVGamesResponse::InitAsDefaultInstance() {
  ::proto::dota::_CMsgGCToClientFindTopSourceTVGamesResponse_default_instance_._instance.get_mutable()->bot_game_ = const_cast< ::proto::dota::CSourceTVGameSmall*>(
      ::proto::dota::CSourceTVGameSmall::internal_default_instance());
}
class CMsgGCToClientFindTopSourceTVGamesResponse::HasBitSetters {
 public:
  static void set_has_search_key(CMsgGCToClientFindTopSourceTVGamesResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_league_id(CMsgGCToClientFindTopSourceTVGamesResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_hero_id(CMsgGCToClientFindTopSourceTVGamesResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_start_game(CMsgGCToClientFindTopSourceTVGamesResponse* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_num_games(CMsgGCToClientFindTopSourceTVGamesResponse* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_game_list_index(CMsgGCToClientFindTopSourceTVGamesResponse* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_specific_games(CMsgGCToClientFindTopSourceTVGamesResponse* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static const ::proto::dota::CSourceTVGameSmall& bot_game(const CMsgGCToClientFindTopSourceTVGamesResponse* msg);
  static void set_has_bot_game(CMsgGCToClientFindTopSourceTVGamesResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::proto::dota::CSourceTVGameSmall&
CMsgGCToClientFindTopSourceTVGamesResponse::HasBitSetters::bot_game(const CMsgGCToClientFindTopSourceTVGamesResponse* msg) {
  return *msg->bot_game_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientFindTopSourceTVGamesResponse::kSearchKeyFieldNumber;
const int CMsgGCToClientFindTopSourceTVGamesResponse::kLeagueIdFieldNumber;
const int CMsgGCToClientFindTopSourceTVGamesResponse::kHeroIdFieldNumber;
const int CMsgGCToClientFindTopSourceTVGamesResponse::kStartGameFieldNumber;
const int CMsgGCToClientFindTopSourceTVGamesResponse::kNumGamesFieldNumber;
const int CMsgGCToClientFindTopSourceTVGamesResponse::kGameListIndexFieldNumber;
const int CMsgGCToClientFindTopSourceTVGamesResponse::kGameListFieldNumber;
const int CMsgGCToClientFindTopSourceTVGamesResponse::kSpecificGamesFieldNumber;
const int CMsgGCToClientFindTopSourceTVGamesResponse::kBotGameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientFindTopSourceTVGamesResponse::CMsgGCToClientFindTopSourceTVGamesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
}
CMsgGCToClientFindTopSourceTVGamesResponse::CMsgGCToClientFindTopSourceTVGamesResponse(const CMsgGCToClientFindTopSourceTVGamesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      game_list_(from.game_list_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  search_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_search_key()) {
    search_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_key_);
  }
  if (from.has_bot_game()) {
    bot_game_ = new ::proto::dota::CSourceTVGameSmall(*from.bot_game_);
  } else {
    bot_game_ = nullptr;
  }
  ::memcpy(&league_id_, &from.league_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&specific_games_) -
    reinterpret_cast<char*>(&league_id_)) + sizeof(specific_games_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
}

void CMsgGCToClientFindTopSourceTVGamesResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCToClientFindTopSourceTVGamesResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  search_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bot_game_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&specific_games_) -
      reinterpret_cast<char*>(&bot_game_)) + sizeof(specific_games_));
}

CMsgGCToClientFindTopSourceTVGamesResponse::~CMsgGCToClientFindTopSourceTVGamesResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
  SharedDtor();
}

void CMsgGCToClientFindTopSourceTVGamesResponse::SharedDtor() {
  search_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bot_game_;
}

void CMsgGCToClientFindTopSourceTVGamesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToClientFindTopSourceTVGamesResponse& CMsgGCToClientFindTopSourceTVGamesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToClientFindTopSourceTVGamesResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToClientFindTopSourceTVGamesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_list_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      search_key_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(bot_game_ != nullptr);
      bot_game_->Clear();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&league_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&specific_games_) -
        reinterpret_cast<char*>(&league_id_)) + sizeof(specific_games_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToClientFindTopSourceTVGamesResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToClientFindTopSourceTVGamesResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string search_key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key");
        object = msg->mutable_search_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 league_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 start_game = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_start_game(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 num_games = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_num_games(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 game_list_index = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_game_list_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CSourceTVGameSmall game_list = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CSourceTVGameSmall::_InternalParse;
          object = msg->add_game_list();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 58 && (ptr += 1));
        break;
      }
      // optional bool specific_games = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_specific_games(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CSourceTVGameSmall bot_game = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CSourceTVGameSmall::_InternalParse;
        object = msg->mutable_bot_game();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToClientFindTopSourceTVGamesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string search_key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_search_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->search_key().data(), static_cast<int>(this->search_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 start_game = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_start_game(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_games = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_num_games(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_games_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 game_list_index = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_game_list_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &game_list_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CSourceTVGameSmall game_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_game_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool specific_games = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_specific_games(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &specific_games_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CSourceTVGameSmall bot_game = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bot_game()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToClientFindTopSourceTVGamesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), static_cast<int>(this->search_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->search_key(), output);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->league_id(), output);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  // optional uint32 start_game = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start_game(), output);
  }

  // optional uint32 num_games = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num_games(), output);
  }

  // optional uint32 game_list_index = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->game_list_index(), output);
  }

  // repeated .proto.dota.CSourceTVGameSmall game_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->game_list_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->game_list(static_cast<int>(i)),
      output);
  }

  // optional bool specific_games = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->specific_games(), output);
  }

  // optional .proto.dota.CSourceTVGameSmall bot_game = 9;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::bot_game(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
}

::google::protobuf::uint8* CMsgGCToClientFindTopSourceTVGamesResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string search_key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->search_key().data(), static_cast<int>(this->search_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse.search_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->search_key(), target);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->league_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  // optional uint32 start_game = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start_game(), target);
  }

  // optional uint32 num_games = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num_games(), target);
  }

  // optional uint32 game_list_index = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->game_list_index(), target);
  }

  // repeated .proto.dota.CSourceTVGameSmall game_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->game_list_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->game_list(static_cast<int>(i)), target);
  }

  // optional bool specific_games = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->specific_games(), target);
  }

  // optional .proto.dota.CSourceTVGameSmall bot_game = 9;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::bot_game(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
  return target;
}

size_t CMsgGCToClientFindTopSourceTVGamesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CSourceTVGameSmall game_list = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->game_list_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->game_list(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string search_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->search_key());
    }

    // optional .proto.dota.CSourceTVGameSmall bot_game = 9;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *bot_game_);
    }

    // optional uint32 league_id = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 start_game = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_game());
    }

    // optional uint32 num_games = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_games());
    }

    // optional uint32 game_list_index = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->game_list_index());
    }

    // optional bool specific_games = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientFindTopSourceTVGamesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientFindTopSourceTVGamesResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToClientFindTopSourceTVGamesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToClientFindTopSourceTVGamesResponse::MergeFrom(const CMsgGCToClientFindTopSourceTVGamesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  game_list_.MergeFrom(from.game_list_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      search_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.search_key_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_bot_game()->::proto::dota::CSourceTVGameSmall::MergeFrom(from.bot_game());
    }
    if (cached_has_bits & 0x00000004u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      start_game_ = from.start_game_;
    }
    if (cached_has_bits & 0x00000020u) {
      num_games_ = from.num_games_;
    }
    if (cached_has_bits & 0x00000040u) {
      game_list_index_ = from.game_list_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      specific_games_ = from.specific_games_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientFindTopSourceTVGamesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientFindTopSourceTVGamesResponse::CopyFrom(const CMsgGCToClientFindTopSourceTVGamesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientFindTopSourceTVGamesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientFindTopSourceTVGamesResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientFindTopSourceTVGamesResponse::Swap(CMsgGCToClientFindTopSourceTVGamesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientFindTopSourceTVGamesResponse::InternalSwap(CMsgGCToClientFindTopSourceTVGamesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&game_list_)->InternalSwap(CastToBase(&other->game_list_));
  search_key_.Swap(&other->search_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(bot_game_, other->bot_game_);
  swap(league_id_, other->league_id_);
  swap(hero_id_, other->hero_id_);
  swap(start_game_, other->start_game_);
  swap(num_games_, other->num_games_);
  swap(game_list_index_, other->game_list_index_);
  swap(specific_games_, other->specific_games_);
}

::google::protobuf::Metadata CMsgGCToClientFindTopSourceTVGamesResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToClientTopWeekendTourneyGames::InitAsDefaultInstance() {
}
class CMsgGCToClientTopWeekendTourneyGames::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientTopWeekendTourneyGames::kLiveGamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientTopWeekendTourneyGames::CMsgGCToClientTopWeekendTourneyGames()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
}
CMsgGCToClientTopWeekendTourneyGames::CMsgGCToClientTopWeekendTourneyGames(const CMsgGCToClientTopWeekendTourneyGames& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      live_games_(from.live_games_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
}

void CMsgGCToClientTopWeekendTourneyGames::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCToClientTopWeekendTourneyGames_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
}

CMsgGCToClientTopWeekendTourneyGames::~CMsgGCToClientTopWeekendTourneyGames() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
  SharedDtor();
}

void CMsgGCToClientTopWeekendTourneyGames::SharedDtor() {
}

void CMsgGCToClientTopWeekendTourneyGames::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToClientTopWeekendTourneyGames& CMsgGCToClientTopWeekendTourneyGames::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToClientTopWeekendTourneyGames_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToClientTopWeekendTourneyGames::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  live_games_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToClientTopWeekendTourneyGames::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToClientTopWeekendTourneyGames*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CSourceTVGameSmall live_games = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CSourceTVGameSmall::_InternalParse;
          object = msg->add_live_games();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToClientTopWeekendTourneyGames::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CSourceTVGameSmall live_games = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_live_games()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToClientTopWeekendTourneyGames::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CSourceTVGameSmall live_games = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->live_games_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->live_games(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
}

::google::protobuf::uint8* CMsgGCToClientTopWeekendTourneyGames::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CSourceTVGameSmall live_games = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->live_games_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->live_games(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
  return target;
}

size_t CMsgGCToClientTopWeekendTourneyGames::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CSourceTVGameSmall live_games = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->live_games_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->live_games(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientTopWeekendTourneyGames::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientTopWeekendTourneyGames* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToClientTopWeekendTourneyGames>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
    MergeFrom(*source);
  }
}

void CMsgGCToClientTopWeekendTourneyGames::MergeFrom(const CMsgGCToClientTopWeekendTourneyGames& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  live_games_.MergeFrom(from.live_games_);
}

void CMsgGCToClientTopWeekendTourneyGames::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientTopWeekendTourneyGames::CopyFrom(const CMsgGCToClientTopWeekendTourneyGames& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientTopWeekendTourneyGames)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientTopWeekendTourneyGames::IsInitialized() const {
  return true;
}

void CMsgGCToClientTopWeekendTourneyGames::Swap(CMsgGCToClientTopWeekendTourneyGames* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientTopWeekendTourneyGames::InternalSwap(CMsgGCToClientTopWeekendTourneyGames* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&live_games_)->InternalSwap(CastToBase(&other->live_games_));
}

::google::protobuf::Metadata CMsgGCToClientTopWeekendTourneyGames::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientToGCTopMatchesRequest::InitAsDefaultInstance() {
}
class CMsgClientToGCTopMatchesRequest::HasBitSetters {
 public:
  static void set_has_hero_id(CMsgClientToGCTopMatchesRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_player_account_id(CMsgClientToGCTopMatchesRequest* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_team_id(CMsgClientToGCTopMatchesRequest* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCTopMatchesRequest::kHeroIdFieldNumber;
const int CMsgClientToGCTopMatchesRequest::kPlayerAccountIdFieldNumber;
const int CMsgClientToGCTopMatchesRequest::kTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCTopMatchesRequest::CMsgClientToGCTopMatchesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCTopMatchesRequest)
}
CMsgClientToGCTopMatchesRequest::CMsgClientToGCTopMatchesRequest(const CMsgClientToGCTopMatchesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hero_id_, &from.hero_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_id_) -
    reinterpret_cast<char*>(&hero_id_)) + sizeof(team_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCTopMatchesRequest)
}

void CMsgClientToGCTopMatchesRequest::SharedCtor() {
  ::memset(&hero_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_id_) -
      reinterpret_cast<char*>(&hero_id_)) + sizeof(team_id_));
}

CMsgClientToGCTopMatchesRequest::~CMsgClientToGCTopMatchesRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCTopMatchesRequest)
  SharedDtor();
}

void CMsgClientToGCTopMatchesRequest::SharedDtor() {
}

void CMsgClientToGCTopMatchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientToGCTopMatchesRequest& CMsgClientToGCTopMatchesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientToGCTopMatchesRequest_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientToGCTopMatchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCTopMatchesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&hero_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_id_) -
        reinterpret_cast<char*>(&hero_id_)) + sizeof(team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientToGCTopMatchesRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientToGCTopMatchesRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 player_account_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_player_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientToGCTopMatchesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCTopMatchesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 hero_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 player_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_player_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &player_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCTopMatchesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCTopMatchesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientToGCTopMatchesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCTopMatchesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->hero_id(), output);
  }

  // optional uint32 player_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->player_account_id(), output);
  }

  // optional uint32 team_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCTopMatchesRequest)
}

::google::protobuf::uint8* CMsgClientToGCTopMatchesRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCTopMatchesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 hero_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->hero_id(), target);
  }

  // optional uint32 player_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->player_account_id(), target);
  }

  // optional uint32 team_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCTopMatchesRequest)
  return target;
}

size_t CMsgClientToGCTopMatchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCTopMatchesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 hero_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 player_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->player_account_id());
    }

    // optional uint32 team_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCTopMatchesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCTopMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCTopMatchesRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientToGCTopMatchesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCTopMatchesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCTopMatchesRequest)
    MergeFrom(*source);
  }
}

void CMsgClientToGCTopMatchesRequest::MergeFrom(const CMsgClientToGCTopMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCTopMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      player_account_id_ = from.player_account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      team_id_ = from.team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCTopMatchesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCTopMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCTopMatchesRequest::CopyFrom(const CMsgClientToGCTopMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCTopMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCTopMatchesRequest::IsInitialized() const {
  return true;
}

void CMsgClientToGCTopMatchesRequest::Swap(CMsgClientToGCTopMatchesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCTopMatchesRequest::InternalSwap(CMsgClientToGCTopMatchesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hero_id_, other->hero_id_);
  swap(player_account_id_, other->player_account_id_);
  swap(team_id_, other->team_id_);
}

::google::protobuf::Metadata CMsgClientToGCTopMatchesRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientToGCTopLeagueMatchesRequest::InitAsDefaultInstance() {
}
class CMsgClientToGCTopLeagueMatchesRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCTopLeagueMatchesRequest::CMsgClientToGCTopLeagueMatchesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
}
CMsgClientToGCTopLeagueMatchesRequest::CMsgClientToGCTopLeagueMatchesRequest(const CMsgClientToGCTopLeagueMatchesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
}

void CMsgClientToGCTopLeagueMatchesRequest::SharedCtor() {
}

CMsgClientToGCTopLeagueMatchesRequest::~CMsgClientToGCTopLeagueMatchesRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
  SharedDtor();
}

void CMsgClientToGCTopLeagueMatchesRequest::SharedDtor() {
}

void CMsgClientToGCTopLeagueMatchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientToGCTopLeagueMatchesRequest& CMsgClientToGCTopLeagueMatchesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientToGCTopLeagueMatchesRequest_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientToGCTopLeagueMatchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientToGCTopLeagueMatchesRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientToGCTopLeagueMatchesRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientToGCTopLeagueMatchesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientToGCTopLeagueMatchesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
}

::google::protobuf::uint8* CMsgClientToGCTopLeagueMatchesRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
  return target;
}

size_t CMsgClientToGCTopLeagueMatchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCTopLeagueMatchesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCTopLeagueMatchesRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientToGCTopLeagueMatchesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
    MergeFrom(*source);
  }
}

void CMsgClientToGCTopLeagueMatchesRequest::MergeFrom(const CMsgClientToGCTopLeagueMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgClientToGCTopLeagueMatchesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCTopLeagueMatchesRequest::CopyFrom(const CMsgClientToGCTopLeagueMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCTopLeagueMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCTopLeagueMatchesRequest::IsInitialized() const {
  return true;
}

void CMsgClientToGCTopLeagueMatchesRequest::Swap(CMsgClientToGCTopLeagueMatchesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCTopLeagueMatchesRequest::InternalSwap(CMsgClientToGCTopLeagueMatchesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgClientToGCTopLeagueMatchesRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientToGCTopFriendMatchesRequest::InitAsDefaultInstance() {
}
class CMsgClientToGCTopFriendMatchesRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCTopFriendMatchesRequest::CMsgClientToGCTopFriendMatchesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
}
CMsgClientToGCTopFriendMatchesRequest::CMsgClientToGCTopFriendMatchesRequest(const CMsgClientToGCTopFriendMatchesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
}

void CMsgClientToGCTopFriendMatchesRequest::SharedCtor() {
}

CMsgClientToGCTopFriendMatchesRequest::~CMsgClientToGCTopFriendMatchesRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
  SharedDtor();
}

void CMsgClientToGCTopFriendMatchesRequest::SharedDtor() {
}

void CMsgClientToGCTopFriendMatchesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientToGCTopFriendMatchesRequest& CMsgClientToGCTopFriendMatchesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientToGCTopFriendMatchesRequest_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientToGCTopFriendMatchesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientToGCTopFriendMatchesRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientToGCTopFriendMatchesRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientToGCTopFriendMatchesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientToGCTopFriendMatchesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
}

::google::protobuf::uint8* CMsgClientToGCTopFriendMatchesRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
  return target;
}

size_t CMsgClientToGCTopFriendMatchesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCTopFriendMatchesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCTopFriendMatchesRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientToGCTopFriendMatchesRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
    MergeFrom(*source);
  }
}

void CMsgClientToGCTopFriendMatchesRequest::MergeFrom(const CMsgClientToGCTopFriendMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgClientToGCTopFriendMatchesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCTopFriendMatchesRequest::CopyFrom(const CMsgClientToGCTopFriendMatchesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCTopFriendMatchesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCTopFriendMatchesRequest::IsInitialized() const {
  return true;
}

void CMsgClientToGCTopFriendMatchesRequest::Swap(CMsgClientToGCTopFriendMatchesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCTopFriendMatchesRequest::InternalSwap(CMsgClientToGCTopFriendMatchesRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgClientToGCTopFriendMatchesRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientToGCMatchesMinimalRequest::InitAsDefaultInstance() {
}
class CMsgClientToGCMatchesMinimalRequest::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCMatchesMinimalRequest::kMatchIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCMatchesMinimalRequest::CMsgClientToGCMatchesMinimalRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCMatchesMinimalRequest)
}
CMsgClientToGCMatchesMinimalRequest::CMsgClientToGCMatchesMinimalRequest(const CMsgClientToGCMatchesMinimalRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      match_ids_(from.match_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCMatchesMinimalRequest)
}

void CMsgClientToGCMatchesMinimalRequest::SharedCtor() {
}

CMsgClientToGCMatchesMinimalRequest::~CMsgClientToGCMatchesMinimalRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCMatchesMinimalRequest)
  SharedDtor();
}

void CMsgClientToGCMatchesMinimalRequest::SharedDtor() {
}

void CMsgClientToGCMatchesMinimalRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientToGCMatchesMinimalRequest& CMsgClientToGCMatchesMinimalRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientToGCMatchesMinimalRequest_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientToGCMatchesMinimalRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCMatchesMinimalRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_ids_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientToGCMatchesMinimalRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientToGCMatchesMinimalRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint64 match_ids = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_match_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt64Parser;
        object = msg->mutable_match_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientToGCMatchesMinimalRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCMatchesMinimalRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 match_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8u, input, this->mutable_match_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_match_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCMatchesMinimalRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCMatchesMinimalRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientToGCMatchesMinimalRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCMatchesMinimalRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 match_ids = 1;
  for (int i = 0, n = this->match_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->match_ids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCMatchesMinimalRequest)
}

::google::protobuf::uint8* CMsgClientToGCMatchesMinimalRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCMatchesMinimalRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 match_ids = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(1, this->match_ids_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCMatchesMinimalRequest)
  return target;
}

size_t CMsgClientToGCMatchesMinimalRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCMatchesMinimalRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 match_ids = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->match_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->match_ids_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCMatchesMinimalRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCMatchesMinimalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCMatchesMinimalRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientToGCMatchesMinimalRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCMatchesMinimalRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCMatchesMinimalRequest)
    MergeFrom(*source);
  }
}

void CMsgClientToGCMatchesMinimalRequest::MergeFrom(const CMsgClientToGCMatchesMinimalRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCMatchesMinimalRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_ids_.MergeFrom(from.match_ids_);
}

void CMsgClientToGCMatchesMinimalRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCMatchesMinimalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCMatchesMinimalRequest::CopyFrom(const CMsgClientToGCMatchesMinimalRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCMatchesMinimalRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCMatchesMinimalRequest::IsInitialized() const {
  return true;
}

void CMsgClientToGCMatchesMinimalRequest::Swap(CMsgClientToGCMatchesMinimalRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCMatchesMinimalRequest::InternalSwap(CMsgClientToGCMatchesMinimalRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  match_ids_.InternalSwap(&other->match_ids_);
}

::google::protobuf::Metadata CMsgClientToGCMatchesMinimalRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientToGCMatchesMinimalResponse::InitAsDefaultInstance() {
}
class CMsgClientToGCMatchesMinimalResponse::HasBitSetters {
 public:
  static void set_has_last_match(CMsgClientToGCMatchesMinimalResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

void CMsgClientToGCMatchesMinimalResponse::clear_matches() {
  matches_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCMatchesMinimalResponse::kMatchesFieldNumber;
const int CMsgClientToGCMatchesMinimalResponse::kLastMatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCMatchesMinimalResponse::CMsgClientToGCMatchesMinimalResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCMatchesMinimalResponse)
}
CMsgClientToGCMatchesMinimalResponse::CMsgClientToGCMatchesMinimalResponse(const CMsgClientToGCMatchesMinimalResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      matches_(from.matches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  last_match_ = from.last_match_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCMatchesMinimalResponse)
}

void CMsgClientToGCMatchesMinimalResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientToGCMatchesMinimalResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  last_match_ = false;
}

CMsgClientToGCMatchesMinimalResponse::~CMsgClientToGCMatchesMinimalResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCMatchesMinimalResponse)
  SharedDtor();
}

void CMsgClientToGCMatchesMinimalResponse::SharedDtor() {
}

void CMsgClientToGCMatchesMinimalResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientToGCMatchesMinimalResponse& CMsgClientToGCMatchesMinimalResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientToGCMatchesMinimalResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientToGCMatchesMinimalResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCMatchesMinimalResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matches_.Clear();
  last_match_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientToGCMatchesMinimalResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientToGCMatchesMinimalResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAMatchMinimal::_InternalParse;
          object = msg->add_matches();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      // optional bool last_match = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_last_match(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientToGCMatchesMinimalResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCMatchesMinimalResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool last_match = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_last_match(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &last_match_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCMatchesMinimalResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCMatchesMinimalResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientToGCMatchesMinimalResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCMatchesMinimalResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matches_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->matches(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool last_match = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->last_match(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCMatchesMinimalResponse)
}

::google::protobuf::uint8* CMsgClientToGCMatchesMinimalResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCMatchesMinimalResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matches_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->matches(static_cast<int>(i)), target);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool last_match = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->last_match(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCMatchesMinimalResponse)
  return target;
}

size_t CMsgClientToGCMatchesMinimalResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCMatchesMinimalResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->matches_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->matches(static_cast<int>(i)));
    }
  }

  // optional bool last_match = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCMatchesMinimalResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCMatchesMinimalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCMatchesMinimalResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientToGCMatchesMinimalResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCMatchesMinimalResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCMatchesMinimalResponse)
    MergeFrom(*source);
  }
}

void CMsgClientToGCMatchesMinimalResponse::MergeFrom(const CMsgClientToGCMatchesMinimalResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCMatchesMinimalResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matches_.MergeFrom(from.matches_);
  if (from.has_last_match()) {
    set_last_match(from.last_match());
  }
}

void CMsgClientToGCMatchesMinimalResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCMatchesMinimalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCMatchesMinimalResponse::CopyFrom(const CMsgClientToGCMatchesMinimalResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCMatchesMinimalResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCMatchesMinimalResponse::IsInitialized() const {
  return true;
}

void CMsgClientToGCMatchesMinimalResponse::Swap(CMsgClientToGCMatchesMinimalResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCMatchesMinimalResponse::InternalSwap(CMsgClientToGCMatchesMinimalResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&matches_)->InternalSwap(CastToBase(&other->matches_));
  swap(last_match_, other->last_match_);
}

::google::protobuf::Metadata CMsgClientToGCMatchesMinimalResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToClientTopLeagueMatchesResponse::InitAsDefaultInstance() {
}
class CMsgGCToClientTopLeagueMatchesResponse::HasBitSetters {
 public:
};

void CMsgGCToClientTopLeagueMatchesResponse::clear_matches() {
  matches_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientTopLeagueMatchesResponse::kMatchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientTopLeagueMatchesResponse::CMsgGCToClientTopLeagueMatchesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
}
CMsgGCToClientTopLeagueMatchesResponse::CMsgGCToClientTopLeagueMatchesResponse(const CMsgGCToClientTopLeagueMatchesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      matches_(from.matches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
}

void CMsgGCToClientTopLeagueMatchesResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCToClientTopLeagueMatchesResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
}

CMsgGCToClientTopLeagueMatchesResponse::~CMsgGCToClientTopLeagueMatchesResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
  SharedDtor();
}

void CMsgGCToClientTopLeagueMatchesResponse::SharedDtor() {
}

void CMsgGCToClientTopLeagueMatchesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToClientTopLeagueMatchesResponse& CMsgGCToClientTopLeagueMatchesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToClientTopLeagueMatchesResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToClientTopLeagueMatchesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matches_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToClientTopLeagueMatchesResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToClientTopLeagueMatchesResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAMatchMinimal::_InternalParse;
          object = msg->add_matches();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToClientTopLeagueMatchesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToClientTopLeagueMatchesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matches_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->matches(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
}

::google::protobuf::uint8* CMsgGCToClientTopLeagueMatchesResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matches_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->matches(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
  return target;
}

size_t CMsgGCToClientTopLeagueMatchesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->matches_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->matches(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientTopLeagueMatchesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientTopLeagueMatchesResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToClientTopLeagueMatchesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToClientTopLeagueMatchesResponse::MergeFrom(const CMsgGCToClientTopLeagueMatchesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matches_.MergeFrom(from.matches_);
}

void CMsgGCToClientTopLeagueMatchesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientTopLeagueMatchesResponse::CopyFrom(const CMsgGCToClientTopLeagueMatchesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientTopLeagueMatchesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientTopLeagueMatchesResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientTopLeagueMatchesResponse::Swap(CMsgGCToClientTopLeagueMatchesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientTopLeagueMatchesResponse::InternalSwap(CMsgGCToClientTopLeagueMatchesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&matches_)->InternalSwap(CastToBase(&other->matches_));
}

::google::protobuf::Metadata CMsgGCToClientTopLeagueMatchesResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToClientTopFriendMatchesResponse::InitAsDefaultInstance() {
}
class CMsgGCToClientTopFriendMatchesResponse::HasBitSetters {
 public:
};

void CMsgGCToClientTopFriendMatchesResponse::clear_matches() {
  matches_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientTopFriendMatchesResponse::kMatchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientTopFriendMatchesResponse::CMsgGCToClientTopFriendMatchesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
}
CMsgGCToClientTopFriendMatchesResponse::CMsgGCToClientTopFriendMatchesResponse(const CMsgGCToClientTopFriendMatchesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      matches_(from.matches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
}

void CMsgGCToClientTopFriendMatchesResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCToClientTopFriendMatchesResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
}

CMsgGCToClientTopFriendMatchesResponse::~CMsgGCToClientTopFriendMatchesResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
  SharedDtor();
}

void CMsgGCToClientTopFriendMatchesResponse::SharedDtor() {
}

void CMsgGCToClientTopFriendMatchesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToClientTopFriendMatchesResponse& CMsgGCToClientTopFriendMatchesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToClientTopFriendMatchesResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToClientTopFriendMatchesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  matches_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToClientTopFriendMatchesResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToClientTopFriendMatchesResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAMatchMinimal::_InternalParse;
          object = msg->add_matches();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToClientTopFriendMatchesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToClientTopFriendMatchesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matches_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->matches(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
}

::google::protobuf::uint8* CMsgGCToClientTopFriendMatchesResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matches_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->matches(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
  return target;
}

size_t CMsgGCToClientTopFriendMatchesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAMatchMinimal matches = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->matches_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->matches(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientTopFriendMatchesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientTopFriendMatchesResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToClientTopFriendMatchesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToClientTopFriendMatchesResponse::MergeFrom(const CMsgGCToClientTopFriendMatchesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  matches_.MergeFrom(from.matches_);
}

void CMsgGCToClientTopFriendMatchesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientTopFriendMatchesResponse::CopyFrom(const CMsgGCToClientTopFriendMatchesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientTopFriendMatchesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientTopFriendMatchesResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientTopFriendMatchesResponse::Swap(CMsgGCToClientTopFriendMatchesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientTopFriendMatchesResponse::InternalSwap(CMsgGCToClientTopFriendMatchesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&matches_)->InternalSwap(CastToBase(&other->matches_));
}

::google::protobuf::Metadata CMsgGCToClientTopFriendMatchesResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientToGCFindTopMatches::InitAsDefaultInstance() {
}
class CMsgClientToGCFindTopMatches::HasBitSetters {
 public:
  static void set_has_start_game(CMsgClientToGCFindTopMatches* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_league_id(CMsgClientToGCFindTopMatches* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_hero_id(CMsgClientToGCFindTopMatches* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_friend_id(CMsgClientToGCFindTopMatches* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_friend_list(CMsgClientToGCFindTopMatches* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_league_list(CMsgClientToGCFindTopMatches* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCFindTopMatches::kStartGameFieldNumber;
const int CMsgClientToGCFindTopMatches::kLeagueIdFieldNumber;
const int CMsgClientToGCFindTopMatches::kHeroIdFieldNumber;
const int CMsgClientToGCFindTopMatches::kFriendIdFieldNumber;
const int CMsgClientToGCFindTopMatches::kFriendListFieldNumber;
const int CMsgClientToGCFindTopMatches::kLeagueListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCFindTopMatches::CMsgClientToGCFindTopMatches()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCFindTopMatches)
}
CMsgClientToGCFindTopMatches::CMsgClientToGCFindTopMatches(const CMsgClientToGCFindTopMatches& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_game_, &from.start_game_,
    static_cast<size_t>(reinterpret_cast<char*>(&league_list_) -
    reinterpret_cast<char*>(&start_game_)) + sizeof(league_list_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCFindTopMatches)
}

void CMsgClientToGCFindTopMatches::SharedCtor() {
  ::memset(&start_game_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&league_list_) -
      reinterpret_cast<char*>(&start_game_)) + sizeof(league_list_));
}

CMsgClientToGCFindTopMatches::~CMsgClientToGCFindTopMatches() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCFindTopMatches)
  SharedDtor();
}

void CMsgClientToGCFindTopMatches::SharedDtor() {
}

void CMsgClientToGCFindTopMatches::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientToGCFindTopMatches& CMsgClientToGCFindTopMatches::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientToGCFindTopMatches_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientToGCFindTopMatches::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCFindTopMatches)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&start_game_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&league_list_) -
        reinterpret_cast<char*>(&start_game_)) + sizeof(league_list_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientToGCFindTopMatches::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientToGCFindTopMatches*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 start_game = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_start_game(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 league_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 friend_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_friend_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool friend_list = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_friend_list(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool league_list = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_league_list(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientToGCFindTopMatches::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCFindTopMatches)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 start_game = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_start_game(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 friend_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_friend_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool friend_list = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_friend_list(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &friend_list_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool league_list = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_league_list(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &league_list_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCFindTopMatches)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCFindTopMatches)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientToGCFindTopMatches::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCFindTopMatches)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 start_game = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->start_game(), output);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->league_id(), output);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  // optional uint32 friend_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->friend_id(), output);
  }

  // optional bool friend_list = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->friend_list(), output);
  }

  // optional bool league_list = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->league_list(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCFindTopMatches)
}

::google::protobuf::uint8* CMsgClientToGCFindTopMatches::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCFindTopMatches)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 start_game = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->start_game(), target);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->league_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  // optional uint32 friend_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->friend_id(), target);
  }

  // optional bool friend_list = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->friend_list(), target);
  }

  // optional bool league_list = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->league_list(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCFindTopMatches)
  return target;
}

size_t CMsgClientToGCFindTopMatches::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCFindTopMatches)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional uint32 start_game = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_game());
    }

    // optional uint32 league_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

    // optional uint32 friend_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_id());
    }

    // optional bool friend_list = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

    // optional bool league_list = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCFindTopMatches::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCFindTopMatches)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCFindTopMatches* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientToGCFindTopMatches>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCFindTopMatches)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCFindTopMatches)
    MergeFrom(*source);
  }
}

void CMsgClientToGCFindTopMatches::MergeFrom(const CMsgClientToGCFindTopMatches& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCFindTopMatches)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      start_game_ = from.start_game_;
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      friend_id_ = from.friend_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      friend_list_ = from.friend_list_;
    }
    if (cached_has_bits & 0x00000020u) {
      league_list_ = from.league_list_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCFindTopMatches::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCFindTopMatches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCFindTopMatches::CopyFrom(const CMsgClientToGCFindTopMatches& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCFindTopMatches)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCFindTopMatches::IsInitialized() const {
  return true;
}

void CMsgClientToGCFindTopMatches::Swap(CMsgClientToGCFindTopMatches* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCFindTopMatches::InternalSwap(CMsgClientToGCFindTopMatches* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(start_game_, other->start_game_);
  swap(league_id_, other->league_id_);
  swap(hero_id_, other->hero_id_);
  swap(friend_id_, other->friend_id_);
  swap(friend_list_, other->friend_list_);
  swap(league_list_, other->league_list_);
}

::google::protobuf::Metadata CMsgClientToGCFindTopMatches::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToClientFindTopLeagueMatchesResponse::InitAsDefaultInstance() {
}
class CMsgGCToClientFindTopLeagueMatchesResponse::HasBitSetters {
 public:
  static void set_has_start_game(CMsgGCToClientFindTopLeagueMatchesResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_league_id(CMsgGCToClientFindTopLeagueMatchesResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_hero_id(CMsgGCToClientFindTopLeagueMatchesResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

void CMsgGCToClientFindTopLeagueMatchesResponse::clear_matches() {
  matches_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientFindTopLeagueMatchesResponse::kStartGameFieldNumber;
const int CMsgGCToClientFindTopLeagueMatchesResponse::kLeagueIdFieldNumber;
const int CMsgGCToClientFindTopLeagueMatchesResponse::kHeroIdFieldNumber;
const int CMsgGCToClientFindTopLeagueMatchesResponse::kMatchIdsFieldNumber;
const int CMsgGCToClientFindTopLeagueMatchesResponse::kMatchesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientFindTopLeagueMatchesResponse::CMsgGCToClientFindTopLeagueMatchesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
}
CMsgGCToClientFindTopLeagueMatchesResponse::CMsgGCToClientFindTopLeagueMatchesResponse(const CMsgGCToClientFindTopLeagueMatchesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      match_ids_(from.match_ids_),
      matches_(from.matches_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&start_game_, &from.start_game_,
    static_cast<size_t>(reinterpret_cast<char*>(&hero_id_) -
    reinterpret_cast<char*>(&start_game_)) + sizeof(hero_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
}

void CMsgGCToClientFindTopLeagueMatchesResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCToClientFindTopLeagueMatchesResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::memset(&start_game_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hero_id_) -
      reinterpret_cast<char*>(&start_game_)) + sizeof(hero_id_));
}

CMsgGCToClientFindTopLeagueMatchesResponse::~CMsgGCToClientFindTopLeagueMatchesResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
  SharedDtor();
}

void CMsgGCToClientFindTopLeagueMatchesResponse::SharedDtor() {
}

void CMsgGCToClientFindTopLeagueMatchesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToClientFindTopLeagueMatchesResponse& CMsgGCToClientFindTopLeagueMatchesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToClientFindTopLeagueMatchesResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToClientFindTopLeagueMatchesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_ids_.Clear();
  matches_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&start_game_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&hero_id_) -
        reinterpret_cast<char*>(&start_game_)) + sizeof(hero_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToClientFindTopLeagueMatchesResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToClientFindTopLeagueMatchesResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 start_game = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_start_game(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 league_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_league_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 match_ids = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) == 32) {
          do {
            msg->add_match_ids(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 32 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_match_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated .proto.dota.CMsgDOTAMatch matches = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAMatch::_InternalParse;
          object = msg->add_matches();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToClientFindTopLeagueMatchesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 start_game = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_start_game(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 league_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_league_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &league_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hero_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 match_ids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 32u, input, this->mutable_match_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_match_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAMatch matches = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_matches()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToClientFindTopLeagueMatchesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 start_game = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->start_game(), output);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->league_id(), output);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->hero_id(), output);
  }

  // repeated uint32 match_ids = 4;
  for (int i = 0, n = this->match_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      4, this->match_ids(i), output);
  }

  // repeated .proto.dota.CMsgDOTAMatch matches = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matches_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->matches(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
}

::google::protobuf::uint8* CMsgGCToClientFindTopLeagueMatchesResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 start_game = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->start_game(), target);
  }

  // optional uint32 league_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->league_id(), target);
  }

  // optional uint32 hero_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->hero_id(), target);
  }

  // repeated uint32 match_ids = 4;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(4, this->match_ids_, target);

  // repeated .proto.dota.CMsgDOTAMatch matches = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->matches_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->matches(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
  return target;
}

size_t CMsgGCToClientFindTopLeagueMatchesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 match_ids = 4;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->match_ids_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->match_ids_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CMsgDOTAMatch matches = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->matches_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->matches(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 start_game = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start_game());
    }

    // optional uint32 league_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->league_id());
    }

    // optional uint32 hero_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hero_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientFindTopLeagueMatchesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientFindTopLeagueMatchesResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToClientFindTopLeagueMatchesResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToClientFindTopLeagueMatchesResponse::MergeFrom(const CMsgGCToClientFindTopLeagueMatchesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_ids_.MergeFrom(from.match_ids_);
  matches_.MergeFrom(from.matches_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      start_game_ = from.start_game_;
    }
    if (cached_has_bits & 0x00000002u) {
      league_id_ = from.league_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      hero_id_ = from.hero_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientFindTopLeagueMatchesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientFindTopLeagueMatchesResponse::CopyFrom(const CMsgGCToClientFindTopLeagueMatchesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientFindTopLeagueMatchesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientFindTopLeagueMatchesResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientFindTopLeagueMatchesResponse::Swap(CMsgGCToClientFindTopLeagueMatchesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientFindTopLeagueMatchesResponse::InternalSwap(CMsgGCToClientFindTopLeagueMatchesResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  match_ids_.InternalSwap(&other->match_ids_);
  CastToBase(&matches_)->InternalSwap(CastToBase(&other->matches_));
  swap(start_game_, other->start_game_);
  swap(league_id_, other->league_id_);
  swap(hero_id_, other->hero_id_);
}

::google::protobuf::Metadata CMsgGCToClientFindTopLeagueMatchesResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSpectateFriendGame::InitAsDefaultInstance() {
}
class CMsgSpectateFriendGame::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgSpectateFriendGame* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_live(CMsgSpectateFriendGame* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSpectateFriendGame::kSteamIdFieldNumber;
const int CMsgSpectateFriendGame::kLiveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSpectateFriendGame::CMsgSpectateFriendGame()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSpectateFriendGame)
}
CMsgSpectateFriendGame::CMsgSpectateFriendGame(const CMsgSpectateFriendGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&live_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(live_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSpectateFriendGame)
}

void CMsgSpectateFriendGame::SharedCtor() {
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&live_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(live_));
}

CMsgSpectateFriendGame::~CMsgSpectateFriendGame() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSpectateFriendGame)
  SharedDtor();
}

void CMsgSpectateFriendGame::SharedDtor() {
}

void CMsgSpectateFriendGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSpectateFriendGame& CMsgSpectateFriendGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSpectateFriendGame_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  return *internal_default_instance();
}


void CMsgSpectateFriendGame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSpectateFriendGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&live_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(live_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSpectateFriendGame::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSpectateFriendGame*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bool live = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_live(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSpectateFriendGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSpectateFriendGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool live = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_live(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &live_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSpectateFriendGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSpectateFriendGame)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSpectateFriendGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSpectateFriendGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional bool live = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->live(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSpectateFriendGame)
}

::google::protobuf::uint8* CMsgSpectateFriendGame::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSpectateFriendGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional bool live = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->live(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSpectateFriendGame)
  return target;
}

size_t CMsgSpectateFriendGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSpectateFriendGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional bool live = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSpectateFriendGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSpectateFriendGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSpectateFriendGame* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSpectateFriendGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSpectateFriendGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSpectateFriendGame)
    MergeFrom(*source);
  }
}

void CMsgSpectateFriendGame::MergeFrom(const CMsgSpectateFriendGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSpectateFriendGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      live_ = from.live_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSpectateFriendGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSpectateFriendGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectateFriendGame::CopyFrom(const CMsgSpectateFriendGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSpectateFriendGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectateFriendGame::IsInitialized() const {
  return true;
}

void CMsgSpectateFriendGame::Swap(CMsgSpectateFriendGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSpectateFriendGame::InternalSwap(CMsgSpectateFriendGame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(steam_id_, other->steam_id_);
  swap(live_, other->live_);
}

::google::protobuf::Metadata CMsgSpectateFriendGame::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgSpectateFriendGameResponse::InitAsDefaultInstance() {
}
class CMsgSpectateFriendGameResponse::HasBitSetters {
 public:
  static void set_has_server_steamid(CMsgSpectateFriendGameResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_watch_live_result(CMsgSpectateFriendGameResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgSpectateFriendGameResponse::kServerSteamidFieldNumber;
const int CMsgSpectateFriendGameResponse::kWatchLiveResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgSpectateFriendGameResponse::CMsgSpectateFriendGameResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgSpectateFriendGameResponse)
}
CMsgSpectateFriendGameResponse::CMsgSpectateFriendGameResponse(const CMsgSpectateFriendGameResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&watch_live_result_, &from.watch_live_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&server_steamid_) -
    reinterpret_cast<char*>(&watch_live_result_)) + sizeof(server_steamid_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgSpectateFriendGameResponse)
}

void CMsgSpectateFriendGameResponse::SharedCtor() {
  ::memset(&watch_live_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&server_steamid_) -
      reinterpret_cast<char*>(&watch_live_result_)) + sizeof(server_steamid_));
}

CMsgSpectateFriendGameResponse::~CMsgSpectateFriendGameResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgSpectateFriendGameResponse)
  SharedDtor();
}

void CMsgSpectateFriendGameResponse::SharedDtor() {
}

void CMsgSpectateFriendGameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgSpectateFriendGameResponse& CMsgSpectateFriendGameResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgSpectateFriendGameResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  return *internal_default_instance();
}


void CMsgSpectateFriendGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgSpectateFriendGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&watch_live_result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&server_steamid_) -
        reinterpret_cast<char*>(&watch_live_result_)) + sizeof(server_steamid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgSpectateFriendGameResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgSpectateFriendGameResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 server_steamid = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 33) goto handle_unusual;
        msg->set_server_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional .proto.dota.CMsgSpectateFriendGameResponse.EWatchLiveResult watch_live_result = 5 [default = SUCCESS];
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgSpectateFriendGameResponse_EWatchLiveResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(5, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_watch_live_result(static_cast<::proto::dota::CMsgSpectateFriendGameResponse_EWatchLiveResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgSpectateFriendGameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgSpectateFriendGameResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 server_steamid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (33 & 0xFF)) {
          HasBitSetters::set_has_server_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgSpectateFriendGameResponse.EWatchLiveResult watch_live_result = 5 [default = SUCCESS];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgSpectateFriendGameResponse_EWatchLiveResult_IsValid(value)) {
            set_watch_live_result(static_cast< ::proto::dota::CMsgSpectateFriendGameResponse_EWatchLiveResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                5, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgSpectateFriendGameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgSpectateFriendGameResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgSpectateFriendGameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgSpectateFriendGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steamid = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->server_steamid(), output);
  }

  // optional .proto.dota.CMsgSpectateFriendGameResponse.EWatchLiveResult watch_live_result = 5 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->watch_live_result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgSpectateFriendGameResponse)
}

::google::protobuf::uint8* CMsgSpectateFriendGameResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgSpectateFriendGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steamid = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(4, this->server_steamid(), target);
  }

  // optional .proto.dota.CMsgSpectateFriendGameResponse.EWatchLiveResult watch_live_result = 5 [default = SUCCESS];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->watch_live_result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgSpectateFriendGameResponse)
  return target;
}

size_t CMsgSpectateFriendGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgSpectateFriendGameResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CMsgSpectateFriendGameResponse.EWatchLiveResult watch_live_result = 5 [default = SUCCESS];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->watch_live_result());
    }

    // optional fixed64 server_steamid = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgSpectateFriendGameResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgSpectateFriendGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgSpectateFriendGameResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgSpectateFriendGameResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgSpectateFriendGameResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgSpectateFriendGameResponse)
    MergeFrom(*source);
  }
}

void CMsgSpectateFriendGameResponse::MergeFrom(const CMsgSpectateFriendGameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgSpectateFriendGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      watch_live_result_ = from.watch_live_result_;
    }
    if (cached_has_bits & 0x00000002u) {
      server_steamid_ = from.server_steamid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgSpectateFriendGameResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgSpectateFriendGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgSpectateFriendGameResponse::CopyFrom(const CMsgSpectateFriendGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgSpectateFriendGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgSpectateFriendGameResponse::IsInitialized() const {
  return true;
}

void CMsgSpectateFriendGameResponse::Swap(CMsgSpectateFriendGameResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgSpectateFriendGameResponse::InternalSwap(CMsgSpectateFriendGameResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(watch_live_result_, other->watch_live_result_);
  swap(server_steamid_, other->server_steamid_);
}

::google::protobuf::Metadata CMsgSpectateFriendGameResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAReplayDownloadInfo_Highlight::InitAsDefaultInstance() {
}
class CDOTAReplayDownloadInfo_Highlight::HasBitSetters {
 public:
  static void set_has_timestamp(CDOTAReplayDownloadInfo_Highlight* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_description(CDOTAReplayDownloadInfo_Highlight* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAReplayDownloadInfo_Highlight::kTimestampFieldNumber;
const int CDOTAReplayDownloadInfo_Highlight::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAReplayDownloadInfo_Highlight::CDOTAReplayDownloadInfo_Highlight()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAReplayDownloadInfo.Highlight)
}
CDOTAReplayDownloadInfo_Highlight::CDOTAReplayDownloadInfo_Highlight(const CDOTAReplayDownloadInfo_Highlight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAReplayDownloadInfo.Highlight)
}

void CDOTAReplayDownloadInfo_Highlight::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAReplayDownloadInfo_Highlight_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = 0u;
}

CDOTAReplayDownloadInfo_Highlight::~CDOTAReplayDownloadInfo_Highlight() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAReplayDownloadInfo.Highlight)
  SharedDtor();
}

void CDOTAReplayDownloadInfo_Highlight::SharedDtor() {
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTAReplayDownloadInfo_Highlight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAReplayDownloadInfo_Highlight& CDOTAReplayDownloadInfo_Highlight::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAReplayDownloadInfo_Highlight_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  return *internal_default_instance();
}


void CDOTAReplayDownloadInfo_Highlight::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAReplayDownloadInfo.Highlight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    description_.ClearNonDefaultToEmptyNoArena();
  }
  timestamp_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAReplayDownloadInfo_Highlight::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAReplayDownloadInfo_Highlight*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 timestamp = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string description = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDOTAReplayDownloadInfo.Highlight.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAReplayDownloadInfo_Highlight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAReplayDownloadInfo.Highlight)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAReplayDownloadInfo.Highlight.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAReplayDownloadInfo.Highlight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAReplayDownloadInfo.Highlight)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAReplayDownloadInfo_Highlight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAReplayDownloadInfo.Highlight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timestamp(), output);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAReplayDownloadInfo.Highlight.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->description(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAReplayDownloadInfo.Highlight)
}

::google::protobuf::uint8* CDOTAReplayDownloadInfo_Highlight::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAReplayDownloadInfo.Highlight)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 timestamp = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timestamp(), target);
  }

  // optional string description = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAReplayDownloadInfo.Highlight.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->description(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAReplayDownloadInfo.Highlight)
  return target;
}

size_t CDOTAReplayDownloadInfo_Highlight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAReplayDownloadInfo.Highlight)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string description = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional uint32 timestamp = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAReplayDownloadInfo_Highlight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAReplayDownloadInfo.Highlight)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAReplayDownloadInfo_Highlight* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAReplayDownloadInfo_Highlight>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAReplayDownloadInfo.Highlight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAReplayDownloadInfo.Highlight)
    MergeFrom(*source);
  }
}

void CDOTAReplayDownloadInfo_Highlight::MergeFrom(const CDOTAReplayDownloadInfo_Highlight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAReplayDownloadInfo.Highlight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000002u) {
      timestamp_ = from.timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAReplayDownloadInfo_Highlight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAReplayDownloadInfo.Highlight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAReplayDownloadInfo_Highlight::CopyFrom(const CDOTAReplayDownloadInfo_Highlight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAReplayDownloadInfo.Highlight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAReplayDownloadInfo_Highlight::IsInitialized() const {
  return true;
}

void CDOTAReplayDownloadInfo_Highlight::Swap(CDOTAReplayDownloadInfo_Highlight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAReplayDownloadInfo_Highlight::InternalSwap(CDOTAReplayDownloadInfo_Highlight* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
}

::google::protobuf::Metadata CDOTAReplayDownloadInfo_Highlight::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTAReplayDownloadInfo::InitAsDefaultInstance() {
  ::proto::dota::_CDOTAReplayDownloadInfo_default_instance_._instance.get_mutable()->match_ = const_cast< ::proto::dota::CMsgDOTAMatchMinimal*>(
      ::proto::dota::CMsgDOTAMatchMinimal::internal_default_instance());
}
class CDOTAReplayDownloadInfo::HasBitSetters {
 public:
  static const ::proto::dota::CMsgDOTAMatchMinimal& match(const CDOTAReplayDownloadInfo* msg);
  static void set_has_match(CDOTAReplayDownloadInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_title(CDOTAReplayDownloadInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_description(CDOTAReplayDownloadInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_size(CDOTAReplayDownloadInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_exists_on_disk(CDOTAReplayDownloadInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

const ::proto::dota::CMsgDOTAMatchMinimal&
CDOTAReplayDownloadInfo::HasBitSetters::match(const CDOTAReplayDownloadInfo* msg) {
  return *msg->match_;
}
void CDOTAReplayDownloadInfo::clear_match() {
  if (match_ != nullptr) match_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTAReplayDownloadInfo::kMatchFieldNumber;
const int CDOTAReplayDownloadInfo::kTitleFieldNumber;
const int CDOTAReplayDownloadInfo::kDescriptionFieldNumber;
const int CDOTAReplayDownloadInfo::kSizeFieldNumber;
const int CDOTAReplayDownloadInfo::kTagsFieldNumber;
const int CDOTAReplayDownloadInfo::kExistsOnDiskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTAReplayDownloadInfo::CDOTAReplayDownloadInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTAReplayDownloadInfo)
}
CDOTAReplayDownloadInfo::CDOTAReplayDownloadInfo(const CDOTAReplayDownloadInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      tags_(from.tags_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_title()) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_description()) {
    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
  if (from.has_match()) {
    match_ = new ::proto::dota::CMsgDOTAMatchMinimal(*from.match_);
  } else {
    match_ = nullptr;
  }
  ::memcpy(&size_, &from.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&exists_on_disk_) -
    reinterpret_cast<char*>(&size_)) + sizeof(exists_on_disk_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTAReplayDownloadInfo)
}

void CDOTAReplayDownloadInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTAReplayDownloadInfo_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&match_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exists_on_disk_) -
      reinterpret_cast<char*>(&match_)) + sizeof(exists_on_disk_));
}

CDOTAReplayDownloadInfo::~CDOTAReplayDownloadInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTAReplayDownloadInfo)
  SharedDtor();
}

void CDOTAReplayDownloadInfo::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete match_;
}

void CDOTAReplayDownloadInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTAReplayDownloadInfo& CDOTAReplayDownloadInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTAReplayDownloadInfo_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  return *internal_default_instance();
}


void CDOTAReplayDownloadInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTAReplayDownloadInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tags_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      title_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      description_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(match_ != nullptr);
      match_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&size_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&exists_on_disk_) -
        reinterpret_cast<char*>(&size_)) + sizeof(exists_on_disk_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTAReplayDownloadInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTAReplayDownloadInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgDOTAMatchMinimal match = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTAMatchMinimal::_InternalParse;
        object = msg->mutable_match();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional string title = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDOTAReplayDownloadInfo.title");
        object = msg->mutable_title();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string description = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDOTAReplayDownloadInfo.description");
        object = msg->mutable_description();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 size = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_size(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string tags = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.dota.CDOTAReplayDownloadInfo.tags");
          object = msg->add_tags();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // optional bool exists_on_disk = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_exists_on_disk(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTAReplayDownloadInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTAReplayDownloadInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgDOTAMatchMinimal match = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_match()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAReplayDownloadInfo.title");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAReplayDownloadInfo.description");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_size(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string tags = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tags(this->tags_size() - 1).data(),
            static_cast<int>(this->tags(this->tags_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTAReplayDownloadInfo.tags");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool exists_on_disk = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_exists_on_disk(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exists_on_disk_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTAReplayDownloadInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTAReplayDownloadInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTAReplayDownloadInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTAReplayDownloadInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAMatchMinimal match = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::match(this), output);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAReplayDownloadInfo.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAReplayDownloadInfo.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // optional uint32 size = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->size(), output);
  }

  // repeated string tags = 5;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAReplayDownloadInfo.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->tags(i), output);
  }

  // optional bool exists_on_disk = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->exists_on_disk(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTAReplayDownloadInfo)
}

::google::protobuf::uint8* CDOTAReplayDownloadInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTAReplayDownloadInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgDOTAMatchMinimal match = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::match(this), target);
  }

  // optional string title = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAReplayDownloadInfo.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // optional string description = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAReplayDownloadInfo.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // optional uint32 size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->size(), target);
  }

  // repeated string tags = 5;
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tags(i).data(), static_cast<int>(this->tags(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTAReplayDownloadInfo.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->tags(i), target);
  }

  // optional bool exists_on_disk = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->exists_on_disk(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTAReplayDownloadInfo)
  return target;
}

size_t CDOTAReplayDownloadInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTAReplayDownloadInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->tags_size());
  for (int i = 0, n = this->tags_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string title = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string description = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional .proto.dota.CMsgDOTAMatchMinimal match = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *match_);
    }

    // optional uint32 size = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

    // optional bool exists_on_disk = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTAReplayDownloadInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTAReplayDownloadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTAReplayDownloadInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTAReplayDownloadInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTAReplayDownloadInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTAReplayDownloadInfo)
    MergeFrom(*source);
  }
}

void CDOTAReplayDownloadInfo::MergeFrom(const CDOTAReplayDownloadInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTAReplayDownloadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tags_.MergeFrom(from.tags_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_match()->::proto::dota::CMsgDOTAMatchMinimal::MergeFrom(from.match());
    }
    if (cached_has_bits & 0x00000008u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000010u) {
      exists_on_disk_ = from.exists_on_disk_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTAReplayDownloadInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTAReplayDownloadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTAReplayDownloadInfo::CopyFrom(const CDOTAReplayDownloadInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTAReplayDownloadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTAReplayDownloadInfo::IsInitialized() const {
  return true;
}

void CDOTAReplayDownloadInfo::Swap(CDOTAReplayDownloadInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTAReplayDownloadInfo::InternalSwap(CDOTAReplayDownloadInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  tags_.InternalSwap(CastToBase(&other->tags_));
  title_.Swap(&other->title_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(match_, other->match_);
  swap(size_, other->size_);
  swap(exists_on_disk_, other->exists_on_disk_);
}

::google::protobuf::Metadata CDOTAReplayDownloadInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgWatchGame::InitAsDefaultInstance() {
}
class CMsgWatchGame::HasBitSetters {
 public:
  static void set_has_server_steamid(CMsgWatchGame* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_client_version(CMsgWatchGame* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_watch_server_steamid(CMsgWatchGame* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_lobby_id(CMsgWatchGame* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgWatchGame::kServerSteamidFieldNumber;
const int CMsgWatchGame::kClientVersionFieldNumber;
const int CMsgWatchGame::kWatchServerSteamidFieldNumber;
const int CMsgWatchGame::kLobbyIdFieldNumber;
const int CMsgWatchGame::kRegionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgWatchGame::CMsgWatchGame()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgWatchGame)
}
CMsgWatchGame::CMsgWatchGame(const CMsgWatchGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      regions_(from.regions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&server_steamid_, &from.server_steamid_,
    static_cast<size_t>(reinterpret_cast<char*>(&client_version_) -
    reinterpret_cast<char*>(&server_steamid_)) + sizeof(client_version_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgWatchGame)
}

void CMsgWatchGame::SharedCtor() {
  ::memset(&server_steamid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&client_version_) -
      reinterpret_cast<char*>(&server_steamid_)) + sizeof(client_version_));
}

CMsgWatchGame::~CMsgWatchGame() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgWatchGame)
  SharedDtor();
}

void CMsgWatchGame::SharedDtor() {
}

void CMsgWatchGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgWatchGame& CMsgWatchGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgWatchGame_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  return *internal_default_instance();
}


void CMsgWatchGame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgWatchGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  regions_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&server_steamid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&client_version_) -
        reinterpret_cast<char*>(&server_steamid_)) + sizeof(client_version_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgWatchGame::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgWatchGame*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 server_steamid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_server_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 client_version = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_client_version(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 watch_server_steamid = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_watch_server_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint64 lobby_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_lobby_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated uint32 regions = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) == 40) {
          do {
            msg->add_regions(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 40 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_regions();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgWatchGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgWatchGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 server_steamid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_server_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 client_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_client_version(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 watch_server_steamid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_watch_server_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &watch_server_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 lobby_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_lobby_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 regions = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40u, input, this->mutable_regions())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_regions())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgWatchGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgWatchGame)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgWatchGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgWatchGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->server_steamid(), output);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->client_version(), output);
  }

  // optional fixed64 watch_server_steamid = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->watch_server_steamid(), output);
  }

  // optional uint64 lobby_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lobby_id(), output);
  }

  // repeated uint32 regions = 5;
  for (int i = 0, n = this->regions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->regions(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgWatchGame)
}

::google::protobuf::uint8* CMsgWatchGame::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgWatchGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steamid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->server_steamid(), target);
  }

  // optional uint32 client_version = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->client_version(), target);
  }

  // optional fixed64 watch_server_steamid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->watch_server_steamid(), target);
  }

  // optional uint64 lobby_id = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lobby_id(), target);
  }

  // repeated uint32 regions = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(5, this->regions_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgWatchGame)
  return target;
}

size_t CMsgWatchGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgWatchGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 regions = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->regions_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->regions_size());
    total_size += data_size;
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 server_steamid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 watch_server_steamid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint64 lobby_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lobby_id());
    }

    // optional uint32 client_version = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgWatchGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgWatchGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgWatchGame* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgWatchGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgWatchGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgWatchGame)
    MergeFrom(*source);
  }
}

void CMsgWatchGame::MergeFrom(const CMsgWatchGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgWatchGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  regions_.MergeFrom(from.regions_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      server_steamid_ = from.server_steamid_;
    }
    if (cached_has_bits & 0x00000002u) {
      watch_server_steamid_ = from.watch_server_steamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      lobby_id_ = from.lobby_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      client_version_ = from.client_version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgWatchGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgWatchGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWatchGame::CopyFrom(const CMsgWatchGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgWatchGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWatchGame::IsInitialized() const {
  return true;
}

void CMsgWatchGame::Swap(CMsgWatchGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgWatchGame::InternalSwap(CMsgWatchGame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  regions_.InternalSwap(&other->regions_);
  swap(server_steamid_, other->server_steamid_);
  swap(watch_server_steamid_, other->watch_server_steamid_);
  swap(lobby_id_, other->lobby_id_);
  swap(client_version_, other->client_version_);
}

::google::protobuf::Metadata CMsgWatchGame::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgCancelWatchGame::InitAsDefaultInstance() {
}
class CMsgCancelWatchGame::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgCancelWatchGame::CMsgCancelWatchGame()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgCancelWatchGame)
}
CMsgCancelWatchGame::CMsgCancelWatchGame(const CMsgCancelWatchGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgCancelWatchGame)
}

void CMsgCancelWatchGame::SharedCtor() {
}

CMsgCancelWatchGame::~CMsgCancelWatchGame() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgCancelWatchGame)
  SharedDtor();
}

void CMsgCancelWatchGame::SharedDtor() {
}

void CMsgCancelWatchGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgCancelWatchGame& CMsgCancelWatchGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgCancelWatchGame_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  return *internal_default_instance();
}


void CMsgCancelWatchGame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgCancelWatchGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgCancelWatchGame::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgCancelWatchGame*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgCancelWatchGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgCancelWatchGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgCancelWatchGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgCancelWatchGame)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgCancelWatchGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgCancelWatchGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgCancelWatchGame)
}

::google::protobuf::uint8* CMsgCancelWatchGame::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgCancelWatchGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgCancelWatchGame)
  return target;
}

size_t CMsgCancelWatchGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgCancelWatchGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgCancelWatchGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgCancelWatchGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgCancelWatchGame* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgCancelWatchGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgCancelWatchGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgCancelWatchGame)
    MergeFrom(*source);
  }
}

void CMsgCancelWatchGame::MergeFrom(const CMsgCancelWatchGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgCancelWatchGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgCancelWatchGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgCancelWatchGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgCancelWatchGame::CopyFrom(const CMsgCancelWatchGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgCancelWatchGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgCancelWatchGame::IsInitialized() const {
  return true;
}

void CMsgCancelWatchGame::Swap(CMsgCancelWatchGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgCancelWatchGame::InternalSwap(CMsgCancelWatchGame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgCancelWatchGame::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgWatchGameResponse::InitAsDefaultInstance() {
}
class CMsgWatchGameResponse::HasBitSetters {
 public:
  static void set_has_watch_game_result(CMsgWatchGameResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_source_tv_public_addr(CMsgWatchGameResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_source_tv_private_addr(CMsgWatchGameResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_source_tv_port(CMsgWatchGameResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_game_server_steamid(CMsgWatchGameResponse* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_watch_server_steamid(CMsgWatchGameResponse* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_watch_tv_unique_secret_code(CMsgWatchGameResponse* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgWatchGameResponse::kWatchGameResultFieldNumber;
const int CMsgWatchGameResponse::kSourceTvPublicAddrFieldNumber;
const int CMsgWatchGameResponse::kSourceTvPrivateAddrFieldNumber;
const int CMsgWatchGameResponse::kSourceTvPortFieldNumber;
const int CMsgWatchGameResponse::kGameServerSteamidFieldNumber;
const int CMsgWatchGameResponse::kWatchServerSteamidFieldNumber;
const int CMsgWatchGameResponse::kWatchTvUniqueSecretCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgWatchGameResponse::CMsgWatchGameResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgWatchGameResponse)
}
CMsgWatchGameResponse::CMsgWatchGameResponse(const CMsgWatchGameResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&watch_game_result_, &from.watch_game_result_,
    static_cast<size_t>(reinterpret_cast<char*>(&watch_tv_unique_secret_code_) -
    reinterpret_cast<char*>(&watch_game_result_)) + sizeof(watch_tv_unique_secret_code_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgWatchGameResponse)
}

void CMsgWatchGameResponse::SharedCtor() {
  ::memset(&watch_game_result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&watch_tv_unique_secret_code_) -
      reinterpret_cast<char*>(&watch_game_result_)) + sizeof(watch_tv_unique_secret_code_));
}

CMsgWatchGameResponse::~CMsgWatchGameResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgWatchGameResponse)
  SharedDtor();
}

void CMsgWatchGameResponse::SharedDtor() {
}

void CMsgWatchGameResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgWatchGameResponse& CMsgWatchGameResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgWatchGameResponse_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  return *internal_default_instance();
}


void CMsgWatchGameResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgWatchGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&watch_game_result_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&watch_tv_unique_secret_code_) -
        reinterpret_cast<char*>(&watch_game_result_)) + sizeof(watch_tv_unique_secret_code_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgWatchGameResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgWatchGameResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgWatchGameResponse_WatchGameResult_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_watch_game_result(static_cast<::proto::dota::CMsgWatchGameResponse_WatchGameResult>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 source_tv_public_addr = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_source_tv_public_addr(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 source_tv_private_addr = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_source_tv_private_addr(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 source_tv_port = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_source_tv_port(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 game_server_steamid = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_game_server_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 watch_server_steamid = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 49) goto handle_unusual;
        msg->set_watch_server_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 watch_tv_unique_secret_code = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 57) goto handle_unusual;
        msg->set_watch_tv_unique_secret_code(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgWatchGameResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgWatchGameResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgWatchGameResponse_WatchGameResult_IsValid(value)) {
            set_watch_game_result(static_cast< ::proto::dota::CMsgWatchGameResponse_WatchGameResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 source_tv_public_addr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_source_tv_public_addr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_tv_public_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 source_tv_private_addr = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_source_tv_private_addr(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_tv_private_addr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 source_tv_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_source_tv_port(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_tv_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 game_server_steamid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_game_server_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_server_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 watch_server_steamid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (49 & 0xFF)) {
          HasBitSetters::set_has_watch_server_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &watch_server_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 watch_tv_unique_secret_code = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (57 & 0xFF)) {
          HasBitSetters::set_has_watch_tv_unique_secret_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &watch_tv_unique_secret_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgWatchGameResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgWatchGameResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgWatchGameResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgWatchGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->watch_game_result(), output);
  }

  // optional uint32 source_tv_public_addr = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->source_tv_public_addr(), output);
  }

  // optional uint32 source_tv_private_addr = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->source_tv_private_addr(), output);
  }

  // optional uint32 source_tv_port = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->source_tv_port(), output);
  }

  // optional fixed64 game_server_steamid = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->game_server_steamid(), output);
  }

  // optional fixed64 watch_server_steamid = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(6, this->watch_server_steamid(), output);
  }

  // optional fixed64 watch_tv_unique_secret_code = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(7, this->watch_tv_unique_secret_code(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgWatchGameResponse)
}

::google::protobuf::uint8* CMsgWatchGameResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgWatchGameResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->watch_game_result(), target);
  }

  // optional uint32 source_tv_public_addr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->source_tv_public_addr(), target);
  }

  // optional uint32 source_tv_private_addr = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->source_tv_private_addr(), target);
  }

  // optional uint32 source_tv_port = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->source_tv_port(), target);
  }

  // optional fixed64 game_server_steamid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->game_server_steamid(), target);
  }

  // optional fixed64 watch_server_steamid = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(6, this->watch_server_steamid(), target);
  }

  // optional fixed64 watch_tv_unique_secret_code = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(7, this->watch_tv_unique_secret_code(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgWatchGameResponse)
  return target;
}

size_t CMsgWatchGameResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgWatchGameResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .proto.dota.CMsgWatchGameResponse.WatchGameResult watch_game_result = 1 [default = PENDING];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->watch_game_result());
    }

    // optional uint32 source_tv_public_addr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_tv_public_addr());
    }

    // optional uint32 source_tv_private_addr = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_tv_private_addr());
    }

    // optional uint32 source_tv_port = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->source_tv_port());
    }

    // optional fixed64 game_server_steamid = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional fixed64 watch_server_steamid = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional fixed64 watch_tv_unique_secret_code = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgWatchGameResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgWatchGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgWatchGameResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgWatchGameResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgWatchGameResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgWatchGameResponse)
    MergeFrom(*source);
  }
}

void CMsgWatchGameResponse::MergeFrom(const CMsgWatchGameResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgWatchGameResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      watch_game_result_ = from.watch_game_result_;
    }
    if (cached_has_bits & 0x00000002u) {
      source_tv_public_addr_ = from.source_tv_public_addr_;
    }
    if (cached_has_bits & 0x00000004u) {
      source_tv_private_addr_ = from.source_tv_private_addr_;
    }
    if (cached_has_bits & 0x00000008u) {
      source_tv_port_ = from.source_tv_port_;
    }
    if (cached_has_bits & 0x00000010u) {
      game_server_steamid_ = from.game_server_steamid_;
    }
    if (cached_has_bits & 0x00000020u) {
      watch_server_steamid_ = from.watch_server_steamid_;
    }
    if (cached_has_bits & 0x00000040u) {
      watch_tv_unique_secret_code_ = from.watch_tv_unique_secret_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgWatchGameResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgWatchGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgWatchGameResponse::CopyFrom(const CMsgWatchGameResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgWatchGameResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgWatchGameResponse::IsInitialized() const {
  return true;
}

void CMsgWatchGameResponse::Swap(CMsgWatchGameResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgWatchGameResponse::InternalSwap(CMsgWatchGameResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(watch_game_result_, other->watch_game_result_);
  swap(source_tv_public_addr_, other->source_tv_public_addr_);
  swap(source_tv_private_addr_, other->source_tv_private_addr_);
  swap(source_tv_port_, other->source_tv_port_);
  swap(game_server_steamid_, other->game_server_steamid_);
  swap(watch_server_steamid_, other->watch_server_steamid_);
  swap(watch_tv_unique_secret_code_, other->watch_tv_unique_secret_code_);
}

::google::protobuf::Metadata CMsgWatchGameResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgPartyLeaderWatchGamePrompt::InitAsDefaultInstance() {
}
class CMsgPartyLeaderWatchGamePrompt::HasBitSetters {
 public:
  static void set_has_game_server_steamid(CMsgPartyLeaderWatchGamePrompt* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgPartyLeaderWatchGamePrompt::kGameServerSteamidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgPartyLeaderWatchGamePrompt::CMsgPartyLeaderWatchGamePrompt()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgPartyLeaderWatchGamePrompt)
}
CMsgPartyLeaderWatchGamePrompt::CMsgPartyLeaderWatchGamePrompt(const CMsgPartyLeaderWatchGamePrompt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  game_server_steamid_ = from.game_server_steamid_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgPartyLeaderWatchGamePrompt)
}

void CMsgPartyLeaderWatchGamePrompt::SharedCtor() {
  game_server_steamid_ = PROTOBUF_ULONGLONG(0);
}

CMsgPartyLeaderWatchGamePrompt::~CMsgPartyLeaderWatchGamePrompt() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgPartyLeaderWatchGamePrompt)
  SharedDtor();
}

void CMsgPartyLeaderWatchGamePrompt::SharedDtor() {
}

void CMsgPartyLeaderWatchGamePrompt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgPartyLeaderWatchGamePrompt& CMsgPartyLeaderWatchGamePrompt::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgPartyLeaderWatchGamePrompt_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  return *internal_default_instance();
}


void CMsgPartyLeaderWatchGamePrompt::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgPartyLeaderWatchGamePrompt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  game_server_steamid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgPartyLeaderWatchGamePrompt::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgPartyLeaderWatchGamePrompt*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 game_server_steamid = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 41) goto handle_unusual;
        msg->set_game_server_steamid(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgPartyLeaderWatchGamePrompt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgPartyLeaderWatchGamePrompt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 game_server_steamid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (41 & 0xFF)) {
          HasBitSetters::set_has_game_server_steamid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &game_server_steamid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgPartyLeaderWatchGamePrompt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgPartyLeaderWatchGamePrompt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgPartyLeaderWatchGamePrompt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgPartyLeaderWatchGamePrompt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_server_steamid = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->game_server_steamid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgPartyLeaderWatchGamePrompt)
}

::google::protobuf::uint8* CMsgPartyLeaderWatchGamePrompt::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgPartyLeaderWatchGamePrompt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 game_server_steamid = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->game_server_steamid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgPartyLeaderWatchGamePrompt)
  return target;
}

size_t CMsgPartyLeaderWatchGamePrompt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgPartyLeaderWatchGamePrompt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 game_server_steamid = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgPartyLeaderWatchGamePrompt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgPartyLeaderWatchGamePrompt)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgPartyLeaderWatchGamePrompt* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgPartyLeaderWatchGamePrompt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgPartyLeaderWatchGamePrompt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgPartyLeaderWatchGamePrompt)
    MergeFrom(*source);
  }
}

void CMsgPartyLeaderWatchGamePrompt::MergeFrom(const CMsgPartyLeaderWatchGamePrompt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgPartyLeaderWatchGamePrompt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_game_server_steamid()) {
    set_game_server_steamid(from.game_server_steamid());
  }
}

void CMsgPartyLeaderWatchGamePrompt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgPartyLeaderWatchGamePrompt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgPartyLeaderWatchGamePrompt::CopyFrom(const CMsgPartyLeaderWatchGamePrompt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgPartyLeaderWatchGamePrompt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgPartyLeaderWatchGamePrompt::IsInitialized() const {
  return true;
}

void CMsgPartyLeaderWatchGamePrompt::Swap(CMsgPartyLeaderWatchGamePrompt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgPartyLeaderWatchGamePrompt::InternalSwap(CMsgPartyLeaderWatchGamePrompt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(game_server_steamid_, other->game_server_steamid_);
}

::google::protobuf::Metadata CMsgPartyLeaderWatchGamePrompt::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CDOTABroadcasterInfo::InitAsDefaultInstance() {
}
class CDOTABroadcasterInfo::HasBitSetters {
 public:
  static void set_has_account_id(CDOTABroadcasterInfo* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_server_steam_id(CDOTABroadcasterInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_live(CDOTABroadcasterInfo* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_team_name_radiant(CDOTABroadcasterInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_name_dire(CDOTABroadcasterInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_series_game(CDOTABroadcasterInfo* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_upcoming_broadcast_timestamp(CDOTABroadcasterInfo* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_allow_live_video(CDOTABroadcasterInfo* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_node_type(CDOTABroadcasterInfo* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_node_name(CDOTABroadcasterInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDOTABroadcasterInfo::kAccountIdFieldNumber;
const int CDOTABroadcasterInfo::kServerSteamIdFieldNumber;
const int CDOTABroadcasterInfo::kLiveFieldNumber;
const int CDOTABroadcasterInfo::kTeamNameRadiantFieldNumber;
const int CDOTABroadcasterInfo::kTeamNameDireFieldNumber;
const int CDOTABroadcasterInfo::kSeriesGameFieldNumber;
const int CDOTABroadcasterInfo::kUpcomingBroadcastTimestampFieldNumber;
const int CDOTABroadcasterInfo::kAllowLiveVideoFieldNumber;
const int CDOTABroadcasterInfo::kNodeTypeFieldNumber;
const int CDOTABroadcasterInfo::kNodeNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDOTABroadcasterInfo::CDOTABroadcasterInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CDOTABroadcasterInfo)
}
CDOTABroadcasterInfo::CDOTABroadcasterInfo(const CDOTABroadcasterInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_radiant_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name_radiant()) {
    team_name_radiant_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_radiant_);
  }
  team_name_dire_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name_dire()) {
    team_name_dire_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_dire_);
  }
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_node_name()) {
    node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
  }
  ::memcpy(&server_steam_id_, &from.server_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&node_type_) -
    reinterpret_cast<char*>(&server_steam_id_)) + sizeof(node_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CDOTABroadcasterInfo)
}

void CDOTABroadcasterInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CDOTABroadcasterInfo_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  team_name_radiant_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_dire_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&server_steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&node_type_) -
      reinterpret_cast<char*>(&server_steam_id_)) + sizeof(node_type_));
}

CDOTABroadcasterInfo::~CDOTABroadcasterInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CDOTABroadcasterInfo)
  SharedDtor();
}

void CDOTABroadcasterInfo::SharedDtor() {
  team_name_radiant_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_name_dire_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  node_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CDOTABroadcasterInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CDOTABroadcasterInfo& CDOTABroadcasterInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CDOTABroadcasterInfo_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  return *internal_default_instance();
}


void CDOTABroadcasterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CDOTABroadcasterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      team_name_radiant_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      team_name_dire_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      node_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&server_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&series_game_) -
        reinterpret_cast<char*>(&server_steam_id_)) + sizeof(series_game_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&upcoming_broadcast_timestamp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&node_type_) -
        reinterpret_cast<char*>(&upcoming_broadcast_timestamp_)) + sizeof(node_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CDOTABroadcasterInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CDOTABroadcasterInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed64 server_steam_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_server_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional bool live = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_live(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string team_name_radiant = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDOTABroadcasterInfo.team_name_radiant");
        object = msg->mutable_team_name_radiant();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string team_name_dire = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDOTABroadcasterInfo.team_name_dire");
        object = msg->mutable_team_name_dire();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 series_game = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        msg->set_series_game(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 upcoming_broadcast_timestamp = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_upcoming_broadcast_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool allow_live_video = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_allow_live_video(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 node_type = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_node_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string node_name = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CDOTABroadcasterInfo.node_name");
        object = msg->mutable_node_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CDOTABroadcasterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CDOTABroadcasterInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 server_steam_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_server_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool live = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_live(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &live_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name_radiant = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name_radiant()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name_radiant().data(), static_cast<int>(this->team_name_radiant().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTABroadcasterInfo.team_name_radiant");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name_dire = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name_dire()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name_dire().data(), static_cast<int>(this->team_name_dire().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTABroadcasterInfo.team_name_dire");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_game = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          HasBitSetters::set_has_series_game(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_game_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 upcoming_broadcast_timestamp = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_upcoming_broadcast_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upcoming_broadcast_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool allow_live_video = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_allow_live_video(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allow_live_video_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 node_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_node_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &node_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string node_name = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->node_name().data(), static_cast<int>(this->node_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CDOTABroadcasterInfo.node_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CDOTABroadcasterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CDOTABroadcasterInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CDOTABroadcasterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CDOTABroadcasterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional fixed64 server_steam_id = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->server_steam_id(), output);
  }

  // optional bool live = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->live(), output);
  }

  // optional string team_name_radiant = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name_radiant().data(), static_cast<int>(this->team_name_radiant().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTABroadcasterInfo.team_name_radiant");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->team_name_radiant(), output);
  }

  // optional string team_name_dire = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name_dire().data(), static_cast<int>(this->team_name_dire().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTABroadcasterInfo.team_name_dire");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->team_name_dire(), output);
  }

  // optional uint32 series_game = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->series_game(), output);
  }

  // optional uint32 upcoming_broadcast_timestamp = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->upcoming_broadcast_timestamp(), output);
  }

  // optional bool allow_live_video = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->allow_live_video(), output);
  }

  // optional uint32 node_type = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->node_type(), output);
  }

  // optional string node_name = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_name().data(), static_cast<int>(this->node_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTABroadcasterInfo.node_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->node_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CDOTABroadcasterInfo)
}

::google::protobuf::uint8* CDOTABroadcasterInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CDOTABroadcasterInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional fixed64 server_steam_id = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->server_steam_id(), target);
  }

  // optional bool live = 3;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->live(), target);
  }

  // optional string team_name_radiant = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name_radiant().data(), static_cast<int>(this->team_name_radiant().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTABroadcasterInfo.team_name_radiant");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->team_name_radiant(), target);
  }

  // optional string team_name_dire = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name_dire().data(), static_cast<int>(this->team_name_dire().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTABroadcasterInfo.team_name_dire");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->team_name_dire(), target);
  }

  // optional uint32 series_game = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->series_game(), target);
  }

  // optional uint32 upcoming_broadcast_timestamp = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->upcoming_broadcast_timestamp(), target);
  }

  // optional bool allow_live_video = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->allow_live_video(), target);
  }

  // optional uint32 node_type = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->node_type(), target);
  }

  // optional string node_name = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->node_name().data(), static_cast<int>(this->node_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CDOTABroadcasterInfo.node_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->node_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CDOTABroadcasterInfo)
  return target;
}

size_t CDOTABroadcasterInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CDOTABroadcasterInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string team_name_radiant = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name_radiant());
    }

    // optional string team_name_dire = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name_dire());
    }

    // optional string node_name = 12;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_name());
    }

    // optional fixed64 server_steam_id = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional bool live = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

    // optional bool allow_live_video = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint32 series_game = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_game());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 upcoming_broadcast_timestamp = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upcoming_broadcast_timestamp());
    }

    // optional uint32 node_type = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->node_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CDOTABroadcasterInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CDOTABroadcasterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CDOTABroadcasterInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CDOTABroadcasterInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CDOTABroadcasterInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CDOTABroadcasterInfo)
    MergeFrom(*source);
  }
}

void CDOTABroadcasterInfo::MergeFrom(const CDOTABroadcasterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CDOTABroadcasterInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      team_name_radiant_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_radiant_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      team_name_dire_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_dire_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      node_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.node_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      server_steam_id_ = from.server_steam_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      live_ = from.live_;
    }
    if (cached_has_bits & 0x00000040u) {
      allow_live_video_ = from.allow_live_video_;
    }
    if (cached_has_bits & 0x00000080u) {
      series_game_ = from.series_game_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      upcoming_broadcast_timestamp_ = from.upcoming_broadcast_timestamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      node_type_ = from.node_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CDOTABroadcasterInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CDOTABroadcasterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDOTABroadcasterInfo::CopyFrom(const CDOTABroadcasterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CDOTABroadcasterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDOTABroadcasterInfo::IsInitialized() const {
  return true;
}

void CDOTABroadcasterInfo::Swap(CDOTABroadcasterInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDOTABroadcasterInfo::InternalSwap(CDOTABroadcasterInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_name_radiant_.Swap(&other->team_name_radiant_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team_name_dire_.Swap(&other->team_name_dire_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  node_name_.Swap(&other->node_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(server_steam_id_, other->server_steam_id_);
  swap(account_id_, other->account_id_);
  swap(live_, other->live_);
  swap(allow_live_video_, other->allow_live_video_);
  swap(series_game_, other->series_game_);
  swap(upcoming_broadcast_timestamp_, other->upcoming_broadcast_timestamp_);
  swap(node_type_, other->node_type_);
}

::google::protobuf::Metadata CDOTABroadcasterInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTASeries_TeamInfo::InitAsDefaultInstance() {
}
class CMsgDOTASeries_TeamInfo::HasBitSetters {
 public:
  static void set_has_team_id(CMsgDOTASeries_TeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_team_name(CMsgDOTASeries_TeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_team_logo_url(CMsgDOTASeries_TeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_wager_count(CMsgDOTASeries_TeamInfo* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASeries_TeamInfo::kTeamIdFieldNumber;
const int CMsgDOTASeries_TeamInfo::kTeamNameFieldNumber;
const int CMsgDOTASeries_TeamInfo::kTeamLogoUrlFieldNumber;
const int CMsgDOTASeries_TeamInfo::kWagerCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASeries_TeamInfo::CMsgDOTASeries_TeamInfo()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASeries.TeamInfo)
}
CMsgDOTASeries_TeamInfo::CMsgDOTASeries_TeamInfo(const CMsgDOTASeries_TeamInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_name()) {
    team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
  }
  team_logo_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_team_logo_url()) {
    team_logo_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_logo_url_);
  }
  ::memcpy(&team_id_, &from.team_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&wager_count_) -
    reinterpret_cast<char*>(&team_id_)) + sizeof(wager_count_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASeries.TeamInfo)
}

void CMsgDOTASeries_TeamInfo::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTASeries_TeamInfo_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  team_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_logo_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&team_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wager_count_) -
      reinterpret_cast<char*>(&team_id_)) + sizeof(wager_count_));
}

CMsgDOTASeries_TeamInfo::~CMsgDOTASeries_TeamInfo() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASeries.TeamInfo)
  SharedDtor();
}

void CMsgDOTASeries_TeamInfo::SharedDtor() {
  team_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  team_logo_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTASeries_TeamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTASeries_TeamInfo& CMsgDOTASeries_TeamInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTASeries_TeamInfo_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTASeries_TeamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASeries.TeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      team_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      team_logo_url_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&team_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&wager_count_) -
        reinterpret_cast<char*>(&team_id_)) + sizeof(wager_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTASeries_TeamInfo::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTASeries_TeamInfo*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 team_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string team_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTASeries.TeamInfo.team_name");
        object = msg->mutable_team_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string team_logo_url = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTASeries.TeamInfo.team_logo_url");
        object = msg->mutable_team_logo_url();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 wager_count = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_wager_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTASeries_TeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASeries.TeamInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 team_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_name().data(), static_cast<int>(this->team_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeries.TeamInfo.team_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string team_logo_url = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_team_logo_url()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->team_logo_url().data(), static_cast<int>(this->team_logo_url().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTASeries.TeamInfo.team_logo_url");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 wager_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_wager_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &wager_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASeries.TeamInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASeries.TeamInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTASeries_TeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASeries.TeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->team_id(), output);
  }

  // optional string team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeries.TeamInfo.team_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->team_name(), output);
  }

  // optional string team_logo_url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_logo_url().data(), static_cast<int>(this->team_logo_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeries.TeamInfo.team_logo_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->team_logo_url(), output);
  }

  // optional uint32 wager_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->wager_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASeries.TeamInfo)
}

::google::protobuf::uint8* CMsgDOTASeries_TeamInfo::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASeries.TeamInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 team_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->team_id(), target);
  }

  // optional string team_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_name().data(), static_cast<int>(this->team_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeries.TeamInfo.team_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->team_name(), target);
  }

  // optional string team_logo_url = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->team_logo_url().data(), static_cast<int>(this->team_logo_url().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTASeries.TeamInfo.team_logo_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->team_logo_url(), target);
  }

  // optional uint32 wager_count = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->wager_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASeries.TeamInfo)
  return target;
}

size_t CMsgDOTASeries_TeamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASeries.TeamInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string team_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_name());
    }

    // optional string team_logo_url = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->team_logo_url());
    }

    // optional uint32 team_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }

    // optional uint32 wager_count = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->wager_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASeries_TeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASeries.TeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeries_TeamInfo* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTASeries_TeamInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASeries.TeamInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASeries.TeamInfo)
    MergeFrom(*source);
  }
}

void CMsgDOTASeries_TeamInfo::MergeFrom(const CMsgDOTASeries_TeamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASeries.TeamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      team_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      team_logo_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.team_logo_url_);
    }
    if (cached_has_bits & 0x00000004u) {
      team_id_ = from.team_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      wager_count_ = from.wager_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTASeries_TeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASeries.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeries_TeamInfo::CopyFrom(const CMsgDOTASeries_TeamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASeries.TeamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeries_TeamInfo::IsInitialized() const {
  return true;
}

void CMsgDOTASeries_TeamInfo::Swap(CMsgDOTASeries_TeamInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASeries_TeamInfo::InternalSwap(CMsgDOTASeries_TeamInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  team_name_.Swap(&other->team_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  team_logo_url_.Swap(&other->team_logo_url_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(team_id_, other->team_id_);
  swap(wager_count_, other->wager_count_);
}

::google::protobuf::Metadata CMsgDOTASeries_TeamInfo::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTASeries_LiveGame::InitAsDefaultInstance() {
  ::proto::dota::_CMsgDOTASeries_LiveGame_default_instance_._instance.get_mutable()->team_radiant_ = const_cast< ::proto::dota::CMsgDOTASeries_TeamInfo*>(
      ::proto::dota::CMsgDOTASeries_TeamInfo::internal_default_instance());
  ::proto::dota::_CMsgDOTASeries_LiveGame_default_instance_._instance.get_mutable()->team_dire_ = const_cast< ::proto::dota::CMsgDOTASeries_TeamInfo*>(
      ::proto::dota::CMsgDOTASeries_TeamInfo::internal_default_instance());
}
class CMsgDOTASeries_LiveGame::HasBitSetters {
 public:
  static void set_has_server_steam_id(CMsgDOTASeries_LiveGame* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::proto::dota::CMsgDOTASeries_TeamInfo& team_radiant(const CMsgDOTASeries_LiveGame* msg);
  static void set_has_team_radiant(CMsgDOTASeries_LiveGame* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::dota::CMsgDOTASeries_TeamInfo& team_dire(const CMsgDOTASeries_LiveGame* msg);
  static void set_has_team_dire(CMsgDOTASeries_LiveGame* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_team_radiant_score(CMsgDOTASeries_LiveGame* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_team_dire_score(CMsgDOTASeries_LiveGame* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

const ::proto::dota::CMsgDOTASeries_TeamInfo&
CMsgDOTASeries_LiveGame::HasBitSetters::team_radiant(const CMsgDOTASeries_LiveGame* msg) {
  return *msg->team_radiant_;
}
const ::proto::dota::CMsgDOTASeries_TeamInfo&
CMsgDOTASeries_LiveGame::HasBitSetters::team_dire(const CMsgDOTASeries_LiveGame* msg) {
  return *msg->team_dire_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASeries_LiveGame::kServerSteamIdFieldNumber;
const int CMsgDOTASeries_LiveGame::kTeamRadiantFieldNumber;
const int CMsgDOTASeries_LiveGame::kTeamDireFieldNumber;
const int CMsgDOTASeries_LiveGame::kTeamRadiantScoreFieldNumber;
const int CMsgDOTASeries_LiveGame::kTeamDireScoreFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASeries_LiveGame::CMsgDOTASeries_LiveGame()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASeries.LiveGame)
}
CMsgDOTASeries_LiveGame::CMsgDOTASeries_LiveGame(const CMsgDOTASeries_LiveGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_radiant()) {
    team_radiant_ = new ::proto::dota::CMsgDOTASeries_TeamInfo(*from.team_radiant_);
  } else {
    team_radiant_ = nullptr;
  }
  if (from.has_team_dire()) {
    team_dire_ = new ::proto::dota::CMsgDOTASeries_TeamInfo(*from.team_dire_);
  } else {
    team_dire_ = nullptr;
  }
  ::memcpy(&server_steam_id_, &from.server_steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_dire_score_) -
    reinterpret_cast<char*>(&server_steam_id_)) + sizeof(team_dire_score_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASeries.LiveGame)
}

void CMsgDOTASeries_LiveGame::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTASeries_LiveGame_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::memset(&team_radiant_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_dire_score_) -
      reinterpret_cast<char*>(&team_radiant_)) + sizeof(team_dire_score_));
}

CMsgDOTASeries_LiveGame::~CMsgDOTASeries_LiveGame() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASeries.LiveGame)
  SharedDtor();
}

void CMsgDOTASeries_LiveGame::SharedDtor() {
  if (this != internal_default_instance()) delete team_radiant_;
  if (this != internal_default_instance()) delete team_dire_;
}

void CMsgDOTASeries_LiveGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTASeries_LiveGame& CMsgDOTASeries_LiveGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTASeries_LiveGame_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTASeries_LiveGame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASeries.LiveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(team_radiant_ != nullptr);
      team_radiant_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(team_dire_ != nullptr);
      team_dire_->Clear();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&server_steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&team_dire_score_) -
        reinterpret_cast<char*>(&server_steam_id_)) + sizeof(team_dire_score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTASeries_LiveGame::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTASeries_LiveGame*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 server_steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_server_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional .proto.dota.CMsgDOTASeries.TeamInfo team_radiant = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTASeries_TeamInfo::_InternalParse;
        object = msg->mutable_team_radiant();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgDOTASeries.TeamInfo team_dire = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTASeries_TeamInfo::_InternalParse;
        object = msg->mutable_team_dire();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 team_radiant_score = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_team_radiant_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 team_dire_score = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_team_dire_score(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTASeries_LiveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASeries.LiveGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 server_steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_server_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &server_steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTASeries.TeamInfo team_radiant = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_radiant()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTASeries.TeamInfo team_dire = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_dire()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_radiant_score = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_team_radiant_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_radiant_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 team_dire_score = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_team_dire_score(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_dire_score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASeries.LiveGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASeries.LiveGame)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTASeries_LiveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASeries.LiveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->server_steam_id(), output);
  }

  // optional .proto.dota.CMsgDOTASeries.TeamInfo team_radiant = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::team_radiant(this), output);
  }

  // optional .proto.dota.CMsgDOTASeries.TeamInfo team_dire = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::team_dire(this), output);
  }

  // optional uint32 team_radiant_score = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->team_radiant_score(), output);
  }

  // optional uint32 team_dire_score = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->team_dire_score(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASeries.LiveGame)
}

::google::protobuf::uint8* CMsgDOTASeries_LiveGame::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASeries.LiveGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 server_steam_id = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->server_steam_id(), target);
  }

  // optional .proto.dota.CMsgDOTASeries.TeamInfo team_radiant = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::team_radiant(this), target);
  }

  // optional .proto.dota.CMsgDOTASeries.TeamInfo team_dire = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::team_dire(this), target);
  }

  // optional uint32 team_radiant_score = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->team_radiant_score(), target);
  }

  // optional uint32 team_dire_score = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->team_dire_score(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASeries.LiveGame)
  return target;
}

size_t CMsgDOTASeries_LiveGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASeries.LiveGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .proto.dota.CMsgDOTASeries.TeamInfo team_radiant = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *team_radiant_);
    }

    // optional .proto.dota.CMsgDOTASeries.TeamInfo team_dire = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *team_dire_);
    }

    // optional fixed64 server_steam_id = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 team_radiant_score = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_radiant_score());
    }

    // optional uint32 team_dire_score = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_dire_score());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASeries_LiveGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASeries.LiveGame)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeries_LiveGame* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTASeries_LiveGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASeries.LiveGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASeries.LiveGame)
    MergeFrom(*source);
  }
}

void CMsgDOTASeries_LiveGame::MergeFrom(const CMsgDOTASeries_LiveGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASeries.LiveGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_team_radiant()->::proto::dota::CMsgDOTASeries_TeamInfo::MergeFrom(from.team_radiant());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_team_dire()->::proto::dota::CMsgDOTASeries_TeamInfo::MergeFrom(from.team_dire());
    }
    if (cached_has_bits & 0x00000004u) {
      server_steam_id_ = from.server_steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      team_radiant_score_ = from.team_radiant_score_;
    }
    if (cached_has_bits & 0x00000010u) {
      team_dire_score_ = from.team_dire_score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTASeries_LiveGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASeries.LiveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeries_LiveGame::CopyFrom(const CMsgDOTASeries_LiveGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASeries.LiveGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeries_LiveGame::IsInitialized() const {
  return true;
}

void CMsgDOTASeries_LiveGame::Swap(CMsgDOTASeries_LiveGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASeries_LiveGame::InternalSwap(CMsgDOTASeries_LiveGame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(team_radiant_, other->team_radiant_);
  swap(team_dire_, other->team_dire_);
  swap(server_steam_id_, other->server_steam_id_);
  swap(team_radiant_score_, other->team_radiant_score_);
  swap(team_dire_score_, other->team_dire_score_);
}

::google::protobuf::Metadata CMsgDOTASeries_LiveGame::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTASeries::InitAsDefaultInstance() {
  ::proto::dota::_CMsgDOTASeries_default_instance_._instance.get_mutable()->team_1_ = const_cast< ::proto::dota::CMsgDOTASeries_TeamInfo*>(
      ::proto::dota::CMsgDOTASeries_TeamInfo::internal_default_instance());
  ::proto::dota::_CMsgDOTASeries_default_instance_._instance.get_mutable()->team_2_ = const_cast< ::proto::dota::CMsgDOTASeries_TeamInfo*>(
      ::proto::dota::CMsgDOTASeries_TeamInfo::internal_default_instance());
  ::proto::dota::_CMsgDOTASeries_default_instance_._instance.get_mutable()->live_game_ = const_cast< ::proto::dota::CMsgDOTASeries_LiveGame*>(
      ::proto::dota::CMsgDOTASeries_LiveGame::internal_default_instance());
}
class CMsgDOTASeries::HasBitSetters {
 public:
  static void set_has_series_id(CMsgDOTASeries* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_series_type(CMsgDOTASeries* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::proto::dota::CMsgDOTASeries_TeamInfo& team_1(const CMsgDOTASeries* msg);
  static void set_has_team_1(CMsgDOTASeries* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::dota::CMsgDOTASeries_TeamInfo& team_2(const CMsgDOTASeries* msg);
  static void set_has_team_2(CMsgDOTASeries* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CMsgDOTASeries_LiveGame& live_game(const CMsgDOTASeries* msg);
  static void set_has_live_game(CMsgDOTASeries* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

const ::proto::dota::CMsgDOTASeries_TeamInfo&
CMsgDOTASeries::HasBitSetters::team_1(const CMsgDOTASeries* msg) {
  return *msg->team_1_;
}
const ::proto::dota::CMsgDOTASeries_TeamInfo&
CMsgDOTASeries::HasBitSetters::team_2(const CMsgDOTASeries* msg) {
  return *msg->team_2_;
}
const ::proto::dota::CMsgDOTASeries_LiveGame&
CMsgDOTASeries::HasBitSetters::live_game(const CMsgDOTASeries* msg) {
  return *msg->live_game_;
}
void CMsgDOTASeries::clear_match_minimal() {
  match_minimal_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTASeries::kSeriesIdFieldNumber;
const int CMsgDOTASeries::kSeriesTypeFieldNumber;
const int CMsgDOTASeries::kTeam1FieldNumber;
const int CMsgDOTASeries::kTeam2FieldNumber;
const int CMsgDOTASeries::kMatchMinimalFieldNumber;
const int CMsgDOTASeries::kLiveGameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTASeries::CMsgDOTASeries()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTASeries)
}
CMsgDOTASeries::CMsgDOTASeries(const CMsgDOTASeries& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      match_minimal_(from.match_minimal_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_team_1()) {
    team_1_ = new ::proto::dota::CMsgDOTASeries_TeamInfo(*from.team_1_);
  } else {
    team_1_ = nullptr;
  }
  if (from.has_team_2()) {
    team_2_ = new ::proto::dota::CMsgDOTASeries_TeamInfo(*from.team_2_);
  } else {
    team_2_ = nullptr;
  }
  if (from.has_live_game()) {
    live_game_ = new ::proto::dota::CMsgDOTASeries_LiveGame(*from.live_game_);
  } else {
    live_game_ = nullptr;
  }
  ::memcpy(&series_id_, &from.series_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&series_type_) -
    reinterpret_cast<char*>(&series_id_)) + sizeof(series_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTASeries)
}

void CMsgDOTASeries::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTASeries_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  ::memset(&team_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&series_type_) -
      reinterpret_cast<char*>(&team_1_)) + sizeof(series_type_));
}

CMsgDOTASeries::~CMsgDOTASeries() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTASeries)
  SharedDtor();
}

void CMsgDOTASeries::SharedDtor() {
  if (this != internal_default_instance()) delete team_1_;
  if (this != internal_default_instance()) delete team_2_;
  if (this != internal_default_instance()) delete live_game_;
}

void CMsgDOTASeries::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTASeries& CMsgDOTASeries::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTASeries_dota_5fgcmessages_5fclient_5fwatch_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTASeries::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTASeries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  match_minimal_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(team_1_ != nullptr);
      team_1_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(team_2_ != nullptr);
      team_2_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(live_game_ != nullptr);
      live_game_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&series_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&series_type_) -
        reinterpret_cast<char*>(&series_id_)) + sizeof(series_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTASeries::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTASeries*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 series_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_series_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 series_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_series_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgDOTASeries.TeamInfo team_1 = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTASeries_TeamInfo::_InternalParse;
        object = msg->mutable_team_1();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgDOTASeries.TeamInfo team_2 = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTASeries_TeamInfo::_InternalParse;
        object = msg->mutable_team_2();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .proto.dota.CMsgDOTAMatchMinimal match_minimal = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAMatchMinimal::_InternalParse;
          object = msg->add_match_minimal();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // optional .proto.dota.CMsgDOTASeries.LiveGame live_game = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTASeries_LiveGame::_InternalParse;
        object = msg->mutable_live_game();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTASeries::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTASeries)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 series_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_series_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 series_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_series_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &series_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTASeries.TeamInfo team_1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTASeries.TeamInfo team_2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_team_2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAMatchMinimal match_minimal = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_match_minimal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTASeries.LiveGame live_game = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_live_game()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTASeries)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTASeries)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTASeries::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTASeries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 series_id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->series_id(), output);
  }

  // optional uint32 series_type = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->series_type(), output);
  }

  // optional .proto.dota.CMsgDOTASeries.TeamInfo team_1 = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::team_1(this), output);
  }

  // optional .proto.dota.CMsgDOTASeries.TeamInfo team_2 = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::team_2(this), output);
  }

  // repeated .proto.dota.CMsgDOTAMatchMinimal match_minimal = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->match_minimal_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->match_minimal(static_cast<int>(i)),
      output);
  }

  // optional .proto.dota.CMsgDOTASeries.LiveGame live_game = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::live_game(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTASeries)
}

::google::protobuf::uint8* CMsgDOTASeries::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTASeries)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 series_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->series_id(), target);
  }

  // optional uint32 series_type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->series_type(), target);
  }

  // optional .proto.dota.CMsgDOTASeries.TeamInfo team_1 = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::team_1(this), target);
  }

  // optional .proto.dota.CMsgDOTASeries.TeamInfo team_2 = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::team_2(this), target);
  }

  // repeated .proto.dota.CMsgDOTAMatchMinimal match_minimal = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->match_minimal_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->match_minimal(static_cast<int>(i)), target);
  }

  // optional .proto.dota.CMsgDOTASeries.LiveGame live_game = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::live_game(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTASeries)
  return target;
}

size_t CMsgDOTASeries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTASeries)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAMatchMinimal match_minimal = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->match_minimal_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->match_minimal(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .proto.dota.CMsgDOTASeries.TeamInfo team_1 = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *team_1_);
    }

    // optional .proto.dota.CMsgDOTASeries.TeamInfo team_2 = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *team_2_);
    }

    // optional .proto.dota.CMsgDOTASeries.LiveGame live_game = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *live_game_);
    }

    // optional uint32 series_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_id());
    }

    // optional uint32 series_type = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->series_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTASeries::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTASeries)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTASeries* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTASeries>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTASeries)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTASeries)
    MergeFrom(*source);
  }
}

void CMsgDOTASeries::MergeFrom(const CMsgDOTASeries& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTASeries)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  match_minimal_.MergeFrom(from.match_minimal_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_team_1()->::proto::dota::CMsgDOTASeries_TeamInfo::MergeFrom(from.team_1());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_team_2()->::proto::dota::CMsgDOTASeries_TeamInfo::MergeFrom(from.team_2());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_live_game()->::proto::dota::CMsgDOTASeries_LiveGame::MergeFrom(from.live_game());
    }
    if (cached_has_bits & 0x00000008u) {
      series_id_ = from.series_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      series_type_ = from.series_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTASeries::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTASeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTASeries::CopyFrom(const CMsgDOTASeries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTASeries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTASeries::IsInitialized() const {
  return true;
}

void CMsgDOTASeries::Swap(CMsgDOTASeries* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTASeries::InternalSwap(CMsgDOTASeries* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&match_minimal_)->InternalSwap(CastToBase(&other->match_minimal_));
  swap(team_1_, other->team_1_);
  swap(team_2_, other->team_2_);
  swap(live_game_, other->live_game_);
  swap(series_id_, other->series_id_);
  swap(series_type_, other->series_type_);
}

::google::protobuf::Metadata CMsgDOTASeries::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fwatch_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fwatch_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::dota::CSourceTVGameSmall_Player* Arena::CreateMaybeMessage< ::proto::dota::CSourceTVGameSmall_Player >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSourceTVGameSmall_Player >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CSourceTVGameSmall* Arena::CreateMaybeMessage< ::proto::dota::CSourceTVGameSmall >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CSourceTVGameSmall >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgClientToGCFindTopSourceTVGames* Arena::CreateMaybeMessage< ::proto::dota::CMsgClientToGCFindTopSourceTVGames >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgClientToGCFindTopSourceTVGames >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToClientFindTopSourceTVGamesResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToClientFindTopSourceTVGamesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToClientFindTopSourceTVGamesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToClientTopWeekendTourneyGames* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToClientTopWeekendTourneyGames >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToClientTopWeekendTourneyGames >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgClientToGCTopMatchesRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgClientToGCTopMatchesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgClientToGCTopMatchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgClientToGCTopLeagueMatchesRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgClientToGCTopLeagueMatchesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgClientToGCTopLeagueMatchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgClientToGCTopFriendMatchesRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgClientToGCTopFriendMatchesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgClientToGCTopFriendMatchesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgClientToGCMatchesMinimalRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgClientToGCMatchesMinimalRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgClientToGCMatchesMinimalRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgClientToGCMatchesMinimalResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgClientToGCMatchesMinimalResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgClientToGCMatchesMinimalResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToClientTopLeagueMatchesResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToClientTopLeagueMatchesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToClientTopLeagueMatchesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToClientTopFriendMatchesResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToClientTopFriendMatchesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToClientTopFriendMatchesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgClientToGCFindTopMatches* Arena::CreateMaybeMessage< ::proto::dota::CMsgClientToGCFindTopMatches >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgClientToGCFindTopMatches >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToClientFindTopLeagueMatchesResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToClientFindTopLeagueMatchesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToClientFindTopLeagueMatchesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSpectateFriendGame* Arena::CreateMaybeMessage< ::proto::dota::CMsgSpectateFriendGame >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSpectateFriendGame >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgSpectateFriendGameResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgSpectateFriendGameResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgSpectateFriendGameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAReplayDownloadInfo_Highlight* Arena::CreateMaybeMessage< ::proto::dota::CDOTAReplayDownloadInfo_Highlight >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAReplayDownloadInfo_Highlight >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTAReplayDownloadInfo* Arena::CreateMaybeMessage< ::proto::dota::CDOTAReplayDownloadInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTAReplayDownloadInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgWatchGame* Arena::CreateMaybeMessage< ::proto::dota::CMsgWatchGame >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgWatchGame >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgCancelWatchGame* Arena::CreateMaybeMessage< ::proto::dota::CMsgCancelWatchGame >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgCancelWatchGame >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgWatchGameResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgWatchGameResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgWatchGameResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgPartyLeaderWatchGamePrompt* Arena::CreateMaybeMessage< ::proto::dota::CMsgPartyLeaderWatchGamePrompt >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgPartyLeaderWatchGamePrompt >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CDOTABroadcasterInfo* Arena::CreateMaybeMessage< ::proto::dota::CDOTABroadcasterInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CDOTABroadcasterInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTASeries_TeamInfo* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTASeries_TeamInfo >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTASeries_TeamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTASeries_LiveGame* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTASeries_LiveGame >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTASeries_LiveGame >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTASeries* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTASeries >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTASeries >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
