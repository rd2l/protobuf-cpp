// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dota_gcmessages_client_chat.proto

#include "dota_gcmessages_client_chat.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fchat_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAChatChannelMemberUpdate_JoinedMember_dota_5fgcmessages_5fclient_5fchat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fchat_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAChatGetUserListResponse_Member_dota_5fgcmessages_5fclient_5fchat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fchat_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAChatMember_dota_5fgcmessages_5fclient_5fchat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fchat_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAChatMessage_DiceRoll_dota_5fgcmessages_5fclient_5fchat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fchat_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAChatMessage_TriviaAnswered_dota_5fgcmessages_5fclient_5fchat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fchat_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAChatRegionsEnabled_Region_dota_5fgcmessages_5fclient_5fchat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fchat_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARequestChatChannelListResponse_ChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dota_5fgcmessages_5fclient_5fchat_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToClientPrivateChatInfoResponse_Member_dota_5fgcmessages_5fclient_5fchat_2eproto;
namespace proto {
namespace dota {
class CMsgClientToGCPrivateChatInviteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCPrivateChatInvite> _instance;
} _CMsgClientToGCPrivateChatInvite_default_instance_;
class CMsgClientToGCPrivateChatKickDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCPrivateChatKick> _instance;
} _CMsgClientToGCPrivateChatKick_default_instance_;
class CMsgClientToGCPrivateChatPromoteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCPrivateChatPromote> _instance;
} _CMsgClientToGCPrivateChatPromote_default_instance_;
class CMsgClientToGCPrivateChatDemoteDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCPrivateChatDemote> _instance;
} _CMsgClientToGCPrivateChatDemote_default_instance_;
class CMsgGCToClientPrivateChatResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientPrivateChatResponse> _instance;
} _CMsgGCToClientPrivateChatResponse_default_instance_;
class CMsgClientToGCPrivateChatInfoRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgClientToGCPrivateChatInfoRequest> _instance;
} _CMsgClientToGCPrivateChatInfoRequest_default_instance_;
class CMsgGCToClientPrivateChatInfoResponse_MemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientPrivateChatInfoResponse_Member> _instance;
} _CMsgGCToClientPrivateChatInfoResponse_Member_default_instance_;
class CMsgGCToClientPrivateChatInfoResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCToClientPrivateChatInfoResponse> _instance;
} _CMsgGCToClientPrivateChatInfoResponse_default_instance_;
class CMsgDOTAJoinChatChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAJoinChatChannel> _instance;
} _CMsgDOTAJoinChatChannel_default_instance_;
class CMsgDOTALeaveChatChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTALeaveChatChannel> _instance;
} _CMsgDOTALeaveChatChannel_default_instance_;
class CMsgGCChatReportPublicSpamDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgGCChatReportPublicSpam> _instance;
} _CMsgGCChatReportPublicSpam_default_instance_;
class CMsgDOTAClientIgnoredUserDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAClientIgnoredUser> _instance;
} _CMsgDOTAClientIgnoredUser_default_instance_;
class CMsgDOTAChatMessage_DiceRollDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatMessage_DiceRoll> _instance;
} _CMsgDOTAChatMessage_DiceRoll_default_instance_;
class CMsgDOTAChatMessage_TriviaAnsweredDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatMessage_TriviaAnswered> _instance;
} _CMsgDOTAChatMessage_TriviaAnswered_default_instance_;
class CMsgDOTAChatMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatMessage> _instance;
} _CMsgDOTAChatMessage_default_instance_;
class CMsgDOTAChatMemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatMember> _instance;
} _CMsgDOTAChatMember_default_instance_;
class CMsgDOTAJoinChatChannelResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAJoinChatChannelResponse> _instance;
} _CMsgDOTAJoinChatChannelResponse_default_instance_;
class CMsgDOTAChatChannelFullUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatChannelFullUpdate> _instance;
} _CMsgDOTAChatChannelFullUpdate_default_instance_;
class CMsgDOTAOtherJoinedChatChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAOtherJoinedChatChannel> _instance;
} _CMsgDOTAOtherJoinedChatChannel_default_instance_;
class CMsgDOTAOtherLeftChatChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAOtherLeftChatChannel> _instance;
} _CMsgDOTAOtherLeftChatChannel_default_instance_;
class CMsgDOTAChatChannelMemberUpdate_JoinedMemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatChannelMemberUpdate_JoinedMember> _instance;
} _CMsgDOTAChatChannelMemberUpdate_JoinedMember_default_instance_;
class CMsgDOTAChatChannelMemberUpdateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatChannelMemberUpdate> _instance;
} _CMsgDOTAChatChannelMemberUpdate_default_instance_;
class CMsgDOTARequestChatChannelListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARequestChatChannelList> _instance;
} _CMsgDOTARequestChatChannelList_default_instance_;
class CMsgDOTARequestChatChannelListResponse_ChatChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARequestChatChannelListResponse_ChatChannel> _instance;
} _CMsgDOTARequestChatChannelListResponse_ChatChannel_default_instance_;
class CMsgDOTARequestChatChannelListResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTARequestChatChannelListResponse> _instance;
} _CMsgDOTARequestChatChannelListResponse_default_instance_;
class CMsgDOTAChatGetUserListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatGetUserList> _instance;
} _CMsgDOTAChatGetUserList_default_instance_;
class CMsgDOTAChatGetUserListResponse_MemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatGetUserListResponse_Member> _instance;
} _CMsgDOTAChatGetUserListResponse_Member_default_instance_;
class CMsgDOTAChatGetUserListResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatGetUserListResponse> _instance;
} _CMsgDOTAChatGetUserListResponse_default_instance_;
class CMsgDOTAChatGetMemberCountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatGetMemberCount> _instance;
} _CMsgDOTAChatGetMemberCount_default_instance_;
class CMsgDOTAChatGetMemberCountResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatGetMemberCountResponse> _instance;
} _CMsgDOTAChatGetMemberCountResponse_default_instance_;
class CMsgDOTAChatRegionsEnabled_RegionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatRegionsEnabled_Region> _instance;
} _CMsgDOTAChatRegionsEnabled_Region_default_instance_;
class CMsgDOTAChatRegionsEnabledDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CMsgDOTAChatRegionsEnabled> _instance;
} _CMsgDOTAChatRegionsEnabled_default_instance_;
}  // namespace dota
}  // namespace proto
static void InitDefaultsCMsgClientToGCPrivateChatInvite_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgClientToGCPrivateChatInvite_default_instance_;
    new (ptr) ::proto::dota::CMsgClientToGCPrivateChatInvite();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgClientToGCPrivateChatInvite::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientToGCPrivateChatInvite_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientToGCPrivateChatInvite_dota_5fgcmessages_5fclient_5fchat_2eproto}, {}};

static void InitDefaultsCMsgClientToGCPrivateChatKick_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgClientToGCPrivateChatKick_default_instance_;
    new (ptr) ::proto::dota::CMsgClientToGCPrivateChatKick();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgClientToGCPrivateChatKick::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientToGCPrivateChatKick_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientToGCPrivateChatKick_dota_5fgcmessages_5fclient_5fchat_2eproto}, {}};

static void InitDefaultsCMsgClientToGCPrivateChatPromote_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgClientToGCPrivateChatPromote_default_instance_;
    new (ptr) ::proto::dota::CMsgClientToGCPrivateChatPromote();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgClientToGCPrivateChatPromote::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientToGCPrivateChatPromote_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientToGCPrivateChatPromote_dota_5fgcmessages_5fclient_5fchat_2eproto}, {}};

static void InitDefaultsCMsgClientToGCPrivateChatDemote_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgClientToGCPrivateChatDemote_default_instance_;
    new (ptr) ::proto::dota::CMsgClientToGCPrivateChatDemote();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgClientToGCPrivateChatDemote::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientToGCPrivateChatDemote_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientToGCPrivateChatDemote_dota_5fgcmessages_5fclient_5fchat_2eproto}, {}};

static void InitDefaultsCMsgGCToClientPrivateChatResponse_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToClientPrivateChatResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToClientPrivateChatResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToClientPrivateChatResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToClientPrivateChatResponse_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToClientPrivateChatResponse_dota_5fgcmessages_5fclient_5fchat_2eproto}, {}};

static void InitDefaultsCMsgClientToGCPrivateChatInfoRequest_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgClientToGCPrivateChatInfoRequest_default_instance_;
    new (ptr) ::proto::dota::CMsgClientToGCPrivateChatInfoRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgClientToGCPrivateChatInfoRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgClientToGCPrivateChatInfoRequest_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgClientToGCPrivateChatInfoRequest_dota_5fgcmessages_5fclient_5fchat_2eproto}, {}};

static void InitDefaultsCMsgGCToClientPrivateChatInfoResponse_Member_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToClientPrivateChatInfoResponse_Member_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCToClientPrivateChatInfoResponse_Member_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCToClientPrivateChatInfoResponse_Member_dota_5fgcmessages_5fclient_5fchat_2eproto}, {}};

static void InitDefaultsCMsgGCToClientPrivateChatInfoResponse_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCToClientPrivateChatInfoResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgGCToClientPrivateChatInfoResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCToClientPrivateChatInfoResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgGCToClientPrivateChatInfoResponse_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgGCToClientPrivateChatInfoResponse_dota_5fgcmessages_5fclient_5fchat_2eproto}, {
      &scc_info_CMsgGCToClientPrivateChatInfoResponse_Member_dota_5fgcmessages_5fclient_5fchat_2eproto.base,}};

static void InitDefaultsCMsgDOTAJoinChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAJoinChatChannel_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAJoinChatChannel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAJoinChatChannel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAJoinChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAJoinChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto}, {}};

static void InitDefaultsCMsgDOTALeaveChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTALeaveChatChannel_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTALeaveChatChannel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTALeaveChatChannel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTALeaveChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTALeaveChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto}, {}};

static void InitDefaultsCMsgGCChatReportPublicSpam_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgGCChatReportPublicSpam_default_instance_;
    new (ptr) ::proto::dota::CMsgGCChatReportPublicSpam();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgGCChatReportPublicSpam::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgGCChatReportPublicSpam_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgGCChatReportPublicSpam_dota_5fgcmessages_5fclient_5fchat_2eproto}, {}};

static void InitDefaultsCMsgDOTAClientIgnoredUser_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAClientIgnoredUser_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAClientIgnoredUser();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAClientIgnoredUser::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAClientIgnoredUser_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAClientIgnoredUser_dota_5fgcmessages_5fclient_5fchat_2eproto}, {}};

static void InitDefaultsCMsgDOTAChatMessage_DiceRoll_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAChatMessage_DiceRoll_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAChatMessage_DiceRoll();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAChatMessage_DiceRoll::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAChatMessage_DiceRoll_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAChatMessage_DiceRoll_dota_5fgcmessages_5fclient_5fchat_2eproto}, {}};

static void InitDefaultsCMsgDOTAChatMessage_TriviaAnswered_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAChatMessage_TriviaAnswered_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAChatMessage_TriviaAnswered_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAChatMessage_TriviaAnswered_dota_5fgcmessages_5fclient_5fchat_2eproto}, {}};

static void InitDefaultsCMsgDOTAChatMessage_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAChatMessage_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAChatMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAChatMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CMsgDOTAChatMessage_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCMsgDOTAChatMessage_dota_5fgcmessages_5fclient_5fchat_2eproto}, {
      &scc_info_CMsgDOTAChatMessage_DiceRoll_dota_5fgcmessages_5fclient_5fchat_2eproto.base,
      &scc_info_CMsgDOTAChatMessage_TriviaAnswered_dota_5fgcmessages_5fclient_5fchat_2eproto.base,}};

static void InitDefaultsCMsgDOTAChatMember_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAChatMember_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAChatMember();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAChatMember::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAChatMember_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAChatMember_dota_5fgcmessages_5fclient_5fchat_2eproto}, {}};

static void InitDefaultsCMsgDOTAJoinChatChannelResponse_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAJoinChatChannelResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAJoinChatChannelResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAJoinChatChannelResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAJoinChatChannelResponse_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAJoinChatChannelResponse_dota_5fgcmessages_5fclient_5fchat_2eproto}, {
      &scc_info_CMsgDOTAChatMember_dota_5fgcmessages_5fclient_5fchat_2eproto.base,}};

static void InitDefaultsCMsgDOTAChatChannelFullUpdate_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAChatChannelFullUpdate_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAChatChannelFullUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAChatChannelFullUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAChatChannelFullUpdate_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAChatChannelFullUpdate_dota_5fgcmessages_5fclient_5fchat_2eproto}, {
      &scc_info_CMsgDOTAChatMember_dota_5fgcmessages_5fclient_5fchat_2eproto.base,}};

static void InitDefaultsCMsgDOTAOtherJoinedChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAOtherJoinedChatChannel_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAOtherJoinedChatChannel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAOtherJoinedChatChannel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAOtherJoinedChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAOtherJoinedChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto}, {}};

static void InitDefaultsCMsgDOTAOtherLeftChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAOtherLeftChatChannel_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAOtherLeftChatChannel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAOtherLeftChatChannel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAOtherLeftChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAOtherLeftChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto}, {}};

static void InitDefaultsCMsgDOTAChatChannelMemberUpdate_JoinedMember_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAChatChannelMemberUpdate_JoinedMember_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAChatChannelMemberUpdate_JoinedMember_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAChatChannelMemberUpdate_JoinedMember_dota_5fgcmessages_5fclient_5fchat_2eproto}, {}};

static void InitDefaultsCMsgDOTAChatChannelMemberUpdate_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAChatChannelMemberUpdate_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAChatChannelMemberUpdate();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAChatChannelMemberUpdate::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAChatChannelMemberUpdate_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAChatChannelMemberUpdate_dota_5fgcmessages_5fclient_5fchat_2eproto}, {
      &scc_info_CMsgDOTAChatChannelMemberUpdate_JoinedMember_dota_5fgcmessages_5fclient_5fchat_2eproto.base,}};

static void InitDefaultsCMsgDOTARequestChatChannelList_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARequestChatChannelList_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARequestChatChannelList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARequestChatChannelList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARequestChatChannelList_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTARequestChatChannelList_dota_5fgcmessages_5fclient_5fchat_2eproto}, {}};

static void InitDefaultsCMsgDOTARequestChatChannelListResponse_ChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARequestChatChannelListResponse_ChatChannel_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTARequestChatChannelListResponse_ChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTARequestChatChannelListResponse_ChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto}, {}};

static void InitDefaultsCMsgDOTARequestChatChannelListResponse_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTARequestChatChannelListResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTARequestChatChannelListResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTARequestChatChannelListResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTARequestChatChannelListResponse_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTARequestChatChannelListResponse_dota_5fgcmessages_5fclient_5fchat_2eproto}, {
      &scc_info_CMsgDOTARequestChatChannelListResponse_ChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto.base,}};

static void InitDefaultsCMsgDOTAChatGetUserList_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAChatGetUserList_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAChatGetUserList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAChatGetUserList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAChatGetUserList_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAChatGetUserList_dota_5fgcmessages_5fclient_5fchat_2eproto}, {}};

static void InitDefaultsCMsgDOTAChatGetUserListResponse_Member_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAChatGetUserListResponse_Member_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAChatGetUserListResponse_Member();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAChatGetUserListResponse_Member::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAChatGetUserListResponse_Member_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAChatGetUserListResponse_Member_dota_5fgcmessages_5fclient_5fchat_2eproto}, {}};

static void InitDefaultsCMsgDOTAChatGetUserListResponse_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAChatGetUserListResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAChatGetUserListResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAChatGetUserListResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAChatGetUserListResponse_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAChatGetUserListResponse_dota_5fgcmessages_5fclient_5fchat_2eproto}, {
      &scc_info_CMsgDOTAChatGetUserListResponse_Member_dota_5fgcmessages_5fclient_5fchat_2eproto.base,}};

static void InitDefaultsCMsgDOTAChatGetMemberCount_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAChatGetMemberCount_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAChatGetMemberCount();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAChatGetMemberCount::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAChatGetMemberCount_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAChatGetMemberCount_dota_5fgcmessages_5fclient_5fchat_2eproto}, {}};

static void InitDefaultsCMsgDOTAChatGetMemberCountResponse_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAChatGetMemberCountResponse_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAChatGetMemberCountResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAChatGetMemberCountResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAChatGetMemberCountResponse_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAChatGetMemberCountResponse_dota_5fgcmessages_5fclient_5fchat_2eproto}, {}};

static void InitDefaultsCMsgDOTAChatRegionsEnabled_Region_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAChatRegionsEnabled_Region_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAChatRegionsEnabled_Region();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAChatRegionsEnabled_Region::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CMsgDOTAChatRegionsEnabled_Region_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCMsgDOTAChatRegionsEnabled_Region_dota_5fgcmessages_5fclient_5fchat_2eproto}, {}};

static void InitDefaultsCMsgDOTAChatRegionsEnabled_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CMsgDOTAChatRegionsEnabled_default_instance_;
    new (ptr) ::proto::dota::CMsgDOTAChatRegionsEnabled();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CMsgDOTAChatRegionsEnabled::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CMsgDOTAChatRegionsEnabled_dota_5fgcmessages_5fclient_5fchat_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCMsgDOTAChatRegionsEnabled_dota_5fgcmessages_5fclient_5fchat_2eproto}, {
      &scc_info_CMsgDOTAChatRegionsEnabled_Region_dota_5fgcmessages_5fclient_5fchat_2eproto.base,}};

void InitDefaults_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientToGCPrivateChatInvite_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientToGCPrivateChatKick_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientToGCPrivateChatPromote_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientToGCPrivateChatDemote_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToClientPrivateChatResponse_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgClientToGCPrivateChatInfoRequest_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToClientPrivateChatInfoResponse_Member_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCToClientPrivateChatInfoResponse_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAJoinChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTALeaveChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgGCChatReportPublicSpam_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAClientIgnoredUser_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAChatMessage_DiceRoll_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAChatMessage_TriviaAnswered_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAChatMessage_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAChatMember_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAJoinChatChannelResponse_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAChatChannelFullUpdate_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAOtherJoinedChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAOtherLeftChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAChatChannelMemberUpdate_JoinedMember_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAChatChannelMemberUpdate_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARequestChatChannelList_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARequestChatChannelListResponse_ChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTARequestChatChannelListResponse_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAChatGetUserList_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAChatGetUserListResponse_Member_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAChatGetUserListResponse_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAChatGetMemberCount_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAChatGetMemberCountResponse_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAChatRegionsEnabled_Region_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CMsgDOTAChatRegionsEnabled_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[32];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fchat_2eproto[2];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_dota_5fgcmessages_5fclient_5fchat_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCPrivateChatInvite, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCPrivateChatInvite, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCPrivateChatInvite, private_chat_channel_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCPrivateChatInvite, invited_account_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCPrivateChatKick, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCPrivateChatKick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCPrivateChatKick, private_chat_channel_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCPrivateChatKick, kick_account_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCPrivateChatPromote, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCPrivateChatPromote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCPrivateChatPromote, private_chat_channel_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCPrivateChatPromote, promote_account_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCPrivateChatDemote, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCPrivateChatDemote, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCPrivateChatDemote, private_chat_channel_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCPrivateChatDemote, demote_account_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPrivateChatResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPrivateChatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPrivateChatResponse, private_chat_channel_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPrivateChatResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPrivateChatResponse, username_),
  0,
  2,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCPrivateChatInfoRequest, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCPrivateChatInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgClientToGCPrivateChatInfoRequest, private_chat_channel_name_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member, status_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPrivateChatInfoResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPrivateChatInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPrivateChatInfoResponse, private_chat_channel_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPrivateChatInfoResponse, members_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPrivateChatInfoResponse, creator_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCToClientPrivateChatInfoResponse, creation_date_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAJoinChatChannel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAJoinChatChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAJoinChatChannel, channel_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAJoinChatChannel, channel_type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeaveChatChannel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeaveChatChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTALeaveChatChannel, channel_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCChatReportPublicSpam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCChatReportPublicSpam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCChatReportPublicSpam, channel_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgGCChatReportPublicSpam, channel_user_id_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAClientIgnoredUser, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAClientIgnoredUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAClientIgnoredUser, ignored_account_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage_DiceRoll, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage_DiceRoll, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage_DiceRoll, roll_min_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage_DiceRoll, roll_max_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage_DiceRoll, result_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage_TriviaAnswered, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage_TriviaAnswered, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage_TriviaAnswered, question_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage_TriviaAnswered, answer_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage_TriviaAnswered, party_questions_correct_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage_TriviaAnswered, party_questions_viewed_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage_TriviaAnswered, party_trivia_points_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, channel_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, persona_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, text_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, timestamp_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, suggest_invite_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, suggest_invite_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, fantasy_draft_owner_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, fantasy_draft_player_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, event_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, suggest_invite_to_lobby_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, event_points_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, coin_flip_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, player_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, share_profile_account_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, channel_user_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, dice_roll_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, share_party_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, share_lobby_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, share_lobby_custom_game_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, share_lobby_passkey_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, private_chat_channel_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, status_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, legacy_battle_cup_victory_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, battle_cup_streak_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, badge_level_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, suggest_pick_hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, suggest_pick_hero_role_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, suggest_ban_hero_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, trivia_answer_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, requested_ability_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMessage, chat_flags_),
  8,
  7,
  0,
  1,
  9,
  10,
  2,
  11,
  12,
  13,
  17,
  14,
  18,
  31,
  15,
  16,
  5,
  20,
  21,
  22,
  3,
  23,
  24,
  19,
  27,
  25,
  26,
  4,
  28,
  6,
  29,
  30,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMember, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMember, persona_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMember, channel_user_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatMember, status_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAJoinChatChannelResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAJoinChatChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAJoinChatChannelResponse, response_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAJoinChatChannelResponse, channel_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAJoinChatChannelResponse, channel_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAJoinChatChannelResponse, max_members_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAJoinChatChannelResponse, members_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAJoinChatChannelResponse, channel_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAJoinChatChannelResponse, result_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAJoinChatChannelResponse, gc_initiated_join_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAJoinChatChannelResponse, channel_user_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAJoinChatChannelResponse, welcome_message_),
  2,
  0,
  4,
  3,
  ~0u,
  5,
  6,
  7,
  8,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatChannelFullUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatChannelFullUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatChannelFullUpdate, channel_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatChannelFullUpdate, members_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAOtherJoinedChatChannel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAOtherJoinedChatChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAOtherJoinedChatChannel, channel_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAOtherJoinedChatChannel, persona_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAOtherJoinedChatChannel, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAOtherJoinedChatChannel, channel_user_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAOtherJoinedChatChannel, status_),
  1,
  0,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAOtherLeftChatChannel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAOtherLeftChatChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAOtherLeftChatChannel, channel_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAOtherLeftChatChannel, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAOtherLeftChatChannel, channel_user_id_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember, persona_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember, channel_user_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember, status_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatChannelMemberUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatChannelMemberUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatChannelMemberUpdate, channel_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatChannelMemberUpdate, left_steam_ids_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatChannelMemberUpdate, joined_members_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestChatChannelList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestChatChannelList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel, channel_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel, num_members_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel, channel_type_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestChatChannelListResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestChatChannelListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTARequestChatChannelListResponse, channels_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatGetUserList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatGetUserList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatGetUserList, channel_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatGetUserListResponse_Member, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatGetUserListResponse_Member, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatGetUserListResponse_Member, steam_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatGetUserListResponse_Member, persona_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatGetUserListResponse_Member, channel_user_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatGetUserListResponse_Member, status_),
  1,
  0,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatGetUserListResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatGetUserListResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatGetUserListResponse, channel_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatGetUserListResponse, members_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatGetMemberCount, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatGetMemberCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatGetMemberCount, channel_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatGetMemberCount, channel_type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatGetMemberCountResponse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatGetMemberCountResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatGetMemberCountResponse, channel_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatGetMemberCountResponse, channel_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatGetMemberCountResponse, member_count_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatRegionsEnabled_Region, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatRegionsEnabled_Region, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatRegionsEnabled_Region, min_latitude_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatRegionsEnabled_Region, max_latitude_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatRegionsEnabled_Region, min_longitude_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatRegionsEnabled_Region, max_longitude_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatRegionsEnabled, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatRegionsEnabled, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatRegionsEnabled, enable_all_regions_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CMsgDOTAChatRegionsEnabled, enabled_regions_),
  0,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::proto::dota::CMsgClientToGCPrivateChatInvite)},
  { 9, 16, sizeof(::proto::dota::CMsgClientToGCPrivateChatKick)},
  { 18, 25, sizeof(::proto::dota::CMsgClientToGCPrivateChatPromote)},
  { 27, 34, sizeof(::proto::dota::CMsgClientToGCPrivateChatDemote)},
  { 36, 44, sizeof(::proto::dota::CMsgGCToClientPrivateChatResponse)},
  { 47, 53, sizeof(::proto::dota::CMsgClientToGCPrivateChatInfoRequest)},
  { 54, 62, sizeof(::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member)},
  { 65, 74, sizeof(::proto::dota::CMsgGCToClientPrivateChatInfoResponse)},
  { 78, 85, sizeof(::proto::dota::CMsgDOTAJoinChatChannel)},
  { 87, 93, sizeof(::proto::dota::CMsgDOTALeaveChatChannel)},
  { 94, 101, sizeof(::proto::dota::CMsgGCChatReportPublicSpam)},
  { 103, 109, sizeof(::proto::dota::CMsgDOTAClientIgnoredUser)},
  { 110, 118, sizeof(::proto::dota::CMsgDOTAChatMessage_DiceRoll)},
  { 121, 131, sizeof(::proto::dota::CMsgDOTAChatMessage_TriviaAnswered)},
  { 136, 173, sizeof(::proto::dota::CMsgDOTAChatMessage)},
  { 205, 214, sizeof(::proto::dota::CMsgDOTAChatMember)},
  { 218, 233, sizeof(::proto::dota::CMsgDOTAJoinChatChannelResponse)},
  { 243, 250, sizeof(::proto::dota::CMsgDOTAChatChannelFullUpdate)},
  { 252, 262, sizeof(::proto::dota::CMsgDOTAOtherJoinedChatChannel)},
  { 267, 275, sizeof(::proto::dota::CMsgDOTAOtherLeftChatChannel)},
  { 278, 287, sizeof(::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember)},
  { 291, 299, sizeof(::proto::dota::CMsgDOTAChatChannelMemberUpdate)},
  { 302, 307, sizeof(::proto::dota::CMsgDOTARequestChatChannelList)},
  { 307, 315, sizeof(::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel)},
  { 318, 324, sizeof(::proto::dota::CMsgDOTARequestChatChannelListResponse)},
  { 325, 331, sizeof(::proto::dota::CMsgDOTAChatGetUserList)},
  { 332, 341, sizeof(::proto::dota::CMsgDOTAChatGetUserListResponse_Member)},
  { 345, 352, sizeof(::proto::dota::CMsgDOTAChatGetUserListResponse)},
  { 354, 361, sizeof(::proto::dota::CMsgDOTAChatGetMemberCount)},
  { 363, 371, sizeof(::proto::dota::CMsgDOTAChatGetMemberCountResponse)},
  { 374, 383, sizeof(::proto::dota::CMsgDOTAChatRegionsEnabled_Region)},
  { 387, 394, sizeof(::proto::dota::CMsgDOTAChatRegionsEnabled)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgClientToGCPrivateChatInvite_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgClientToGCPrivateChatKick_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgClientToGCPrivateChatPromote_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgClientToGCPrivateChatDemote_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToClientPrivateChatResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgClientToGCPrivateChatInfoRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToClientPrivateChatInfoResponse_Member_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCToClientPrivateChatInfoResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAJoinChatChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTALeaveChatChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgGCChatReportPublicSpam_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAClientIgnoredUser_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAChatMessage_DiceRoll_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAChatMessage_TriviaAnswered_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAChatMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAChatMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAJoinChatChannelResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAChatChannelFullUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAOtherJoinedChatChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAOtherLeftChatChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAChatChannelMemberUpdate_JoinedMember_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAChatChannelMemberUpdate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARequestChatChannelList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARequestChatChannelListResponse_ChatChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTARequestChatChannelListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAChatGetUserList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAChatGetUserListResponse_Member_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAChatGetUserListResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAChatGetMemberCount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAChatGetMemberCountResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAChatRegionsEnabled_Region_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CMsgDOTAChatRegionsEnabled_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto = {
  {}, AddDescriptors_dota_5fgcmessages_5fclient_5fchat_2eproto, "dota_gcmessages_client_chat.proto", schemas,
  file_default_instances, TableStruct_dota_5fgcmessages_5fclient_5fchat_2eproto::offsets,
  file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto, 32, file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fchat_2eproto, file_level_service_descriptors_dota_5fgcmessages_5fclient_5fchat_2eproto,
};

const char descriptor_table_protodef_dota_5fgcmessages_5fclient_5fchat_2eproto[] =
  "\n!dota_gcmessages_client_chat.proto\022\npro"
  "to.dota\032\027dota_shared_enums.proto\"`\n\037CMsg"
  "ClientToGCPrivateChatInvite\022!\n\031private_c"
  "hat_channel_name\030\001 \001(\t\022\032\n\022invited_accoun"
  "t_id\030\002 \001(\r\"[\n\035CMsgClientToGCPrivateChatK"
  "ick\022!\n\031private_chat_channel_name\030\001 \001(\t\022\027"
  "\n\017kick_account_id\030\002 \001(\r\"a\n CMsgClientToG"
  "CPrivateChatPromote\022!\n\031private_chat_chan"
  "nel_name\030\001 \001(\t\022\032\n\022promote_account_id\030\002 \001"
  "(\r\"_\n\037CMsgClientToGCPrivateChatDemote\022!\n"
  "\031private_chat_channel_name\030\001 \001(\t\022\031\n\021demo"
  "te_account_id\030\002 \001(\r\"\310\004\n!CMsgGCToClientPr"
  "ivateChatResponse\022!\n\031private_chat_channe"
  "l_name\030\001 \001(\t\022M\n\006result\030\002 \001(\01624.proto.dot"
  "a.CMsgGCToClientPrivateChatResponse.Resu"
  "lt:\007SUCCESS\022\020\n\010username\030\003 \001(\t\"\236\003\n\006Result"
  "\022\013\n\007SUCCESS\020\000\022\031\n\025FAILURE_CREATION_LOCK\020\001"
  "\022\033\n\027FAILURE_SQL_TRANSACTION\020\002\022\024\n\020FAILURE"
  "_SDO_LOAD\020\003\022\031\n\025FAILURE_NO_PERMISSION\020\004\022\032"
  "\n\026FAILURE_ALREADY_MEMBER\020\005\022\030\n\024FAILURE_NO"
  "T_A_MEMBER\020\007\022\037\n\033FAILURE_NO_REMAINING_ADM"
  "INS\020\010\022\023\n\017FAILURE_NO_ROOM\020\t\022!\n\035FAILURE_CR"
  "EATION_RATE_LIMITED\020\n\022 \n\034FAILURE_UNKNOWN"
  "_CHANNEL_NAME\020\013\022\030\n\024FAILURE_UNKNOWN_USER\020"
  "\014\022\031\n\025FAILURE_UNKNOWN_ERROR\020\r\022\035\n\031FAILURE_"
  "CANNOT_KICK_ADMIN\020\016\022\031\n\025FAILURE_ALREADY_A"
  "DMIN\020\017\"I\n$CMsgClientToGCPrivateChatInfoR"
  "equest\022!\n\031private_chat_channel_name\030\001 \001("
  "\t\"\371\001\n%CMsgGCToClientPrivateChatInfoRespo"
  "nse\022!\n\031private_chat_channel_name\030\001 \001(\t\022I"
  "\n\007members\030\002 \003(\01328.proto.dota.CMsgGCToCli"
  "entPrivateChatInfoResponse.Member\022\017\n\007cre"
  "ator\030\003 \001(\r\022\025\n\rcreation_date\030\004 \001(\r\032:\n\006Mem"
  "ber\022\022\n\naccount_id\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\016\n"
  "\006status\030\003 \001(\r\"\202\001\n\027CMsgDOTAJoinChatChanne"
  "l\022\024\n\014channel_name\030\002 \001(\t\022Q\n\014channel_type\030"
  "\004 \001(\0162!.proto.dota.DOTAChatChannelType_t"
  ":\030DOTAChannelType_Regional\".\n\030CMsgDOTALe"
  "aveChatChannel\022\022\n\nchannel_id\030\001 \001(\004\"I\n\032CM"
  "sgGCChatReportPublicSpam\022\022\n\nchannel_id\030\001"
  " \001(\004\022\027\n\017channel_user_id\030\002 \001(\r\"7\n\031CMsgDOT"
  "AClientIgnoredUser\022\032\n\022ignored_account_id"
  "\030\001 \001(\r\"\225\t\n\023CMsgDOTAChatMessage\022\022\n\naccoun"
  "t_id\030\001 \001(\r\022\022\n\nchannel_id\030\002 \001(\004\022\024\n\014person"
  "a_name\030\003 \001(\t\022\014\n\004text\030\004 \001(\t\022\021\n\ttimestamp\030"
  "\005 \001(\r\022!\n\031suggest_invite_account_id\030\006 \001(\r"
  "\022\033\n\023suggest_invite_name\030\007 \001(\t\022&\n\036fantasy"
  "_draft_owner_account_id\030\010 \001(\r\022\'\n\037fantasy"
  "_draft_player_account_id\030\t \001(\r\022\020\n\010event_"
  "id\030\n \001(\r\022\037\n\027suggest_invite_to_lobby\030\013 \001("
  "\010\022\024\n\014event_points\030\014 \001(\r\022\021\n\tcoin_flip\030\r \001"
  "(\010\022\025\n\tplayer_id\030\016 \001(\005:\002-1\022 \n\030share_profi"
  "le_account_id\030\017 \001(\r\022\027\n\017channel_user_id\030\020"
  " \001(\r\022;\n\tdice_roll\030\021 \001(\0132(.proto.dota.CMs"
  "gDOTAChatMessage.DiceRoll\022\026\n\016share_party"
  "_id\030\022 \001(\004\022\026\n\016share_lobby_id\030\023 \001(\004\022\"\n\032sha"
  "re_lobby_custom_game_id\030\024 \001(\004\022\033\n\023share_l"
  "obby_passkey\030\025 \001(\t\022\037\n\027private_chat_chann"
  "el_id\030\026 \001(\r\022\016\n\006status\030\027 \001(\r\022!\n\031legacy_ba"
  "ttle_cup_victory\030\030 \001(\010\022\031\n\021battle_cup_str"
  "eak\030\035 \001(\r\022\023\n\013badge_level\030\031 \001(\r\022\034\n\024sugges"
  "t_pick_hero_id\030\032 \001(\r\022\036\n\026suggest_pick_her"
  "o_role\030\033 \001(\t\022\033\n\023suggest_ban_hero_id\030\036 \001("
  "\r\022E\n\rtrivia_answer\030  \001(\0132..proto.dota.CM"
  "sgDOTAChatMessage.TriviaAnswered\022\034\n\024requ"
  "ested_ability_id\030! \001(\r\022\022\n\nchat_flags\030\" \001"
  "(\r\032>\n\010DiceRoll\022\020\n\010roll_min\030\001 \001(\005\022\020\n\010roll"
  "_max\030\002 \001(\005\022\016\n\006result\030\003 \001(\005\032\231\001\n\016TriviaAns"
  "wered\022\023\n\013question_id\030\001 \001(\r\022\024\n\014answer_ind"
  "ex\030\002 \001(\r\022\037\n\027party_questions_correct\030\003 \001("
  "\r\022\036\n\026party_questions_viewed\030\004 \001(\r\022\033\n\023par"
  "ty_trivia_points\030\005 \001(\r\"e\n\022CMsgDOTAChatMe"
  "mber\022\020\n\010steam_id\030\001 \001(\006\022\024\n\014persona_name\030\002"
  " \001(\t\022\027\n\017channel_user_id\030\003 \001(\r\022\016\n\006status\030"
  "\004 \001(\r\"\241\006\n\037CMsgDOTAJoinChatChannelRespons"
  "e\022\020\n\010response\030\001 \001(\r\022\024\n\014channel_name\030\002 \001("
  "\t\022\022\n\nchannel_id\030\003 \001(\006\022\023\n\013max_members\030\004 \001"
  "(\r\022/\n\007members\030\005 \003(\0132\036.proto.dota.CMsgDOT"
  "AChatMember\022Q\n\014channel_type\030\006 \001(\0162!.prot"
  "o.dota.DOTAChatChannelType_t:\030DOTAChanne"
  "lType_Regional\022P\n\006result\030\007 \001(\01622.proto.d"
  "ota.CMsgDOTAJoinChatChannelResponse.Resu"
  "lt:\014JOIN_SUCCESS\022\031\n\021gc_initiated_join\030\010 "
  "\001(\010\022\027\n\017channel_user_id\030\t \001(\r\022\027\n\017welcome_"
  "message\030\n \001(\t\"\211\003\n\006Result\022\020\n\014JOIN_SUCCESS"
  "\020\000\022\030\n\024INVALID_CHANNEL_TYPE\020\001\022\025\n\021ACCOUNT_"
  "NOT_FOUND\020\002\022\016\n\nACH_FAILED\020\003\022\035\n\031USER_IN_T"
  "OO_MANY_CHANNELS\020\004\022\027\n\023RATE_LIMIT_EXCEEDE"
  "D\020\005\022\020\n\014CHANNEL_FULL\020\006\022\033\n\027CHANNEL_FULL_OV"
  "ERFLOWED\020\007\022\026\n\022FAILED_TO_ADD_USER\020\010\022\031\n\025CH"
  "ANNEL_TYPE_DISABLED\020\t\022\036\n\032PRIVATE_CHAT_CR"
  "EATE_FAILED\020\n\022\036\n\032PRIVATE_CHAT_NO_PERMISS"
  "ION\020\013\022#\n\037PRIVATE_CHAT_CREATE_LOCK_FAILED"
  "\020\014\022\027\n\023PRIVATE_CHAT_KICKED\020\r\022\024\n\020USER_NOT_"
  "ALLOWED\020\016\"d\n\035CMsgDOTAChatChannelFullUpda"
  "te\022\022\n\nchannel_id\030\001 \001(\006\022/\n\007members\030\002 \003(\0132"
  "\036.proto.dota.CMsgDOTAChatMember\"\205\001\n\036CMsg"
  "DOTAOtherJoinedChatChannel\022\022\n\nchannel_id"
  "\030\001 \001(\006\022\024\n\014persona_name\030\002 \001(\t\022\020\n\010steam_id"
  "\030\003 \001(\006\022\027\n\017channel_user_id\030\004 \001(\r\022\016\n\006statu"
  "s\030\005 \001(\r\"]\n\034CMsgDOTAOtherLeftChatChannel\022"
  "\022\n\nchannel_id\030\001 \001(\006\022\020\n\010steam_id\030\002 \001(\006\022\027\n"
  "\017channel_user_id\030\003 \001(\r\"\200\002\n\037CMsgDOTAChatC"
  "hannelMemberUpdate\022\022\n\nchannel_id\030\001 \001(\006\022\026"
  "\n\016left_steam_ids\030\002 \003(\006\022P\n\016joined_members"
  "\030\003 \003(\01328.proto.dota.CMsgDOTAChatChannelM"
  "emberUpdate.JoinedMember\032_\n\014JoinedMember"
  "\022\020\n\010steam_id\030\001 \001(\006\022\024\n\014persona_name\030\002 \001(\t"
  "\022\027\n\017channel_user_id\030\003 \001(\r\022\016\n\006status\030\004 \001("
  "\r\" \n\036CMsgDOTARequestChatChannelList\"\210\002\n&"
  "CMsgDOTARequestChatChannelListResponse\022P"
  "\n\010channels\030\001 \003(\0132>.proto.dota.CMsgDOTARe"
  "questChatChannelListResponse.ChatChannel"
  "\032\213\001\n\013ChatChannel\022\024\n\014channel_name\030\001 \001(\t\022\023"
  "\n\013num_members\030\002 \001(\r\022Q\n\014channel_type\030\003 \001("
  "\0162!.proto.dota.DOTAChatChannelType_t:\030DO"
  "TAChannelType_Regional\"-\n\027CMsgDOTAChatGe"
  "tUserList\022\022\n\nchannel_id\030\001 \001(\006\"\325\001\n\037CMsgDO"
  "TAChatGetUserListResponse\022\022\n\nchannel_id\030"
  "\001 \001(\006\022C\n\007members\030\002 \003(\01322.proto.dota.CMsg"
  "DOTAChatGetUserListResponse.Member\032Y\n\006Me"
  "mber\022\020\n\010steam_id\030\001 \001(\006\022\024\n\014persona_name\030\002"
  " \001(\t\022\027\n\017channel_user_id\030\003 \001(\r\022\016\n\006status\030"
  "\004 \001(\r\"\205\001\n\032CMsgDOTAChatGetMemberCount\022\024\n\014"
  "channel_name\030\001 \001(\t\022Q\n\014channel_type\030\002 \001(\016"
  "2!.proto.dota.DOTAChatChannelType_t:\030DOT"
  "AChannelType_Regional\"\243\001\n\"CMsgDOTAChatGe"
  "tMemberCountResponse\022\024\n\014channel_name\030\001 \001"
  "(\t\022Q\n\014channel_type\030\002 \001(\0162!.proto.dota.DO"
  "TAChatChannelType_t:\030DOTAChannelType_Reg"
  "ional\022\024\n\014member_count\030\003 \001(\r\"\344\001\n\032CMsgDOTA"
  "ChatRegionsEnabled\022\032\n\022enable_all_regions"
  "\030\001 \001(\010\022F\n\017enabled_regions\030\002 \003(\0132-.proto."
  "dota.CMsgDOTAChatRegionsEnabled.Region\032b"
  "\n\006Region\022\024\n\014min_latitude\030\001 \001(\002\022\024\n\014max_la"
  "titude\030\002 \001(\002\022\025\n\rmin_longitude\030\003 \001(\002\022\025\n\rm"
  "ax_longitude\030\004 \001(\002B\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto = {
  false, InitDefaults_dota_5fgcmessages_5fclient_5fchat_2eproto, 
  descriptor_table_protodef_dota_5fgcmessages_5fclient_5fchat_2eproto,
  "dota_gcmessages_client_chat.proto", &assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto, 5465,
};

void AddDescriptors_dota_5fgcmessages_5fclient_5fchat_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_dota_5fshared_5fenums_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_dota_5fgcmessages_5fclient_5fchat_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dota_5fgcmessages_5fclient_5fchat_2eproto = []() { AddDescriptors_dota_5fgcmessages_5fclient_5fchat_2eproto(); return true; }();
namespace proto {
namespace dota {
const ::google::protobuf::EnumDescriptor* CMsgGCToClientPrivateChatResponse_Result_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fchat_2eproto[0];
}
bool CMsgGCToClientPrivateChatResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::SUCCESS;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_CREATION_LOCK;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_SQL_TRANSACTION;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_SDO_LOAD;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_NO_PERMISSION;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_ALREADY_MEMBER;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_NOT_A_MEMBER;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_NO_REMAINING_ADMINS;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_NO_ROOM;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_CREATION_RATE_LIMITED;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_UNKNOWN_CHANNEL_NAME;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_UNKNOWN_USER;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_UNKNOWN_ERROR;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_CANNOT_KICK_ADMIN;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::FAILURE_ALREADY_ADMIN;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::Result_MIN;
const CMsgGCToClientPrivateChatResponse_Result CMsgGCToClientPrivateChatResponse::Result_MAX;
const int CMsgGCToClientPrivateChatResponse::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CMsgDOTAJoinChatChannelResponse_Result_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return file_level_enum_descriptors_dota_5fgcmessages_5fclient_5fchat_2eproto[1];
}
bool CMsgDOTAJoinChatChannelResponse_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::JOIN_SUCCESS;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::INVALID_CHANNEL_TYPE;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::ACCOUNT_NOT_FOUND;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::ACH_FAILED;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::USER_IN_TOO_MANY_CHANNELS;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::RATE_LIMIT_EXCEEDED;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::CHANNEL_FULL;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::CHANNEL_FULL_OVERFLOWED;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::FAILED_TO_ADD_USER;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::CHANNEL_TYPE_DISABLED;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::PRIVATE_CHAT_CREATE_FAILED;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::PRIVATE_CHAT_NO_PERMISSION;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::PRIVATE_CHAT_CREATE_LOCK_FAILED;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::PRIVATE_CHAT_KICKED;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::USER_NOT_ALLOWED;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::Result_MIN;
const CMsgDOTAJoinChatChannelResponse_Result CMsgDOTAJoinChatChannelResponse::Result_MAX;
const int CMsgDOTAJoinChatChannelResponse::Result_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void CMsgClientToGCPrivateChatInvite::InitAsDefaultInstance() {
}
class CMsgClientToGCPrivateChatInvite::HasBitSetters {
 public:
  static void set_has_private_chat_channel_name(CMsgClientToGCPrivateChatInvite* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_invited_account_id(CMsgClientToGCPrivateChatInvite* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCPrivateChatInvite::kPrivateChatChannelNameFieldNumber;
const int CMsgClientToGCPrivateChatInvite::kInvitedAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCPrivateChatInvite::CMsgClientToGCPrivateChatInvite()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCPrivateChatInvite)
}
CMsgClientToGCPrivateChatInvite::CMsgClientToGCPrivateChatInvite(const CMsgClientToGCPrivateChatInvite& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_private_chat_channel_name()) {
    private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
  }
  invited_account_id_ = from.invited_account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCPrivateChatInvite)
}

void CMsgClientToGCPrivateChatInvite::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientToGCPrivateChatInvite_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  invited_account_id_ = 0u;
}

CMsgClientToGCPrivateChatInvite::~CMsgClientToGCPrivateChatInvite() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCPrivateChatInvite)
  SharedDtor();
}

void CMsgClientToGCPrivateChatInvite::SharedDtor() {
  private_chat_channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientToGCPrivateChatInvite::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientToGCPrivateChatInvite& CMsgClientToGCPrivateChatInvite::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientToGCPrivateChatInvite_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientToGCPrivateChatInvite::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCPrivateChatInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    private_chat_channel_name_.ClearNonDefaultToEmptyNoArena();
  }
  invited_account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientToGCPrivateChatInvite::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientToGCPrivateChatInvite*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgClientToGCPrivateChatInvite.private_chat_channel_name");
        object = msg->mutable_private_chat_channel_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 invited_account_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_invited_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientToGCPrivateChatInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCPrivateChatInvite)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_chat_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_chat_channel_name().data(), static_cast<int>(this->private_chat_channel_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgClientToGCPrivateChatInvite.private_chat_channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 invited_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_invited_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &invited_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCPrivateChatInvite)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCPrivateChatInvite)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientToGCPrivateChatInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCPrivateChatInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), static_cast<int>(this->private_chat_channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCPrivateChatInvite.private_chat_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_chat_channel_name(), output);
  }

  // optional uint32 invited_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->invited_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCPrivateChatInvite)
}

::google::protobuf::uint8* CMsgClientToGCPrivateChatInvite::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCPrivateChatInvite)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), static_cast<int>(this->private_chat_channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCPrivateChatInvite.private_chat_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_chat_channel_name(), target);
  }

  // optional uint32 invited_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->invited_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCPrivateChatInvite)
  return target;
}

size_t CMsgClientToGCPrivateChatInvite::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCPrivateChatInvite)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string private_chat_channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_chat_channel_name());
    }

    // optional uint32 invited_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->invited_account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCPrivateChatInvite::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCPrivateChatInvite)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCPrivateChatInvite* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientToGCPrivateChatInvite>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCPrivateChatInvite)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCPrivateChatInvite)
    MergeFrom(*source);
  }
}

void CMsgClientToGCPrivateChatInvite::MergeFrom(const CMsgClientToGCPrivateChatInvite& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCPrivateChatInvite)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      invited_account_id_ = from.invited_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCPrivateChatInvite::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCPrivateChatInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCPrivateChatInvite::CopyFrom(const CMsgClientToGCPrivateChatInvite& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCPrivateChatInvite)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCPrivateChatInvite::IsInitialized() const {
  return true;
}

void CMsgClientToGCPrivateChatInvite::Swap(CMsgClientToGCPrivateChatInvite* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCPrivateChatInvite::InternalSwap(CMsgClientToGCPrivateChatInvite* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  private_chat_channel_name_.Swap(&other->private_chat_channel_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(invited_account_id_, other->invited_account_id_);
}

::google::protobuf::Metadata CMsgClientToGCPrivateChatInvite::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientToGCPrivateChatKick::InitAsDefaultInstance() {
}
class CMsgClientToGCPrivateChatKick::HasBitSetters {
 public:
  static void set_has_private_chat_channel_name(CMsgClientToGCPrivateChatKick* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_kick_account_id(CMsgClientToGCPrivateChatKick* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCPrivateChatKick::kPrivateChatChannelNameFieldNumber;
const int CMsgClientToGCPrivateChatKick::kKickAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCPrivateChatKick::CMsgClientToGCPrivateChatKick()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCPrivateChatKick)
}
CMsgClientToGCPrivateChatKick::CMsgClientToGCPrivateChatKick(const CMsgClientToGCPrivateChatKick& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_private_chat_channel_name()) {
    private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
  }
  kick_account_id_ = from.kick_account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCPrivateChatKick)
}

void CMsgClientToGCPrivateChatKick::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientToGCPrivateChatKick_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  kick_account_id_ = 0u;
}

CMsgClientToGCPrivateChatKick::~CMsgClientToGCPrivateChatKick() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCPrivateChatKick)
  SharedDtor();
}

void CMsgClientToGCPrivateChatKick::SharedDtor() {
  private_chat_channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientToGCPrivateChatKick::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientToGCPrivateChatKick& CMsgClientToGCPrivateChatKick::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientToGCPrivateChatKick_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientToGCPrivateChatKick::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCPrivateChatKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    private_chat_channel_name_.ClearNonDefaultToEmptyNoArena();
  }
  kick_account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientToGCPrivateChatKick::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientToGCPrivateChatKick*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgClientToGCPrivateChatKick.private_chat_channel_name");
        object = msg->mutable_private_chat_channel_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 kick_account_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_kick_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientToGCPrivateChatKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCPrivateChatKick)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_chat_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_chat_channel_name().data(), static_cast<int>(this->private_chat_channel_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgClientToGCPrivateChatKick.private_chat_channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 kick_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_kick_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &kick_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCPrivateChatKick)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCPrivateChatKick)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientToGCPrivateChatKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCPrivateChatKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), static_cast<int>(this->private_chat_channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCPrivateChatKick.private_chat_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_chat_channel_name(), output);
  }

  // optional uint32 kick_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->kick_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCPrivateChatKick)
}

::google::protobuf::uint8* CMsgClientToGCPrivateChatKick::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCPrivateChatKick)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), static_cast<int>(this->private_chat_channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCPrivateChatKick.private_chat_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_chat_channel_name(), target);
  }

  // optional uint32 kick_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->kick_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCPrivateChatKick)
  return target;
}

size_t CMsgClientToGCPrivateChatKick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCPrivateChatKick)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string private_chat_channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_chat_channel_name());
    }

    // optional uint32 kick_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->kick_account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCPrivateChatKick::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCPrivateChatKick)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCPrivateChatKick* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientToGCPrivateChatKick>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCPrivateChatKick)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCPrivateChatKick)
    MergeFrom(*source);
  }
}

void CMsgClientToGCPrivateChatKick::MergeFrom(const CMsgClientToGCPrivateChatKick& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCPrivateChatKick)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      kick_account_id_ = from.kick_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCPrivateChatKick::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCPrivateChatKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCPrivateChatKick::CopyFrom(const CMsgClientToGCPrivateChatKick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCPrivateChatKick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCPrivateChatKick::IsInitialized() const {
  return true;
}

void CMsgClientToGCPrivateChatKick::Swap(CMsgClientToGCPrivateChatKick* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCPrivateChatKick::InternalSwap(CMsgClientToGCPrivateChatKick* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  private_chat_channel_name_.Swap(&other->private_chat_channel_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(kick_account_id_, other->kick_account_id_);
}

::google::protobuf::Metadata CMsgClientToGCPrivateChatKick::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientToGCPrivateChatPromote::InitAsDefaultInstance() {
}
class CMsgClientToGCPrivateChatPromote::HasBitSetters {
 public:
  static void set_has_private_chat_channel_name(CMsgClientToGCPrivateChatPromote* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_promote_account_id(CMsgClientToGCPrivateChatPromote* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCPrivateChatPromote::kPrivateChatChannelNameFieldNumber;
const int CMsgClientToGCPrivateChatPromote::kPromoteAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCPrivateChatPromote::CMsgClientToGCPrivateChatPromote()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCPrivateChatPromote)
}
CMsgClientToGCPrivateChatPromote::CMsgClientToGCPrivateChatPromote(const CMsgClientToGCPrivateChatPromote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_private_chat_channel_name()) {
    private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
  }
  promote_account_id_ = from.promote_account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCPrivateChatPromote)
}

void CMsgClientToGCPrivateChatPromote::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientToGCPrivateChatPromote_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  promote_account_id_ = 0u;
}

CMsgClientToGCPrivateChatPromote::~CMsgClientToGCPrivateChatPromote() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCPrivateChatPromote)
  SharedDtor();
}

void CMsgClientToGCPrivateChatPromote::SharedDtor() {
  private_chat_channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientToGCPrivateChatPromote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientToGCPrivateChatPromote& CMsgClientToGCPrivateChatPromote::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientToGCPrivateChatPromote_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientToGCPrivateChatPromote::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCPrivateChatPromote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    private_chat_channel_name_.ClearNonDefaultToEmptyNoArena();
  }
  promote_account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientToGCPrivateChatPromote::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientToGCPrivateChatPromote*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgClientToGCPrivateChatPromote.private_chat_channel_name");
        object = msg->mutable_private_chat_channel_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 promote_account_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_promote_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientToGCPrivateChatPromote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCPrivateChatPromote)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_chat_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_chat_channel_name().data(), static_cast<int>(this->private_chat_channel_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgClientToGCPrivateChatPromote.private_chat_channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 promote_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_promote_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &promote_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCPrivateChatPromote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCPrivateChatPromote)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientToGCPrivateChatPromote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCPrivateChatPromote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), static_cast<int>(this->private_chat_channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCPrivateChatPromote.private_chat_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_chat_channel_name(), output);
  }

  // optional uint32 promote_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->promote_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCPrivateChatPromote)
}

::google::protobuf::uint8* CMsgClientToGCPrivateChatPromote::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCPrivateChatPromote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), static_cast<int>(this->private_chat_channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCPrivateChatPromote.private_chat_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_chat_channel_name(), target);
  }

  // optional uint32 promote_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->promote_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCPrivateChatPromote)
  return target;
}

size_t CMsgClientToGCPrivateChatPromote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCPrivateChatPromote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string private_chat_channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_chat_channel_name());
    }

    // optional uint32 promote_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->promote_account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCPrivateChatPromote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCPrivateChatPromote)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCPrivateChatPromote* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientToGCPrivateChatPromote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCPrivateChatPromote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCPrivateChatPromote)
    MergeFrom(*source);
  }
}

void CMsgClientToGCPrivateChatPromote::MergeFrom(const CMsgClientToGCPrivateChatPromote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCPrivateChatPromote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      promote_account_id_ = from.promote_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCPrivateChatPromote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCPrivateChatPromote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCPrivateChatPromote::CopyFrom(const CMsgClientToGCPrivateChatPromote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCPrivateChatPromote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCPrivateChatPromote::IsInitialized() const {
  return true;
}

void CMsgClientToGCPrivateChatPromote::Swap(CMsgClientToGCPrivateChatPromote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCPrivateChatPromote::InternalSwap(CMsgClientToGCPrivateChatPromote* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  private_chat_channel_name_.Swap(&other->private_chat_channel_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(promote_account_id_, other->promote_account_id_);
}

::google::protobuf::Metadata CMsgClientToGCPrivateChatPromote::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientToGCPrivateChatDemote::InitAsDefaultInstance() {
}
class CMsgClientToGCPrivateChatDemote::HasBitSetters {
 public:
  static void set_has_private_chat_channel_name(CMsgClientToGCPrivateChatDemote* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_demote_account_id(CMsgClientToGCPrivateChatDemote* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCPrivateChatDemote::kPrivateChatChannelNameFieldNumber;
const int CMsgClientToGCPrivateChatDemote::kDemoteAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCPrivateChatDemote::CMsgClientToGCPrivateChatDemote()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCPrivateChatDemote)
}
CMsgClientToGCPrivateChatDemote::CMsgClientToGCPrivateChatDemote(const CMsgClientToGCPrivateChatDemote& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_private_chat_channel_name()) {
    private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
  }
  demote_account_id_ = from.demote_account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCPrivateChatDemote)
}

void CMsgClientToGCPrivateChatDemote::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientToGCPrivateChatDemote_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  demote_account_id_ = 0u;
}

CMsgClientToGCPrivateChatDemote::~CMsgClientToGCPrivateChatDemote() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCPrivateChatDemote)
  SharedDtor();
}

void CMsgClientToGCPrivateChatDemote::SharedDtor() {
  private_chat_channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientToGCPrivateChatDemote::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientToGCPrivateChatDemote& CMsgClientToGCPrivateChatDemote::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientToGCPrivateChatDemote_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientToGCPrivateChatDemote::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCPrivateChatDemote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    private_chat_channel_name_.ClearNonDefaultToEmptyNoArena();
  }
  demote_account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientToGCPrivateChatDemote::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientToGCPrivateChatDemote*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgClientToGCPrivateChatDemote.private_chat_channel_name");
        object = msg->mutable_private_chat_channel_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 demote_account_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_demote_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientToGCPrivateChatDemote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCPrivateChatDemote)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_chat_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_chat_channel_name().data(), static_cast<int>(this->private_chat_channel_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgClientToGCPrivateChatDemote.private_chat_channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 demote_account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_demote_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &demote_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCPrivateChatDemote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCPrivateChatDemote)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientToGCPrivateChatDemote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCPrivateChatDemote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), static_cast<int>(this->private_chat_channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCPrivateChatDemote.private_chat_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_chat_channel_name(), output);
  }

  // optional uint32 demote_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->demote_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCPrivateChatDemote)
}

::google::protobuf::uint8* CMsgClientToGCPrivateChatDemote::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCPrivateChatDemote)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), static_cast<int>(this->private_chat_channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCPrivateChatDemote.private_chat_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_chat_channel_name(), target);
  }

  // optional uint32 demote_account_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->demote_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCPrivateChatDemote)
  return target;
}

size_t CMsgClientToGCPrivateChatDemote::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCPrivateChatDemote)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string private_chat_channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_chat_channel_name());
    }

    // optional uint32 demote_account_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->demote_account_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCPrivateChatDemote::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCPrivateChatDemote)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCPrivateChatDemote* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientToGCPrivateChatDemote>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCPrivateChatDemote)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCPrivateChatDemote)
    MergeFrom(*source);
  }
}

void CMsgClientToGCPrivateChatDemote::MergeFrom(const CMsgClientToGCPrivateChatDemote& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCPrivateChatDemote)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      demote_account_id_ = from.demote_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgClientToGCPrivateChatDemote::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCPrivateChatDemote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCPrivateChatDemote::CopyFrom(const CMsgClientToGCPrivateChatDemote& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCPrivateChatDemote)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCPrivateChatDemote::IsInitialized() const {
  return true;
}

void CMsgClientToGCPrivateChatDemote::Swap(CMsgClientToGCPrivateChatDemote* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCPrivateChatDemote::InternalSwap(CMsgClientToGCPrivateChatDemote* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  private_chat_channel_name_.Swap(&other->private_chat_channel_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(demote_account_id_, other->demote_account_id_);
}

::google::protobuf::Metadata CMsgClientToGCPrivateChatDemote::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToClientPrivateChatResponse::InitAsDefaultInstance() {
}
class CMsgGCToClientPrivateChatResponse::HasBitSetters {
 public:
  static void set_has_private_chat_channel_name(CMsgGCToClientPrivateChatResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_result(CMsgGCToClientPrivateChatResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_username(CMsgGCToClientPrivateChatResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientPrivateChatResponse::kPrivateChatChannelNameFieldNumber;
const int CMsgGCToClientPrivateChatResponse::kResultFieldNumber;
const int CMsgGCToClientPrivateChatResponse::kUsernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientPrivateChatResponse::CMsgGCToClientPrivateChatResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientPrivateChatResponse)
}
CMsgGCToClientPrivateChatResponse::CMsgGCToClientPrivateChatResponse(const CMsgGCToClientPrivateChatResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_private_chat_channel_name()) {
    private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
  }
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_username()) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientPrivateChatResponse)
}

void CMsgGCToClientPrivateChatResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCToClientPrivateChatResponse_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

CMsgGCToClientPrivateChatResponse::~CMsgGCToClientPrivateChatResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientPrivateChatResponse)
  SharedDtor();
}

void CMsgGCToClientPrivateChatResponse::SharedDtor() {
  private_chat_channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToClientPrivateChatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToClientPrivateChatResponse& CMsgGCToClientPrivateChatResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToClientPrivateChatResponse_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToClientPrivateChatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientPrivateChatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      private_chat_channel_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      username_.ClearNonDefaultToEmptyNoArena();
    }
  }
  result_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToClientPrivateChatResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToClientPrivateChatResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCToClientPrivateChatResponse.private_chat_channel_name");
        object = msg->mutable_private_chat_channel_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .proto.dota.CMsgGCToClientPrivateChatResponse.Result result = 2 [default = SUCCESS];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgGCToClientPrivateChatResponse_Result_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgGCToClientPrivateChatResponse_Result>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string username = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCToClientPrivateChatResponse.username");
        object = msg->mutable_username();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToClientPrivateChatResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientPrivateChatResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_chat_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_chat_channel_name().data(), static_cast<int>(this->private_chat_channel_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCToClientPrivateChatResponse.private_chat_channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgGCToClientPrivateChatResponse.Result result = 2 [default = SUCCESS];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgGCToClientPrivateChatResponse_Result_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgGCToClientPrivateChatResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string username = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), static_cast<int>(this->username().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCToClientPrivateChatResponse.username");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientPrivateChatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientPrivateChatResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToClientPrivateChatResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientPrivateChatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), static_cast<int>(this->private_chat_channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPrivateChatResponse.private_chat_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_chat_channel_name(), output);
  }

  // optional .proto.dota.CMsgGCToClientPrivateChatResponse.Result result = 2 [default = SUCCESS];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  // optional string username = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPrivateChatResponse.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientPrivateChatResponse)
}

::google::protobuf::uint8* CMsgGCToClientPrivateChatResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientPrivateChatResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), static_cast<int>(this->private_chat_channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPrivateChatResponse.private_chat_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_chat_channel_name(), target);
  }

  // optional .proto.dota.CMsgGCToClientPrivateChatResponse.Result result = 2 [default = SUCCESS];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  // optional string username = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), static_cast<int>(this->username().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPrivateChatResponse.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientPrivateChatResponse)
  return target;
}

size_t CMsgGCToClientPrivateChatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientPrivateChatResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string private_chat_channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_chat_channel_name());
    }

    // optional string username = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // optional .proto.dota.CMsgGCToClientPrivateChatResponse.Result result = 2 [default = SUCCESS];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientPrivateChatResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientPrivateChatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientPrivateChatResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToClientPrivateChatResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientPrivateChatResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientPrivateChatResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToClientPrivateChatResponse::MergeFrom(const CMsgGCToClientPrivateChatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientPrivateChatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientPrivateChatResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientPrivateChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientPrivateChatResponse::CopyFrom(const CMsgGCToClientPrivateChatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientPrivateChatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPrivateChatResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientPrivateChatResponse::Swap(CMsgGCToClientPrivateChatResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientPrivateChatResponse::InternalSwap(CMsgGCToClientPrivateChatResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  private_chat_channel_name_.Swap(&other->private_chat_channel_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  username_.Swap(&other->username_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgGCToClientPrivateChatResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgClientToGCPrivateChatInfoRequest::InitAsDefaultInstance() {
}
class CMsgClientToGCPrivateChatInfoRequest::HasBitSetters {
 public:
  static void set_has_private_chat_channel_name(CMsgClientToGCPrivateChatInfoRequest* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgClientToGCPrivateChatInfoRequest::kPrivateChatChannelNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgClientToGCPrivateChatInfoRequest::CMsgClientToGCPrivateChatInfoRequest()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
}
CMsgClientToGCPrivateChatInfoRequest::CMsgClientToGCPrivateChatInfoRequest(const CMsgClientToGCPrivateChatInfoRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_private_chat_channel_name()) {
    private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
}

void CMsgClientToGCPrivateChatInfoRequest::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgClientToGCPrivateChatInfoRequest_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CMsgClientToGCPrivateChatInfoRequest::~CMsgClientToGCPrivateChatInfoRequest() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
  SharedDtor();
}

void CMsgClientToGCPrivateChatInfoRequest::SharedDtor() {
  private_chat_channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgClientToGCPrivateChatInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgClientToGCPrivateChatInfoRequest& CMsgClientToGCPrivateChatInfoRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgClientToGCPrivateChatInfoRequest_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgClientToGCPrivateChatInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    private_chat_channel_name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgClientToGCPrivateChatInfoRequest::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgClientToGCPrivateChatInfoRequest*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name");
        object = msg->mutable_private_chat_channel_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgClientToGCPrivateChatInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_chat_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_chat_channel_name().data(), static_cast<int>(this->private_chat_channel_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgClientToGCPrivateChatInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), static_cast<int>(this->private_chat_channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_chat_channel_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
}

::google::protobuf::uint8* CMsgClientToGCPrivateChatInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), static_cast<int>(this->private_chat_channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgClientToGCPrivateChatInfoRequest.private_chat_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_chat_channel_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
  return target;
}

size_t CMsgClientToGCPrivateChatInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string private_chat_channel_name = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->private_chat_channel_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgClientToGCPrivateChatInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgClientToGCPrivateChatInfoRequest* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgClientToGCPrivateChatInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
    MergeFrom(*source);
  }
}

void CMsgClientToGCPrivateChatInfoRequest::MergeFrom(const CMsgClientToGCPrivateChatInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_private_chat_channel_name()) {
    _has_bits_[0] |= 0x00000001u;
    private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
  }
}

void CMsgClientToGCPrivateChatInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgClientToGCPrivateChatInfoRequest::CopyFrom(const CMsgClientToGCPrivateChatInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgClientToGCPrivateChatInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgClientToGCPrivateChatInfoRequest::IsInitialized() const {
  return true;
}

void CMsgClientToGCPrivateChatInfoRequest::Swap(CMsgClientToGCPrivateChatInfoRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgClientToGCPrivateChatInfoRequest::InternalSwap(CMsgClientToGCPrivateChatInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  private_chat_channel_name_.Swap(&other->private_chat_channel_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CMsgClientToGCPrivateChatInfoRequest::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToClientPrivateChatInfoResponse_Member::InitAsDefaultInstance() {
}
class CMsgGCToClientPrivateChatInfoResponse_Member::HasBitSetters {
 public:
  static void set_has_account_id(CMsgGCToClientPrivateChatInfoResponse_Member* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_name(CMsgGCToClientPrivateChatInfoResponse_Member* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_status(CMsgGCToClientPrivateChatInfoResponse_Member* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientPrivateChatInfoResponse_Member::kAccountIdFieldNumber;
const int CMsgGCToClientPrivateChatInfoResponse_Member::kNameFieldNumber;
const int CMsgGCToClientPrivateChatInfoResponse_Member::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientPrivateChatInfoResponse_Member::CMsgGCToClientPrivateChatInfoResponse_Member()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
}
CMsgGCToClientPrivateChatInfoResponse_Member::CMsgGCToClientPrivateChatInfoResponse_Member(const CMsgGCToClientPrivateChatInfoResponse_Member& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&account_id_, &from.account_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&account_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
}

void CMsgGCToClientPrivateChatInfoResponse_Member::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCToClientPrivateChatInfoResponse_Member_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&account_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&account_id_)) + sizeof(status_));
}

CMsgGCToClientPrivateChatInfoResponse_Member::~CMsgGCToClientPrivateChatInfoResponse_Member() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
  SharedDtor();
}

void CMsgGCToClientPrivateChatInfoResponse_Member::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToClientPrivateChatInfoResponse_Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToClientPrivateChatInfoResponse_Member& CMsgGCToClientPrivateChatInfoResponse_Member::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToClientPrivateChatInfoResponse_Member_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToClientPrivateChatInfoResponse_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToClientPrivateChatInfoResponse_Member::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToClientPrivateChatInfoResponse_Member*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 status = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_status(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToClientPrivateChatInfoResponse_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_status(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToClientPrivateChatInfoResponse_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional uint32 status = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
}

::google::protobuf::uint8* CMsgGCToClientPrivateChatInfoResponse_Member::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
  return target;
}

size_t CMsgGCToClientPrivateChatInfoResponse_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientPrivateChatInfoResponse_Member::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientPrivateChatInfoResponse_Member* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToClientPrivateChatInfoResponse_Member>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
    MergeFrom(*source);
  }
}

void CMsgGCToClientPrivateChatInfoResponse_Member::MergeFrom(const CMsgGCToClientPrivateChatInfoResponse_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientPrivateChatInfoResponse_Member::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientPrivateChatInfoResponse_Member::CopyFrom(const CMsgGCToClientPrivateChatInfoResponse_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPrivateChatInfoResponse_Member::IsInitialized() const {
  return true;
}

void CMsgGCToClientPrivateChatInfoResponse_Member::Swap(CMsgGCToClientPrivateChatInfoResponse_Member* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientPrivateChatInfoResponse_Member::InternalSwap(CMsgGCToClientPrivateChatInfoResponse_Member* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(account_id_, other->account_id_);
  swap(status_, other->status_);
}

::google::protobuf::Metadata CMsgGCToClientPrivateChatInfoResponse_Member::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCToClientPrivateChatInfoResponse::InitAsDefaultInstance() {
}
class CMsgGCToClientPrivateChatInfoResponse::HasBitSetters {
 public:
  static void set_has_private_chat_channel_name(CMsgGCToClientPrivateChatInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_creator(CMsgGCToClientPrivateChatInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_creation_date(CMsgGCToClientPrivateChatInfoResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCToClientPrivateChatInfoResponse::kPrivateChatChannelNameFieldNumber;
const int CMsgGCToClientPrivateChatInfoResponse::kMembersFieldNumber;
const int CMsgGCToClientPrivateChatInfoResponse::kCreatorFieldNumber;
const int CMsgGCToClientPrivateChatInfoResponse::kCreationDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCToClientPrivateChatInfoResponse::CMsgGCToClientPrivateChatInfoResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
}
CMsgGCToClientPrivateChatInfoResponse::CMsgGCToClientPrivateChatInfoResponse(const CMsgGCToClientPrivateChatInfoResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_private_chat_channel_name()) {
    private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
  }
  ::memcpy(&creator_, &from.creator_,
    static_cast<size_t>(reinterpret_cast<char*>(&creation_date_) -
    reinterpret_cast<char*>(&creator_)) + sizeof(creation_date_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
}

void CMsgGCToClientPrivateChatInfoResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgGCToClientPrivateChatInfoResponse_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  private_chat_channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&creator_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&creation_date_) -
      reinterpret_cast<char*>(&creator_)) + sizeof(creation_date_));
}

CMsgGCToClientPrivateChatInfoResponse::~CMsgGCToClientPrivateChatInfoResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
  SharedDtor();
}

void CMsgGCToClientPrivateChatInfoResponse::SharedDtor() {
  private_chat_channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgGCToClientPrivateChatInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCToClientPrivateChatInfoResponse& CMsgGCToClientPrivateChatInfoResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCToClientPrivateChatInfoResponse_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCToClientPrivateChatInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    private_chat_channel_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&creator_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&creation_date_) -
        reinterpret_cast<char*>(&creator_)) + sizeof(creation_date_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCToClientPrivateChatInfoResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCToClientPrivateChatInfoResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name");
        object = msg->mutable_private_chat_channel_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // repeated .proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member members = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member::_InternalParse;
          object = msg->add_members();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      // optional uint32 creator = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_creator(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 creation_date = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_creation_date(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCToClientPrivateChatInfoResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string private_chat_channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_private_chat_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->private_chat_channel_name().data(), static_cast<int>(this->private_chat_channel_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member members = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 creator = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_creator(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creator_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 creation_date = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_creation_date(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &creation_date_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCToClientPrivateChatInfoResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), static_cast<int>(this->private_chat_channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->private_chat_channel_name(), output);
  }

  // repeated .proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->members(static_cast<int>(i)),
      output);
  }

  // optional uint32 creator = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->creator(), output);
  }

  // optional uint32 creation_date = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->creation_date(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
}

::google::protobuf::uint8* CMsgGCToClientPrivateChatInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string private_chat_channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->private_chat_channel_name().data(), static_cast<int>(this->private_chat_channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgGCToClientPrivateChatInfoResponse.private_chat_channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->private_chat_channel_name(), target);
  }

  // repeated .proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->members(static_cast<int>(i)), target);
  }

  // optional uint32 creator = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->creator(), target);
  }

  // optional uint32 creation_date = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->creation_date(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
  return target;
}

size_t CMsgGCToClientPrivateChatInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgGCToClientPrivateChatInfoResponse.Member members = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->members(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string private_chat_channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->private_chat_channel_name());
    }

    // optional uint32 creator = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creator());
    }

    // optional uint32 creation_date = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->creation_date());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCToClientPrivateChatInfoResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCToClientPrivateChatInfoResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCToClientPrivateChatInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
    MergeFrom(*source);
  }
}

void CMsgGCToClientPrivateChatInfoResponse::MergeFrom(const CMsgGCToClientPrivateChatInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      private_chat_channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_chat_channel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      creator_ = from.creator_;
    }
    if (cached_has_bits & 0x00000004u) {
      creation_date_ = from.creation_date_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCToClientPrivateChatInfoResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCToClientPrivateChatInfoResponse::CopyFrom(const CMsgGCToClientPrivateChatInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCToClientPrivateChatInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCToClientPrivateChatInfoResponse::IsInitialized() const {
  return true;
}

void CMsgGCToClientPrivateChatInfoResponse::Swap(CMsgGCToClientPrivateChatInfoResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCToClientPrivateChatInfoResponse::InternalSwap(CMsgGCToClientPrivateChatInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&members_)->InternalSwap(CastToBase(&other->members_));
  private_chat_channel_name_.Swap(&other->private_chat_channel_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(creator_, other->creator_);
  swap(creation_date_, other->creation_date_);
}

::google::protobuf::Metadata CMsgGCToClientPrivateChatInfoResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAJoinChatChannel::InitAsDefaultInstance() {
}
class CMsgDOTAJoinChatChannel::HasBitSetters {
 public:
  static void set_has_channel_name(CMsgDOTAJoinChatChannel* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_channel_type(CMsgDOTAJoinChatChannel* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAJoinChatChannel::kChannelNameFieldNumber;
const int CMsgDOTAJoinChatChannel::kChannelTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAJoinChatChannel::CMsgDOTAJoinChatChannel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAJoinChatChannel)
}
CMsgDOTAJoinChatChannel::CMsgDOTAJoinChatChannel(const CMsgDOTAJoinChatChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_channel_name()) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  channel_type_ = from.channel_type_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAJoinChatChannel)
}

void CMsgDOTAJoinChatChannel::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAJoinChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_type_ = 0;
}

CMsgDOTAJoinChatChannel::~CMsgDOTAJoinChatChannel() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAJoinChatChannel)
  SharedDtor();
}

void CMsgDOTAJoinChatChannel::SharedDtor() {
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAJoinChatChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAJoinChatChannel& CMsgDOTAJoinChatChannel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAJoinChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAJoinChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAJoinChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    channel_name_.ClearNonDefaultToEmptyNoArena();
  }
  channel_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAJoinChatChannel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAJoinChatChannel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string channel_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAJoinChatChannel.channel_name");
        object = msg->mutable_channel_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .proto.dota.DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTAChatChannelType_t_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(4, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_channel_type(static_cast<::proto::dota::DOTAChatChannelType_t>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAJoinChatChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAJoinChatChannel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string channel_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_name().data(), static_cast<int>(this->channel_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAJoinChatChannel.channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTAChatChannelType_t_IsValid(value)) {
            set_channel_type(static_cast< ::proto::dota::DOTAChatChannelType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                4, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAJoinChatChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAJoinChatChannel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAJoinChatChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAJoinChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAJoinChatChannel.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channel_name(), output);
  }

  // optional .proto.dota.DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->channel_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAJoinChatChannel)
}

::google::protobuf::uint8* CMsgDOTAJoinChatChannel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAJoinChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAJoinChatChannel.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel_name(), target);
  }

  // optional .proto.dota.DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->channel_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAJoinChatChannel)
  return target;
}

size_t CMsgDOTAJoinChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAJoinChatChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string channel_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_name());
    }

    // optional .proto.dota.DOTAChatChannelType_t channel_type = 4 [default = DOTAChannelType_Regional];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAJoinChatChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAJoinChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAJoinChatChannel* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAJoinChatChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAJoinChatChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAJoinChatChannel)
    MergeFrom(*source);
  }
}

void CMsgDOTAJoinChatChannel::MergeFrom(const CMsgDOTAJoinChatChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAJoinChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      channel_type_ = from.channel_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAJoinChatChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAJoinChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAJoinChatChannel::CopyFrom(const CMsgDOTAJoinChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAJoinChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAJoinChatChannel::IsInitialized() const {
  return true;
}

void CMsgDOTAJoinChatChannel::Swap(CMsgDOTAJoinChatChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAJoinChatChannel::InternalSwap(CMsgDOTAJoinChatChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  channel_name_.Swap(&other->channel_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_type_, other->channel_type_);
}

::google::protobuf::Metadata CMsgDOTAJoinChatChannel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTALeaveChatChannel::InitAsDefaultInstance() {
}
class CMsgDOTALeaveChatChannel::HasBitSetters {
 public:
  static void set_has_channel_id(CMsgDOTALeaveChatChannel* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTALeaveChatChannel::kChannelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTALeaveChatChannel::CMsgDOTALeaveChatChannel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTALeaveChatChannel)
}
CMsgDOTALeaveChatChannel::CMsgDOTALeaveChatChannel(const CMsgDOTALeaveChatChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTALeaveChatChannel)
}

void CMsgDOTALeaveChatChannel::SharedCtor() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgDOTALeaveChatChannel::~CMsgDOTALeaveChatChannel() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTALeaveChatChannel)
  SharedDtor();
}

void CMsgDOTALeaveChatChannel::SharedDtor() {
}

void CMsgDOTALeaveChatChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTALeaveChatChannel& CMsgDOTALeaveChatChannel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTALeaveChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTALeaveChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTALeaveChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTALeaveChatChannel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTALeaveChatChannel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 channel_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_channel_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTALeaveChatChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTALeaveChatChannel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_channel_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTALeaveChatChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTALeaveChatChannel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTALeaveChatChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTALeaveChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->channel_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTALeaveChatChannel)
}

::google::protobuf::uint8* CMsgDOTALeaveChatChannel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTALeaveChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->channel_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTALeaveChatChannel)
  return target;
}

size_t CMsgDOTALeaveChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTALeaveChatChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint64 channel_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->channel_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTALeaveChatChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTALeaveChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTALeaveChatChannel* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTALeaveChatChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTALeaveChatChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTALeaveChatChannel)
    MergeFrom(*source);
  }
}

void CMsgDOTALeaveChatChannel::MergeFrom(const CMsgDOTALeaveChatChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTALeaveChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_channel_id()) {
    set_channel_id(from.channel_id());
  }
}

void CMsgDOTALeaveChatChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTALeaveChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTALeaveChatChannel::CopyFrom(const CMsgDOTALeaveChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTALeaveChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTALeaveChatChannel::IsInitialized() const {
  return true;
}

void CMsgDOTALeaveChatChannel::Swap(CMsgDOTALeaveChatChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTALeaveChatChannel::InternalSwap(CMsgDOTALeaveChatChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(channel_id_, other->channel_id_);
}

::google::protobuf::Metadata CMsgDOTALeaveChatChannel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgGCChatReportPublicSpam::InitAsDefaultInstance() {
}
class CMsgGCChatReportPublicSpam::HasBitSetters {
 public:
  static void set_has_channel_id(CMsgGCChatReportPublicSpam* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_channel_user_id(CMsgGCChatReportPublicSpam* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgGCChatReportPublicSpam::kChannelIdFieldNumber;
const int CMsgGCChatReportPublicSpam::kChannelUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgGCChatReportPublicSpam::CMsgGCChatReportPublicSpam()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgGCChatReportPublicSpam)
}
CMsgGCChatReportPublicSpam::CMsgGCChatReportPublicSpam(const CMsgGCChatReportPublicSpam& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&channel_id_, &from.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_user_id_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(channel_user_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgGCChatReportPublicSpam)
}

void CMsgGCChatReportPublicSpam::SharedCtor() {
  ::memset(&channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_user_id_) -
      reinterpret_cast<char*>(&channel_id_)) + sizeof(channel_user_id_));
}

CMsgGCChatReportPublicSpam::~CMsgGCChatReportPublicSpam() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgGCChatReportPublicSpam)
  SharedDtor();
}

void CMsgGCChatReportPublicSpam::SharedDtor() {
}

void CMsgGCChatReportPublicSpam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgGCChatReportPublicSpam& CMsgGCChatReportPublicSpam::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgGCChatReportPublicSpam_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgGCChatReportPublicSpam::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgGCChatReportPublicSpam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&channel_user_id_) -
        reinterpret_cast<char*>(&channel_id_)) + sizeof(channel_user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgGCChatReportPublicSpam::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgGCChatReportPublicSpam*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint64 channel_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_channel_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 channel_user_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_channel_user_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgGCChatReportPublicSpam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgGCChatReportPublicSpam)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_channel_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel_user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_channel_user_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgGCChatReportPublicSpam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgGCChatReportPublicSpam)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgGCChatReportPublicSpam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgGCChatReportPublicSpam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->channel_id(), output);
  }

  // optional uint32 channel_user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->channel_user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgGCChatReportPublicSpam)
}

::google::protobuf::uint8* CMsgGCChatReportPublicSpam::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgGCChatReportPublicSpam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->channel_id(), target);
  }

  // optional uint32 channel_user_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->channel_user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgGCChatReportPublicSpam)
  return target;
}

size_t CMsgGCChatReportPublicSpam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgGCChatReportPublicSpam)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint64 channel_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->channel_id());
    }

    // optional uint32 channel_user_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgGCChatReportPublicSpam::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgGCChatReportPublicSpam)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgGCChatReportPublicSpam* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgGCChatReportPublicSpam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgGCChatReportPublicSpam)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgGCChatReportPublicSpam)
    MergeFrom(*source);
  }
}

void CMsgGCChatReportPublicSpam::MergeFrom(const CMsgGCChatReportPublicSpam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgGCChatReportPublicSpam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      channel_id_ = from.channel_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      channel_user_id_ = from.channel_user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgGCChatReportPublicSpam::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgGCChatReportPublicSpam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgGCChatReportPublicSpam::CopyFrom(const CMsgGCChatReportPublicSpam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgGCChatReportPublicSpam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgGCChatReportPublicSpam::IsInitialized() const {
  return true;
}

void CMsgGCChatReportPublicSpam::Swap(CMsgGCChatReportPublicSpam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgGCChatReportPublicSpam::InternalSwap(CMsgGCChatReportPublicSpam* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(channel_id_, other->channel_id_);
  swap(channel_user_id_, other->channel_user_id_);
}

::google::protobuf::Metadata CMsgGCChatReportPublicSpam::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAClientIgnoredUser::InitAsDefaultInstance() {
}
class CMsgDOTAClientIgnoredUser::HasBitSetters {
 public:
  static void set_has_ignored_account_id(CMsgDOTAClientIgnoredUser* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAClientIgnoredUser::kIgnoredAccountIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAClientIgnoredUser::CMsgDOTAClientIgnoredUser()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAClientIgnoredUser)
}
CMsgDOTAClientIgnoredUser::CMsgDOTAClientIgnoredUser(const CMsgDOTAClientIgnoredUser& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ignored_account_id_ = from.ignored_account_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAClientIgnoredUser)
}

void CMsgDOTAClientIgnoredUser::SharedCtor() {
  ignored_account_id_ = 0u;
}

CMsgDOTAClientIgnoredUser::~CMsgDOTAClientIgnoredUser() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAClientIgnoredUser)
  SharedDtor();
}

void CMsgDOTAClientIgnoredUser::SharedDtor() {
}

void CMsgDOTAClientIgnoredUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAClientIgnoredUser& CMsgDOTAClientIgnoredUser::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAClientIgnoredUser_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAClientIgnoredUser::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAClientIgnoredUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ignored_account_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAClientIgnoredUser::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAClientIgnoredUser*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 ignored_account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ignored_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAClientIgnoredUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAClientIgnoredUser)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ignored_account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ignored_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ignored_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAClientIgnoredUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAClientIgnoredUser)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAClientIgnoredUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAClientIgnoredUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ignored_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ignored_account_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAClientIgnoredUser)
}

::google::protobuf::uint8* CMsgDOTAClientIgnoredUser::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAClientIgnoredUser)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ignored_account_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ignored_account_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAClientIgnoredUser)
  return target;
}

size_t CMsgDOTAClientIgnoredUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAClientIgnoredUser)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 ignored_account_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ignored_account_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAClientIgnoredUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAClientIgnoredUser)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAClientIgnoredUser* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAClientIgnoredUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAClientIgnoredUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAClientIgnoredUser)
    MergeFrom(*source);
  }
}

void CMsgDOTAClientIgnoredUser::MergeFrom(const CMsgDOTAClientIgnoredUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAClientIgnoredUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ignored_account_id()) {
    set_ignored_account_id(from.ignored_account_id());
  }
}

void CMsgDOTAClientIgnoredUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAClientIgnoredUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAClientIgnoredUser::CopyFrom(const CMsgDOTAClientIgnoredUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAClientIgnoredUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAClientIgnoredUser::IsInitialized() const {
  return true;
}

void CMsgDOTAClientIgnoredUser::Swap(CMsgDOTAClientIgnoredUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAClientIgnoredUser::InternalSwap(CMsgDOTAClientIgnoredUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ignored_account_id_, other->ignored_account_id_);
}

::google::protobuf::Metadata CMsgDOTAClientIgnoredUser::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAChatMessage_DiceRoll::InitAsDefaultInstance() {
}
class CMsgDOTAChatMessage_DiceRoll::HasBitSetters {
 public:
  static void set_has_roll_min(CMsgDOTAChatMessage_DiceRoll* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_roll_max(CMsgDOTAChatMessage_DiceRoll* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_result(CMsgDOTAChatMessage_DiceRoll* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatMessage_DiceRoll::kRollMinFieldNumber;
const int CMsgDOTAChatMessage_DiceRoll::kRollMaxFieldNumber;
const int CMsgDOTAChatMessage_DiceRoll::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatMessage_DiceRoll::CMsgDOTAChatMessage_DiceRoll()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatMessage.DiceRoll)
}
CMsgDOTAChatMessage_DiceRoll::CMsgDOTAChatMessage_DiceRoll(const CMsgDOTAChatMessage_DiceRoll& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&roll_min_, &from.roll_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&roll_min_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatMessage.DiceRoll)
}

void CMsgDOTAChatMessage_DiceRoll::SharedCtor() {
  ::memset(&roll_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&roll_min_)) + sizeof(result_));
}

CMsgDOTAChatMessage_DiceRoll::~CMsgDOTAChatMessage_DiceRoll() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatMessage.DiceRoll)
  SharedDtor();
}

void CMsgDOTAChatMessage_DiceRoll::SharedDtor() {
}

void CMsgDOTAChatMessage_DiceRoll::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAChatMessage_DiceRoll& CMsgDOTAChatMessage_DiceRoll::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAChatMessage_DiceRoll_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAChatMessage_DiceRoll::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatMessage.DiceRoll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&roll_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&roll_min_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAChatMessage_DiceRoll::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAChatMessage_DiceRoll*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 roll_min = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_roll_min(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 roll_max = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_roll_max(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 result = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_result(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAChatMessage_DiceRoll::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatMessage.DiceRoll)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roll_min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_roll_min(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roll_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 roll_max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_roll_max(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roll_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_result(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatMessage.DiceRoll)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatMessage.DiceRoll)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAChatMessage_DiceRoll::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatMessage.DiceRoll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 roll_min = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roll_min(), output);
  }

  // optional int32 roll_max = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roll_max(), output);
  }

  // optional int32 result = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatMessage.DiceRoll)
}

::google::protobuf::uint8* CMsgDOTAChatMessage_DiceRoll::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatMessage.DiceRoll)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 roll_min = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roll_min(), target);
  }

  // optional int32 roll_max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roll_max(), target);
  }

  // optional int32 result = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatMessage.DiceRoll)
  return target;
}

size_t CMsgDOTAChatMessage_DiceRoll::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatMessage.DiceRoll)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 roll_min = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roll_min());
    }

    // optional int32 roll_max = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roll_max());
    }

    // optional int32 result = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatMessage_DiceRoll::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatMessage.DiceRoll)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatMessage_DiceRoll* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAChatMessage_DiceRoll>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatMessage.DiceRoll)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatMessage.DiceRoll)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatMessage_DiceRoll::MergeFrom(const CMsgDOTAChatMessage_DiceRoll& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatMessage.DiceRoll)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      roll_min_ = from.roll_min_;
    }
    if (cached_has_bits & 0x00000002u) {
      roll_max_ = from.roll_max_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChatMessage_DiceRoll::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatMessage.DiceRoll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatMessage_DiceRoll::CopyFrom(const CMsgDOTAChatMessage_DiceRoll& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatMessage.DiceRoll)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatMessage_DiceRoll::IsInitialized() const {
  return true;
}

void CMsgDOTAChatMessage_DiceRoll::Swap(CMsgDOTAChatMessage_DiceRoll* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatMessage_DiceRoll::InternalSwap(CMsgDOTAChatMessage_DiceRoll* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(roll_min_, other->roll_min_);
  swap(roll_max_, other->roll_max_);
  swap(result_, other->result_);
}

::google::protobuf::Metadata CMsgDOTAChatMessage_DiceRoll::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAChatMessage_TriviaAnswered::InitAsDefaultInstance() {
}
class CMsgDOTAChatMessage_TriviaAnswered::HasBitSetters {
 public:
  static void set_has_question_id(CMsgDOTAChatMessage_TriviaAnswered* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_answer_index(CMsgDOTAChatMessage_TriviaAnswered* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_party_questions_correct(CMsgDOTAChatMessage_TriviaAnswered* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_party_questions_viewed(CMsgDOTAChatMessage_TriviaAnswered* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_party_trivia_points(CMsgDOTAChatMessage_TriviaAnswered* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatMessage_TriviaAnswered::kQuestionIdFieldNumber;
const int CMsgDOTAChatMessage_TriviaAnswered::kAnswerIndexFieldNumber;
const int CMsgDOTAChatMessage_TriviaAnswered::kPartyQuestionsCorrectFieldNumber;
const int CMsgDOTAChatMessage_TriviaAnswered::kPartyQuestionsViewedFieldNumber;
const int CMsgDOTAChatMessage_TriviaAnswered::kPartyTriviaPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatMessage_TriviaAnswered::CMsgDOTAChatMessage_TriviaAnswered()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
}
CMsgDOTAChatMessage_TriviaAnswered::CMsgDOTAChatMessage_TriviaAnswered(const CMsgDOTAChatMessage_TriviaAnswered& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&question_id_, &from.question_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&party_trivia_points_) -
    reinterpret_cast<char*>(&question_id_)) + sizeof(party_trivia_points_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
}

void CMsgDOTAChatMessage_TriviaAnswered::SharedCtor() {
  ::memset(&question_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&party_trivia_points_) -
      reinterpret_cast<char*>(&question_id_)) + sizeof(party_trivia_points_));
}

CMsgDOTAChatMessage_TriviaAnswered::~CMsgDOTAChatMessage_TriviaAnswered() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
  SharedDtor();
}

void CMsgDOTAChatMessage_TriviaAnswered::SharedDtor() {
}

void CMsgDOTAChatMessage_TriviaAnswered::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAChatMessage_TriviaAnswered& CMsgDOTAChatMessage_TriviaAnswered::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAChatMessage_TriviaAnswered_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAChatMessage_TriviaAnswered::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&question_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&party_trivia_points_) -
        reinterpret_cast<char*>(&question_id_)) + sizeof(party_trivia_points_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAChatMessage_TriviaAnswered::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAChatMessage_TriviaAnswered*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 question_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_question_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 answer_index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_answer_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 party_questions_correct = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_party_questions_correct(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 party_questions_viewed = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_party_questions_viewed(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 party_trivia_points = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_party_trivia_points(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAChatMessage_TriviaAnswered::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 question_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_question_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &question_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 answer_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_answer_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &answer_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 party_questions_correct = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_party_questions_correct(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &party_questions_correct_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 party_questions_viewed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_party_questions_viewed(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &party_questions_viewed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 party_trivia_points = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_party_trivia_points(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &party_trivia_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAChatMessage_TriviaAnswered::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 question_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->question_id(), output);
  }

  // optional uint32 answer_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->answer_index(), output);
  }

  // optional uint32 party_questions_correct = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->party_questions_correct(), output);
  }

  // optional uint32 party_questions_viewed = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->party_questions_viewed(), output);
  }

  // optional uint32 party_trivia_points = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->party_trivia_points(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
}

::google::protobuf::uint8* CMsgDOTAChatMessage_TriviaAnswered::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 question_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->question_id(), target);
  }

  // optional uint32 answer_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->answer_index(), target);
  }

  // optional uint32 party_questions_correct = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->party_questions_correct(), target);
  }

  // optional uint32 party_questions_viewed = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->party_questions_viewed(), target);
  }

  // optional uint32 party_trivia_points = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->party_trivia_points(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
  return target;
}

size_t CMsgDOTAChatMessage_TriviaAnswered::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional uint32 question_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->question_id());
    }

    // optional uint32 answer_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->answer_index());
    }

    // optional uint32 party_questions_correct = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->party_questions_correct());
    }

    // optional uint32 party_questions_viewed = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->party_questions_viewed());
    }

    // optional uint32 party_trivia_points = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->party_trivia_points());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatMessage_TriviaAnswered::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatMessage_TriviaAnswered* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAChatMessage_TriviaAnswered>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatMessage_TriviaAnswered::MergeFrom(const CMsgDOTAChatMessage_TriviaAnswered& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      question_id_ = from.question_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      answer_index_ = from.answer_index_;
    }
    if (cached_has_bits & 0x00000004u) {
      party_questions_correct_ = from.party_questions_correct_;
    }
    if (cached_has_bits & 0x00000008u) {
      party_questions_viewed_ = from.party_questions_viewed_;
    }
    if (cached_has_bits & 0x00000010u) {
      party_trivia_points_ = from.party_trivia_points_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChatMessage_TriviaAnswered::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatMessage_TriviaAnswered::CopyFrom(const CMsgDOTAChatMessage_TriviaAnswered& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatMessage.TriviaAnswered)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatMessage_TriviaAnswered::IsInitialized() const {
  return true;
}

void CMsgDOTAChatMessage_TriviaAnswered::Swap(CMsgDOTAChatMessage_TriviaAnswered* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatMessage_TriviaAnswered::InternalSwap(CMsgDOTAChatMessage_TriviaAnswered* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(question_id_, other->question_id_);
  swap(answer_index_, other->answer_index_);
  swap(party_questions_correct_, other->party_questions_correct_);
  swap(party_questions_viewed_, other->party_questions_viewed_);
  swap(party_trivia_points_, other->party_trivia_points_);
}

::google::protobuf::Metadata CMsgDOTAChatMessage_TriviaAnswered::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAChatMessage::InitAsDefaultInstance() {
  ::proto::dota::_CMsgDOTAChatMessage_default_instance_._instance.get_mutable()->dice_roll_ = const_cast< ::proto::dota::CMsgDOTAChatMessage_DiceRoll*>(
      ::proto::dota::CMsgDOTAChatMessage_DiceRoll::internal_default_instance());
  ::proto::dota::_CMsgDOTAChatMessage_default_instance_._instance.get_mutable()->trivia_answer_ = const_cast< ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered*>(
      ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered::internal_default_instance());
}
class CMsgDOTAChatMessage::HasBitSetters {
 public:
  static void set_has_account_id(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_channel_id(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_persona_name(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_text(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_timestamp(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_suggest_invite_account_id(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_suggest_invite_name(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_fantasy_draft_owner_account_id(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static void set_has_fantasy_draft_player_account_id(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static void set_has_event_id(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static void set_has_suggest_invite_to_lobby(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_event_points(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static void set_has_coin_flip(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static void set_has_player_id(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x80000000u;
  }
  static void set_has_share_profile_account_id(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static void set_has_channel_user_id(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
  static const ::proto::dota::CMsgDOTAChatMessage_DiceRoll& dice_roll(const CMsgDOTAChatMessage* msg);
  static void set_has_dice_roll(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_share_party_id(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00100000u;
  }
  static void set_has_share_lobby_id(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00200000u;
  }
  static void set_has_share_lobby_custom_game_id(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00400000u;
  }
  static void set_has_share_lobby_passkey(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_private_chat_channel_id(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00800000u;
  }
  static void set_has_status(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x01000000u;
  }
  static void set_has_legacy_battle_cup_victory(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00080000u;
  }
  static void set_has_battle_cup_streak(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x08000000u;
  }
  static void set_has_badge_level(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x02000000u;
  }
  static void set_has_suggest_pick_hero_id(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x04000000u;
  }
  static void set_has_suggest_pick_hero_role(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_suggest_ban_hero_id(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x10000000u;
  }
  static const ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered& trivia_answer(const CMsgDOTAChatMessage* msg);
  static void set_has_trivia_answer(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_requested_ability_id(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x20000000u;
  }
  static void set_has_chat_flags(CMsgDOTAChatMessage* msg) {
    msg->_has_bits_[0] |= 0x40000000u;
  }
};

const ::proto::dota::CMsgDOTAChatMessage_DiceRoll&
CMsgDOTAChatMessage::HasBitSetters::dice_roll(const CMsgDOTAChatMessage* msg) {
  return *msg->dice_roll_;
}
const ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered&
CMsgDOTAChatMessage::HasBitSetters::trivia_answer(const CMsgDOTAChatMessage* msg) {
  return *msg->trivia_answer_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatMessage::kAccountIdFieldNumber;
const int CMsgDOTAChatMessage::kChannelIdFieldNumber;
const int CMsgDOTAChatMessage::kPersonaNameFieldNumber;
const int CMsgDOTAChatMessage::kTextFieldNumber;
const int CMsgDOTAChatMessage::kTimestampFieldNumber;
const int CMsgDOTAChatMessage::kSuggestInviteAccountIdFieldNumber;
const int CMsgDOTAChatMessage::kSuggestInviteNameFieldNumber;
const int CMsgDOTAChatMessage::kFantasyDraftOwnerAccountIdFieldNumber;
const int CMsgDOTAChatMessage::kFantasyDraftPlayerAccountIdFieldNumber;
const int CMsgDOTAChatMessage::kEventIdFieldNumber;
const int CMsgDOTAChatMessage::kSuggestInviteToLobbyFieldNumber;
const int CMsgDOTAChatMessage::kEventPointsFieldNumber;
const int CMsgDOTAChatMessage::kCoinFlipFieldNumber;
const int CMsgDOTAChatMessage::kPlayerIdFieldNumber;
const int CMsgDOTAChatMessage::kShareProfileAccountIdFieldNumber;
const int CMsgDOTAChatMessage::kChannelUserIdFieldNumber;
const int CMsgDOTAChatMessage::kDiceRollFieldNumber;
const int CMsgDOTAChatMessage::kSharePartyIdFieldNumber;
const int CMsgDOTAChatMessage::kShareLobbyIdFieldNumber;
const int CMsgDOTAChatMessage::kShareLobbyCustomGameIdFieldNumber;
const int CMsgDOTAChatMessage::kShareLobbyPasskeyFieldNumber;
const int CMsgDOTAChatMessage::kPrivateChatChannelIdFieldNumber;
const int CMsgDOTAChatMessage::kStatusFieldNumber;
const int CMsgDOTAChatMessage::kLegacyBattleCupVictoryFieldNumber;
const int CMsgDOTAChatMessage::kBattleCupStreakFieldNumber;
const int CMsgDOTAChatMessage::kBadgeLevelFieldNumber;
const int CMsgDOTAChatMessage::kSuggestPickHeroIdFieldNumber;
const int CMsgDOTAChatMessage::kSuggestPickHeroRoleFieldNumber;
const int CMsgDOTAChatMessage::kSuggestBanHeroIdFieldNumber;
const int CMsgDOTAChatMessage::kTriviaAnswerFieldNumber;
const int CMsgDOTAChatMessage::kRequestedAbilityIdFieldNumber;
const int CMsgDOTAChatMessage::kChatFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatMessage::CMsgDOTAChatMessage()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatMessage)
}
CMsgDOTAChatMessage::CMsgDOTAChatMessage(const CMsgDOTAChatMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  suggest_invite_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_suggest_invite_name()) {
    suggest_invite_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suggest_invite_name_);
  }
  share_lobby_passkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_share_lobby_passkey()) {
    share_lobby_passkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.share_lobby_passkey_);
  }
  suggest_pick_hero_role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_suggest_pick_hero_role()) {
    suggest_pick_hero_role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suggest_pick_hero_role_);
  }
  if (from.has_dice_roll()) {
    dice_roll_ = new ::proto::dota::CMsgDOTAChatMessage_DiceRoll(*from.dice_roll_);
  } else {
    dice_roll_ = nullptr;
  }
  if (from.has_trivia_answer()) {
    trivia_answer_ = new ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered(*from.trivia_answer_);
  } else {
    trivia_answer_ = nullptr;
  }
  ::memcpy(&channel_id_, &from.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&player_id_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(player_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatMessage)
}

void CMsgDOTAChatMessage::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAChatMessage_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suggest_invite_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_lobby_passkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suggest_pick_hero_role_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&dice_roll_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_flags_) -
      reinterpret_cast<char*>(&dice_roll_)) + sizeof(chat_flags_));
  player_id_ = -1;
}

CMsgDOTAChatMessage::~CMsgDOTAChatMessage() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatMessage)
  SharedDtor();
}

void CMsgDOTAChatMessage::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suggest_invite_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_lobby_passkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  suggest_pick_hero_role_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete dice_roll_;
  if (this != internal_default_instance()) delete trivia_answer_;
}

void CMsgDOTAChatMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAChatMessage& CMsgDOTAChatMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAChatMessage_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAChatMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      persona_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      text_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      suggest_invite_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      share_lobby_passkey_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      suggest_pick_hero_role_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(dice_roll_ != nullptr);
      dice_roll_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(trivia_answer_ != nullptr);
      trivia_answer_->Clear();
    }
  }
  channel_id_ = PROTOBUF_ULONGLONG(0);
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&account_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&share_profile_account_id_) -
        reinterpret_cast<char*>(&account_id_)) + sizeof(share_profile_account_id_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&channel_user_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&private_chat_channel_id_) -
        reinterpret_cast<char*>(&channel_user_id_)) + sizeof(private_chat_channel_id_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&status_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_flags_) -
        reinterpret_cast<char*>(&status_)) + sizeof(chat_flags_));
    player_id_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAChatMessage::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAChatMessage*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 channel_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_channel_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string persona_name = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAChatMessage.persona_name");
        object = msg->mutable_persona_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string text = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAChatMessage.text");
        object = msg->mutable_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 timestamp = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_timestamp(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 suggest_invite_account_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_suggest_invite_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string suggest_invite_name = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAChatMessage.suggest_invite_name");
        object = msg->mutable_suggest_invite_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 fantasy_draft_owner_account_id = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_fantasy_draft_owner_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 fantasy_draft_player_account_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_fantasy_draft_player_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 event_id = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 80) goto handle_unusual;
        msg->set_event_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool suggest_invite_to_lobby = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 88) goto handle_unusual;
        msg->set_suggest_invite_to_lobby(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 event_points = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 96) goto handle_unusual;
        msg->set_event_points(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool coin_flip = 13;
      case 13: {
        if (static_cast<::google::protobuf::uint8>(tag) != 104) goto handle_unusual;
        msg->set_coin_flip(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 player_id = 14 [default = -1];
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 112) goto handle_unusual;
        msg->set_player_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 share_profile_account_id = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 120) goto handle_unusual;
        msg->set_share_profile_account_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 channel_user_id = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 128) goto handle_unusual;
        msg->set_channel_user_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgDOTAChatMessage.DiceRoll dice_roll = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTAChatMessage_DiceRoll::_InternalParse;
        object = msg->mutable_dice_roll();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint64 share_party_id = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 144) goto handle_unusual;
        msg->set_share_party_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 share_lobby_id = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 152) goto handle_unusual;
        msg->set_share_lobby_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint64 share_lobby_custom_game_id = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 160) goto handle_unusual;
        msg->set_share_lobby_custom_game_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string share_lobby_passkey = 21;
      case 21: {
        if (static_cast<::google::protobuf::uint8>(tag) != 170) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAChatMessage.share_lobby_passkey");
        object = msg->mutable_share_lobby_passkey();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 private_chat_channel_id = 22;
      case 22: {
        if (static_cast<::google::protobuf::uint8>(tag) != 176) goto handle_unusual;
        msg->set_private_chat_channel_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 status = 23;
      case 23: {
        if (static_cast<::google::protobuf::uint8>(tag) != 184) goto handle_unusual;
        msg->set_status(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool legacy_battle_cup_victory = 24;
      case 24: {
        if (static_cast<::google::protobuf::uint8>(tag) != 192) goto handle_unusual;
        msg->set_legacy_battle_cup_victory(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 badge_level = 25;
      case 25: {
        if (static_cast<::google::protobuf::uint8>(tag) != 200) goto handle_unusual;
        msg->set_badge_level(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 suggest_pick_hero_id = 26;
      case 26: {
        if (static_cast<::google::protobuf::uint8>(tag) != 208) goto handle_unusual;
        msg->set_suggest_pick_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string suggest_pick_hero_role = 27;
      case 27: {
        if (static_cast<::google::protobuf::uint8>(tag) != 218) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAChatMessage.suggest_pick_hero_role");
        object = msg->mutable_suggest_pick_hero_role();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 battle_cup_streak = 29;
      case 29: {
        if (static_cast<::google::protobuf::uint8>(tag) != 232) goto handle_unusual;
        msg->set_battle_cup_streak(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 suggest_ban_hero_id = 30;
      case 30: {
        if (static_cast<::google::protobuf::uint8>(tag) != 240) goto handle_unusual;
        msg->set_suggest_ban_hero_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgDOTAChatMessage.TriviaAnswered trivia_answer = 32;
      case 32: {
        if (static_cast<::google::protobuf::uint8>(tag) != 2) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered::_InternalParse;
        object = msg->mutable_trivia_answer();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 requested_ability_id = 33;
      case 33: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_requested_ability_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 chat_flags = 34;
      case 34: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_chat_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAChatMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 account_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 channel_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_channel_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), static_cast<int>(this->persona_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAChatMessage.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAChatMessage.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 timestamp = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_timestamp(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 suggest_invite_account_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_suggest_invite_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suggest_invite_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string suggest_invite_name = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suggest_invite_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->suggest_invite_name().data(), static_cast<int>(this->suggest_invite_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAChatMessage.suggest_invite_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fantasy_draft_owner_account_id = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_fantasy_draft_owner_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_draft_owner_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 fantasy_draft_player_account_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_fantasy_draft_player_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fantasy_draft_player_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (80 & 0xFF)) {
          HasBitSetters::set_has_event_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool suggest_invite_to_lobby = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (88 & 0xFF)) {
          HasBitSetters::set_has_suggest_invite_to_lobby(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suggest_invite_to_lobby_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 event_points = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (96 & 0xFF)) {
          HasBitSetters::set_has_event_points(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &event_points_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool coin_flip = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (104 & 0xFF)) {
          HasBitSetters::set_has_coin_flip(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &coin_flip_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 player_id = 14 [default = -1];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (112 & 0xFF)) {
          HasBitSetters::set_has_player_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 share_profile_account_id = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (120 & 0xFF)) {
          HasBitSetters::set_has_share_profile_account_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &share_profile_account_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel_user_id = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (128 & 0xFF)) {
          HasBitSetters::set_has_channel_user_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAChatMessage.DiceRoll dice_roll = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dice_roll()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 share_party_id = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (144 & 0xFF)) {
          HasBitSetters::set_has_share_party_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &share_party_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 share_lobby_id = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (152 & 0xFF)) {
          HasBitSetters::set_has_share_lobby_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &share_lobby_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 share_lobby_custom_game_id = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (160 & 0xFF)) {
          HasBitSetters::set_has_share_lobby_custom_game_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &share_lobby_custom_game_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string share_lobby_passkey = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (170 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_share_lobby_passkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->share_lobby_passkey().data(), static_cast<int>(this->share_lobby_passkey().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAChatMessage.share_lobby_passkey");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 private_chat_channel_id = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (176 & 0xFF)) {
          HasBitSetters::set_has_private_chat_channel_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &private_chat_channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (184 & 0xFF)) {
          HasBitSetters::set_has_status(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool legacy_battle_cup_victory = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (192 & 0xFF)) {
          HasBitSetters::set_has_legacy_battle_cup_victory(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &legacy_battle_cup_victory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 badge_level = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (200 & 0xFF)) {
          HasBitSetters::set_has_badge_level(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badge_level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 suggest_pick_hero_id = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (208 & 0xFF)) {
          HasBitSetters::set_has_suggest_pick_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suggest_pick_hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string suggest_pick_hero_role = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (218 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suggest_pick_hero_role()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->suggest_pick_hero_role().data(), static_cast<int>(this->suggest_pick_hero_role().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAChatMessage.suggest_pick_hero_role");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 battle_cup_streak = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (232 & 0xFF)) {
          HasBitSetters::set_has_battle_cup_streak(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battle_cup_streak_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 suggest_ban_hero_id = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (240 & 0xFF)) {
          HasBitSetters::set_has_suggest_ban_hero_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &suggest_ban_hero_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAChatMessage.TriviaAnswered trivia_answer = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (258 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_trivia_answer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 requested_ability_id = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (264 & 0xFF)) {
          HasBitSetters::set_has_requested_ability_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requested_ability_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 chat_flags = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (272 & 0xFF)) {
          HasBitSetters::set_has_chat_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chat_flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAChatMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->account_id(), output);
  }

  // optional uint64 channel_id = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->channel_id(), output);
  }

  // optional string persona_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatMessage.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->persona_name(), output);
  }

  // optional string text = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatMessage.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->text(), output);
  }

  // optional uint32 timestamp = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->timestamp(), output);
  }

  // optional uint32 suggest_invite_account_id = 6;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->suggest_invite_account_id(), output);
  }

  // optional string suggest_invite_name = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suggest_invite_name().data(), static_cast<int>(this->suggest_invite_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatMessage.suggest_invite_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->suggest_invite_name(), output);
  }

  // optional uint32 fantasy_draft_owner_account_id = 8;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->fantasy_draft_owner_account_id(), output);
  }

  // optional uint32 fantasy_draft_player_account_id = 9;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->fantasy_draft_player_account_id(), output);
  }

  // optional uint32 event_id = 10;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->event_id(), output);
  }

  // optional bool suggest_invite_to_lobby = 11;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->suggest_invite_to_lobby(), output);
  }

  // optional uint32 event_points = 12;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->event_points(), output);
  }

  // optional bool coin_flip = 13;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->coin_flip(), output);
  }

  // optional int32 player_id = 14 [default = -1];
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->player_id(), output);
  }

  // optional uint32 share_profile_account_id = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->share_profile_account_id(), output);
  }

  // optional uint32 channel_user_id = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->channel_user_id(), output);
  }

  // optional .proto.dota.CMsgDOTAChatMessage.DiceRoll dice_roll = 17;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, HasBitSetters::dice_roll(this), output);
  }

  // optional uint64 share_party_id = 18;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->share_party_id(), output);
  }

  // optional uint64 share_lobby_id = 19;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(19, this->share_lobby_id(), output);
  }

  // optional uint64 share_lobby_custom_game_id = 20;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->share_lobby_custom_game_id(), output);
  }

  // optional string share_lobby_passkey = 21;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->share_lobby_passkey().data(), static_cast<int>(this->share_lobby_passkey().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatMessage.share_lobby_passkey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->share_lobby_passkey(), output);
  }

  // optional uint32 private_chat_channel_id = 22;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->private_chat_channel_id(), output);
  }

  // optional uint32 status = 23;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->status(), output);
  }

  // optional bool legacy_battle_cup_victory = 24;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->legacy_battle_cup_victory(), output);
  }

  // optional uint32 badge_level = 25;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->badge_level(), output);
  }

  // optional uint32 suggest_pick_hero_id = 26;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->suggest_pick_hero_id(), output);
  }

  // optional string suggest_pick_hero_role = 27;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suggest_pick_hero_role().data(), static_cast<int>(this->suggest_pick_hero_role().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatMessage.suggest_pick_hero_role");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      27, this->suggest_pick_hero_role(), output);
  }

  // optional uint32 battle_cup_streak = 29;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(29, this->battle_cup_streak(), output);
  }

  // optional uint32 suggest_ban_hero_id = 30;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(30, this->suggest_ban_hero_id(), output);
  }

  // optional .proto.dota.CMsgDOTAChatMessage.TriviaAnswered trivia_answer = 32;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, HasBitSetters::trivia_answer(this), output);
  }

  // optional uint32 requested_ability_id = 33;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(33, this->requested_ability_id(), output);
  }

  // optional uint32 chat_flags = 34;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(34, this->chat_flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatMessage)
}

::google::protobuf::uint8* CMsgDOTAChatMessage::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 account_id = 1;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->account_id(), target);
  }

  // optional uint64 channel_id = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->channel_id(), target);
  }

  // optional string persona_name = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatMessage.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->persona_name(), target);
  }

  // optional string text = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatMessage.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->text(), target);
  }

  // optional uint32 timestamp = 5;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->timestamp(), target);
  }

  // optional uint32 suggest_invite_account_id = 6;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->suggest_invite_account_id(), target);
  }

  // optional string suggest_invite_name = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suggest_invite_name().data(), static_cast<int>(this->suggest_invite_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatMessage.suggest_invite_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->suggest_invite_name(), target);
  }

  // optional uint32 fantasy_draft_owner_account_id = 8;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->fantasy_draft_owner_account_id(), target);
  }

  // optional uint32 fantasy_draft_player_account_id = 9;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->fantasy_draft_player_account_id(), target);
  }

  // optional uint32 event_id = 10;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->event_id(), target);
  }

  // optional bool suggest_invite_to_lobby = 11;
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->suggest_invite_to_lobby(), target);
  }

  // optional uint32 event_points = 12;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->event_points(), target);
  }

  // optional bool coin_flip = 13;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->coin_flip(), target);
  }

  // optional int32 player_id = 14 [default = -1];
  if (cached_has_bits & 0x80000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->player_id(), target);
  }

  // optional uint32 share_profile_account_id = 15;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->share_profile_account_id(), target);
  }

  // optional uint32 channel_user_id = 16;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->channel_user_id(), target);
  }

  // optional .proto.dota.CMsgDOTAChatMessage.DiceRoll dice_roll = 17;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, HasBitSetters::dice_roll(this), target);
  }

  // optional uint64 share_party_id = 18;
  if (cached_has_bits & 0x00100000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->share_party_id(), target);
  }

  // optional uint64 share_lobby_id = 19;
  if (cached_has_bits & 0x00200000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(19, this->share_lobby_id(), target);
  }

  // optional uint64 share_lobby_custom_game_id = 20;
  if (cached_has_bits & 0x00400000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->share_lobby_custom_game_id(), target);
  }

  // optional string share_lobby_passkey = 21;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->share_lobby_passkey().data(), static_cast<int>(this->share_lobby_passkey().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatMessage.share_lobby_passkey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->share_lobby_passkey(), target);
  }

  // optional uint32 private_chat_channel_id = 22;
  if (cached_has_bits & 0x00800000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->private_chat_channel_id(), target);
  }

  // optional uint32 status = 23;
  if (cached_has_bits & 0x01000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->status(), target);
  }

  // optional bool legacy_battle_cup_victory = 24;
  if (cached_has_bits & 0x00080000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(24, this->legacy_battle_cup_victory(), target);
  }

  // optional uint32 badge_level = 25;
  if (cached_has_bits & 0x02000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->badge_level(), target);
  }

  // optional uint32 suggest_pick_hero_id = 26;
  if (cached_has_bits & 0x04000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->suggest_pick_hero_id(), target);
  }

  // optional string suggest_pick_hero_role = 27;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suggest_pick_hero_role().data(), static_cast<int>(this->suggest_pick_hero_role().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatMessage.suggest_pick_hero_role");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->suggest_pick_hero_role(), target);
  }

  // optional uint32 battle_cup_streak = 29;
  if (cached_has_bits & 0x08000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(29, this->battle_cup_streak(), target);
  }

  // optional uint32 suggest_ban_hero_id = 30;
  if (cached_has_bits & 0x10000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(30, this->suggest_ban_hero_id(), target);
  }

  // optional .proto.dota.CMsgDOTAChatMessage.TriviaAnswered trivia_answer = 32;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        32, HasBitSetters::trivia_answer(this), target);
  }

  // optional uint32 requested_ability_id = 33;
  if (cached_has_bits & 0x20000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(33, this->requested_ability_id(), target);
  }

  // optional uint32 chat_flags = 34;
  if (cached_has_bits & 0x40000000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(34, this->chat_flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatMessage)
  return target;
}

size_t CMsgDOTAChatMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string persona_name = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional string text = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional string suggest_invite_name = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suggest_invite_name());
    }

    // optional string share_lobby_passkey = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->share_lobby_passkey());
    }

    // optional string suggest_pick_hero_role = 27;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suggest_pick_hero_role());
    }

    // optional .proto.dota.CMsgDOTAChatMessage.DiceRoll dice_roll = 17;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *dice_roll_);
    }

    // optional .proto.dota.CMsgDOTAChatMessage.TriviaAnswered trivia_answer = 32;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *trivia_answer_);
    }

    // optional uint64 channel_id = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->channel_id());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional uint32 account_id = 1;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->account_id());
    }

    // optional uint32 timestamp = 5;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timestamp());
    }

    // optional uint32 suggest_invite_account_id = 6;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suggest_invite_account_id());
    }

    // optional uint32 fantasy_draft_owner_account_id = 8;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_draft_owner_account_id());
    }

    // optional uint32 fantasy_draft_player_account_id = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fantasy_draft_player_account_id());
    }

    // optional uint32 event_id = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_id());
    }

    // optional uint32 event_points = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->event_points());
    }

    // optional uint32 share_profile_account_id = 15;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->share_profile_account_id());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional uint32 channel_user_id = 16;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_user_id());
    }

    // optional bool suggest_invite_to_lobby = 11;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 1;
    }

    // optional bool coin_flip = 13;
    if (cached_has_bits & 0x00040000u) {
      total_size += 1 + 1;
    }

    // optional bool legacy_battle_cup_victory = 24;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 1;
    }

    // optional uint64 share_party_id = 18;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->share_party_id());
    }

    // optional uint64 share_lobby_id = 19;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->share_lobby_id());
    }

    // optional uint64 share_lobby_custom_game_id = 20;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->share_lobby_custom_game_id());
    }

    // optional uint32 private_chat_channel_id = 22;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->private_chat_channel_id());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional uint32 status = 23;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

    // optional uint32 badge_level = 25;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badge_level());
    }

    // optional uint32 suggest_pick_hero_id = 26;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suggest_pick_hero_id());
    }

    // optional uint32 battle_cup_streak = 29;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battle_cup_streak());
    }

    // optional uint32 suggest_ban_hero_id = 30;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->suggest_ban_hero_id());
    }

    // optional uint32 requested_ability_id = 33;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->requested_ability_id());
    }

    // optional uint32 chat_flags = 34;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chat_flags());
    }

    // optional int32 player_id = 14 [default = -1];
    if (cached_has_bits & 0x80000000u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatMessage* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAChatMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatMessage)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatMessage::MergeFrom(const CMsgDOTAChatMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      suggest_invite_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suggest_invite_name_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      share_lobby_passkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.share_lobby_passkey_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      suggest_pick_hero_role_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.suggest_pick_hero_role_);
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_dice_roll()->::proto::dota::CMsgDOTAChatMessage_DiceRoll::MergeFrom(from.dice_roll());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_trivia_answer()->::proto::dota::CMsgDOTAChatMessage_TriviaAnswered::MergeFrom(from.trivia_answer());
    }
    if (cached_has_bits & 0x00000080u) {
      channel_id_ = from.channel_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      account_id_ = from.account_id_;
    }
    if (cached_has_bits & 0x00000200u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      suggest_invite_account_id_ = from.suggest_invite_account_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      fantasy_draft_owner_account_id_ = from.fantasy_draft_owner_account_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      fantasy_draft_player_account_id_ = from.fantasy_draft_player_account_id_;
    }
    if (cached_has_bits & 0x00002000u) {
      event_id_ = from.event_id_;
    }
    if (cached_has_bits & 0x00004000u) {
      event_points_ = from.event_points_;
    }
    if (cached_has_bits & 0x00008000u) {
      share_profile_account_id_ = from.share_profile_account_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      channel_user_id_ = from.channel_user_id_;
    }
    if (cached_has_bits & 0x00020000u) {
      suggest_invite_to_lobby_ = from.suggest_invite_to_lobby_;
    }
    if (cached_has_bits & 0x00040000u) {
      coin_flip_ = from.coin_flip_;
    }
    if (cached_has_bits & 0x00080000u) {
      legacy_battle_cup_victory_ = from.legacy_battle_cup_victory_;
    }
    if (cached_has_bits & 0x00100000u) {
      share_party_id_ = from.share_party_id_;
    }
    if (cached_has_bits & 0x00200000u) {
      share_lobby_id_ = from.share_lobby_id_;
    }
    if (cached_has_bits & 0x00400000u) {
      share_lobby_custom_game_id_ = from.share_lobby_custom_game_id_;
    }
    if (cached_has_bits & 0x00800000u) {
      private_chat_channel_id_ = from.private_chat_channel_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x02000000u) {
      badge_level_ = from.badge_level_;
    }
    if (cached_has_bits & 0x04000000u) {
      suggest_pick_hero_id_ = from.suggest_pick_hero_id_;
    }
    if (cached_has_bits & 0x08000000u) {
      battle_cup_streak_ = from.battle_cup_streak_;
    }
    if (cached_has_bits & 0x10000000u) {
      suggest_ban_hero_id_ = from.suggest_ban_hero_id_;
    }
    if (cached_has_bits & 0x20000000u) {
      requested_ability_id_ = from.requested_ability_id_;
    }
    if (cached_has_bits & 0x40000000u) {
      chat_flags_ = from.chat_flags_;
    }
    if (cached_has_bits & 0x80000000u) {
      player_id_ = from.player_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChatMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatMessage::CopyFrom(const CMsgDOTAChatMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatMessage::IsInitialized() const {
  return true;
}

void CMsgDOTAChatMessage::Swap(CMsgDOTAChatMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatMessage::InternalSwap(CMsgDOTAChatMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_name_.Swap(&other->persona_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  suggest_invite_name_.Swap(&other->suggest_invite_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  share_lobby_passkey_.Swap(&other->share_lobby_passkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  suggest_pick_hero_role_.Swap(&other->suggest_pick_hero_role_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(dice_roll_, other->dice_roll_);
  swap(trivia_answer_, other->trivia_answer_);
  swap(channel_id_, other->channel_id_);
  swap(account_id_, other->account_id_);
  swap(timestamp_, other->timestamp_);
  swap(suggest_invite_account_id_, other->suggest_invite_account_id_);
  swap(fantasy_draft_owner_account_id_, other->fantasy_draft_owner_account_id_);
  swap(fantasy_draft_player_account_id_, other->fantasy_draft_player_account_id_);
  swap(event_id_, other->event_id_);
  swap(event_points_, other->event_points_);
  swap(share_profile_account_id_, other->share_profile_account_id_);
  swap(channel_user_id_, other->channel_user_id_);
  swap(suggest_invite_to_lobby_, other->suggest_invite_to_lobby_);
  swap(coin_flip_, other->coin_flip_);
  swap(legacy_battle_cup_victory_, other->legacy_battle_cup_victory_);
  swap(share_party_id_, other->share_party_id_);
  swap(share_lobby_id_, other->share_lobby_id_);
  swap(share_lobby_custom_game_id_, other->share_lobby_custom_game_id_);
  swap(private_chat_channel_id_, other->private_chat_channel_id_);
  swap(status_, other->status_);
  swap(badge_level_, other->badge_level_);
  swap(suggest_pick_hero_id_, other->suggest_pick_hero_id_);
  swap(battle_cup_streak_, other->battle_cup_streak_);
  swap(suggest_ban_hero_id_, other->suggest_ban_hero_id_);
  swap(requested_ability_id_, other->requested_ability_id_);
  swap(chat_flags_, other->chat_flags_);
  swap(player_id_, other->player_id_);
}

::google::protobuf::Metadata CMsgDOTAChatMessage::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAChatMember::InitAsDefaultInstance() {
}
class CMsgDOTAChatMember::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgDOTAChatMember* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_persona_name(CMsgDOTAChatMember* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_channel_user_id(CMsgDOTAChatMember* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_status(CMsgDOTAChatMember* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatMember::kSteamIdFieldNumber;
const int CMsgDOTAChatMember::kPersonaNameFieldNumber;
const int CMsgDOTAChatMember::kChannelUserIdFieldNumber;
const int CMsgDOTAChatMember::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatMember::CMsgDOTAChatMember()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatMember)
}
CMsgDOTAChatMember::CMsgDOTAChatMember(const CMsgDOTAChatMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatMember)
}

void CMsgDOTAChatMember::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAChatMember_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(status_));
}

CMsgDOTAChatMember::~CMsgDOTAChatMember() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatMember)
  SharedDtor();
}

void CMsgDOTAChatMember::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAChatMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAChatMember& CMsgDOTAChatMember::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAChatMember_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAChatMember::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    persona_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAChatMember::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAChatMember*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string persona_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAChatMember.persona_name");
        object = msg->mutable_persona_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 channel_user_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_channel_user_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 status = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_status(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAChatMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatMember)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), static_cast<int>(this->persona_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAChatMember.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel_user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_channel_user_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_status(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatMember)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAChatMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatMember.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->persona_name(), output);
  }

  // optional uint32 channel_user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_user_id(), output);
  }

  // optional uint32 status = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatMember)
}

::google::protobuf::uint8* CMsgDOTAChatMember::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatMember.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->persona_name(), target);
  }

  // optional uint32 channel_user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_user_id(), target);
  }

  // optional uint32 status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatMember)
  return target;
}

size_t CMsgDOTAChatMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string persona_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 channel_user_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_user_id());
    }

    // optional uint32 status = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatMember* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAChatMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatMember)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatMember::MergeFrom(const CMsgDOTAChatMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_user_id_ = from.channel_user_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChatMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatMember::CopyFrom(const CMsgDOTAChatMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatMember::IsInitialized() const {
  return true;
}

void CMsgDOTAChatMember::Swap(CMsgDOTAChatMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatMember::InternalSwap(CMsgDOTAChatMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_name_.Swap(&other->persona_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_, other->steam_id_);
  swap(channel_user_id_, other->channel_user_id_);
  swap(status_, other->status_);
}

::google::protobuf::Metadata CMsgDOTAChatMember::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAJoinChatChannelResponse::InitAsDefaultInstance() {
}
class CMsgDOTAJoinChatChannelResponse::HasBitSetters {
 public:
  static void set_has_response(CMsgDOTAJoinChatChannelResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_channel_name(CMsgDOTAJoinChatChannelResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_channel_id(CMsgDOTAJoinChatChannelResponse* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_max_members(CMsgDOTAJoinChatChannelResponse* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_channel_type(CMsgDOTAJoinChatChannelResponse* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_result(CMsgDOTAJoinChatChannelResponse* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_gc_initiated_join(CMsgDOTAJoinChatChannelResponse* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_channel_user_id(CMsgDOTAJoinChatChannelResponse* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_welcome_message(CMsgDOTAJoinChatChannelResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAJoinChatChannelResponse::kResponseFieldNumber;
const int CMsgDOTAJoinChatChannelResponse::kChannelNameFieldNumber;
const int CMsgDOTAJoinChatChannelResponse::kChannelIdFieldNumber;
const int CMsgDOTAJoinChatChannelResponse::kMaxMembersFieldNumber;
const int CMsgDOTAJoinChatChannelResponse::kMembersFieldNumber;
const int CMsgDOTAJoinChatChannelResponse::kChannelTypeFieldNumber;
const int CMsgDOTAJoinChatChannelResponse::kResultFieldNumber;
const int CMsgDOTAJoinChatChannelResponse::kGcInitiatedJoinFieldNumber;
const int CMsgDOTAJoinChatChannelResponse::kChannelUserIdFieldNumber;
const int CMsgDOTAJoinChatChannelResponse::kWelcomeMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAJoinChatChannelResponse::CMsgDOTAJoinChatChannelResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAJoinChatChannelResponse)
}
CMsgDOTAJoinChatChannelResponse::CMsgDOTAJoinChatChannelResponse(const CMsgDOTAJoinChatChannelResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_channel_name()) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  welcome_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_welcome_message()) {
    welcome_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.welcome_message_);
  }
  ::memcpy(&response_, &from.response_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_user_id_) -
    reinterpret_cast<char*>(&response_)) + sizeof(channel_user_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAJoinChatChannelResponse)
}

void CMsgDOTAJoinChatChannelResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAJoinChatChannelResponse_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  welcome_message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_user_id_) -
      reinterpret_cast<char*>(&response_)) + sizeof(channel_user_id_));
}

CMsgDOTAJoinChatChannelResponse::~CMsgDOTAJoinChatChannelResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAJoinChatChannelResponse)
  SharedDtor();
}

void CMsgDOTAJoinChatChannelResponse::SharedDtor() {
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  welcome_message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAJoinChatChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAJoinChatChannelResponse& CMsgDOTAJoinChatChannelResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAJoinChatChannelResponse_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAJoinChatChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAJoinChatChannelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      channel_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      welcome_message_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&response_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&gc_initiated_join_) -
        reinterpret_cast<char*>(&response_)) + sizeof(gc_initiated_join_));
  }
  channel_user_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAJoinChatChannelResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAJoinChatChannelResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 response = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_response(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string channel_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAJoinChatChannelResponse.channel_name");
        object = msg->mutable_channel_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 channel_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_channel_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 max_members = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_max_members(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTAChatMember members = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAChatMember::_InternalParse;
          object = msg->add_members();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 42 && (ptr += 1));
        break;
      }
      // optional .proto.dota.DOTAChatChannelType_t channel_type = 6 [default = DOTAChannelType_Regional];
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTAChatChannelType_t_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(6, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_channel_type(static_cast<::proto::dota::DOTAChatChannelType_t>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgDOTAJoinChatChannelResponse.Result result = 7 [default = JOIN_SUCCESS];
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 56) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::CMsgDOTAJoinChatChannelResponse_Result_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(7, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_result(static_cast<::proto::dota::CMsgDOTAJoinChatChannelResponse_Result>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool gc_initiated_join = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 64) goto handle_unusual;
        msg->set_gc_initiated_join(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 channel_user_id = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 72) goto handle_unusual;
        msg->set_channel_user_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string welcome_message = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAJoinChatChannelResponse.welcome_message");
        object = msg->mutable_welcome_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAJoinChatChannelResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAJoinChatChannelResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 response = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_response(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string channel_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_name().data(), static_cast<int>(this->channel_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAJoinChatChannelResponse.channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 channel_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_channel_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 max_members = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_max_members(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &max_members_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAChatMember members = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTAChatChannelType_t channel_type = 6 [default = DOTAChannelType_Regional];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTAChatChannelType_t_IsValid(value)) {
            set_channel_type(static_cast< ::proto::dota::DOTAChatChannelType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgDOTAJoinChatChannelResponse.Result result = 7 [default = JOIN_SUCCESS];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (56 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::CMsgDOTAJoinChatChannelResponse_Result_IsValid(value)) {
            set_result(static_cast< ::proto::dota::CMsgDOTAJoinChatChannelResponse_Result >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                7, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool gc_initiated_join = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (64 & 0xFF)) {
          HasBitSetters::set_has_gc_initiated_join(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gc_initiated_join_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel_user_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (72 & 0xFF)) {
          HasBitSetters::set_has_channel_user_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string welcome_message = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_welcome_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->welcome_message().data(), static_cast<int>(this->welcome_message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAJoinChatChannelResponse.welcome_message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAJoinChatChannelResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAJoinChatChannelResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAJoinChatChannelResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAJoinChatChannelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 response = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->response(), output);
  }

  // optional string channel_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAJoinChatChannelResponse.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->channel_name(), output);
  }

  // optional fixed64 channel_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->channel_id(), output);
  }

  // optional uint32 max_members = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->max_members(), output);
  }

  // repeated .proto.dota.CMsgDOTAChatMember members = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->members(static_cast<int>(i)),
      output);
  }

  // optional .proto.dota.DOTAChatChannelType_t channel_type = 6 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->channel_type(), output);
  }

  // optional .proto.dota.CMsgDOTAJoinChatChannelResponse.Result result = 7 [default = JOIN_SUCCESS];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->result(), output);
  }

  // optional bool gc_initiated_join = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->gc_initiated_join(), output);
  }

  // optional uint32 channel_user_id = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->channel_user_id(), output);
  }

  // optional string welcome_message = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->welcome_message().data(), static_cast<int>(this->welcome_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAJoinChatChannelResponse.welcome_message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->welcome_message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAJoinChatChannelResponse)
}

::google::protobuf::uint8* CMsgDOTAJoinChatChannelResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAJoinChatChannelResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 response = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->response(), target);
  }

  // optional string channel_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAJoinChatChannelResponse.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->channel_name(), target);
  }

  // optional fixed64 channel_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->channel_id(), target);
  }

  // optional uint32 max_members = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->max_members(), target);
  }

  // repeated .proto.dota.CMsgDOTAChatMember members = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->members(static_cast<int>(i)), target);
  }

  // optional .proto.dota.DOTAChatChannelType_t channel_type = 6 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->channel_type(), target);
  }

  // optional .proto.dota.CMsgDOTAJoinChatChannelResponse.Result result = 7 [default = JOIN_SUCCESS];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->result(), target);
  }

  // optional bool gc_initiated_join = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->gc_initiated_join(), target);
  }

  // optional uint32 channel_user_id = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->channel_user_id(), target);
  }

  // optional string welcome_message = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->welcome_message().data(), static_cast<int>(this->welcome_message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAJoinChatChannelResponse.welcome_message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->welcome_message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAJoinChatChannelResponse)
  return target;
}

size_t CMsgDOTAJoinChatChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAJoinChatChannelResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAChatMember members = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->members(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string channel_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_name());
    }

    // optional string welcome_message = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->welcome_message());
    }

    // optional uint32 response = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->response());
    }

    // optional uint32 max_members = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->max_members());
    }

    // optional fixed64 channel_id = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional .proto.dota.DOTAChatChannelType_t channel_type = 6 [default = DOTAChannelType_Regional];
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel_type());
    }

    // optional .proto.dota.CMsgDOTAJoinChatChannelResponse.Result result = 7 [default = JOIN_SUCCESS];
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional bool gc_initiated_join = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 1;
    }

  }
  // optional uint32 channel_user_id = 9;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->channel_user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAJoinChatChannelResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAJoinChatChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAJoinChatChannelResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAJoinChatChannelResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAJoinChatChannelResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAJoinChatChannelResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAJoinChatChannelResponse::MergeFrom(const CMsgDOTAJoinChatChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAJoinChatChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      welcome_message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.welcome_message_);
    }
    if (cached_has_bits & 0x00000004u) {
      response_ = from.response_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_members_ = from.max_members_;
    }
    if (cached_has_bits & 0x00000010u) {
      channel_id_ = from.channel_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      channel_type_ = from.channel_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      result_ = from.result_;
    }
    if (cached_has_bits & 0x00000080u) {
      gc_initiated_join_ = from.gc_initiated_join_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_channel_user_id(from.channel_user_id());
  }
}

void CMsgDOTAJoinChatChannelResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAJoinChatChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAJoinChatChannelResponse::CopyFrom(const CMsgDOTAJoinChatChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAJoinChatChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAJoinChatChannelResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAJoinChatChannelResponse::Swap(CMsgDOTAJoinChatChannelResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAJoinChatChannelResponse::InternalSwap(CMsgDOTAJoinChatChannelResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&members_)->InternalSwap(CastToBase(&other->members_));
  channel_name_.Swap(&other->channel_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  welcome_message_.Swap(&other->welcome_message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(response_, other->response_);
  swap(max_members_, other->max_members_);
  swap(channel_id_, other->channel_id_);
  swap(channel_type_, other->channel_type_);
  swap(result_, other->result_);
  swap(gc_initiated_join_, other->gc_initiated_join_);
  swap(channel_user_id_, other->channel_user_id_);
}

::google::protobuf::Metadata CMsgDOTAJoinChatChannelResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAChatChannelFullUpdate::InitAsDefaultInstance() {
}
class CMsgDOTAChatChannelFullUpdate::HasBitSetters {
 public:
  static void set_has_channel_id(CMsgDOTAChatChannelFullUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatChannelFullUpdate::kChannelIdFieldNumber;
const int CMsgDOTAChatChannelFullUpdate::kMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatChannelFullUpdate::CMsgDOTAChatChannelFullUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatChannelFullUpdate)
}
CMsgDOTAChatChannelFullUpdate::CMsgDOTAChatChannelFullUpdate(const CMsgDOTAChatChannelFullUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatChannelFullUpdate)
}

void CMsgDOTAChatChannelFullUpdate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAChatChannelFullUpdate_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  channel_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgDOTAChatChannelFullUpdate::~CMsgDOTAChatChannelFullUpdate() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatChannelFullUpdate)
  SharedDtor();
}

void CMsgDOTAChatChannelFullUpdate::SharedDtor() {
}

void CMsgDOTAChatChannelFullUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAChatChannelFullUpdate& CMsgDOTAChatChannelFullUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAChatChannelFullUpdate_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAChatChannelFullUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatChannelFullUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAChatChannelFullUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAChatChannelFullUpdate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 channel_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_channel_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // repeated .proto.dota.CMsgDOTAChatMember members = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAChatMember::_InternalParse;
          object = msg->add_members();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAChatChannelFullUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatChannelFullUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_channel_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAChatMember members = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatChannelFullUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatChannelFullUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAChatChannelFullUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatChannelFullUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->channel_id(), output);
  }

  // repeated .proto.dota.CMsgDOTAChatMember members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->members(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatChannelFullUpdate)
}

::google::protobuf::uint8* CMsgDOTAChatChannelFullUpdate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatChannelFullUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->channel_id(), target);
  }

  // repeated .proto.dota.CMsgDOTAChatMember members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->members(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatChannelFullUpdate)
  return target;
}

size_t CMsgDOTAChatChannelFullUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatChannelFullUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAChatMember members = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->members(static_cast<int>(i)));
    }
  }

  // optional fixed64 channel_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatChannelFullUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatChannelFullUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatChannelFullUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAChatChannelFullUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatChannelFullUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatChannelFullUpdate)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatChannelFullUpdate::MergeFrom(const CMsgDOTAChatChannelFullUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatChannelFullUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from.has_channel_id()) {
    set_channel_id(from.channel_id());
  }
}

void CMsgDOTAChatChannelFullUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatChannelFullUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatChannelFullUpdate::CopyFrom(const CMsgDOTAChatChannelFullUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatChannelFullUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatChannelFullUpdate::IsInitialized() const {
  return true;
}

void CMsgDOTAChatChannelFullUpdate::Swap(CMsgDOTAChatChannelFullUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatChannelFullUpdate::InternalSwap(CMsgDOTAChatChannelFullUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&members_)->InternalSwap(CastToBase(&other->members_));
  swap(channel_id_, other->channel_id_);
}

::google::protobuf::Metadata CMsgDOTAChatChannelFullUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAOtherJoinedChatChannel::InitAsDefaultInstance() {
}
class CMsgDOTAOtherJoinedChatChannel::HasBitSetters {
 public:
  static void set_has_channel_id(CMsgDOTAOtherJoinedChatChannel* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_persona_name(CMsgDOTAOtherJoinedChatChannel* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_steam_id(CMsgDOTAOtherJoinedChatChannel* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_channel_user_id(CMsgDOTAOtherJoinedChatChannel* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_status(CMsgDOTAOtherJoinedChatChannel* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAOtherJoinedChatChannel::kChannelIdFieldNumber;
const int CMsgDOTAOtherJoinedChatChannel::kPersonaNameFieldNumber;
const int CMsgDOTAOtherJoinedChatChannel::kSteamIdFieldNumber;
const int CMsgDOTAOtherJoinedChatChannel::kChannelUserIdFieldNumber;
const int CMsgDOTAOtherJoinedChatChannel::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAOtherJoinedChatChannel::CMsgDOTAOtherJoinedChatChannel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAOtherJoinedChatChannel)
}
CMsgDOTAOtherJoinedChatChannel::CMsgDOTAOtherJoinedChatChannel(const CMsgDOTAOtherJoinedChatChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  ::memcpy(&channel_id_, &from.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAOtherJoinedChatChannel)
}

void CMsgDOTAOtherJoinedChatChannel::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAOtherJoinedChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&channel_id_)) + sizeof(status_));
}

CMsgDOTAOtherJoinedChatChannel::~CMsgDOTAOtherJoinedChatChannel() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAOtherJoinedChatChannel)
  SharedDtor();
}

void CMsgDOTAOtherJoinedChatChannel::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAOtherJoinedChatChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAOtherJoinedChatChannel& CMsgDOTAOtherJoinedChatChannel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAOtherJoinedChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAOtherJoinedChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAOtherJoinedChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    persona_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&channel_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAOtherJoinedChatChannel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAOtherJoinedChatChannel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 channel_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_channel_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string persona_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAOtherJoinedChatChannel.persona_name");
        object = msg->mutable_persona_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional fixed64 steam_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 25) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 channel_user_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_channel_user_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 status = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_status(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAOtherJoinedChatChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAOtherJoinedChatChannel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_channel_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), static_cast<int>(this->persona_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAOtherJoinedChatChannel.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (25 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel_user_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_channel_user_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_status(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAOtherJoinedChatChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAOtherJoinedChatChannel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAOtherJoinedChatChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAOtherJoinedChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->channel_id(), output);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAOtherJoinedChatChannel.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->persona_name(), output);
  }

  // optional fixed64 steam_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(3, this->steam_id(), output);
  }

  // optional uint32 channel_user_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->channel_user_id(), output);
  }

  // optional uint32 status = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAOtherJoinedChatChannel)
}

::google::protobuf::uint8* CMsgDOTAOtherJoinedChatChannel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAOtherJoinedChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->channel_id(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAOtherJoinedChatChannel.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->persona_name(), target);
  }

  // optional fixed64 steam_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(3, this->steam_id(), target);
  }

  // optional uint32 channel_user_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->channel_user_id(), target);
  }

  // optional uint32 status = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAOtherJoinedChatChannel)
  return target;
}

size_t CMsgDOTAOtherJoinedChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAOtherJoinedChatChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string persona_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional fixed64 channel_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional uint32 channel_user_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_user_id());
    }

    // optional uint32 status = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAOtherJoinedChatChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAOtherJoinedChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAOtherJoinedChatChannel* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAOtherJoinedChatChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAOtherJoinedChatChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAOtherJoinedChatChannel)
    MergeFrom(*source);
  }
}

void CMsgDOTAOtherJoinedChatChannel::MergeFrom(const CMsgDOTAOtherJoinedChatChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAOtherJoinedChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      channel_id_ = from.channel_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      channel_user_id_ = from.channel_user_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAOtherJoinedChatChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAOtherJoinedChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAOtherJoinedChatChannel::CopyFrom(const CMsgDOTAOtherJoinedChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAOtherJoinedChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAOtherJoinedChatChannel::IsInitialized() const {
  return true;
}

void CMsgDOTAOtherJoinedChatChannel::Swap(CMsgDOTAOtherJoinedChatChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAOtherJoinedChatChannel::InternalSwap(CMsgDOTAOtherJoinedChatChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_name_.Swap(&other->persona_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_id_, other->channel_id_);
  swap(steam_id_, other->steam_id_);
  swap(channel_user_id_, other->channel_user_id_);
  swap(status_, other->status_);
}

::google::protobuf::Metadata CMsgDOTAOtherJoinedChatChannel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAOtherLeftChatChannel::InitAsDefaultInstance() {
}
class CMsgDOTAOtherLeftChatChannel::HasBitSetters {
 public:
  static void set_has_channel_id(CMsgDOTAOtherLeftChatChannel* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_steam_id(CMsgDOTAOtherLeftChatChannel* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_channel_user_id(CMsgDOTAOtherLeftChatChannel* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAOtherLeftChatChannel::kChannelIdFieldNumber;
const int CMsgDOTAOtherLeftChatChannel::kSteamIdFieldNumber;
const int CMsgDOTAOtherLeftChatChannel::kChannelUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAOtherLeftChatChannel::CMsgDOTAOtherLeftChatChannel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAOtherLeftChatChannel)
}
CMsgDOTAOtherLeftChatChannel::CMsgDOTAOtherLeftChatChannel(const CMsgDOTAOtherLeftChatChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&channel_id_, &from.channel_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_user_id_) -
    reinterpret_cast<char*>(&channel_id_)) + sizeof(channel_user_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAOtherLeftChatChannel)
}

void CMsgDOTAOtherLeftChatChannel::SharedCtor() {
  ::memset(&channel_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_user_id_) -
      reinterpret_cast<char*>(&channel_id_)) + sizeof(channel_user_id_));
}

CMsgDOTAOtherLeftChatChannel::~CMsgDOTAOtherLeftChatChannel() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAOtherLeftChatChannel)
  SharedDtor();
}

void CMsgDOTAOtherLeftChatChannel::SharedDtor() {
}

void CMsgDOTAOtherLeftChatChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAOtherLeftChatChannel& CMsgDOTAOtherLeftChatChannel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAOtherLeftChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAOtherLeftChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAOtherLeftChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&channel_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&channel_user_id_) -
        reinterpret_cast<char*>(&channel_id_)) + sizeof(channel_user_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAOtherLeftChatChannel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAOtherLeftChatChannel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 channel_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_channel_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional fixed64 steam_id = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 17) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional uint32 channel_user_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_channel_user_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAOtherLeftChatChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAOtherLeftChatChannel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_channel_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed64 steam_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel_user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_channel_user_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAOtherLeftChatChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAOtherLeftChatChannel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAOtherLeftChatChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAOtherLeftChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->channel_id(), output);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(2, this->steam_id(), output);
  }

  // optional uint32 channel_user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_user_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAOtherLeftChatChannel)
}

::google::protobuf::uint8* CMsgDOTAOtherLeftChatChannel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAOtherLeftChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->channel_id(), target);
  }

  // optional fixed64 steam_id = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(2, this->steam_id(), target);
  }

  // optional uint32 channel_user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_user_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAOtherLeftChatChannel)
  return target;
}

size_t CMsgDOTAOtherLeftChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAOtherLeftChatChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional fixed64 channel_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional fixed64 steam_id = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 channel_user_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAOtherLeftChatChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAOtherLeftChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAOtherLeftChatChannel* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAOtherLeftChatChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAOtherLeftChatChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAOtherLeftChatChannel)
    MergeFrom(*source);
  }
}

void CMsgDOTAOtherLeftChatChannel::MergeFrom(const CMsgDOTAOtherLeftChatChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAOtherLeftChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      channel_id_ = from.channel_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_user_id_ = from.channel_user_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAOtherLeftChatChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAOtherLeftChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAOtherLeftChatChannel::CopyFrom(const CMsgDOTAOtherLeftChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAOtherLeftChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAOtherLeftChatChannel::IsInitialized() const {
  return true;
}

void CMsgDOTAOtherLeftChatChannel::Swap(CMsgDOTAOtherLeftChatChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAOtherLeftChatChannel::InternalSwap(CMsgDOTAOtherLeftChatChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(channel_id_, other->channel_id_);
  swap(steam_id_, other->steam_id_);
  swap(channel_user_id_, other->channel_user_id_);
}

::google::protobuf::Metadata CMsgDOTAOtherLeftChatChannel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::InitAsDefaultInstance() {
}
class CMsgDOTAChatChannelMemberUpdate_JoinedMember::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgDOTAChatChannelMemberUpdate_JoinedMember* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_persona_name(CMsgDOTAChatChannelMemberUpdate_JoinedMember* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_channel_user_id(CMsgDOTAChatChannelMemberUpdate_JoinedMember* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_status(CMsgDOTAChatChannelMemberUpdate_JoinedMember* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatChannelMemberUpdate_JoinedMember::kSteamIdFieldNumber;
const int CMsgDOTAChatChannelMemberUpdate_JoinedMember::kPersonaNameFieldNumber;
const int CMsgDOTAChatChannelMemberUpdate_JoinedMember::kChannelUserIdFieldNumber;
const int CMsgDOTAChatChannelMemberUpdate_JoinedMember::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatChannelMemberUpdate_JoinedMember::CMsgDOTAChatChannelMemberUpdate_JoinedMember()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
}
CMsgDOTAChatChannelMemberUpdate_JoinedMember::CMsgDOTAChatChannelMemberUpdate_JoinedMember(const CMsgDOTAChatChannelMemberUpdate_JoinedMember& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAChatChannelMemberUpdate_JoinedMember_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(status_));
}

CMsgDOTAChatChannelMemberUpdate_JoinedMember::~CMsgDOTAChatChannelMemberUpdate_JoinedMember() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  SharedDtor();
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAChatChannelMemberUpdate_JoinedMember& CMsgDOTAChatChannelMemberUpdate_JoinedMember::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAChatChannelMemberUpdate_JoinedMember_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAChatChannelMemberUpdate_JoinedMember::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    persona_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAChatChannelMemberUpdate_JoinedMember::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAChatChannelMemberUpdate_JoinedMember*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string persona_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name");
        object = msg->mutable_persona_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 channel_user_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_channel_user_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 status = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_status(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAChatChannelMemberUpdate_JoinedMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), static_cast<int>(this->persona_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel_user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_channel_user_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_status(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->persona_name(), output);
  }

  // optional uint32 channel_user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_user_id(), output);
  }

  // optional uint32 status = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
}

::google::protobuf::uint8* CMsgDOTAChatChannelMemberUpdate_JoinedMember::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->persona_name(), target);
  }

  // optional uint32 channel_user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_user_id(), target);
  }

  // optional uint32 status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  return target;
}

size_t CMsgDOTAChatChannelMemberUpdate_JoinedMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string persona_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 channel_user_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_user_id());
    }

    // optional uint32 status = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatChannelMemberUpdate_JoinedMember* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAChatChannelMemberUpdate_JoinedMember>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::MergeFrom(const CMsgDOTAChatChannelMemberUpdate_JoinedMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_user_id_ = from.channel_user_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::CopyFrom(const CMsgDOTAChatChannelMemberUpdate_JoinedMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatChannelMemberUpdate_JoinedMember::IsInitialized() const {
  return true;
}

void CMsgDOTAChatChannelMemberUpdate_JoinedMember::Swap(CMsgDOTAChatChannelMemberUpdate_JoinedMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatChannelMemberUpdate_JoinedMember::InternalSwap(CMsgDOTAChatChannelMemberUpdate_JoinedMember* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_name_.Swap(&other->persona_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_, other->steam_id_);
  swap(channel_user_id_, other->channel_user_id_);
  swap(status_, other->status_);
}

::google::protobuf::Metadata CMsgDOTAChatChannelMemberUpdate_JoinedMember::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAChatChannelMemberUpdate::InitAsDefaultInstance() {
}
class CMsgDOTAChatChannelMemberUpdate::HasBitSetters {
 public:
  static void set_has_channel_id(CMsgDOTAChatChannelMemberUpdate* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatChannelMemberUpdate::kChannelIdFieldNumber;
const int CMsgDOTAChatChannelMemberUpdate::kLeftSteamIdsFieldNumber;
const int CMsgDOTAChatChannelMemberUpdate::kJoinedMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatChannelMemberUpdate::CMsgDOTAChatChannelMemberUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatChannelMemberUpdate)
}
CMsgDOTAChatChannelMemberUpdate::CMsgDOTAChatChannelMemberUpdate(const CMsgDOTAChatChannelMemberUpdate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      left_steam_ids_(from.left_steam_ids_),
      joined_members_(from.joined_members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatChannelMemberUpdate)
}

void CMsgDOTAChatChannelMemberUpdate::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAChatChannelMemberUpdate_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  channel_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgDOTAChatChannelMemberUpdate::~CMsgDOTAChatChannelMemberUpdate() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatChannelMemberUpdate)
  SharedDtor();
}

void CMsgDOTAChatChannelMemberUpdate::SharedDtor() {
}

void CMsgDOTAChatChannelMemberUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAChatChannelMemberUpdate& CMsgDOTAChatChannelMemberUpdate::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAChatChannelMemberUpdate_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAChatChannelMemberUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatChannelMemberUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  left_steam_ids_.Clear();
  joined_members_.Clear();
  channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAChatChannelMemberUpdate::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAChatChannelMemberUpdate*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 channel_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_channel_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // repeated fixed64 left_steam_ids = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 17) {
          do {
            msg->add_left_steam_ids(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
            ptr += sizeof(::google::protobuf::uint64);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 17 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedFixed64Parser;
        object = msg->mutable_left_steam_ids();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated .proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember joined_members = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember::_InternalParse;
          object = msg->add_joined_members();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAChatChannelMemberUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatChannelMemberUpdate)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_channel_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated fixed64 left_steam_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (17 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 17u, input, this->mutable_left_steam_ids())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_left_steam_ids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember joined_members = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_joined_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatChannelMemberUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatChannelMemberUpdate)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAChatChannelMemberUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatChannelMemberUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->channel_id(), output);
  }

  // repeated fixed64 left_steam_ids = 2;
  for (int i = 0, n = this->left_steam_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(
      2, this->left_steam_ids(i), output);
  }

  // repeated .proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember joined_members = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->joined_members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->joined_members(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatChannelMemberUpdate)
}

::google::protobuf::uint8* CMsgDOTAChatChannelMemberUpdate::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatChannelMemberUpdate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->channel_id(), target);
  }

  // repeated fixed64 left_steam_ids = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteFixed64ToArray(2, this->left_steam_ids_, target);

  // repeated .proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember joined_members = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->joined_members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->joined_members(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatChannelMemberUpdate)
  return target;
}

size_t CMsgDOTAChatChannelMemberUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatChannelMemberUpdate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated fixed64 left_steam_ids = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->left_steam_ids_size());
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->left_steam_ids_size());
    total_size += data_size;
  }

  // repeated .proto.dota.CMsgDOTAChatChannelMemberUpdate.JoinedMember joined_members = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->joined_members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->joined_members(static_cast<int>(i)));
    }
  }

  // optional fixed64 channel_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatChannelMemberUpdate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatChannelMemberUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatChannelMemberUpdate* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAChatChannelMemberUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatChannelMemberUpdate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatChannelMemberUpdate)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatChannelMemberUpdate::MergeFrom(const CMsgDOTAChatChannelMemberUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatChannelMemberUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  left_steam_ids_.MergeFrom(from.left_steam_ids_);
  joined_members_.MergeFrom(from.joined_members_);
  if (from.has_channel_id()) {
    set_channel_id(from.channel_id());
  }
}

void CMsgDOTAChatChannelMemberUpdate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatChannelMemberUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatChannelMemberUpdate::CopyFrom(const CMsgDOTAChatChannelMemberUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatChannelMemberUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatChannelMemberUpdate::IsInitialized() const {
  return true;
}

void CMsgDOTAChatChannelMemberUpdate::Swap(CMsgDOTAChatChannelMemberUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatChannelMemberUpdate::InternalSwap(CMsgDOTAChatChannelMemberUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  left_steam_ids_.InternalSwap(&other->left_steam_ids_);
  CastToBase(&joined_members_)->InternalSwap(CastToBase(&other->joined_members_));
  swap(channel_id_, other->channel_id_);
}

::google::protobuf::Metadata CMsgDOTAChatChannelMemberUpdate::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARequestChatChannelList::InitAsDefaultInstance() {
}
class CMsgDOTARequestChatChannelList::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARequestChatChannelList::CMsgDOTARequestChatChannelList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARequestChatChannelList)
}
CMsgDOTARequestChatChannelList::CMsgDOTARequestChatChannelList(const CMsgDOTARequestChatChannelList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARequestChatChannelList)
}

void CMsgDOTARequestChatChannelList::SharedCtor() {
}

CMsgDOTARequestChatChannelList::~CMsgDOTARequestChatChannelList() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARequestChatChannelList)
  SharedDtor();
}

void CMsgDOTARequestChatChannelList::SharedDtor() {
}

void CMsgDOTARequestChatChannelList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARequestChatChannelList& CMsgDOTARequestChatChannelList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARequestChatChannelList_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARequestChatChannelList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARequestChatChannelList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARequestChatChannelList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARequestChatChannelList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARequestChatChannelList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARequestChatChannelList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARequestChatChannelList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARequestChatChannelList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARequestChatChannelList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARequestChatChannelList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARequestChatChannelList)
}

::google::protobuf::uint8* CMsgDOTARequestChatChannelList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARequestChatChannelList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARequestChatChannelList)
  return target;
}

size_t CMsgDOTARequestChatChannelList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARequestChatChannelList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARequestChatChannelList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARequestChatChannelList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARequestChatChannelList* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARequestChatChannelList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARequestChatChannelList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARequestChatChannelList)
    MergeFrom(*source);
  }
}

void CMsgDOTARequestChatChannelList::MergeFrom(const CMsgDOTARequestChatChannelList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARequestChatChannelList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CMsgDOTARequestChatChannelList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARequestChatChannelList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestChatChannelList::CopyFrom(const CMsgDOTARequestChatChannelList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARequestChatChannelList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestChatChannelList::IsInitialized() const {
  return true;
}

void CMsgDOTARequestChatChannelList::Swap(CMsgDOTARequestChatChannelList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARequestChatChannelList::InternalSwap(CMsgDOTARequestChatChannelList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CMsgDOTARequestChatChannelList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARequestChatChannelListResponse_ChatChannel::InitAsDefaultInstance() {
}
class CMsgDOTARequestChatChannelListResponse_ChatChannel::HasBitSetters {
 public:
  static void set_has_channel_name(CMsgDOTARequestChatChannelListResponse_ChatChannel* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_num_members(CMsgDOTARequestChatChannelListResponse_ChatChannel* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_channel_type(CMsgDOTARequestChatChannelListResponse_ChatChannel* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARequestChatChannelListResponse_ChatChannel::kChannelNameFieldNumber;
const int CMsgDOTARequestChatChannelListResponse_ChatChannel::kNumMembersFieldNumber;
const int CMsgDOTARequestChatChannelListResponse_ChatChannel::kChannelTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARequestChatChannelListResponse_ChatChannel::CMsgDOTARequestChatChannelListResponse_ChatChannel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
}
CMsgDOTARequestChatChannelListResponse_ChatChannel::CMsgDOTARequestChatChannelListResponse_ChatChannel(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_channel_name()) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  ::memcpy(&num_members_, &from.num_members_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_type_) -
    reinterpret_cast<char*>(&num_members_)) + sizeof(channel_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTARequestChatChannelListResponse_ChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&num_members_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_type_) -
      reinterpret_cast<char*>(&num_members_)) + sizeof(channel_type_));
}

CMsgDOTARequestChatChannelListResponse_ChatChannel::~CMsgDOTARequestChatChannelListResponse_ChatChannel() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
  SharedDtor();
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::SharedDtor() {
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARequestChatChannelListResponse_ChatChannel& CMsgDOTARequestChatChannelListResponse_ChatChannel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARequestChatChannelListResponse_ChatChannel_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARequestChatChannelListResponse_ChatChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    channel_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&num_members_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&channel_type_) -
        reinterpret_cast<char*>(&num_members_)) + sizeof(channel_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARequestChatChannelListResponse_ChatChannel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARequestChatChannelListResponse_ChatChannel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string channel_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name");
        object = msg->mutable_channel_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 num_members = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_num_members(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTAChatChannelType_t_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(3, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_channel_type(static_cast<::proto::dota::DOTAChatChannelType_t>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARequestChatChannelListResponse_ChatChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_name().data(), static_cast<int>(this->channel_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 num_members = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_num_members(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_members_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTAChatChannelType_t_IsValid(value)) {
            set_channel_type(static_cast< ::proto::dota::DOTAChatChannelType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARequestChatChannelListResponse_ChatChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel_name(), output);
  }

  // optional uint32 num_members = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num_members(), output);
  }

  // optional .proto.dota.DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->channel_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
}

::google::protobuf::uint8* CMsgDOTARequestChatChannelListResponse_ChatChannel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_name(), target);
  }

  // optional uint32 num_members = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num_members(), target);
  }

  // optional .proto.dota.DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->channel_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
  return target;
}

size_t CMsgDOTARequestChatChannelListResponse_ChatChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_name());
    }

    // optional uint32 num_members = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_members());
    }

    // optional .proto.dota.DOTAChatChannelType_t channel_type = 3 [default = DOTAChannelType_Regional];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARequestChatChannelListResponse_ChatChannel* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARequestChatChannelListResponse_ChatChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
    MergeFrom(*source);
  }
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::MergeFrom(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      num_members_ = from.num_members_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_type_ = from.channel_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::CopyFrom(const CMsgDOTARequestChatChannelListResponse_ChatChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestChatChannelListResponse_ChatChannel::IsInitialized() const {
  return true;
}

void CMsgDOTARequestChatChannelListResponse_ChatChannel::Swap(CMsgDOTARequestChatChannelListResponse_ChatChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARequestChatChannelListResponse_ChatChannel::InternalSwap(CMsgDOTARequestChatChannelListResponse_ChatChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  channel_name_.Swap(&other->channel_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(num_members_, other->num_members_);
  swap(channel_type_, other->channel_type_);
}

::google::protobuf::Metadata CMsgDOTARequestChatChannelListResponse_ChatChannel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTARequestChatChannelListResponse::InitAsDefaultInstance() {
}
class CMsgDOTARequestChatChannelListResponse::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTARequestChatChannelListResponse::kChannelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTARequestChatChannelListResponse::CMsgDOTARequestChatChannelListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTARequestChatChannelListResponse)
}
CMsgDOTARequestChatChannelListResponse::CMsgDOTARequestChatChannelListResponse(const CMsgDOTARequestChatChannelListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTARequestChatChannelListResponse)
}

void CMsgDOTARequestChatChannelListResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTARequestChatChannelListResponse_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
}

CMsgDOTARequestChatChannelListResponse::~CMsgDOTARequestChatChannelListResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTARequestChatChannelListResponse)
  SharedDtor();
}

void CMsgDOTARequestChatChannelListResponse::SharedDtor() {
}

void CMsgDOTARequestChatChannelListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTARequestChatChannelListResponse& CMsgDOTARequestChatChannelListResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTARequestChatChannelListResponse_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTARequestChatChannelListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTARequestChatChannelListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTARequestChatChannelListResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTARequestChatChannelListResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel::_InternalParse;
          object = msg->add_channels();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTARequestChatChannelListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTARequestChatChannelListResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_channels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTARequestChatChannelListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTARequestChatChannelListResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTARequestChatChannelListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTARequestChatChannelListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channels_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->channels(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTARequestChatChannelListResponse)
}

::google::protobuf::uint8* CMsgDOTARequestChatChannelListResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTARequestChatChannelListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->channels_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->channels(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTARequestChatChannelListResponse)
  return target;
}

size_t CMsgDOTARequestChatChannelListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTARequestChatChannelListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTARequestChatChannelListResponse.ChatChannel channels = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->channels_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->channels(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTARequestChatChannelListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTARequestChatChannelListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTARequestChatChannelListResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTARequestChatChannelListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTARequestChatChannelListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTARequestChatChannelListResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTARequestChatChannelListResponse::MergeFrom(const CMsgDOTARequestChatChannelListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTARequestChatChannelListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
}

void CMsgDOTARequestChatChannelListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTARequestChatChannelListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTARequestChatChannelListResponse::CopyFrom(const CMsgDOTARequestChatChannelListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTARequestChatChannelListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTARequestChatChannelListResponse::IsInitialized() const {
  return true;
}

void CMsgDOTARequestChatChannelListResponse::Swap(CMsgDOTARequestChatChannelListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTARequestChatChannelListResponse::InternalSwap(CMsgDOTARequestChatChannelListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&channels_)->InternalSwap(CastToBase(&other->channels_));
}

::google::protobuf::Metadata CMsgDOTARequestChatChannelListResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAChatGetUserList::InitAsDefaultInstance() {
}
class CMsgDOTAChatGetUserList::HasBitSetters {
 public:
  static void set_has_channel_id(CMsgDOTAChatGetUserList* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatGetUserList::kChannelIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatGetUserList::CMsgDOTAChatGetUserList()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatGetUserList)
}
CMsgDOTAChatGetUserList::CMsgDOTAChatGetUserList(const CMsgDOTAChatGetUserList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatGetUserList)
}

void CMsgDOTAChatGetUserList::SharedCtor() {
  channel_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgDOTAChatGetUserList::~CMsgDOTAChatGetUserList() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatGetUserList)
  SharedDtor();
}

void CMsgDOTAChatGetUserList::SharedDtor() {
}

void CMsgDOTAChatGetUserList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAChatGetUserList& CMsgDOTAChatGetUserList::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAChatGetUserList_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAChatGetUserList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatGetUserList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAChatGetUserList::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAChatGetUserList*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 channel_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_channel_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAChatGetUserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatGetUserList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_channel_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatGetUserList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatGetUserList)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAChatGetUserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatGetUserList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->channel_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatGetUserList)
}

::google::protobuf::uint8* CMsgDOTAChatGetUserList::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatGetUserList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->channel_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatGetUserList)
  return target;
}

size_t CMsgDOTAChatGetUserList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatGetUserList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional fixed64 channel_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatGetUserList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatGetUserList)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatGetUserList* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAChatGetUserList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatGetUserList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatGetUserList)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatGetUserList::MergeFrom(const CMsgDOTAChatGetUserList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatGetUserList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_channel_id()) {
    set_channel_id(from.channel_id());
  }
}

void CMsgDOTAChatGetUserList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatGetUserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatGetUserList::CopyFrom(const CMsgDOTAChatGetUserList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatGetUserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatGetUserList::IsInitialized() const {
  return true;
}

void CMsgDOTAChatGetUserList::Swap(CMsgDOTAChatGetUserList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatGetUserList::InternalSwap(CMsgDOTAChatGetUserList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(channel_id_, other->channel_id_);
}

::google::protobuf::Metadata CMsgDOTAChatGetUserList::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAChatGetUserListResponse_Member::InitAsDefaultInstance() {
}
class CMsgDOTAChatGetUserListResponse_Member::HasBitSetters {
 public:
  static void set_has_steam_id(CMsgDOTAChatGetUserListResponse_Member* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_persona_name(CMsgDOTAChatGetUserListResponse_Member* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_channel_user_id(CMsgDOTAChatGetUserListResponse_Member* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_status(CMsgDOTAChatGetUserListResponse_Member* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatGetUserListResponse_Member::kSteamIdFieldNumber;
const int CMsgDOTAChatGetUserListResponse_Member::kPersonaNameFieldNumber;
const int CMsgDOTAChatGetUserListResponse_Member::kChannelUserIdFieldNumber;
const int CMsgDOTAChatGetUserListResponse_Member::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatGetUserListResponse_Member::CMsgDOTAChatGetUserListResponse_Member()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
}
CMsgDOTAChatGetUserListResponse_Member::CMsgDOTAChatGetUserListResponse_Member(const CMsgDOTAChatGetUserListResponse_Member& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_persona_name()) {
    persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
  }
  ::memcpy(&steam_id_, &from.steam_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&steam_id_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
}

void CMsgDOTAChatGetUserListResponse_Member::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAChatGetUserListResponse_Member_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  persona_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&steam_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&steam_id_)) + sizeof(status_));
}

CMsgDOTAChatGetUserListResponse_Member::~CMsgDOTAChatGetUserListResponse_Member() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
  SharedDtor();
}

void CMsgDOTAChatGetUserListResponse_Member::SharedDtor() {
  persona_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAChatGetUserListResponse_Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAChatGetUserListResponse_Member& CMsgDOTAChatGetUserListResponse_Member::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAChatGetUserListResponse_Member_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAChatGetUserListResponse_Member::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    persona_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&steam_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&steam_id_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAChatGetUserListResponse_Member::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAChatGetUserListResponse_Member*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_steam_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional string persona_name = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAChatGetUserListResponse.Member.persona_name");
        object = msg->mutable_persona_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional uint32 channel_user_id = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_channel_user_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 status = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_status(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAChatGetUserListResponse_Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 steam_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_steam_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &steam_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string persona_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_persona_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->persona_name().data(), static_cast<int>(this->persona_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAChatGetUserListResponse.Member.persona_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 channel_user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_channel_user_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_status(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAChatGetUserListResponse_Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->steam_id(), output);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatGetUserListResponse.Member.persona_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->persona_name(), output);
  }

  // optional uint32 channel_user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->channel_user_id(), output);
  }

  // optional uint32 status = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
}

::google::protobuf::uint8* CMsgDOTAChatGetUserListResponse_Member::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 steam_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->steam_id(), target);
  }

  // optional string persona_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->persona_name().data(), static_cast<int>(this->persona_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatGetUserListResponse.Member.persona_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->persona_name(), target);
  }

  // optional uint32 channel_user_id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->channel_user_id(), target);
  }

  // optional uint32 status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
  return target;
}

size_t CMsgDOTAChatGetUserListResponse_Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string persona_name = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->persona_name());
    }

    // optional fixed64 steam_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional uint32 channel_user_id = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel_user_id());
    }

    // optional uint32 status = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatGetUserListResponse_Member::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatGetUserListResponse_Member* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAChatGetUserListResponse_Member>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatGetUserListResponse_Member::MergeFrom(const CMsgDOTAChatGetUserListResponse_Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      persona_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.persona_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      steam_id_ = from.steam_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_user_id_ = from.channel_user_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChatGetUserListResponse_Member::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatGetUserListResponse_Member::CopyFrom(const CMsgDOTAChatGetUserListResponse_Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatGetUserListResponse.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatGetUserListResponse_Member::IsInitialized() const {
  return true;
}

void CMsgDOTAChatGetUserListResponse_Member::Swap(CMsgDOTAChatGetUserListResponse_Member* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatGetUserListResponse_Member::InternalSwap(CMsgDOTAChatGetUserListResponse_Member* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  persona_name_.Swap(&other->persona_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(steam_id_, other->steam_id_);
  swap(channel_user_id_, other->channel_user_id_);
  swap(status_, other->status_);
}

::google::protobuf::Metadata CMsgDOTAChatGetUserListResponse_Member::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAChatGetUserListResponse::InitAsDefaultInstance() {
}
class CMsgDOTAChatGetUserListResponse::HasBitSetters {
 public:
  static void set_has_channel_id(CMsgDOTAChatGetUserListResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatGetUserListResponse::kChannelIdFieldNumber;
const int CMsgDOTAChatGetUserListResponse::kMembersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatGetUserListResponse::CMsgDOTAChatGetUserListResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatGetUserListResponse)
}
CMsgDOTAChatGetUserListResponse::CMsgDOTAChatGetUserListResponse(const CMsgDOTAChatGetUserListResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      members_(from.members_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_id_ = from.channel_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatGetUserListResponse)
}

void CMsgDOTAChatGetUserListResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAChatGetUserListResponse_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  channel_id_ = PROTOBUF_ULONGLONG(0);
}

CMsgDOTAChatGetUserListResponse::~CMsgDOTAChatGetUserListResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatGetUserListResponse)
  SharedDtor();
}

void CMsgDOTAChatGetUserListResponse::SharedDtor() {
}

void CMsgDOTAChatGetUserListResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAChatGetUserListResponse& CMsgDOTAChatGetUserListResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAChatGetUserListResponse_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAChatGetUserListResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatGetUserListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  members_.Clear();
  channel_id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAChatGetUserListResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAChatGetUserListResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 channel_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_channel_id(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // repeated .proto.dota.CMsgDOTAChatGetUserListResponse.Member members = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAChatGetUserListResponse_Member::_InternalParse;
          object = msg->add_members();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAChatGetUserListResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatGetUserListResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 channel_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_channel_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &channel_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAChatGetUserListResponse.Member members = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_members()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatGetUserListResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatGetUserListResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAChatGetUserListResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatGetUserListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->channel_id(), output);
  }

  // repeated .proto.dota.CMsgDOTAChatGetUserListResponse.Member members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->members(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatGetUserListResponse)
}

::google::protobuf::uint8* CMsgDOTAChatGetUserListResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatGetUserListResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 channel_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->channel_id(), target);
  }

  // repeated .proto.dota.CMsgDOTAChatGetUserListResponse.Member members = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->members_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->members(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatGetUserListResponse)
  return target;
}

size_t CMsgDOTAChatGetUserListResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatGetUserListResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAChatGetUserListResponse.Member members = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->members_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->members(static_cast<int>(i)));
    }
  }

  // optional fixed64 channel_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatGetUserListResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatGetUserListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatGetUserListResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAChatGetUserListResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatGetUserListResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatGetUserListResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatGetUserListResponse::MergeFrom(const CMsgDOTAChatGetUserListResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatGetUserListResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  members_.MergeFrom(from.members_);
  if (from.has_channel_id()) {
    set_channel_id(from.channel_id());
  }
}

void CMsgDOTAChatGetUserListResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatGetUserListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatGetUserListResponse::CopyFrom(const CMsgDOTAChatGetUserListResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatGetUserListResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatGetUserListResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAChatGetUserListResponse::Swap(CMsgDOTAChatGetUserListResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatGetUserListResponse::InternalSwap(CMsgDOTAChatGetUserListResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&members_)->InternalSwap(CastToBase(&other->members_));
  swap(channel_id_, other->channel_id_);
}

::google::protobuf::Metadata CMsgDOTAChatGetUserListResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAChatGetMemberCount::InitAsDefaultInstance() {
}
class CMsgDOTAChatGetMemberCount::HasBitSetters {
 public:
  static void set_has_channel_name(CMsgDOTAChatGetMemberCount* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_channel_type(CMsgDOTAChatGetMemberCount* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatGetMemberCount::kChannelNameFieldNumber;
const int CMsgDOTAChatGetMemberCount::kChannelTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatGetMemberCount::CMsgDOTAChatGetMemberCount()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatGetMemberCount)
}
CMsgDOTAChatGetMemberCount::CMsgDOTAChatGetMemberCount(const CMsgDOTAChatGetMemberCount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_channel_name()) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  channel_type_ = from.channel_type_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatGetMemberCount)
}

void CMsgDOTAChatGetMemberCount::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAChatGetMemberCount_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  channel_type_ = 0;
}

CMsgDOTAChatGetMemberCount::~CMsgDOTAChatGetMemberCount() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatGetMemberCount)
  SharedDtor();
}

void CMsgDOTAChatGetMemberCount::SharedDtor() {
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAChatGetMemberCount::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAChatGetMemberCount& CMsgDOTAChatGetMemberCount::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAChatGetMemberCount_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAChatGetMemberCount::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatGetMemberCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    channel_name_.ClearNonDefaultToEmptyNoArena();
  }
  channel_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAChatGetMemberCount::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAChatGetMemberCount*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string channel_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAChatGetMemberCount.channel_name");
        object = msg->mutable_channel_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .proto.dota.DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTAChatChannelType_t_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_channel_type(static_cast<::proto::dota::DOTAChatChannelType_t>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAChatGetMemberCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatGetMemberCount)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_name().data(), static_cast<int>(this->channel_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAChatGetMemberCount.channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTAChatChannelType_t_IsValid(value)) {
            set_channel_type(static_cast< ::proto::dota::DOTAChatChannelType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatGetMemberCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatGetMemberCount)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAChatGetMemberCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatGetMemberCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatGetMemberCount.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel_name(), output);
  }

  // optional .proto.dota.DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->channel_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatGetMemberCount)
}

::google::protobuf::uint8* CMsgDOTAChatGetMemberCount::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatGetMemberCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatGetMemberCount.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_name(), target);
  }

  // optional .proto.dota.DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->channel_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatGetMemberCount)
  return target;
}

size_t CMsgDOTAChatGetMemberCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatGetMemberCount)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_name());
    }

    // optional .proto.dota.DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatGetMemberCount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatGetMemberCount)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatGetMemberCount* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAChatGetMemberCount>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatGetMemberCount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatGetMemberCount)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatGetMemberCount::MergeFrom(const CMsgDOTAChatGetMemberCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatGetMemberCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      channel_type_ = from.channel_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChatGetMemberCount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatGetMemberCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatGetMemberCount::CopyFrom(const CMsgDOTAChatGetMemberCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatGetMemberCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatGetMemberCount::IsInitialized() const {
  return true;
}

void CMsgDOTAChatGetMemberCount::Swap(CMsgDOTAChatGetMemberCount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatGetMemberCount::InternalSwap(CMsgDOTAChatGetMemberCount* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  channel_name_.Swap(&other->channel_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_type_, other->channel_type_);
}

::google::protobuf::Metadata CMsgDOTAChatGetMemberCount::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAChatGetMemberCountResponse::InitAsDefaultInstance() {
}
class CMsgDOTAChatGetMemberCountResponse::HasBitSetters {
 public:
  static void set_has_channel_name(CMsgDOTAChatGetMemberCountResponse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_channel_type(CMsgDOTAChatGetMemberCountResponse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_member_count(CMsgDOTAChatGetMemberCountResponse* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatGetMemberCountResponse::kChannelNameFieldNumber;
const int CMsgDOTAChatGetMemberCountResponse::kChannelTypeFieldNumber;
const int CMsgDOTAChatGetMemberCountResponse::kMemberCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatGetMemberCountResponse::CMsgDOTAChatGetMemberCountResponse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatGetMemberCountResponse)
}
CMsgDOTAChatGetMemberCountResponse::CMsgDOTAChatGetMemberCountResponse(const CMsgDOTAChatGetMemberCountResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_channel_name()) {
    channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
  }
  ::memcpy(&channel_type_, &from.channel_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&member_count_) -
    reinterpret_cast<char*>(&channel_type_)) + sizeof(member_count_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatGetMemberCountResponse)
}

void CMsgDOTAChatGetMemberCountResponse::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAChatGetMemberCountResponse_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  channel_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&member_count_) -
      reinterpret_cast<char*>(&channel_type_)) + sizeof(member_count_));
}

CMsgDOTAChatGetMemberCountResponse::~CMsgDOTAChatGetMemberCountResponse() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatGetMemberCountResponse)
  SharedDtor();
}

void CMsgDOTAChatGetMemberCountResponse::SharedDtor() {
  channel_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CMsgDOTAChatGetMemberCountResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAChatGetMemberCountResponse& CMsgDOTAChatGetMemberCountResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAChatGetMemberCountResponse_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAChatGetMemberCountResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatGetMemberCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    channel_name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&channel_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&member_count_) -
        reinterpret_cast<char*>(&channel_type_)) + sizeof(member_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAChatGetMemberCountResponse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAChatGetMemberCountResponse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string channel_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CMsgDOTAChatGetMemberCountResponse.channel_name");
        object = msg->mutable_channel_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional .proto.dota.DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::DOTAChatChannelType_t_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_channel_type(static_cast<::proto::dota::DOTAChatChannelType_t>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 member_count = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_member_count(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAChatGetMemberCountResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatGetMemberCountResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string channel_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_channel_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->channel_name().data(), static_cast<int>(this->channel_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CMsgDOTAChatGetMemberCountResponse.channel_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::DOTAChatChannelType_t_IsValid(value)) {
            set_channel_type(static_cast< ::proto::dota::DOTAChatChannelType_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 member_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_member_count(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &member_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatGetMemberCountResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatGetMemberCountResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAChatGetMemberCountResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatGetMemberCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatGetMemberCountResponse.channel_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->channel_name(), output);
  }

  // optional .proto.dota.DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->channel_type(), output);
  }

  // optional uint32 member_count = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->member_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatGetMemberCountResponse)
}

::google::protobuf::uint8* CMsgDOTAChatGetMemberCountResponse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatGetMemberCountResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string channel_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->channel_name().data(), static_cast<int>(this->channel_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CMsgDOTAChatGetMemberCountResponse.channel_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->channel_name(), target);
  }

  // optional .proto.dota.DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->channel_type(), target);
  }

  // optional uint32 member_count = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->member_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatGetMemberCountResponse)
  return target;
}

size_t CMsgDOTAChatGetMemberCountResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatGetMemberCountResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string channel_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->channel_name());
    }

    // optional .proto.dota.DOTAChatChannelType_t channel_type = 2 [default = DOTAChannelType_Regional];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel_type());
    }

    // optional uint32 member_count = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->member_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatGetMemberCountResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatGetMemberCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatGetMemberCountResponse* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAChatGetMemberCountResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatGetMemberCountResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatGetMemberCountResponse)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatGetMemberCountResponse::MergeFrom(const CMsgDOTAChatGetMemberCountResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatGetMemberCountResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      channel_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.channel_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      channel_type_ = from.channel_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      member_count_ = from.member_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChatGetMemberCountResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatGetMemberCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatGetMemberCountResponse::CopyFrom(const CMsgDOTAChatGetMemberCountResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatGetMemberCountResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatGetMemberCountResponse::IsInitialized() const {
  return true;
}

void CMsgDOTAChatGetMemberCountResponse::Swap(CMsgDOTAChatGetMemberCountResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatGetMemberCountResponse::InternalSwap(CMsgDOTAChatGetMemberCountResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  channel_name_.Swap(&other->channel_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_type_, other->channel_type_);
  swap(member_count_, other->member_count_);
}

::google::protobuf::Metadata CMsgDOTAChatGetMemberCountResponse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAChatRegionsEnabled_Region::InitAsDefaultInstance() {
}
class CMsgDOTAChatRegionsEnabled_Region::HasBitSetters {
 public:
  static void set_has_min_latitude(CMsgDOTAChatRegionsEnabled_Region* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_max_latitude(CMsgDOTAChatRegionsEnabled_Region* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_min_longitude(CMsgDOTAChatRegionsEnabled_Region* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_max_longitude(CMsgDOTAChatRegionsEnabled_Region* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatRegionsEnabled_Region::kMinLatitudeFieldNumber;
const int CMsgDOTAChatRegionsEnabled_Region::kMaxLatitudeFieldNumber;
const int CMsgDOTAChatRegionsEnabled_Region::kMinLongitudeFieldNumber;
const int CMsgDOTAChatRegionsEnabled_Region::kMaxLongitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatRegionsEnabled_Region::CMsgDOTAChatRegionsEnabled_Region()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
}
CMsgDOTAChatRegionsEnabled_Region::CMsgDOTAChatRegionsEnabled_Region(const CMsgDOTAChatRegionsEnabled_Region& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_latitude_, &from.min_latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_longitude_) -
    reinterpret_cast<char*>(&min_latitude_)) + sizeof(max_longitude_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
}

void CMsgDOTAChatRegionsEnabled_Region::SharedCtor() {
  ::memset(&min_latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_longitude_) -
      reinterpret_cast<char*>(&min_latitude_)) + sizeof(max_longitude_));
}

CMsgDOTAChatRegionsEnabled_Region::~CMsgDOTAChatRegionsEnabled_Region() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
  SharedDtor();
}

void CMsgDOTAChatRegionsEnabled_Region::SharedDtor() {
}

void CMsgDOTAChatRegionsEnabled_Region::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAChatRegionsEnabled_Region& CMsgDOTAChatRegionsEnabled_Region::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAChatRegionsEnabled_Region_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAChatRegionsEnabled_Region::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&min_latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&max_longitude_) -
        reinterpret_cast<char*>(&min_latitude_)) + sizeof(max_longitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAChatRegionsEnabled_Region::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAChatRegionsEnabled_Region*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional float min_latitude = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_min_latitude(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float max_latitude = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_max_latitude(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float min_longitude = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_min_longitude(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float max_longitude = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_max_longitude(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAChatRegionsEnabled_Region::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min_latitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_min_latitude(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_latitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_max_latitude(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float min_longitude = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_min_longitude(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_longitude = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_max_longitude(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAChatRegionsEnabled_Region::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_latitude(), output);
  }

  // optional float max_latitude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_latitude(), output);
  }

  // optional float min_longitude = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->min_longitude(), output);
  }

  // optional float max_longitude = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max_longitude(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
}

::google::protobuf::uint8* CMsgDOTAChatRegionsEnabled_Region::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_latitude(), target);
  }

  // optional float max_latitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_latitude(), target);
  }

  // optional float min_longitude = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->min_longitude(), target);
  }

  // optional float max_longitude = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max_longitude(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
  return target;
}

size_t CMsgDOTAChatRegionsEnabled_Region::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float min_latitude = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float max_latitude = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float min_longitude = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float max_longitude = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatRegionsEnabled_Region::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatRegionsEnabled_Region* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAChatRegionsEnabled_Region>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatRegionsEnabled_Region::MergeFrom(const CMsgDOTAChatRegionsEnabled_Region& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      min_latitude_ = from.min_latitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_latitude_ = from.max_latitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      min_longitude_ = from.min_longitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      max_longitude_ = from.max_longitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CMsgDOTAChatRegionsEnabled_Region::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatRegionsEnabled_Region::CopyFrom(const CMsgDOTAChatRegionsEnabled_Region& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatRegionsEnabled.Region)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatRegionsEnabled_Region::IsInitialized() const {
  return true;
}

void CMsgDOTAChatRegionsEnabled_Region::Swap(CMsgDOTAChatRegionsEnabled_Region* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatRegionsEnabled_Region::InternalSwap(CMsgDOTAChatRegionsEnabled_Region* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(min_latitude_, other->min_latitude_);
  swap(max_latitude_, other->max_latitude_);
  swap(min_longitude_, other->min_longitude_);
  swap(max_longitude_, other->max_longitude_);
}

::google::protobuf::Metadata CMsgDOTAChatRegionsEnabled_Region::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CMsgDOTAChatRegionsEnabled::InitAsDefaultInstance() {
}
class CMsgDOTAChatRegionsEnabled::HasBitSetters {
 public:
  static void set_has_enable_all_regions(CMsgDOTAChatRegionsEnabled* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CMsgDOTAChatRegionsEnabled::kEnableAllRegionsFieldNumber;
const int CMsgDOTAChatRegionsEnabled::kEnabledRegionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CMsgDOTAChatRegionsEnabled::CMsgDOTAChatRegionsEnabled()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CMsgDOTAChatRegionsEnabled)
}
CMsgDOTAChatRegionsEnabled::CMsgDOTAChatRegionsEnabled(const CMsgDOTAChatRegionsEnabled& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      enabled_regions_(from.enabled_regions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  enable_all_regions_ = from.enable_all_regions_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CMsgDOTAChatRegionsEnabled)
}

void CMsgDOTAChatRegionsEnabled::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CMsgDOTAChatRegionsEnabled_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  enable_all_regions_ = false;
}

CMsgDOTAChatRegionsEnabled::~CMsgDOTAChatRegionsEnabled() {
  // @@protoc_insertion_point(destructor:proto.dota.CMsgDOTAChatRegionsEnabled)
  SharedDtor();
}

void CMsgDOTAChatRegionsEnabled::SharedDtor() {
}

void CMsgDOTAChatRegionsEnabled::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CMsgDOTAChatRegionsEnabled& CMsgDOTAChatRegionsEnabled::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CMsgDOTAChatRegionsEnabled_dota_5fgcmessages_5fclient_5fchat_2eproto.base);
  return *internal_default_instance();
}


void CMsgDOTAChatRegionsEnabled::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CMsgDOTAChatRegionsEnabled)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  enabled_regions_.Clear();
  enable_all_regions_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CMsgDOTAChatRegionsEnabled::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CMsgDOTAChatRegionsEnabled*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool enable_all_regions = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_enable_all_regions(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CMsgDOTAChatRegionsEnabled.Region enabled_regions = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CMsgDOTAChatRegionsEnabled_Region::_InternalParse;
          object = msg->add_enabled_regions();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CMsgDOTAChatRegionsEnabled::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CMsgDOTAChatRegionsEnabled)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool enable_all_regions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_enable_all_regions(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_all_regions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CMsgDOTAChatRegionsEnabled.Region enabled_regions = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_enabled_regions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CMsgDOTAChatRegionsEnabled)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CMsgDOTAChatRegionsEnabled)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CMsgDOTAChatRegionsEnabled::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CMsgDOTAChatRegionsEnabled)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable_all_regions = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->enable_all_regions(), output);
  }

  // repeated .proto.dota.CMsgDOTAChatRegionsEnabled.Region enabled_regions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->enabled_regions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->enabled_regions(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CMsgDOTAChatRegionsEnabled)
}

::google::protobuf::uint8* CMsgDOTAChatRegionsEnabled::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CMsgDOTAChatRegionsEnabled)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool enable_all_regions = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->enable_all_regions(), target);
  }

  // repeated .proto.dota.CMsgDOTAChatRegionsEnabled.Region enabled_regions = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->enabled_regions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->enabled_regions(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CMsgDOTAChatRegionsEnabled)
  return target;
}

size_t CMsgDOTAChatRegionsEnabled::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CMsgDOTAChatRegionsEnabled)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CMsgDOTAChatRegionsEnabled.Region enabled_regions = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->enabled_regions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->enabled_regions(static_cast<int>(i)));
    }
  }

  // optional bool enable_all_regions = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CMsgDOTAChatRegionsEnabled::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CMsgDOTAChatRegionsEnabled)
  GOOGLE_DCHECK_NE(&from, this);
  const CMsgDOTAChatRegionsEnabled* source =
      ::google::protobuf::DynamicCastToGenerated<CMsgDOTAChatRegionsEnabled>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CMsgDOTAChatRegionsEnabled)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CMsgDOTAChatRegionsEnabled)
    MergeFrom(*source);
  }
}

void CMsgDOTAChatRegionsEnabled::MergeFrom(const CMsgDOTAChatRegionsEnabled& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CMsgDOTAChatRegionsEnabled)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  enabled_regions_.MergeFrom(from.enabled_regions_);
  if (from.has_enable_all_regions()) {
    set_enable_all_regions(from.enable_all_regions());
  }
}

void CMsgDOTAChatRegionsEnabled::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CMsgDOTAChatRegionsEnabled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CMsgDOTAChatRegionsEnabled::CopyFrom(const CMsgDOTAChatRegionsEnabled& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CMsgDOTAChatRegionsEnabled)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CMsgDOTAChatRegionsEnabled::IsInitialized() const {
  return true;
}

void CMsgDOTAChatRegionsEnabled::Swap(CMsgDOTAChatRegionsEnabled* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CMsgDOTAChatRegionsEnabled::InternalSwap(CMsgDOTAChatRegionsEnabled* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&enabled_regions_)->InternalSwap(CastToBase(&other->enabled_regions_));
  swap(enable_all_regions_, other->enable_all_regions_);
}

::google::protobuf::Metadata CMsgDOTAChatRegionsEnabled::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_dota_5fgcmessages_5fclient_5fchat_2eproto);
  return ::file_level_metadata_dota_5fgcmessages_5fclient_5fchat_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgClientToGCPrivateChatInvite* Arena::CreateMaybeMessage< ::proto::dota::CMsgClientToGCPrivateChatInvite >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgClientToGCPrivateChatInvite >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgClientToGCPrivateChatKick* Arena::CreateMaybeMessage< ::proto::dota::CMsgClientToGCPrivateChatKick >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgClientToGCPrivateChatKick >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgClientToGCPrivateChatPromote* Arena::CreateMaybeMessage< ::proto::dota::CMsgClientToGCPrivateChatPromote >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgClientToGCPrivateChatPromote >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgClientToGCPrivateChatDemote* Arena::CreateMaybeMessage< ::proto::dota::CMsgClientToGCPrivateChatDemote >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgClientToGCPrivateChatDemote >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToClientPrivateChatResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToClientPrivateChatResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToClientPrivateChatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgClientToGCPrivateChatInfoRequest* Arena::CreateMaybeMessage< ::proto::dota::CMsgClientToGCPrivateChatInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgClientToGCPrivateChatInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToClientPrivateChatInfoResponse_Member >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCToClientPrivateChatInfoResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCToClientPrivateChatInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCToClientPrivateChatInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAJoinChatChannel* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAJoinChatChannel >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAJoinChatChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTALeaveChatChannel* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTALeaveChatChannel >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTALeaveChatChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgGCChatReportPublicSpam* Arena::CreateMaybeMessage< ::proto::dota::CMsgGCChatReportPublicSpam >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgGCChatReportPublicSpam >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAClientIgnoredUser* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAClientIgnoredUser >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAClientIgnoredUser >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAChatMessage_DiceRoll* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAChatMessage_DiceRoll >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAChatMessage_DiceRoll >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAChatMessage_TriviaAnswered >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAChatMessage* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAChatMessage >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAChatMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAChatMember* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAChatMember >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAChatMember >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAJoinChatChannelResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAJoinChatChannelResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAJoinChatChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAChatChannelFullUpdate* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAChatChannelFullUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAChatChannelFullUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAOtherJoinedChatChannel* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAOtherJoinedChatChannel >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAOtherJoinedChatChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAOtherLeftChatChannel* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAOtherLeftChatChannel >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAOtherLeftChatChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAChatChannelMemberUpdate_JoinedMember >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAChatChannelMemberUpdate* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAChatChannelMemberUpdate >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAChatChannelMemberUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARequestChatChannelList* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARequestChatChannelList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARequestChatChannelList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARequestChatChannelListResponse_ChatChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTARequestChatChannelListResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTARequestChatChannelListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTARequestChatChannelListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAChatGetUserList* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAChatGetUserList >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAChatGetUserList >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAChatGetUserListResponse_Member* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAChatGetUserListResponse_Member >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAChatGetUserListResponse_Member >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAChatGetUserListResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAChatGetUserListResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAChatGetUserListResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAChatGetMemberCount* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAChatGetMemberCount >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAChatGetMemberCount >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAChatGetMemberCountResponse* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAChatGetMemberCountResponse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAChatGetMemberCountResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAChatRegionsEnabled_Region* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAChatRegionsEnabled_Region >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAChatRegionsEnabled_Region >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CMsgDOTAChatRegionsEnabled* Arena::CreateMaybeMessage< ::proto::dota::CMsgDOTAChatRegionsEnabled >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CMsgDOTAChatRegionsEnabled >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
