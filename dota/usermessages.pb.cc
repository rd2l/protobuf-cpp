// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: usermessages.proto

#include "usermessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_networkbasetypes_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgQAngle_networkbasetypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_networkbasetypes_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CMsgVector_networkbasetypes_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_usermessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageCameraTransition_Transition_DataDriven_usermessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_usermessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageShake_usermessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_usermessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageVGUIMenu_Keys_usermessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_usermessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CUserMsg_ParticleManager_ChangeControlPointAttachment_usermessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_usermessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CUserMsg_ParticleManager_CreateParticle_usermessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_usermessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CUserMsg_ParticleManager_DestroyParticleInvolving_usermessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_usermessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CUserMsg_ParticleManager_DestroyParticle_usermessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_usermessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CUserMsg_ParticleManager_ReleaseParticleIndex_usermessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_usermessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CUserMsg_ParticleManager_SetParticleFoWProperties_usermessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_usermessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CUserMsg_ParticleManager_SetParticleShouldCheckFoW_usermessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_usermessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CUserMsg_ParticleManager_SetParticleText_usermessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_usermessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CUserMsg_ParticleManager_UpdateParticleSetFrozen_usermessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_usermessages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CUserMsg_ParticleManager_UpdateParticleShouldDraw_usermessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_usermessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CUserMsg_ParticleManager_UpdateEntityPosition_usermessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_usermessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CUserMsg_ParticleManager_UpdateParticleEnt_usermessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_usermessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CUserMsg_ParticleManager_UpdateParticleFallback_usermessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_usermessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CUserMsg_ParticleManager_UpdateParticleFwd_usermessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_usermessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CUserMsg_ParticleManager_UpdateParticleOrient_usermessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_usermessages_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CUserMsg_ParticleManager_UpdateParticle_usermessages_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_usermessages_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_CUserMsg_ParticleManager_UpdateParticleOffset_usermessages_2eproto;
namespace proto {
namespace dota {
class CUserMessageAchievementEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageAchievementEvent> _instance;
} _CUserMessageAchievementEvent_default_instance_;
class CUserMessageCloseCaptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageCloseCaption> _instance;
} _CUserMessageCloseCaption_default_instance_;
class CUserMessageCloseCaptionDirectDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageCloseCaptionDirect> _instance;
} _CUserMessageCloseCaptionDirect_default_instance_;
class CUserMessageCloseCaptionPlaceholderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageCloseCaptionPlaceholder> _instance;
} _CUserMessageCloseCaptionPlaceholder_default_instance_;
class CUserMessageCurrentTimescaleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageCurrentTimescale> _instance;
} _CUserMessageCurrentTimescale_default_instance_;
class CUserMessageDesiredTimescaleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageDesiredTimescale> _instance;
} _CUserMessageDesiredTimescale_default_instance_;
class CUserMessageFadeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageFade> _instance;
} _CUserMessageFade_default_instance_;
class CUserMessageShakeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageShake> _instance;
} _CUserMessageShake_default_instance_;
class CUserMessageShakeDirDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageShakeDir> _instance;
} _CUserMessageShakeDir_default_instance_;
class CUserMessageScreenTiltDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageScreenTilt> _instance;
} _CUserMessageScreenTilt_default_instance_;
class CUserMessageSayTextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageSayText> _instance;
} _CUserMessageSayText_default_instance_;
class CUserMessageSayText2DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageSayText2> _instance;
} _CUserMessageSayText2_default_instance_;
class CUserMessageHudMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageHudMsg> _instance;
} _CUserMessageHudMsg_default_instance_;
class CUserMessageHudTextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageHudText> _instance;
} _CUserMessageHudText_default_instance_;
class CUserMessageTextMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageTextMsg> _instance;
} _CUserMessageTextMsg_default_instance_;
class CUserMessageGameTitleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageGameTitle> _instance;
} _CUserMessageGameTitle_default_instance_;
class CUserMessageResetHUDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageResetHUD> _instance;
} _CUserMessageResetHUD_default_instance_;
class CUserMessageSendAudioDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageSendAudio> _instance;
} _CUserMessageSendAudio_default_instance_;
class CUserMessageAudioParameterDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageAudioParameter> _instance;
} _CUserMessageAudioParameter_default_instance_;
class CUserMessageVoiceMaskDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageVoiceMask> _instance;
} _CUserMessageVoiceMask_default_instance_;
class CUserMessageRequestStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageRequestState> _instance;
} _CUserMessageRequestState_default_instance_;
class CUserMessageHintTextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageHintText> _instance;
} _CUserMessageHintText_default_instance_;
class CUserMessageKeyHintTextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageKeyHintText> _instance;
} _CUserMessageKeyHintText_default_instance_;
class CUserMessageVoiceSubtitleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageVoiceSubtitle> _instance;
} _CUserMessageVoiceSubtitle_default_instance_;
class CUserMessageVGUIMenu_KeysDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageVGUIMenu_Keys> _instance;
} _CUserMessageVGUIMenu_Keys_default_instance_;
class CUserMessageVGUIMenuDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageVGUIMenu> _instance;
} _CUserMessageVGUIMenu_default_instance_;
class CUserMessageRumbleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageRumble> _instance;
} _CUserMessageRumble_default_instance_;
class CUserMessageTrainDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageTrain> _instance;
} _CUserMessageTrain_default_instance_;
class CUserMessageSayTextChannelDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageSayTextChannel> _instance;
} _CUserMessageSayTextChannel_default_instance_;
class CUserMessageColoredTextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageColoredText> _instance;
} _CUserMessageColoredText_default_instance_;
class CUserMessageItemPickupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageItemPickup> _instance;
} _CUserMessageItemPickup_default_instance_;
class CUserMessageAmmoDeniedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageAmmoDenied> _instance;
} _CUserMessageAmmoDenied_default_instance_;
class CUserMessageCrosshairAngleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageCrosshairAngle> _instance;
} _CUserMessageCrosshairAngle_default_instance_;
class CUserMessageShowMenuDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageShowMenu> _instance;
} _CUserMessageShowMenu_default_instance_;
class CUserMessageCreditsMsgDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageCreditsMsg> _instance;
} _CUserMessageCreditsMsg_default_instance_;
class CEntityMessagePlayJingleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CEntityMessagePlayJingle> _instance;
} _CEntityMessagePlayJingle_default_instance_;
class CEntityMessageScreenOverlayDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CEntityMessageScreenOverlay> _instance;
} _CEntityMessageScreenOverlay_default_instance_;
class CEntityMessageRemoveAllDecalsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CEntityMessageRemoveAllDecals> _instance;
} _CEntityMessageRemoveAllDecals_default_instance_;
class CEntityMessagePropagateForceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CEntityMessagePropagateForce> _instance;
} _CEntityMessagePropagateForce_default_instance_;
class CEntityMessageDoSparkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CEntityMessageDoSpark> _instance;
} _CEntityMessageDoSpark_default_instance_;
class CEntityMessageFixAngleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CEntityMessageFixAngle> _instance;
} _CEntityMessageFixAngle_default_instance_;
class CUserMessageCameraTransition_Transition_DataDrivenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageCameraTransition_Transition_DataDriven> _instance;
} _CUserMessageCameraTransition_Transition_DataDriven_default_instance_;
class CUserMessageCameraTransitionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageCameraTransition> _instance;
} _CUserMessageCameraTransition_default_instance_;
class CUserMsg_ParticleManager_ReleaseParticleIndexDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_ReleaseParticleIndex> _instance;
} _CUserMsg_ParticleManager_ReleaseParticleIndex_default_instance_;
class CUserMsg_ParticleManager_CreateParticleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_CreateParticle> _instance;
} _CUserMsg_ParticleManager_CreateParticle_default_instance_;
class CUserMsg_ParticleManager_DestroyParticleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_DestroyParticle> _instance;
} _CUserMsg_ParticleManager_DestroyParticle_default_instance_;
class CUserMsg_ParticleManager_DestroyParticleInvolvingDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_DestroyParticleInvolving> _instance;
} _CUserMsg_ParticleManager_DestroyParticleInvolving_default_instance_;
class CUserMsg_ParticleManager_UpdateParticleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_UpdateParticle> _instance;
} _CUserMsg_ParticleManager_UpdateParticle_default_instance_;
class CUserMsg_ParticleManager_UpdateParticleFwdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_UpdateParticleFwd> _instance;
} _CUserMsg_ParticleManager_UpdateParticleFwd_default_instance_;
class CUserMsg_ParticleManager_UpdateParticleOrientDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_UpdateParticleOrient> _instance;
} _CUserMsg_ParticleManager_UpdateParticleOrient_default_instance_;
class CUserMsg_ParticleManager_UpdateParticleFallbackDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_UpdateParticleFallback> _instance;
} _CUserMsg_ParticleManager_UpdateParticleFallback_default_instance_;
class CUserMsg_ParticleManager_UpdateParticleOffsetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_UpdateParticleOffset> _instance;
} _CUserMsg_ParticleManager_UpdateParticleOffset_default_instance_;
class CUserMsg_ParticleManager_UpdateParticleEntDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_UpdateParticleEnt> _instance;
} _CUserMsg_ParticleManager_UpdateParticleEnt_default_instance_;
class CUserMsg_ParticleManager_UpdateParticleSetFrozenDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_UpdateParticleSetFrozen> _instance;
} _CUserMsg_ParticleManager_UpdateParticleSetFrozen_default_instance_;
class CUserMsg_ParticleManager_UpdateParticleShouldDrawDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_UpdateParticleShouldDraw> _instance;
} _CUserMsg_ParticleManager_UpdateParticleShouldDraw_default_instance_;
class CUserMsg_ParticleManager_ChangeControlPointAttachmentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_ChangeControlPointAttachment> _instance;
} _CUserMsg_ParticleManager_ChangeControlPointAttachment_default_instance_;
class CUserMsg_ParticleManager_UpdateEntityPositionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_UpdateEntityPosition> _instance;
} _CUserMsg_ParticleManager_UpdateEntityPosition_default_instance_;
class CUserMsg_ParticleManager_SetParticleFoWPropertiesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_SetParticleFoWProperties> _instance;
} _CUserMsg_ParticleManager_SetParticleFoWProperties_default_instance_;
class CUserMsg_ParticleManager_SetParticleShouldCheckFoWDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_SetParticleShouldCheckFoW> _instance;
} _CUserMsg_ParticleManager_SetParticleShouldCheckFoW_default_instance_;
class CUserMsg_ParticleManager_SetParticleTextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager_SetParticleText> _instance;
} _CUserMsg_ParticleManager_SetParticleText_default_instance_;
class CUserMsg_ParticleManagerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_ParticleManager> _instance;
} _CUserMsg_ParticleManager_default_instance_;
class CUserMsg_HudErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_HudError> _instance;
} _CUserMsg_HudError_default_instance_;
class CUserMsg_CustomGameEventDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMsg_CustomGameEvent> _instance;
} _CUserMsg_CustomGameEvent_default_instance_;
class CUserMessageHapticPulseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageHapticPulse> _instance;
} _CUserMessageHapticPulse_default_instance_;
class CUserMessageHapticPulsePreciseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageHapticPulsePrecise> _instance;
} _CUserMessageHapticPulsePrecise_default_instance_;
class CUserMessageAnimStateGraphStateDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CUserMessageAnimStateGraphState> _instance;
} _CUserMessageAnimStateGraphState_default_instance_;
}  // namespace dota
}  // namespace proto
static void InitDefaultsCUserMessageAchievementEvent_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageAchievementEvent_default_instance_;
    new (ptr) ::proto::dota::CUserMessageAchievementEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageAchievementEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageAchievementEvent_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageAchievementEvent_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageCloseCaption_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageCloseCaption_default_instance_;
    new (ptr) ::proto::dota::CUserMessageCloseCaption();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageCloseCaption::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageCloseCaption_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageCloseCaption_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageCloseCaptionDirect_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageCloseCaptionDirect_default_instance_;
    new (ptr) ::proto::dota::CUserMessageCloseCaptionDirect();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageCloseCaptionDirect::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageCloseCaptionDirect_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageCloseCaptionDirect_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageCloseCaptionPlaceholder_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageCloseCaptionPlaceholder_default_instance_;
    new (ptr) ::proto::dota::CUserMessageCloseCaptionPlaceholder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageCloseCaptionPlaceholder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageCloseCaptionPlaceholder_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageCloseCaptionPlaceholder_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageCurrentTimescale_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageCurrentTimescale_default_instance_;
    new (ptr) ::proto::dota::CUserMessageCurrentTimescale();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageCurrentTimescale::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageCurrentTimescale_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageCurrentTimescale_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageDesiredTimescale_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageDesiredTimescale_default_instance_;
    new (ptr) ::proto::dota::CUserMessageDesiredTimescale();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageDesiredTimescale::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageDesiredTimescale_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageDesiredTimescale_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageFade_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageFade_default_instance_;
    new (ptr) ::proto::dota::CUserMessageFade();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageFade::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageFade_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageFade_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageShake_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageShake_default_instance_;
    new (ptr) ::proto::dota::CUserMessageShake();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageShake::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageShake_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageShake_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageShakeDir_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageShakeDir_default_instance_;
    new (ptr) ::proto::dota::CUserMessageShakeDir();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageShakeDir::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CUserMessageShakeDir_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCUserMessageShakeDir_usermessages_2eproto}, {
      &scc_info_CUserMessageShake_usermessages_2eproto.base,
      &scc_info_CMsgVector_networkbasetypes_2eproto.base,}};

static void InitDefaultsCUserMessageScreenTilt_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageScreenTilt_default_instance_;
    new (ptr) ::proto::dota::CUserMessageScreenTilt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageScreenTilt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CUserMessageScreenTilt_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCUserMessageScreenTilt_usermessages_2eproto}, {
      &scc_info_CMsgVector_networkbasetypes_2eproto.base,}};

static void InitDefaultsCUserMessageSayText_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageSayText_default_instance_;
    new (ptr) ::proto::dota::CUserMessageSayText();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageSayText::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageSayText_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageSayText_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageSayText2_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageSayText2_default_instance_;
    new (ptr) ::proto::dota::CUserMessageSayText2();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageSayText2::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageSayText2_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageSayText2_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageHudMsg_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageHudMsg_default_instance_;
    new (ptr) ::proto::dota::CUserMessageHudMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageHudMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageHudMsg_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageHudMsg_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageHudText_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageHudText_default_instance_;
    new (ptr) ::proto::dota::CUserMessageHudText();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageHudText::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageHudText_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageHudText_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageTextMsg_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageTextMsg_default_instance_;
    new (ptr) ::proto::dota::CUserMessageTextMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageTextMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageTextMsg_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageTextMsg_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageGameTitle_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageGameTitle_default_instance_;
    new (ptr) ::proto::dota::CUserMessageGameTitle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageGameTitle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageGameTitle_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageGameTitle_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageResetHUD_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageResetHUD_default_instance_;
    new (ptr) ::proto::dota::CUserMessageResetHUD();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageResetHUD::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageResetHUD_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageResetHUD_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageSendAudio_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageSendAudio_default_instance_;
    new (ptr) ::proto::dota::CUserMessageSendAudio();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageSendAudio::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageSendAudio_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageSendAudio_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageAudioParameter_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageAudioParameter_default_instance_;
    new (ptr) ::proto::dota::CUserMessageAudioParameter();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageAudioParameter::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageAudioParameter_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageAudioParameter_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageVoiceMask_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageVoiceMask_default_instance_;
    new (ptr) ::proto::dota::CUserMessageVoiceMask();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageVoiceMask::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageVoiceMask_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageVoiceMask_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageRequestState_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageRequestState_default_instance_;
    new (ptr) ::proto::dota::CUserMessageRequestState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageRequestState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageRequestState_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageRequestState_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageHintText_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageHintText_default_instance_;
    new (ptr) ::proto::dota::CUserMessageHintText();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageHintText::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageHintText_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageHintText_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageKeyHintText_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageKeyHintText_default_instance_;
    new (ptr) ::proto::dota::CUserMessageKeyHintText();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageKeyHintText::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageKeyHintText_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageKeyHintText_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageVoiceSubtitle_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageVoiceSubtitle_default_instance_;
    new (ptr) ::proto::dota::CUserMessageVoiceSubtitle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageVoiceSubtitle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageVoiceSubtitle_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageVoiceSubtitle_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageVGUIMenu_Keys_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageVGUIMenu_Keys_default_instance_;
    new (ptr) ::proto::dota::CUserMessageVGUIMenu_Keys();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageVGUIMenu_Keys::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageVGUIMenu_Keys_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageVGUIMenu_Keys_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageVGUIMenu_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageVGUIMenu_default_instance_;
    new (ptr) ::proto::dota::CUserMessageVGUIMenu();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageVGUIMenu::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CUserMessageVGUIMenu_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCUserMessageVGUIMenu_usermessages_2eproto}, {
      &scc_info_CUserMessageVGUIMenu_Keys_usermessages_2eproto.base,}};

static void InitDefaultsCUserMessageRumble_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageRumble_default_instance_;
    new (ptr) ::proto::dota::CUserMessageRumble();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageRumble::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageRumble_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageRumble_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageTrain_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageTrain_default_instance_;
    new (ptr) ::proto::dota::CUserMessageTrain();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageTrain::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageTrain_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageTrain_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageSayTextChannel_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageSayTextChannel_default_instance_;
    new (ptr) ::proto::dota::CUserMessageSayTextChannel();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageSayTextChannel::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageSayTextChannel_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageSayTextChannel_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageColoredText_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageColoredText_default_instance_;
    new (ptr) ::proto::dota::CUserMessageColoredText();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageColoredText::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageColoredText_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageColoredText_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageItemPickup_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageItemPickup_default_instance_;
    new (ptr) ::proto::dota::CUserMessageItemPickup();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageItemPickup::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageItemPickup_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageItemPickup_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageAmmoDenied_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageAmmoDenied_default_instance_;
    new (ptr) ::proto::dota::CUserMessageAmmoDenied();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageAmmoDenied::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageAmmoDenied_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageAmmoDenied_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageCrosshairAngle_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageCrosshairAngle_default_instance_;
    new (ptr) ::proto::dota::CUserMessageCrosshairAngle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageCrosshairAngle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CUserMessageCrosshairAngle_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCUserMessageCrosshairAngle_usermessages_2eproto}, {
      &scc_info_CMsgQAngle_networkbasetypes_2eproto.base,}};

static void InitDefaultsCUserMessageShowMenu_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageShowMenu_default_instance_;
    new (ptr) ::proto::dota::CUserMessageShowMenu();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageShowMenu::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageShowMenu_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageShowMenu_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageCreditsMsg_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageCreditsMsg_default_instance_;
    new (ptr) ::proto::dota::CUserMessageCreditsMsg();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageCreditsMsg::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageCreditsMsg_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageCreditsMsg_usermessages_2eproto}, {}};

static void InitDefaultsCEntityMessagePlayJingle_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CEntityMessagePlayJingle_default_instance_;
    new (ptr) ::proto::dota::CEntityMessagePlayJingle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CEntityMessagePlayJingle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CEntityMessagePlayJingle_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCEntityMessagePlayJingle_usermessages_2eproto}, {}};

static void InitDefaultsCEntityMessageScreenOverlay_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CEntityMessageScreenOverlay_default_instance_;
    new (ptr) ::proto::dota::CEntityMessageScreenOverlay();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CEntityMessageScreenOverlay::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CEntityMessageScreenOverlay_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCEntityMessageScreenOverlay_usermessages_2eproto}, {}};

static void InitDefaultsCEntityMessageRemoveAllDecals_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CEntityMessageRemoveAllDecals_default_instance_;
    new (ptr) ::proto::dota::CEntityMessageRemoveAllDecals();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CEntityMessageRemoveAllDecals::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CEntityMessageRemoveAllDecals_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCEntityMessageRemoveAllDecals_usermessages_2eproto}, {}};

static void InitDefaultsCEntityMessagePropagateForce_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CEntityMessagePropagateForce_default_instance_;
    new (ptr) ::proto::dota::CEntityMessagePropagateForce();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CEntityMessagePropagateForce::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CEntityMessagePropagateForce_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCEntityMessagePropagateForce_usermessages_2eproto}, {
      &scc_info_CMsgVector_networkbasetypes_2eproto.base,}};

static void InitDefaultsCEntityMessageDoSpark_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CEntityMessageDoSpark_default_instance_;
    new (ptr) ::proto::dota::CEntityMessageDoSpark();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CEntityMessageDoSpark::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CEntityMessageDoSpark_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCEntityMessageDoSpark_usermessages_2eproto}, {
      &scc_info_CMsgVector_networkbasetypes_2eproto.base,}};

static void InitDefaultsCEntityMessageFixAngle_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CEntityMessageFixAngle_default_instance_;
    new (ptr) ::proto::dota::CEntityMessageFixAngle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CEntityMessageFixAngle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CEntityMessageFixAngle_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCEntityMessageFixAngle_usermessages_2eproto}, {
      &scc_info_CMsgQAngle_networkbasetypes_2eproto.base,}};

static void InitDefaultsCUserMessageCameraTransition_Transition_DataDriven_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageCameraTransition_Transition_DataDriven_default_instance_;
    new (ptr) ::proto::dota::CUserMessageCameraTransition_Transition_DataDriven();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageCameraTransition_Transition_DataDriven::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageCameraTransition_Transition_DataDriven_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageCameraTransition_Transition_DataDriven_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageCameraTransition_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageCameraTransition_default_instance_;
    new (ptr) ::proto::dota::CUserMessageCameraTransition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageCameraTransition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CUserMessageCameraTransition_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCUserMessageCameraTransition_usermessages_2eproto}, {
      &scc_info_CUserMessageCameraTransition_Transition_DataDriven_usermessages_2eproto.base,}};

static void InitDefaultsCUserMsg_ParticleManager_ReleaseParticleIndex_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMsg_ParticleManager_ReleaseParticleIndex_default_instance_;
    new (ptr) ::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMsg_ParticleManager_ReleaseParticleIndex_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMsg_ParticleManager_ReleaseParticleIndex_usermessages_2eproto}, {}};

static void InitDefaultsCUserMsg_ParticleManager_CreateParticle_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMsg_ParticleManager_CreateParticle_default_instance_;
    new (ptr) ::proto::dota::CUserMsg_ParticleManager_CreateParticle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMsg_ParticleManager_CreateParticle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMsg_ParticleManager_CreateParticle_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMsg_ParticleManager_CreateParticle_usermessages_2eproto}, {}};

static void InitDefaultsCUserMsg_ParticleManager_DestroyParticle_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMsg_ParticleManager_DestroyParticle_default_instance_;
    new (ptr) ::proto::dota::CUserMsg_ParticleManager_DestroyParticle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMsg_ParticleManager_DestroyParticle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMsg_ParticleManager_DestroyParticle_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMsg_ParticleManager_DestroyParticle_usermessages_2eproto}, {}};

static void InitDefaultsCUserMsg_ParticleManager_DestroyParticleInvolving_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMsg_ParticleManager_DestroyParticleInvolving_default_instance_;
    new (ptr) ::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMsg_ParticleManager_DestroyParticleInvolving_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMsg_ParticleManager_DestroyParticleInvolving_usermessages_2eproto}, {}};

static void InitDefaultsCUserMsg_ParticleManager_UpdateParticle_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMsg_ParticleManager_UpdateParticle_default_instance_;
    new (ptr) ::proto::dota::CUserMsg_ParticleManager_UpdateParticle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMsg_ParticleManager_UpdateParticle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CUserMsg_ParticleManager_UpdateParticle_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCUserMsg_ParticleManager_UpdateParticle_usermessages_2eproto}, {
      &scc_info_CMsgVector_networkbasetypes_2eproto.base,}};

static void InitDefaultsCUserMsg_ParticleManager_UpdateParticleFwd_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMsg_ParticleManager_UpdateParticleFwd_default_instance_;
    new (ptr) ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CUserMsg_ParticleManager_UpdateParticleFwd_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCUserMsg_ParticleManager_UpdateParticleFwd_usermessages_2eproto}, {
      &scc_info_CMsgVector_networkbasetypes_2eproto.base,}};

static void InitDefaultsCUserMsg_ParticleManager_UpdateParticleOrient_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMsg_ParticleManager_UpdateParticleOrient_default_instance_;
    new (ptr) ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CUserMsg_ParticleManager_UpdateParticleOrient_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCUserMsg_ParticleManager_UpdateParticleOrient_usermessages_2eproto}, {
      &scc_info_CMsgVector_networkbasetypes_2eproto.base,}};

static void InitDefaultsCUserMsg_ParticleManager_UpdateParticleFallback_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMsg_ParticleManager_UpdateParticleFallback_default_instance_;
    new (ptr) ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CUserMsg_ParticleManager_UpdateParticleFallback_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCUserMsg_ParticleManager_UpdateParticleFallback_usermessages_2eproto}, {
      &scc_info_CMsgVector_networkbasetypes_2eproto.base,}};

static void InitDefaultsCUserMsg_ParticleManager_UpdateParticleOffset_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMsg_ParticleManager_UpdateParticleOffset_default_instance_;
    new (ptr) ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CUserMsg_ParticleManager_UpdateParticleOffset_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCUserMsg_ParticleManager_UpdateParticleOffset_usermessages_2eproto}, {
      &scc_info_CMsgVector_networkbasetypes_2eproto.base,
      &scc_info_CMsgQAngle_networkbasetypes_2eproto.base,}};

static void InitDefaultsCUserMsg_ParticleManager_UpdateParticleEnt_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMsg_ParticleManager_UpdateParticleEnt_default_instance_;
    new (ptr) ::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CUserMsg_ParticleManager_UpdateParticleEnt_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCUserMsg_ParticleManager_UpdateParticleEnt_usermessages_2eproto}, {
      &scc_info_CMsgVector_networkbasetypes_2eproto.base,}};

static void InitDefaultsCUserMsg_ParticleManager_UpdateParticleSetFrozen_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMsg_ParticleManager_UpdateParticleSetFrozen_default_instance_;
    new (ptr) ::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMsg_ParticleManager_UpdateParticleSetFrozen_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMsg_ParticleManager_UpdateParticleSetFrozen_usermessages_2eproto}, {}};

static void InitDefaultsCUserMsg_ParticleManager_UpdateParticleShouldDraw_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMsg_ParticleManager_UpdateParticleShouldDraw_default_instance_;
    new (ptr) ::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMsg_ParticleManager_UpdateParticleShouldDraw_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMsg_ParticleManager_UpdateParticleShouldDraw_usermessages_2eproto}, {}};

static void InitDefaultsCUserMsg_ParticleManager_ChangeControlPointAttachment_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMsg_ParticleManager_ChangeControlPointAttachment_default_instance_;
    new (ptr) ::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMsg_ParticleManager_ChangeControlPointAttachment_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMsg_ParticleManager_ChangeControlPointAttachment_usermessages_2eproto}, {}};

static void InitDefaultsCUserMsg_ParticleManager_UpdateEntityPosition_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMsg_ParticleManager_UpdateEntityPosition_default_instance_;
    new (ptr) ::proto::dota::CUserMsg_ParticleManager_UpdateEntityPosition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMsg_ParticleManager_UpdateEntityPosition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CUserMsg_ParticleManager_UpdateEntityPosition_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCUserMsg_ParticleManager_UpdateEntityPosition_usermessages_2eproto}, {
      &scc_info_CMsgVector_networkbasetypes_2eproto.base,}};

static void InitDefaultsCUserMsg_ParticleManager_SetParticleFoWProperties_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMsg_ParticleManager_SetParticleFoWProperties_default_instance_;
    new (ptr) ::proto::dota::CUserMsg_ParticleManager_SetParticleFoWProperties();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMsg_ParticleManager_SetParticleFoWProperties::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMsg_ParticleManager_SetParticleFoWProperties_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMsg_ParticleManager_SetParticleFoWProperties_usermessages_2eproto}, {}};

static void InitDefaultsCUserMsg_ParticleManager_SetParticleShouldCheckFoW_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMsg_ParticleManager_SetParticleShouldCheckFoW_default_instance_;
    new (ptr) ::proto::dota::CUserMsg_ParticleManager_SetParticleShouldCheckFoW();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMsg_ParticleManager_SetParticleShouldCheckFoW::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMsg_ParticleManager_SetParticleShouldCheckFoW_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMsg_ParticleManager_SetParticleShouldCheckFoW_usermessages_2eproto}, {}};

static void InitDefaultsCUserMsg_ParticleManager_SetParticleText_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMsg_ParticleManager_SetParticleText_default_instance_;
    new (ptr) ::proto::dota::CUserMsg_ParticleManager_SetParticleText();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMsg_ParticleManager_SetParticleText::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMsg_ParticleManager_SetParticleText_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMsg_ParticleManager_SetParticleText_usermessages_2eproto}, {}};

static void InitDefaultsCUserMsg_ParticleManager_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMsg_ParticleManager_default_instance_;
    new (ptr) ::proto::dota::CUserMsg_ParticleManager();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMsg_ParticleManager::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<17> scc_info_CUserMsg_ParticleManager_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 17, InitDefaultsCUserMsg_ParticleManager_usermessages_2eproto}, {
      &scc_info_CUserMsg_ParticleManager_ReleaseParticleIndex_usermessages_2eproto.base,
      &scc_info_CUserMsg_ParticleManager_CreateParticle_usermessages_2eproto.base,
      &scc_info_CUserMsg_ParticleManager_DestroyParticle_usermessages_2eproto.base,
      &scc_info_CUserMsg_ParticleManager_DestroyParticleInvolving_usermessages_2eproto.base,
      &scc_info_CUserMsg_ParticleManager_UpdateParticle_usermessages_2eproto.base,
      &scc_info_CUserMsg_ParticleManager_UpdateParticleFwd_usermessages_2eproto.base,
      &scc_info_CUserMsg_ParticleManager_UpdateParticleOrient_usermessages_2eproto.base,
      &scc_info_CUserMsg_ParticleManager_UpdateParticleFallback_usermessages_2eproto.base,
      &scc_info_CUserMsg_ParticleManager_UpdateParticleOffset_usermessages_2eproto.base,
      &scc_info_CUserMsg_ParticleManager_UpdateParticleEnt_usermessages_2eproto.base,
      &scc_info_CUserMsg_ParticleManager_UpdateParticleShouldDraw_usermessages_2eproto.base,
      &scc_info_CUserMsg_ParticleManager_UpdateParticleSetFrozen_usermessages_2eproto.base,
      &scc_info_CUserMsg_ParticleManager_ChangeControlPointAttachment_usermessages_2eproto.base,
      &scc_info_CUserMsg_ParticleManager_UpdateEntityPosition_usermessages_2eproto.base,
      &scc_info_CUserMsg_ParticleManager_SetParticleFoWProperties_usermessages_2eproto.base,
      &scc_info_CUserMsg_ParticleManager_SetParticleText_usermessages_2eproto.base,
      &scc_info_CUserMsg_ParticleManager_SetParticleShouldCheckFoW_usermessages_2eproto.base,}};

static void InitDefaultsCUserMsg_HudError_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMsg_HudError_default_instance_;
    new (ptr) ::proto::dota::CUserMsg_HudError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMsg_HudError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMsg_HudError_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMsg_HudError_usermessages_2eproto}, {}};

static void InitDefaultsCUserMsg_CustomGameEvent_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMsg_CustomGameEvent_default_instance_;
    new (ptr) ::proto::dota::CUserMsg_CustomGameEvent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMsg_CustomGameEvent::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMsg_CustomGameEvent_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMsg_CustomGameEvent_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageHapticPulse_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageHapticPulse_default_instance_;
    new (ptr) ::proto::dota::CUserMessageHapticPulse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageHapticPulse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageHapticPulse_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageHapticPulse_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageHapticPulsePrecise_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageHapticPulsePrecise_default_instance_;
    new (ptr) ::proto::dota::CUserMessageHapticPulsePrecise();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageHapticPulsePrecise::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageHapticPulsePrecise_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageHapticPulsePrecise_usermessages_2eproto}, {}};

static void InitDefaultsCUserMessageAnimStateGraphState_usermessages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::proto::dota::_CUserMessageAnimStateGraphState_default_instance_;
    new (ptr) ::proto::dota::CUserMessageAnimStateGraphState();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::proto::dota::CUserMessageAnimStateGraphState::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CUserMessageAnimStateGraphState_usermessages_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCUserMessageAnimStateGraphState_usermessages_2eproto}, {}};

void InitDefaults_usermessages_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageAchievementEvent_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageCloseCaption_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageCloseCaptionDirect_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageCloseCaptionPlaceholder_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageCurrentTimescale_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageDesiredTimescale_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageFade_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageShake_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageShakeDir_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageScreenTilt_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageSayText_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageSayText2_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageHudMsg_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageHudText_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageTextMsg_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageGameTitle_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageResetHUD_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageSendAudio_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageAudioParameter_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageVoiceMask_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageRequestState_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageHintText_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageKeyHintText_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageVoiceSubtitle_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageVGUIMenu_Keys_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageVGUIMenu_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageRumble_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageTrain_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageSayTextChannel_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageColoredText_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageItemPickup_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageAmmoDenied_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageCrosshairAngle_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageShowMenu_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageCreditsMsg_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CEntityMessagePlayJingle_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CEntityMessageScreenOverlay_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CEntityMessageRemoveAllDecals_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CEntityMessagePropagateForce_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CEntityMessageDoSpark_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CEntityMessageFixAngle_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageCameraTransition_Transition_DataDriven_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageCameraTransition_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMsg_ParticleManager_ReleaseParticleIndex_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMsg_ParticleManager_CreateParticle_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMsg_ParticleManager_DestroyParticle_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMsg_ParticleManager_DestroyParticleInvolving_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMsg_ParticleManager_UpdateParticle_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMsg_ParticleManager_UpdateParticleFwd_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMsg_ParticleManager_UpdateParticleOrient_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMsg_ParticleManager_UpdateParticleFallback_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMsg_ParticleManager_UpdateParticleOffset_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMsg_ParticleManager_UpdateParticleEnt_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMsg_ParticleManager_UpdateParticleSetFrozen_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMsg_ParticleManager_UpdateParticleShouldDraw_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMsg_ParticleManager_ChangeControlPointAttachment_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMsg_ParticleManager_UpdateEntityPosition_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMsg_ParticleManager_SetParticleFoWProperties_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMsg_ParticleManager_SetParticleShouldCheckFoW_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMsg_ParticleManager_SetParticleText_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMsg_ParticleManager_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMsg_HudError_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMsg_CustomGameEvent_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageHapticPulse_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageHapticPulsePrecise_usermessages_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CUserMessageAnimStateGraphState_usermessages_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_usermessages_2eproto[66];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_usermessages_2eproto[5];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_usermessages_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_usermessages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageAchievementEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageAchievementEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageAchievementEvent, achievement_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCloseCaption, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCloseCaption, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCloseCaption, hash_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCloseCaption, duration_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCloseCaption, from_player_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCloseCaption, ent_index_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCloseCaptionDirect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCloseCaptionDirect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCloseCaptionDirect, hash_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCloseCaptionDirect, duration_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCloseCaptionDirect, from_player_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCloseCaptionDirect, ent_index_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCloseCaptionPlaceholder, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCloseCaptionPlaceholder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCloseCaptionPlaceholder, string_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCloseCaptionPlaceholder, duration_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCloseCaptionPlaceholder, from_player_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCloseCaptionPlaceholder, ent_index_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCurrentTimescale, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCurrentTimescale, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCurrentTimescale, current_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageDesiredTimescale, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageDesiredTimescale, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageDesiredTimescale, desired_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageDesiredTimescale, acceleration_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageDesiredTimescale, minblendrate_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageDesiredTimescale, blenddeltamultiplier_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageFade, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageFade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageFade, duration_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageFade, hold_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageFade, flags_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageFade, color_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageShake, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageShake, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageShake, command_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageShake, amplitude_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageShake, frequency_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageShake, duration_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageShakeDir, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageShakeDir, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageShakeDir, shake_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageShakeDir, direction_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageScreenTilt, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageScreenTilt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageScreenTilt, command_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageScreenTilt, ease_in_out_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageScreenTilt, angle_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageScreenTilt, duration_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageScreenTilt, time_),
  1,
  2,
  0,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageSayText, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageSayText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageSayText, playerindex_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageSayText, text_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageSayText, chat_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageSayText2, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageSayText2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageSayText2, entityindex_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageSayText2, chat_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageSayText2, messagename_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageSayText2, param1_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageSayText2, param2_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageSayText2, param3_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageSayText2, param4_),
  5,
  6,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageHudMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageHudMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageHudMsg, channel_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageHudMsg, x_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageHudMsg, y_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageHudMsg, color1_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageHudMsg, color2_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageHudMsg, effect_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageHudMsg, fade_in_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageHudMsg, fade_out_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageHudMsg, hold_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageHudMsg, fx_time_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageHudMsg, message_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageHudText, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageHudText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageHudText, message_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageTextMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageTextMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageTextMsg, dest_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageTextMsg, param_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageGameTitle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageGameTitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageResetHUD, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageResetHUD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageSendAudio, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageSendAudio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageSendAudio, soundname_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageSendAudio, stop_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageAudioParameter, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageAudioParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageAudioParameter, parameter_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageAudioParameter, name_hash_code_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageAudioParameter, value_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageAudioParameter, int_value_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageVoiceMask, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageVoiceMask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageVoiceMask, gamerules_masks_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageVoiceMask, ban_masks_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageVoiceMask, mod_enable_),
  ~0u,
  ~0u,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageRequestState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageRequestState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageHintText, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageHintText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageHintText, message_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageKeyHintText, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageKeyHintText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageKeyHintText, messages_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageVoiceSubtitle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageVoiceSubtitle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageVoiceSubtitle, player_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageVoiceSubtitle, menu_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageVoiceSubtitle, item_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageVGUIMenu_Keys, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageVGUIMenu_Keys, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageVGUIMenu_Keys, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageVGUIMenu_Keys, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageVGUIMenu, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageVGUIMenu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageVGUIMenu, name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageVGUIMenu, show_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageVGUIMenu, keys_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageRumble, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageRumble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageRumble, index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageRumble, data_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageRumble, flags_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageTrain, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageTrain, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageTrain, position_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageSayTextChannel, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageSayTextChannel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageSayTextChannel, player_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageSayTextChannel, channel_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageSayTextChannel, text_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageColoredText, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageColoredText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageColoredText, color_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageColoredText, text_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageColoredText, reset_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageColoredText, context_player_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageColoredText, context_value_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageColoredText, context_team_id_),
  1,
  0,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageItemPickup, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageItemPickup, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageItemPickup, itemname_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageAmmoDenied, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageAmmoDenied, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageAmmoDenied, ammo_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCrosshairAngle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCrosshairAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCrosshairAngle, angcrosshair_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageShowMenu, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageShowMenu, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageShowMenu, validslots_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageShowMenu, displaytime_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageShowMenu, needmore_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageShowMenu, menustring_),
  1,
  2,
  3,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCreditsMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCreditsMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCreditsMsg, rolltype_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCreditsMsg, logo_length_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CEntityMessagePlayJingle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CEntityMessagePlayJingle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CEntityMessageScreenOverlay, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CEntityMessageScreenOverlay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CEntityMessageScreenOverlay, start_effect_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CEntityMessageRemoveAllDecals, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CEntityMessageRemoveAllDecals, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CEntityMessageRemoveAllDecals, remove_decals_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CEntityMessagePropagateForce, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CEntityMessagePropagateForce, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CEntityMessagePropagateForce, impulse_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CEntityMessageDoSpark, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CEntityMessageDoSpark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CEntityMessageDoSpark, origin_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CEntityMessageDoSpark, entityindex_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CEntityMessageDoSpark, radius_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CEntityMessageDoSpark, color_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CEntityMessageDoSpark, beams_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CEntityMessageDoSpark, thick_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CEntityMessageDoSpark, duration_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CEntityMessageFixAngle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CEntityMessageFixAngle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CEntityMessageFixAngle, relative_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CEntityMessageFixAngle, angle_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCameraTransition_Transition_DataDriven, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCameraTransition_Transition_DataDriven, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCameraTransition_Transition_DataDriven, filename_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCameraTransition_Transition_DataDriven, attach_ent_index_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCameraTransition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCameraTransition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCameraTransition, camera_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCameraTransition, duration_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageCameraTransition, params_data_driven_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_CreateParticle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_CreateParticle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_CreateParticle, particle_name_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_CreateParticle, attach_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_CreateParticle, entity_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_CreateParticle, entity_handle_for_modifiers_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_DestroyParticle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_DestroyParticle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_DestroyParticle, destroy_immediately_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving, destroy_immediately_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving, entity_handle_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticle, control_point_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticle, position_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd, control_point_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd, forward_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient, control_point_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient, forward_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient, right_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient, up_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient, left_),
  4,
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback, control_point_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback, position_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset, control_point_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset, origin_offset_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset, angle_offset_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt, control_point_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt, entity_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt, attach_type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt, attachment_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt, fallback_position_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt, include_wearables_),
  1,
  2,
  3,
  4,
  0,
  5,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen, set_frozen_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw, should_draw_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment, attachment_old_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment, attachment_new_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment, entity_handle_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateEntityPosition, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateEntityPosition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateEntityPosition, entity_handle_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_UpdateEntityPosition, position_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_SetParticleFoWProperties, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_SetParticleFoWProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_SetParticleFoWProperties, fow_control_point_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_SetParticleFoWProperties, fow_control_point2_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_SetParticleFoWProperties, fow_radius_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_SetParticleShouldCheckFoW, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_SetParticleShouldCheckFoW, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_SetParticleShouldCheckFoW, check_fow_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_SetParticleText, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_SetParticleText, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager_SetParticleText, text_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager, type_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager, index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager, release_particle_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager, create_particle_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager, destroy_particle_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager, destroy_particle_involving_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager, update_particle_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager, update_particle_fwd_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager, update_particle_orient_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager, update_particle_fallback_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager, update_particle_offset_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager, update_particle_ent_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager, update_particle_should_draw_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager, update_particle_set_frozen_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager, change_control_point_attachment_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager, update_entity_position_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager, set_particle_fow_properties_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager, set_particle_text_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_ParticleManager, set_particle_should_check_fow_),
  17,
  18,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_HudError, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_HudError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_HudError, order_id_),
  0,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_CustomGameEvent, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_CustomGameEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_CustomGameEvent, event_name_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMsg_CustomGameEvent, data_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageHapticPulse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageHapticPulse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageHapticPulse, hand_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageHapticPulse, pulse_type_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageHapticPulsePrecise, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageHapticPulsePrecise, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageHapticPulsePrecise, hand_id_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageHapticPulsePrecise, pulse_duration_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageAnimStateGraphState, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageAnimStateGraphState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageAnimStateGraphState, entity_index_),
  PROTOBUF_FIELD_OFFSET(::proto::dota::CUserMessageAnimStateGraphState, data_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::proto::dota::CUserMessageAchievementEvent)},
  { 7, 16, sizeof(::proto::dota::CUserMessageCloseCaption)},
  { 20, 29, sizeof(::proto::dota::CUserMessageCloseCaptionDirect)},
  { 33, 42, sizeof(::proto::dota::CUserMessageCloseCaptionPlaceholder)},
  { 46, 52, sizeof(::proto::dota::CUserMessageCurrentTimescale)},
  { 53, 62, sizeof(::proto::dota::CUserMessageDesiredTimescale)},
  { 66, 75, sizeof(::proto::dota::CUserMessageFade)},
  { 79, 88, sizeof(::proto::dota::CUserMessageShake)},
  { 92, 99, sizeof(::proto::dota::CUserMessageShakeDir)},
  { 101, 111, sizeof(::proto::dota::CUserMessageScreenTilt)},
  { 116, 124, sizeof(::proto::dota::CUserMessageSayText)},
  { 127, 139, sizeof(::proto::dota::CUserMessageSayText2)},
  { 146, 162, sizeof(::proto::dota::CUserMessageHudMsg)},
  { 173, 179, sizeof(::proto::dota::CUserMessageHudText)},
  { 180, 187, sizeof(::proto::dota::CUserMessageTextMsg)},
  { 189, 194, sizeof(::proto::dota::CUserMessageGameTitle)},
  { 194, 199, sizeof(::proto::dota::CUserMessageResetHUD)},
  { 199, 206, sizeof(::proto::dota::CUserMessageSendAudio)},
  { 208, 217, sizeof(::proto::dota::CUserMessageAudioParameter)},
  { 221, 229, sizeof(::proto::dota::CUserMessageVoiceMask)},
  { 232, 237, sizeof(::proto::dota::CUserMessageRequestState)},
  { 237, 243, sizeof(::proto::dota::CUserMessageHintText)},
  { 244, 250, sizeof(::proto::dota::CUserMessageKeyHintText)},
  { 251, 259, sizeof(::proto::dota::CUserMessageVoiceSubtitle)},
  { 262, 269, sizeof(::proto::dota::CUserMessageVGUIMenu_Keys)},
  { 271, 279, sizeof(::proto::dota::CUserMessageVGUIMenu)},
  { 282, 290, sizeof(::proto::dota::CUserMessageRumble)},
  { 293, 299, sizeof(::proto::dota::CUserMessageTrain)},
  { 300, 308, sizeof(::proto::dota::CUserMessageSayTextChannel)},
  { 311, 322, sizeof(::proto::dota::CUserMessageColoredText)},
  { 328, 334, sizeof(::proto::dota::CUserMessageItemPickup)},
  { 335, 341, sizeof(::proto::dota::CUserMessageAmmoDenied)},
  { 342, 348, sizeof(::proto::dota::CUserMessageCrosshairAngle)},
  { 349, 358, sizeof(::proto::dota::CUserMessageShowMenu)},
  { 362, 369, sizeof(::proto::dota::CUserMessageCreditsMsg)},
  { 371, 376, sizeof(::proto::dota::CEntityMessagePlayJingle)},
  { 376, 382, sizeof(::proto::dota::CEntityMessageScreenOverlay)},
  { 383, 389, sizeof(::proto::dota::CEntityMessageRemoveAllDecals)},
  { 390, 396, sizeof(::proto::dota::CEntityMessagePropagateForce)},
  { 397, 409, sizeof(::proto::dota::CEntityMessageDoSpark)},
  { 416, 423, sizeof(::proto::dota::CEntityMessageFixAngle)},
  { 425, 432, sizeof(::proto::dota::CUserMessageCameraTransition_Transition_DataDriven)},
  { 434, 442, sizeof(::proto::dota::CUserMessageCameraTransition)},
  { 445, 450, sizeof(::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex)},
  { 450, 459, sizeof(::proto::dota::CUserMsg_ParticleManager_CreateParticle)},
  { 463, 469, sizeof(::proto::dota::CUserMsg_ParticleManager_DestroyParticle)},
  { 470, 477, sizeof(::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving)},
  { 479, 486, sizeof(::proto::dota::CUserMsg_ParticleManager_UpdateParticle)},
  { 488, 495, sizeof(::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd)},
  { 497, 507, sizeof(::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient)},
  { 512, 519, sizeof(::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback)},
  { 521, 529, sizeof(::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset)},
  { 532, 543, sizeof(::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt)},
  { 549, 555, sizeof(::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen)},
  { 556, 562, sizeof(::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw)},
  { 563, 571, sizeof(::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment)},
  { 574, 581, sizeof(::proto::dota::CUserMsg_ParticleManager_UpdateEntityPosition)},
  { 583, 591, sizeof(::proto::dota::CUserMsg_ParticleManager_SetParticleFoWProperties)},
  { 594, 600, sizeof(::proto::dota::CUserMsg_ParticleManager_SetParticleShouldCheckFoW)},
  { 601, 607, sizeof(::proto::dota::CUserMsg_ParticleManager_SetParticleText)},
  { 608, 632, sizeof(::proto::dota::CUserMsg_ParticleManager)},
  { 651, 657, sizeof(::proto::dota::CUserMsg_HudError)},
  { 658, 665, sizeof(::proto::dota::CUserMsg_CustomGameEvent)},
  { 667, 674, sizeof(::proto::dota::CUserMessageHapticPulse)},
  { 676, 683, sizeof(::proto::dota::CUserMessageHapticPulsePrecise)},
  { 685, 692, sizeof(::proto::dota::CUserMessageAnimStateGraphState)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageAchievementEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageCloseCaption_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageCloseCaptionDirect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageCloseCaptionPlaceholder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageCurrentTimescale_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageDesiredTimescale_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageFade_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageShake_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageShakeDir_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageScreenTilt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageSayText_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageSayText2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageHudMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageHudText_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageTextMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageGameTitle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageResetHUD_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageSendAudio_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageAudioParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageVoiceMask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageRequestState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageHintText_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageKeyHintText_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageVoiceSubtitle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageVGUIMenu_Keys_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageVGUIMenu_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageRumble_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageTrain_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageSayTextChannel_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageColoredText_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageItemPickup_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageAmmoDenied_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageCrosshairAngle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageShowMenu_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageCreditsMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CEntityMessagePlayJingle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CEntityMessageScreenOverlay_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CEntityMessageRemoveAllDecals_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CEntityMessagePropagateForce_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CEntityMessageDoSpark_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CEntityMessageFixAngle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageCameraTransition_Transition_DataDriven_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageCameraTransition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMsg_ParticleManager_ReleaseParticleIndex_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMsg_ParticleManager_CreateParticle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMsg_ParticleManager_DestroyParticle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMsg_ParticleManager_DestroyParticleInvolving_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMsg_ParticleManager_UpdateParticle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMsg_ParticleManager_UpdateParticleFwd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMsg_ParticleManager_UpdateParticleOrient_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMsg_ParticleManager_UpdateParticleFallback_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMsg_ParticleManager_UpdateParticleOffset_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMsg_ParticleManager_UpdateParticleEnt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMsg_ParticleManager_UpdateParticleSetFrozen_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMsg_ParticleManager_UpdateParticleShouldDraw_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMsg_ParticleManager_ChangeControlPointAttachment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMsg_ParticleManager_UpdateEntityPosition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMsg_ParticleManager_SetParticleFoWProperties_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMsg_ParticleManager_SetParticleShouldCheckFoW_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMsg_ParticleManager_SetParticleText_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMsg_ParticleManager_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMsg_HudError_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMsg_CustomGameEvent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageHapticPulse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageHapticPulsePrecise_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::proto::dota::_CUserMessageAnimStateGraphState_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_usermessages_2eproto = {
  {}, AddDescriptors_usermessages_2eproto, "usermessages.proto", schemas,
  file_default_instances, TableStruct_usermessages_2eproto::offsets,
  file_level_metadata_usermessages_2eproto, 66, file_level_enum_descriptors_usermessages_2eproto, file_level_service_descriptors_usermessages_2eproto,
};

const char descriptor_table_protodef_usermessages_2eproto[] =
  "\n\022usermessages.proto\022\nproto.dota\032\026networ"
  "kbasetypes.proto\"3\n\034CUserMessageAchievem"
  "entEvent\022\023\n\013achievement\030\001 \001(\r\"b\n\030CUserMe"
  "ssageCloseCaption\022\014\n\004hash\030\001 \001(\007\022\020\n\010durat"
  "ion\030\002 \001(\002\022\023\n\013from_player\030\003 \001(\010\022\021\n\tent_in"
  "dex\030\004 \001(\005\"h\n\036CUserMessageCloseCaptionDir"
  "ect\022\014\n\004hash\030\001 \001(\007\022\020\n\010duration\030\002 \001(\002\022\023\n\013f"
  "rom_player\030\003 \001(\010\022\021\n\tent_index\030\004 \001(\005\"o\n#C"
  "UserMessageCloseCaptionPlaceholder\022\016\n\006st"
  "ring\030\001 \001(\t\022\020\n\010duration\030\002 \001(\002\022\023\n\013from_pla"
  "yer\030\003 \001(\010\022\021\n\tent_index\030\004 \001(\005\"/\n\034CUserMes"
  "sageCurrentTimescale\022\017\n\007current\030\001 \001(\002\"y\n"
  "\034CUserMessageDesiredTimescale\022\017\n\007desired"
  "\030\001 \001(\002\022\024\n\014acceleration\030\002 \001(\002\022\024\n\014minblend"
  "rate\030\003 \001(\002\022\034\n\024blenddeltamultiplier\030\004 \001(\002"
  "\"U\n\020CUserMessageFade\022\020\n\010duration\030\001 \001(\r\022\021"
  "\n\thold_time\030\002 \001(\r\022\r\n\005flags\030\003 \001(\r\022\r\n\005colo"
  "r\030\004 \001(\007\"\\\n\021CUserMessageShake\022\017\n\007command\030"
  "\001 \001(\r\022\021\n\tamplitude\030\002 \001(\002\022\021\n\tfrequency\030\003 "
  "\001(\002\022\020\n\010duration\030\004 \001(\002\"o\n\024CUserMessageSha"
  "keDir\022,\n\005shake\030\001 \001(\0132\035.proto.dota.CUserM"
  "essageShake\022)\n\tdirection\030\002 \001(\0132\026.proto.d"
  "ota.CMsgVector\"\205\001\n\026CUserMessageScreenTil"
  "t\022\017\n\007command\030\001 \001(\r\022\023\n\013ease_in_out\030\002 \001(\010\022"
  "%\n\005angle\030\003 \001(\0132\026.proto.dota.CMsgVector\022\020"
  "\n\010duration\030\004 \001(\002\022\014\n\004time\030\005 \001(\002\"F\n\023CUserM"
  "essageSayText\022\023\n\013playerindex\030\001 \001(\r\022\014\n\004te"
  "xt\030\002 \001(\t\022\014\n\004chat\030\003 \001(\010\"\216\001\n\024CUserMessageS"
  "ayText2\022\023\n\013entityindex\030\001 \001(\r\022\014\n\004chat\030\002 \001"
  "(\010\022\023\n\013messagename\030\003 \001(\t\022\016\n\006param1\030\004 \001(\t\022"
  "\016\n\006param2\030\005 \001(\t\022\016\n\006param3\030\006 \001(\t\022\016\n\006param"
  "4\030\007 \001(\t\"\315\001\n\022CUserMessageHudMsg\022\017\n\007channe"
  "l\030\001 \001(\r\022\t\n\001x\030\002 \001(\002\022\t\n\001y\030\003 \001(\002\022\016\n\006color1\030"
  "\004 \001(\007\022\016\n\006color2\030\005 \001(\007\022\016\n\006effect\030\006 \001(\r\022\024\n"
  "\014fade_in_time\030\007 \001(\002\022\025\n\rfade_out_time\030\010 \001"
  "(\002\022\021\n\thold_time\030\t \001(\002\022\017\n\007fx_time\030\n \001(\002\022\017"
  "\n\007message\030\013 \001(\t\"&\n\023CUserMessageHudText\022\017"
  "\n\007message\030\001 \001(\t\"2\n\023CUserMessageTextMsg\022\014"
  "\n\004dest\030\001 \001(\r\022\r\n\005param\030\002 \003(\t\"\027\n\025CUserMess"
  "ageGameTitle\"\026\n\024CUserMessageResetHUD\"8\n\025"
  "CUserMessageSendAudio\022\021\n\tsoundname\030\001 \001(\t"
  "\022\014\n\004stop\030\002 \001(\010\"n\n\032CUserMessageAudioParam"
  "eter\022\026\n\016parameter_type\030\001 \001(\r\022\026\n\016name_has"
  "h_code\030\002 \001(\r\022\r\n\005value\030\003 \001(\002\022\021\n\tint_value"
  "\030\004 \001(\r\"W\n\025CUserMessageVoiceMask\022\027\n\017gamer"
  "ules_masks\030\001 \003(\r\022\021\n\tban_masks\030\002 \003(\r\022\022\n\nm"
  "od_enable\030\003 \001(\010\"\032\n\030CUserMessageRequestSt"
  "ate\"\'\n\024CUserMessageHintText\022\017\n\007message\030\001"
  " \001(\t\"+\n\027CUserMessageKeyHintText\022\020\n\010messa"
  "ges\030\001 \003(\t\"G\n\031CUserMessageVoiceSubtitle\022\016"
  "\n\006player\030\001 \001(\005\022\014\n\004menu\030\002 \001(\005\022\014\n\004item\030\003 \001"
  "(\005\"\214\001\n\024CUserMessageVGUIMenu\022\014\n\004name\030\001 \001("
  "\t\022\014\n\004show\030\002 \001(\010\0223\n\004keys\030\003 \003(\0132%.proto.do"
  "ta.CUserMessageVGUIMenu.Keys\032#\n\004Keys\022\014\n\004"
  "name\030\001 \001(\t\022\r\n\005value\030\002 \001(\t\"@\n\022CUserMessag"
  "eRumble\022\r\n\005index\030\001 \001(\005\022\014\n\004data\030\002 \001(\005\022\r\n\005"
  "flags\030\003 \001(\005\"%\n\021CUserMessageTrain\022\020\n\010posi"
  "tion\030\001 \001(\r\"K\n\032CUserMessageSayTextChannel"
  "\022\016\n\006player\030\001 \001(\005\022\017\n\007channel\030\002 \001(\005\022\014\n\004tex"
  "t\030\003 \001(\t\"\220\001\n\027CUserMessageColoredText\022\r\n\005c"
  "olor\030\001 \001(\r\022\014\n\004text\030\002 \001(\t\022\r\n\005reset\030\003 \001(\010\022"
  "\031\n\021context_player_id\030\004 \001(\005\022\025\n\rcontext_va"
  "lue\030\005 \001(\005\022\027\n\017context_team_id\030\006 \001(\005\"*\n\026CU"
  "serMessageItemPickup\022\020\n\010itemname\030\001 \001(\t\")"
  "\n\026CUserMessageAmmoDenied\022\017\n\007ammo_id\030\001 \001("
  "\r\"J\n\032CUserMessageCrosshairAngle\022,\n\014angcr"
  "osshair\030\001 \001(\0132\026.proto.dota.CMsgQAngle\"e\n"
  "\024CUserMessageShowMenu\022\022\n\nvalidslots\030\001 \001("
  "\r\022\023\n\013displaytime\030\002 \001(\r\022\020\n\010needmore\030\003 \001(\010"
  "\022\022\n\nmenustring\030\004 \001(\t\"a\n\026CUserMessageCred"
  "itsMsg\0222\n\010rolltype\030\001 \001(\0162\025.proto.dota.eR"
  "ollType:\tROLL_NONE\022\023\n\013logo_length\030\002 \001(\002\""
  "\032\n\030CEntityMessagePlayJingle\"3\n\033CEntityMe"
  "ssageScreenOverlay\022\024\n\014start_effect\030\001 \001(\010"
  "\"6\n\035CEntityMessageRemoveAllDecals\022\025\n\rrem"
  "ove_decals\030\001 \001(\010\"G\n\034CEntityMessagePropag"
  "ateForce\022\'\n\007impulse\030\001 \001(\0132\026.proto.dota.C"
  "MsgVector\"\243\001\n\025CEntityMessageDoSpark\022&\n\006o"
  "rigin\030\001 \001(\0132\026.proto.dota.CMsgVector\022\023\n\013e"
  "ntityindex\030\002 \001(\r\022\016\n\006radius\030\003 \001(\002\022\r\n\005colo"
  "r\030\004 \001(\007\022\r\n\005beams\030\005 \001(\r\022\r\n\005thick\030\006 \001(\002\022\020\n"
  "\010duration\030\007 \001(\002\"Q\n\026CEntityMessageFixAngl"
  "e\022\020\n\010relative\030\001 \001(\010\022%\n\005angle\030\002 \001(\0132\026.pro"
  "to.dota.CMsgQAngle\"\346\001\n\034CUserMessageCamer"
  "aTransition\022\023\n\013camera_type\030\001 \001(\r\022\020\n\010dura"
  "tion\030\002 \001(\002\022Z\n\022params_data_driven\030\003 \001(\0132>"
  ".proto.dota.CUserMessageCameraTransition"
  ".Transition_DataDriven\032C\n\025Transition_Dat"
  "aDriven\022\020\n\010filename\030\001 \001(\t\022\030\n\020attach_ent_"
  "index\030\002 \001(\005\"\224\031\n\030CUserMsg_ParticleManager"
  "\022N\n\004type\030\001 \002(\0162\034.proto.dota.PARTICLE_MES"
  "SAGE:\"GAME_PARTICLE_MANAGER_EVENT_CREATE"
  "\022\r\n\005index\030\002 \002(\r\022Y\n\026release_particle_inde"
  "x\030\003 \001(\01329.proto.dota.CUserMsg_ParticleMa"
  "nager.ReleaseParticleIndex\022L\n\017create_par"
  "ticle\030\004 \001(\01323.proto.dota.CUserMsg_Partic"
  "leManager.CreateParticle\022N\n\020destroy_part"
  "icle\030\005 \001(\01324.proto.dota.CUserMsg_Particl"
  "eManager.DestroyParticle\022a\n\032destroy_part"
  "icle_involving\030\006 \001(\0132=.proto.dota.CUserM"
  "sg_ParticleManager.DestroyParticleInvolv"
  "ing\022L\n\017update_particle\030\007 \001(\01323.proto.dot"
  "a.CUserMsg_ParticleManager.UpdateParticl"
  "e\022S\n\023update_particle_fwd\030\010 \001(\01326.proto.d"
  "ota.CUserMsg_ParticleManager.UpdateParti"
  "cleFwd\022Y\n\026update_particle_orient\030\t \001(\01329"
  ".proto.dota.CUserMsg_ParticleManager.Upd"
  "ateParticleOrient\022]\n\030update_particle_fal"
  "lback\030\n \001(\0132;.proto.dota.CUserMsg_Partic"
  "leManager.UpdateParticleFallback\022Y\n\026upda"
  "te_particle_offset\030\013 \001(\01329.proto.dota.CU"
  "serMsg_ParticleManager.UpdateParticleOff"
  "set\022S\n\023update_particle_ent\030\014 \001(\01326.proto"
  ".dota.CUserMsg_ParticleManager.UpdatePar"
  "ticleEnt\022b\n\033update_particle_should_draw\030"
  "\016 \001(\0132=.proto.dota.CUserMsg_ParticleMana"
  "ger.UpdateParticleShouldDraw\022`\n\032update_p"
  "article_set_frozen\030\017 \001(\0132<.proto.dota.CU"
  "serMsg_ParticleManager.UpdateParticleSet"
  "Frozen\022j\n\037change_control_point_attachmen"
  "t\030\020 \001(\0132A.proto.dota.CUserMsg_ParticleMa"
  "nager.ChangeControlPointAttachment\022Y\n\026up"
  "date_entity_position\030\021 \001(\01329.proto.dota."
  "CUserMsg_ParticleManager.UpdateEntityPos"
  "ition\022b\n\033set_particle_fow_properties\030\022 \001"
  "(\0132=.proto.dota.CUserMsg_ParticleManager"
  ".SetParticleFoWProperties\022O\n\021set_particl"
  "e_text\030\023 \001(\01324.proto.dota.CUserMsg_Parti"
  "cleManager.SetParticleText\022e\n\035set_partic"
  "le_should_check_fow\030\024 \001(\0132>.proto.dota.C"
  "UserMsg_ParticleManager.SetParticleShoul"
  "dCheckFoW\032\026\n\024ReleaseParticleIndex\032~\n\016Cre"
  "ateParticle\022\033\n\023particle_name_index\030\001 \001(\006"
  "\022\023\n\013attach_type\030\002 \001(\005\022\025\n\rentity_handle\030\003"
  " \001(\005\022#\n\033entity_handle_for_modifiers\030\004 \001("
  "\005\032.\n\017DestroyParticle\022\033\n\023destroy_immediat"
  "ely\030\001 \001(\010\032N\n\030DestroyParticleInvolving\022\033\n"
  "\023destroy_immediately\030\001 \001(\010\022\025\n\rentity_han"
  "dle\030\003 \001(\005\032Q\n\016UpdateParticle\022\025\n\rcontrol_p"
  "oint\030\001 \001(\005\022(\n\010position\030\002 \001(\0132\026.proto.dot"
  "a.CMsgVector\032S\n\021UpdateParticleFwd\022\025\n\rcon"
  "trol_point\030\001 \001(\005\022\'\n\007forward\030\002 \001(\0132\026.prot"
  "o.dota.CMsgVector\032\313\001\n\024UpdateParticleOrie"
  "nt\022\025\n\rcontrol_point\030\001 \001(\005\022\'\n\007forward\030\002 \001"
  "(\0132\026.proto.dota.CMsgVector\022)\n\005right\030\003 \001("
  "\0132\026.proto.dota.CMsgVectorB\002\030\001\022\"\n\002up\030\004 \001("
  "\0132\026.proto.dota.CMsgVector\022$\n\004left\030\005 \001(\0132"
  "\026.proto.dota.CMsgVector\032Y\n\026UpdateParticl"
  "eFallback\022\025\n\rcontrol_point\030\001 \001(\005\022(\n\010posi"
  "tion\030\002 \001(\0132\026.proto.dota.CMsgVector\032\212\001\n\024U"
  "pdateParticleOffset\022\025\n\rcontrol_point\030\001 \001"
  "(\005\022-\n\rorigin_offset\030\002 \001(\0132\026.proto.dota.C"
  "MsgVector\022,\n\014angle_offset\030\003 \001(\0132\026.proto."
  "dota.CMsgQAngle\032\270\001\n\021UpdateParticleEnt\022\025\n"
  "\rcontrol_point\030\001 \001(\005\022\025\n\rentity_handle\030\002 "
  "\001(\005\022\023\n\013attach_type\030\003 \001(\005\022\022\n\nattachment\030\004"
  " \001(\005\0221\n\021fallback_position\030\005 \001(\0132\026.proto."
  "dota.CMsgVector\022\031\n\021include_wearables\030\006 \001"
  "(\010\032-\n\027UpdateParticleSetFrozen\022\022\n\nset_fro"
  "zen\030\001 \001(\010\032/\n\030UpdateParticleShouldDraw\022\023\n"
  "\013should_draw\030\001 \001(\010\032e\n\034ChangeControlPoint"
  "Attachment\022\026\n\016attachment_old\030\001 \001(\005\022\026\n\016at"
  "tachment_new\030\002 \001(\005\022\025\n\rentity_handle\030\003 \001("
  "\005\032W\n\024UpdateEntityPosition\022\025\n\rentity_hand"
  "le\030\001 \001(\005\022(\n\010position\030\002 \001(\0132\026.proto.dota."
  "CMsgVector\032e\n\030SetParticleFoWProperties\022\031"
  "\n\021fow_control_point\030\001 \001(\005\022\032\n\022fow_control"
  "_point2\030\002 \001(\005\022\022\n\nfow_radius\030\003 \001(\002\032.\n\031Set"
  "ParticleShouldCheckFoW\022\021\n\tcheck_fow\030\001 \001("
  "\010\032\037\n\017SetParticleText\022\014\n\004text\030\001 \001(\t\"%\n\021CU"
  "serMsg_HudError\022\020\n\010order_id\030\001 \001(\005\"<\n\030CUs"
  "erMsg_CustomGameEvent\022\022\n\nevent_name\030\001 \001("
  "\t\022\014\n\004data\030\002 \001(\014\"x\n\027CUserMessageHapticPul"
  "se\022\017\n\007hand_id\030\001 \001(\005\022L\n\npulse_type\030\002 \001(\0162"
  "\034.proto.dota.EHapticPulseType:\032VR_HAND_H"
  "APTIC_PULSE_LIGHT\"I\n\036CUserMessageHapticP"
  "ulsePrecise\022\017\n\007hand_id\030\001 \001(\005\022\026\n\016pulse_du"
  "ration\030\002 \001(\005\"E\n\037CUserMessageAnimStateGra"
  "phState\022\024\n\014entity_index\030\001 \001(\005\022\014\n\004data\030\002 "
  "\001(\014*\361\006\n\021EBaseUserMessages\022\027\n\023UM_Achievem"
  "entEvent\020e\022\023\n\017UM_CloseCaption\020f\022\031\n\025UM_Cl"
  "oseCaptionDirect\020g\022\027\n\023UM_CurrentTimescal"
  "e\020h\022\027\n\023UM_DesiredTimescale\020i\022\013\n\007UM_Fade\020"
  "j\022\020\n\014UM_GameTitle\020k\022\017\n\013UM_HintText\020m\022\r\n\t"
  "UM_HudMsg\020n\022\016\n\nUM_HudText\020o\022\022\n\016UM_KeyHin"
  "tText\020p\022\022\n\016UM_ColoredText\020q\022\023\n\017UM_Reques"
  "tState\020r\022\017\n\013UM_ResetHUD\020s\022\r\n\tUM_Rumble\020t"
  "\022\016\n\nUM_SayText\020u\022\017\n\013UM_SayText2\020v\022\025\n\021UM_"
  "SayTextChannel\020w\022\014\n\010UM_Shake\020x\022\017\n\013UM_Sha"
  "keDir\020y\022\016\n\nUM_TextMsg\020|\022\021\n\rUM_ScreenTilt"
  "\020}\022\014\n\010UM_Train\020~\022\017\n\013UM_VGUIMenu\020\177\022\021\n\014UM_"
  "VoiceMask\020\200\001\022\025\n\020UM_VoiceSubtitle\020\201\001\022\021\n\014U"
  "M_SendAudio\020\202\001\022\022\n\rUM_ItemPickup\020\203\001\022\022\n\rUM"
  "_AmmoDenied\020\204\001\022\026\n\021UM_CrosshairAngle\020\205\001\022\020"
  "\n\013UM_ShowMenu\020\206\001\022\022\n\rUM_CreditsMsg\020\207\001\022\037\n\032"
  "UM_CloseCaptionPlaceholder\020\216\001\022\030\n\023UM_Came"
  "raTransition\020\217\001\022\026\n\021UM_AudioParameter\020\220\001\022"
  "\027\n\022UM_ParticleManager\020\221\001\022\020\n\013UM_HudError\020"
  "\222\001\022\027\n\022UM_CustomGameEvent\020\224\001\022\027\n\022UM_HandHa"
  "pticPulse\020\225\001\022\027\n\022UM_AnimGraphUpdate\020\226\001\022\036\n"
  "\031UM_HandHapticPulsePrecise\020\227\001\022\020\n\013UM_MAX_"
  "BASE\020\310\001*\224\001\n\023EBaseEntityMessages\022\022\n\rEM_Pl"
  "ayJingle\020\210\001\022\025\n\020EM_ScreenOverlay\020\211\001\022\027\n\022EM"
  "_RemoveAllDecals\020\212\001\022\026\n\021EM_PropagateForce"
  "\020\213\001\022\017\n\nEM_DoSpark\020\214\001\022\020\n\013EM_FixAngle\020\215\001*o"
  "\n\teRollType\022\026\n\tROLL_NONE\020\377\377\377\377\377\377\377\377\377\001\022\016\n\nR"
  "OLL_STATS\020\000\022\020\n\014ROLL_CREDITS\020\001\022\027\n\023ROLL_LA"
  "TE_JOIN_LOGO\020\002\022\017\n\013ROLL_OUTTRO\020\003*\342\006\n\020PART"
  "ICLE_MESSAGE\022&\n\"GAME_PARTICLE_MANAGER_EV"
  "ENT_CREATE\020\000\022&\n\"GAME_PARTICLE_MANAGER_EV"
  "ENT_UPDATE\020\001\022.\n*GAME_PARTICLE_MANAGER_EV"
  "ENT_UPDATE_FORWARD\020\002\0222\n.GAME_PARTICLE_MA"
  "NAGER_EVENT_UPDATE_ORIENTATION\020\003\022/\n+GAME"
  "_PARTICLE_MANAGER_EVENT_UPDATE_FALLBACK\020"
  "\004\022*\n&GAME_PARTICLE_MANAGER_EVENT_UPDATE_"
  "ENT\020\005\022-\n)GAME_PARTICLE_MANAGER_EVENT_UPD"
  "ATE_OFFSET\020\006\022\'\n#GAME_PARTICLE_MANAGER_EV"
  "ENT_DESTROY\020\007\0221\n-GAME_PARTICLE_MANAGER_E"
  "VENT_DESTROY_INVOLVING\020\010\022\'\n#GAME_PARTICL"
  "E_MANAGER_EVENT_RELEASE\020\t\022\'\n#GAME_PARTIC"
  "LE_MANAGER_EVENT_LATENCY\020\n\022+\n\'GAME_PARTI"
  "CLE_MANAGER_EVENT_SHOULD_DRAW\020\013\022&\n\"GAME_"
  "PARTICLE_MANAGER_EVENT_FROZEN\020\014\022\?\n;GAME_"
  "PARTICLE_MANAGER_EVENT_CHANGE_CONTROL_PO"
  "INT_ATTACHMENT\020\r\0226\n2GAME_PARTICLE_MANAGE"
  "R_EVENT_UPDATE_ENTITY_POSITION\020\016\0222\n.GAME"
  "_PARTICLE_MANAGER_EVENT_SET_FOW_PROPERTI"
  "ES\020\017\022(\n$GAME_PARTICLE_MANAGER_EVENT_SET_"
  "TEXT\020\020\0224\n0GAME_PARTICLE_MANAGER_EVENT_SE"
  "T_SHOULD_CHECK_FOW\020\021*t\n\020EHapticPulseType"
  "\022\036\n\032VR_HAND_HAPTIC_PULSE_LIGHT\020\000\022\037\n\033VR_H"
  "AND_HAPTIC_PULSE_MEDIUM\020\001\022\037\n\033VR_HAND_HAP"
  "TIC_PULSE_STRONG\020\002B\005H\001\200\001\000"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_usermessages_2eproto = {
  false, InitDefaults_usermessages_2eproto, 
  descriptor_table_protodef_usermessages_2eproto,
  "usermessages.proto", &assign_descriptors_table_usermessages_2eproto, 9305,
};

void AddDescriptors_usermessages_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_networkbasetypes_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_usermessages_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_usermessages_2eproto = []() { AddDescriptors_usermessages_2eproto(); return true; }();
namespace proto {
namespace dota {
const ::google::protobuf::EnumDescriptor* EBaseUserMessages_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_usermessages_2eproto);
  return file_level_enum_descriptors_usermessages_2eproto[0];
}
bool EBaseUserMessages_IsValid(int value) {
  switch (value) {
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 148:
    case 149:
    case 150:
    case 151:
    case 200:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EBaseEntityMessages_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_usermessages_2eproto);
  return file_level_enum_descriptors_usermessages_2eproto[1];
}
bool EBaseEntityMessages_IsValid(int value) {
  switch (value) {
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eRollType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_usermessages_2eproto);
  return file_level_enum_descriptors_usermessages_2eproto[2];
}
bool eRollType_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PARTICLE_MESSAGE_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_usermessages_2eproto);
  return file_level_enum_descriptors_usermessages_2eproto[3];
}
bool PARTICLE_MESSAGE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EHapticPulseType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_usermessages_2eproto);
  return file_level_enum_descriptors_usermessages_2eproto[4];
}
bool EHapticPulseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void CUserMessageAchievementEvent::InitAsDefaultInstance() {
}
class CUserMessageAchievementEvent::HasBitSetters {
 public:
  static void set_has_achievement(CUserMessageAchievementEvent* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageAchievementEvent::kAchievementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageAchievementEvent::CUserMessageAchievementEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageAchievementEvent)
}
CUserMessageAchievementEvent::CUserMessageAchievementEvent(const CUserMessageAchievementEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  achievement_ = from.achievement_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageAchievementEvent)
}

void CUserMessageAchievementEvent::SharedCtor() {
  achievement_ = 0u;
}

CUserMessageAchievementEvent::~CUserMessageAchievementEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageAchievementEvent)
  SharedDtor();
}

void CUserMessageAchievementEvent::SharedDtor() {
}

void CUserMessageAchievementEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageAchievementEvent& CUserMessageAchievementEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageAchievementEvent_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageAchievementEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageAchievementEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  achievement_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageAchievementEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageAchievementEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 achievement = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_achievement(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageAchievementEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageAchievementEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 achievement = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_achievement(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievement_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageAchievementEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageAchievementEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageAchievementEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageAchievementEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 achievement = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->achievement(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageAchievementEvent)
}

::google::protobuf::uint8* CUserMessageAchievementEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageAchievementEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 achievement = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->achievement(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageAchievementEvent)
  return target;
}

size_t CUserMessageAchievementEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageAchievementEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 achievement = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->achievement());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageAchievementEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageAchievementEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageAchievementEvent* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageAchievementEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageAchievementEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageAchievementEvent)
    MergeFrom(*source);
  }
}

void CUserMessageAchievementEvent::MergeFrom(const CUserMessageAchievementEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageAchievementEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_achievement()) {
    set_achievement(from.achievement());
  }
}

void CUserMessageAchievementEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageAchievementEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageAchievementEvent::CopyFrom(const CUserMessageAchievementEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageAchievementEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageAchievementEvent::IsInitialized() const {
  return true;
}

void CUserMessageAchievementEvent::Swap(CUserMessageAchievementEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageAchievementEvent::InternalSwap(CUserMessageAchievementEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(achievement_, other->achievement_);
}

::google::protobuf::Metadata CUserMessageAchievementEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageCloseCaption::InitAsDefaultInstance() {
}
class CUserMessageCloseCaption::HasBitSetters {
 public:
  static void set_has_hash(CUserMessageCloseCaption* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_duration(CUserMessageCloseCaption* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_from_player(CUserMessageCloseCaption* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_ent_index(CUserMessageCloseCaption* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageCloseCaption::kHashFieldNumber;
const int CUserMessageCloseCaption::kDurationFieldNumber;
const int CUserMessageCloseCaption::kFromPlayerFieldNumber;
const int CUserMessageCloseCaption::kEntIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageCloseCaption::CUserMessageCloseCaption()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageCloseCaption)
}
CUserMessageCloseCaption::CUserMessageCloseCaption(const CUserMessageCloseCaption& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hash_, &from.hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&ent_index_) -
    reinterpret_cast<char*>(&hash_)) + sizeof(ent_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageCloseCaption)
}

void CUserMessageCloseCaption::SharedCtor() {
  ::memset(&hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ent_index_) -
      reinterpret_cast<char*>(&hash_)) + sizeof(ent_index_));
}

CUserMessageCloseCaption::~CUserMessageCloseCaption() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageCloseCaption)
  SharedDtor();
}

void CUserMessageCloseCaption::SharedDtor() {
}

void CUserMessageCloseCaption::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageCloseCaption& CUserMessageCloseCaption::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageCloseCaption_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageCloseCaption::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageCloseCaption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ent_index_) -
        reinterpret_cast<char*>(&hash_)) + sizeof(ent_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageCloseCaption::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageCloseCaption*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 hash = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_hash(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional float duration = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_duration(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional bool from_player = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_from_player(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 ent_index = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_ent_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageCloseCaption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageCloseCaption)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_hash(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool from_player = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_from_player(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ent_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_ent_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageCloseCaption)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageCloseCaption)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageCloseCaption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageCloseCaption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->hash(), output);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration(), output);
  }

  // optional bool from_player = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->from_player(), output);
  }

  // optional int32 ent_index = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ent_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageCloseCaption)
}

::google::protobuf::uint8* CUserMessageCloseCaption::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageCloseCaption)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->hash(), target);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration(), target);
  }

  // optional bool from_player = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->from_player(), target);
  }

  // optional int32 ent_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ent_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageCloseCaption)
  return target;
}

size_t CUserMessageCloseCaption::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageCloseCaption)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed32 hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool from_player = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 ent_index = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageCloseCaption::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageCloseCaption)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageCloseCaption* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageCloseCaption>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageCloseCaption)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageCloseCaption)
    MergeFrom(*source);
  }
}

void CUserMessageCloseCaption::MergeFrom(const CUserMessageCloseCaption& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageCloseCaption)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      hash_ = from.hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      from_player_ = from.from_player_;
    }
    if (cached_has_bits & 0x00000008u) {
      ent_index_ = from.ent_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageCloseCaption::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageCloseCaption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCloseCaption::CopyFrom(const CUserMessageCloseCaption& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageCloseCaption)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCloseCaption::IsInitialized() const {
  return true;
}

void CUserMessageCloseCaption::Swap(CUserMessageCloseCaption* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageCloseCaption::InternalSwap(CUserMessageCloseCaption* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hash_, other->hash_);
  swap(duration_, other->duration_);
  swap(from_player_, other->from_player_);
  swap(ent_index_, other->ent_index_);
}

::google::protobuf::Metadata CUserMessageCloseCaption::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageCloseCaptionDirect::InitAsDefaultInstance() {
}
class CUserMessageCloseCaptionDirect::HasBitSetters {
 public:
  static void set_has_hash(CUserMessageCloseCaptionDirect* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_duration(CUserMessageCloseCaptionDirect* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_from_player(CUserMessageCloseCaptionDirect* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_ent_index(CUserMessageCloseCaptionDirect* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageCloseCaptionDirect::kHashFieldNumber;
const int CUserMessageCloseCaptionDirect::kDurationFieldNumber;
const int CUserMessageCloseCaptionDirect::kFromPlayerFieldNumber;
const int CUserMessageCloseCaptionDirect::kEntIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageCloseCaptionDirect::CUserMessageCloseCaptionDirect()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageCloseCaptionDirect)
}
CUserMessageCloseCaptionDirect::CUserMessageCloseCaptionDirect(const CUserMessageCloseCaptionDirect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hash_, &from.hash_,
    static_cast<size_t>(reinterpret_cast<char*>(&ent_index_) -
    reinterpret_cast<char*>(&hash_)) + sizeof(ent_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageCloseCaptionDirect)
}

void CUserMessageCloseCaptionDirect::SharedCtor() {
  ::memset(&hash_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ent_index_) -
      reinterpret_cast<char*>(&hash_)) + sizeof(ent_index_));
}

CUserMessageCloseCaptionDirect::~CUserMessageCloseCaptionDirect() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageCloseCaptionDirect)
  SharedDtor();
}

void CUserMessageCloseCaptionDirect::SharedDtor() {
}

void CUserMessageCloseCaptionDirect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageCloseCaptionDirect& CUserMessageCloseCaptionDirect::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageCloseCaptionDirect_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageCloseCaptionDirect::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageCloseCaptionDirect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&hash_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ent_index_) -
        reinterpret_cast<char*>(&hash_)) + sizeof(ent_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageCloseCaptionDirect::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageCloseCaptionDirect*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed32 hash = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_hash(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional float duration = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_duration(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional bool from_player = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_from_player(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 ent_index = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_ent_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageCloseCaptionDirect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageCloseCaptionDirect)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed32 hash = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_hash(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &hash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool from_player = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_from_player(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ent_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_ent_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageCloseCaptionDirect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageCloseCaptionDirect)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageCloseCaptionDirect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageCloseCaptionDirect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 hash = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(1, this->hash(), output);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration(), output);
  }

  // optional bool from_player = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->from_player(), output);
  }

  // optional int32 ent_index = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ent_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageCloseCaptionDirect)
}

::google::protobuf::uint8* CUserMessageCloseCaptionDirect::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageCloseCaptionDirect)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed32 hash = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(1, this->hash(), target);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration(), target);
  }

  // optional bool from_player = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->from_player(), target);
  }

  // optional int32 ent_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ent_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageCloseCaptionDirect)
  return target;
}

size_t CUserMessageCloseCaptionDirect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageCloseCaptionDirect)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed32 hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool from_player = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 ent_index = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageCloseCaptionDirect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageCloseCaptionDirect)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageCloseCaptionDirect* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageCloseCaptionDirect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageCloseCaptionDirect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageCloseCaptionDirect)
    MergeFrom(*source);
  }
}

void CUserMessageCloseCaptionDirect::MergeFrom(const CUserMessageCloseCaptionDirect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageCloseCaptionDirect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      hash_ = from.hash_;
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      from_player_ = from.from_player_;
    }
    if (cached_has_bits & 0x00000008u) {
      ent_index_ = from.ent_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageCloseCaptionDirect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageCloseCaptionDirect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCloseCaptionDirect::CopyFrom(const CUserMessageCloseCaptionDirect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageCloseCaptionDirect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCloseCaptionDirect::IsInitialized() const {
  return true;
}

void CUserMessageCloseCaptionDirect::Swap(CUserMessageCloseCaptionDirect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageCloseCaptionDirect::InternalSwap(CUserMessageCloseCaptionDirect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hash_, other->hash_);
  swap(duration_, other->duration_);
  swap(from_player_, other->from_player_);
  swap(ent_index_, other->ent_index_);
}

::google::protobuf::Metadata CUserMessageCloseCaptionDirect::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageCloseCaptionPlaceholder::InitAsDefaultInstance() {
}
class CUserMessageCloseCaptionPlaceholder::HasBitSetters {
 public:
  static void set_has_string(CUserMessageCloseCaptionPlaceholder* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_duration(CUserMessageCloseCaptionPlaceholder* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_from_player(CUserMessageCloseCaptionPlaceholder* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_ent_index(CUserMessageCloseCaptionPlaceholder* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageCloseCaptionPlaceholder::kStringFieldNumber;
const int CUserMessageCloseCaptionPlaceholder::kDurationFieldNumber;
const int CUserMessageCloseCaptionPlaceholder::kFromPlayerFieldNumber;
const int CUserMessageCloseCaptionPlaceholder::kEntIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageCloseCaptionPlaceholder::CUserMessageCloseCaptionPlaceholder()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageCloseCaptionPlaceholder)
}
CUserMessageCloseCaptionPlaceholder::CUserMessageCloseCaptionPlaceholder(const CUserMessageCloseCaptionPlaceholder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_string()) {
    string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_);
  }
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&ent_index_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(ent_index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageCloseCaptionPlaceholder)
}

void CUserMessageCloseCaptionPlaceholder::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMessageCloseCaptionPlaceholder_usermessages_2eproto.base);
  string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ent_index_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(ent_index_));
}

CUserMessageCloseCaptionPlaceholder::~CUserMessageCloseCaptionPlaceholder() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageCloseCaptionPlaceholder)
  SharedDtor();
}

void CUserMessageCloseCaptionPlaceholder::SharedDtor() {
  string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageCloseCaptionPlaceholder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageCloseCaptionPlaceholder& CUserMessageCloseCaptionPlaceholder::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageCloseCaptionPlaceholder_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageCloseCaptionPlaceholder::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageCloseCaptionPlaceholder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    string_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ent_index_) -
        reinterpret_cast<char*>(&duration_)) + sizeof(ent_index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageCloseCaptionPlaceholder::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageCloseCaptionPlaceholder*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string string = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CUserMessageCloseCaptionPlaceholder.string");
        object = msg->mutable_string();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional float duration = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_duration(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional bool from_player = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_from_player(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 ent_index = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_ent_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageCloseCaptionPlaceholder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageCloseCaptionPlaceholder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string string = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->string().data(), static_cast<int>(this->string().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageCloseCaptionPlaceholder.string");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool from_player = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_from_player(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &from_player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ent_index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_ent_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ent_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageCloseCaptionPlaceholder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageCloseCaptionPlaceholder)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageCloseCaptionPlaceholder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageCloseCaptionPlaceholder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string string = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string().data(), static_cast<int>(this->string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageCloseCaptionPlaceholder.string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->string(), output);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration(), output);
  }

  // optional bool from_player = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->from_player(), output);
  }

  // optional int32 ent_index = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ent_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageCloseCaptionPlaceholder)
}

::google::protobuf::uint8* CUserMessageCloseCaptionPlaceholder::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageCloseCaptionPlaceholder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string string = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->string().data(), static_cast<int>(this->string().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageCloseCaptionPlaceholder.string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->string(), target);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration(), target);
  }

  // optional bool from_player = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->from_player(), target);
  }

  // optional int32 ent_index = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ent_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageCloseCaptionPlaceholder)
  return target;
}

size_t CUserMessageCloseCaptionPlaceholder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageCloseCaptionPlaceholder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string string = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string());
    }

    // optional float duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional bool from_player = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 ent_index = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ent_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageCloseCaptionPlaceholder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageCloseCaptionPlaceholder)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageCloseCaptionPlaceholder* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageCloseCaptionPlaceholder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageCloseCaptionPlaceholder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageCloseCaptionPlaceholder)
    MergeFrom(*source);
  }
}

void CUserMessageCloseCaptionPlaceholder::MergeFrom(const CUserMessageCloseCaptionPlaceholder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageCloseCaptionPlaceholder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.string_);
    }
    if (cached_has_bits & 0x00000002u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      from_player_ = from.from_player_;
    }
    if (cached_has_bits & 0x00000008u) {
      ent_index_ = from.ent_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageCloseCaptionPlaceholder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageCloseCaptionPlaceholder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCloseCaptionPlaceholder::CopyFrom(const CUserMessageCloseCaptionPlaceholder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageCloseCaptionPlaceholder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCloseCaptionPlaceholder::IsInitialized() const {
  return true;
}

void CUserMessageCloseCaptionPlaceholder::Swap(CUserMessageCloseCaptionPlaceholder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageCloseCaptionPlaceholder::InternalSwap(CUserMessageCloseCaptionPlaceholder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  string_.Swap(&other->string_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(duration_, other->duration_);
  swap(from_player_, other->from_player_);
  swap(ent_index_, other->ent_index_);
}

::google::protobuf::Metadata CUserMessageCloseCaptionPlaceholder::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageCurrentTimescale::InitAsDefaultInstance() {
}
class CUserMessageCurrentTimescale::HasBitSetters {
 public:
  static void set_has_current(CUserMessageCurrentTimescale* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageCurrentTimescale::kCurrentFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageCurrentTimescale::CUserMessageCurrentTimescale()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageCurrentTimescale)
}
CUserMessageCurrentTimescale::CUserMessageCurrentTimescale(const CUserMessageCurrentTimescale& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  current_ = from.current_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageCurrentTimescale)
}

void CUserMessageCurrentTimescale::SharedCtor() {
  current_ = 0;
}

CUserMessageCurrentTimescale::~CUserMessageCurrentTimescale() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageCurrentTimescale)
  SharedDtor();
}

void CUserMessageCurrentTimescale::SharedDtor() {
}

void CUserMessageCurrentTimescale::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageCurrentTimescale& CUserMessageCurrentTimescale::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageCurrentTimescale_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageCurrentTimescale::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageCurrentTimescale)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  current_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageCurrentTimescale::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageCurrentTimescale*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional float current = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_current(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageCurrentTimescale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageCurrentTimescale)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float current = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_current(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &current_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageCurrentTimescale)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageCurrentTimescale)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageCurrentTimescale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageCurrentTimescale)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float current = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->current(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageCurrentTimescale)
}

::google::protobuf::uint8* CUserMessageCurrentTimescale::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageCurrentTimescale)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float current = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->current(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageCurrentTimescale)
  return target;
}

size_t CUserMessageCurrentTimescale::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageCurrentTimescale)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional float current = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageCurrentTimescale::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageCurrentTimescale)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageCurrentTimescale* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageCurrentTimescale>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageCurrentTimescale)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageCurrentTimescale)
    MergeFrom(*source);
  }
}

void CUserMessageCurrentTimescale::MergeFrom(const CUserMessageCurrentTimescale& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageCurrentTimescale)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_current()) {
    set_current(from.current());
  }
}

void CUserMessageCurrentTimescale::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageCurrentTimescale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCurrentTimescale::CopyFrom(const CUserMessageCurrentTimescale& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageCurrentTimescale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCurrentTimescale::IsInitialized() const {
  return true;
}

void CUserMessageCurrentTimescale::Swap(CUserMessageCurrentTimescale* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageCurrentTimescale::InternalSwap(CUserMessageCurrentTimescale* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(current_, other->current_);
}

::google::protobuf::Metadata CUserMessageCurrentTimescale::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageDesiredTimescale::InitAsDefaultInstance() {
}
class CUserMessageDesiredTimescale::HasBitSetters {
 public:
  static void set_has_desired(CUserMessageDesiredTimescale* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_acceleration(CUserMessageDesiredTimescale* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_minblendrate(CUserMessageDesiredTimescale* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_blenddeltamultiplier(CUserMessageDesiredTimescale* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageDesiredTimescale::kDesiredFieldNumber;
const int CUserMessageDesiredTimescale::kAccelerationFieldNumber;
const int CUserMessageDesiredTimescale::kMinblendrateFieldNumber;
const int CUserMessageDesiredTimescale::kBlenddeltamultiplierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageDesiredTimescale::CUserMessageDesiredTimescale()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageDesiredTimescale)
}
CUserMessageDesiredTimescale::CUserMessageDesiredTimescale(const CUserMessageDesiredTimescale& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&desired_, &from.desired_,
    static_cast<size_t>(reinterpret_cast<char*>(&blenddeltamultiplier_) -
    reinterpret_cast<char*>(&desired_)) + sizeof(blenddeltamultiplier_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageDesiredTimescale)
}

void CUserMessageDesiredTimescale::SharedCtor() {
  ::memset(&desired_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blenddeltamultiplier_) -
      reinterpret_cast<char*>(&desired_)) + sizeof(blenddeltamultiplier_));
}

CUserMessageDesiredTimescale::~CUserMessageDesiredTimescale() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageDesiredTimescale)
  SharedDtor();
}

void CUserMessageDesiredTimescale::SharedDtor() {
}

void CUserMessageDesiredTimescale::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageDesiredTimescale& CUserMessageDesiredTimescale::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageDesiredTimescale_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageDesiredTimescale::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageDesiredTimescale)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&desired_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&blenddeltamultiplier_) -
        reinterpret_cast<char*>(&desired_)) + sizeof(blenddeltamultiplier_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageDesiredTimescale::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageDesiredTimescale*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional float desired = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_desired(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float acceleration = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_acceleration(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float minblendrate = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_minblendrate(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float blenddeltamultiplier = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_blenddeltamultiplier(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageDesiredTimescale::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageDesiredTimescale)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float desired = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_desired(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &desired_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float acceleration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_acceleration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float minblendrate = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_minblendrate(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &minblendrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float blenddeltamultiplier = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_blenddeltamultiplier(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &blenddeltamultiplier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageDesiredTimescale)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageDesiredTimescale)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageDesiredTimescale::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageDesiredTimescale)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float desired = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->desired(), output);
  }

  // optional float acceleration = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->acceleration(), output);
  }

  // optional float minblendrate = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->minblendrate(), output);
  }

  // optional float blenddeltamultiplier = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->blenddeltamultiplier(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageDesiredTimescale)
}

::google::protobuf::uint8* CUserMessageDesiredTimescale::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageDesiredTimescale)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float desired = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->desired(), target);
  }

  // optional float acceleration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->acceleration(), target);
  }

  // optional float minblendrate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->minblendrate(), target);
  }

  // optional float blenddeltamultiplier = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->blenddeltamultiplier(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageDesiredTimescale)
  return target;
}

size_t CUserMessageDesiredTimescale::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageDesiredTimescale)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional float desired = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float acceleration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float minblendrate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float blenddeltamultiplier = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageDesiredTimescale::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageDesiredTimescale)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageDesiredTimescale* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageDesiredTimescale>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageDesiredTimescale)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageDesiredTimescale)
    MergeFrom(*source);
  }
}

void CUserMessageDesiredTimescale::MergeFrom(const CUserMessageDesiredTimescale& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageDesiredTimescale)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      desired_ = from.desired_;
    }
    if (cached_has_bits & 0x00000002u) {
      acceleration_ = from.acceleration_;
    }
    if (cached_has_bits & 0x00000004u) {
      minblendrate_ = from.minblendrate_;
    }
    if (cached_has_bits & 0x00000008u) {
      blenddeltamultiplier_ = from.blenddeltamultiplier_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageDesiredTimescale::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageDesiredTimescale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageDesiredTimescale::CopyFrom(const CUserMessageDesiredTimescale& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageDesiredTimescale)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageDesiredTimescale::IsInitialized() const {
  return true;
}

void CUserMessageDesiredTimescale::Swap(CUserMessageDesiredTimescale* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageDesiredTimescale::InternalSwap(CUserMessageDesiredTimescale* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(desired_, other->desired_);
  swap(acceleration_, other->acceleration_);
  swap(minblendrate_, other->minblendrate_);
  swap(blenddeltamultiplier_, other->blenddeltamultiplier_);
}

::google::protobuf::Metadata CUserMessageDesiredTimescale::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageFade::InitAsDefaultInstance() {
}
class CUserMessageFade::HasBitSetters {
 public:
  static void set_has_duration(CUserMessageFade* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_hold_time(CUserMessageFade* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_flags(CUserMessageFade* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_color(CUserMessageFade* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageFade::kDurationFieldNumber;
const int CUserMessageFade::kHoldTimeFieldNumber;
const int CUserMessageFade::kFlagsFieldNumber;
const int CUserMessageFade::kColorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageFade::CUserMessageFade()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageFade)
}
CUserMessageFade::CUserMessageFade(const CUserMessageFade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&color_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(color_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageFade)
}

void CUserMessageFade::SharedCtor() {
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&color_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(color_));
}

CUserMessageFade::~CUserMessageFade() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageFade)
  SharedDtor();
}

void CUserMessageFade::SharedDtor() {
}

void CUserMessageFade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageFade& CUserMessageFade::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageFade_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageFade::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageFade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&color_) -
        reinterpret_cast<char*>(&duration_)) + sizeof(color_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageFade::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageFade*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 duration = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_duration(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 hold_time = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_hold_time(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 flags = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional fixed32 color = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_color(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageFade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageFade)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 duration = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 hold_time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_hold_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &hold_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 color = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_color(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageFade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageFade)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageFade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageFade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 duration = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->duration(), output);
  }

  // optional uint32 hold_time = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->hold_time(), output);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->flags(), output);
  }

  // optional fixed32 color = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->color(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageFade)
}

::google::protobuf::uint8* CUserMessageFade::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageFade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 duration = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->duration(), target);
  }

  // optional uint32 hold_time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->hold_time(), target);
  }

  // optional uint32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->flags(), target);
  }

  // optional fixed32 color = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->color(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageFade)
  return target;
}

size_t CUserMessageFade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageFade)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 duration = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->duration());
    }

    // optional uint32 hold_time = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->hold_time());
    }

    // optional uint32 flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional fixed32 color = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageFade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageFade)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageFade* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageFade>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageFade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageFade)
    MergeFrom(*source);
  }
}

void CUserMessageFade::MergeFrom(const CUserMessageFade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageFade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000002u) {
      hold_time_ = from.hold_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000008u) {
      color_ = from.color_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageFade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageFade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageFade::CopyFrom(const CUserMessageFade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageFade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageFade::IsInitialized() const {
  return true;
}

void CUserMessageFade::Swap(CUserMessageFade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageFade::InternalSwap(CUserMessageFade* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(duration_, other->duration_);
  swap(hold_time_, other->hold_time_);
  swap(flags_, other->flags_);
  swap(color_, other->color_);
}

::google::protobuf::Metadata CUserMessageFade::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageShake::InitAsDefaultInstance() {
}
class CUserMessageShake::HasBitSetters {
 public:
  static void set_has_command(CUserMessageShake* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_amplitude(CUserMessageShake* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_frequency(CUserMessageShake* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_duration(CUserMessageShake* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageShake::kCommandFieldNumber;
const int CUserMessageShake::kAmplitudeFieldNumber;
const int CUserMessageShake::kFrequencyFieldNumber;
const int CUserMessageShake::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageShake::CUserMessageShake()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageShake)
}
CUserMessageShake::CUserMessageShake(const CUserMessageShake& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&command_, &from.command_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&command_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageShake)
}

void CUserMessageShake::SharedCtor() {
  ::memset(&command_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&command_)) + sizeof(duration_));
}

CUserMessageShake::~CUserMessageShake() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageShake)
  SharedDtor();
}

void CUserMessageShake::SharedDtor() {
}

void CUserMessageShake::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageShake& CUserMessageShake::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageShake_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageShake::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageShake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&command_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&command_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageShake::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageShake*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 command = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_command(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float amplitude = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_amplitude(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float frequency = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_frequency(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float duration = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_duration(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageShake::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageShake)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 command = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_command(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &command_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float amplitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_amplitude(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &amplitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float frequency = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_frequency(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frequency_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageShake)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageShake)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageShake::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageShake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 command = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->command(), output);
  }

  // optional float amplitude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->amplitude(), output);
  }

  // optional float frequency = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->frequency(), output);
  }

  // optional float duration = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageShake)
}

::google::protobuf::uint8* CUserMessageShake::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageShake)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 command = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->command(), target);
  }

  // optional float amplitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->amplitude(), target);
  }

  // optional float frequency = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->frequency(), target);
  }

  // optional float duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageShake)
  return target;
}

size_t CUserMessageShake::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageShake)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 command = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->command());
    }

    // optional float amplitude = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float frequency = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float duration = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageShake::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageShake)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageShake* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageShake>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageShake)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageShake)
    MergeFrom(*source);
  }
}

void CUserMessageShake::MergeFrom(const CUserMessageShake& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageShake)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      command_ = from.command_;
    }
    if (cached_has_bits & 0x00000002u) {
      amplitude_ = from.amplitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      frequency_ = from.frequency_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageShake::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageShake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageShake::CopyFrom(const CUserMessageShake& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageShake)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageShake::IsInitialized() const {
  return true;
}

void CUserMessageShake::Swap(CUserMessageShake* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageShake::InternalSwap(CUserMessageShake* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(command_, other->command_);
  swap(amplitude_, other->amplitude_);
  swap(frequency_, other->frequency_);
  swap(duration_, other->duration_);
}

::google::protobuf::Metadata CUserMessageShake::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageShakeDir::InitAsDefaultInstance() {
  ::proto::dota::_CUserMessageShakeDir_default_instance_._instance.get_mutable()->shake_ = const_cast< ::proto::dota::CUserMessageShake*>(
      ::proto::dota::CUserMessageShake::internal_default_instance());
  ::proto::dota::_CUserMessageShakeDir_default_instance_._instance.get_mutable()->direction_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
}
class CUserMessageShakeDir::HasBitSetters {
 public:
  static const ::proto::dota::CUserMessageShake& shake(const CUserMessageShakeDir* msg);
  static void set_has_shake(CUserMessageShakeDir* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::dota::CMsgVector& direction(const CUserMessageShakeDir* msg);
  static void set_has_direction(CUserMessageShakeDir* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::proto::dota::CUserMessageShake&
CUserMessageShakeDir::HasBitSetters::shake(const CUserMessageShakeDir* msg) {
  return *msg->shake_;
}
const ::proto::dota::CMsgVector&
CUserMessageShakeDir::HasBitSetters::direction(const CUserMessageShakeDir* msg) {
  return *msg->direction_;
}
void CUserMessageShakeDir::clear_direction() {
  if (direction_ != nullptr) direction_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageShakeDir::kShakeFieldNumber;
const int CUserMessageShakeDir::kDirectionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageShakeDir::CUserMessageShakeDir()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageShakeDir)
}
CUserMessageShakeDir::CUserMessageShakeDir(const CUserMessageShakeDir& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shake()) {
    shake_ = new ::proto::dota::CUserMessageShake(*from.shake_);
  } else {
    shake_ = nullptr;
  }
  if (from.has_direction()) {
    direction_ = new ::proto::dota::CMsgVector(*from.direction_);
  } else {
    direction_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageShakeDir)
}

void CUserMessageShakeDir::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMessageShakeDir_usermessages_2eproto.base);
  ::memset(&shake_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&shake_)) + sizeof(direction_));
}

CUserMessageShakeDir::~CUserMessageShakeDir() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageShakeDir)
  SharedDtor();
}

void CUserMessageShakeDir::SharedDtor() {
  if (this != internal_default_instance()) delete shake_;
  if (this != internal_default_instance()) delete direction_;
}

void CUserMessageShakeDir::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageShakeDir& CUserMessageShakeDir::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageShakeDir_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageShakeDir::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageShakeDir)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(shake_ != nullptr);
      shake_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(direction_ != nullptr);
      direction_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageShakeDir::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageShakeDir*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CUserMessageShake shake = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CUserMessageShake::_InternalParse;
        object = msg->mutable_shake();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgVector direction = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgVector::_InternalParse;
        object = msg->mutable_direction();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageShakeDir::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageShakeDir)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CUserMessageShake shake = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_shake()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector direction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_direction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageShakeDir)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageShakeDir)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageShakeDir::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageShakeDir)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CUserMessageShake shake = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::shake(this), output);
  }

  // optional .proto.dota.CMsgVector direction = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::direction(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageShakeDir)
}

::google::protobuf::uint8* CUserMessageShakeDir::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageShakeDir)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CUserMessageShake shake = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::shake(this), target);
  }

  // optional .proto.dota.CMsgVector direction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::direction(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageShakeDir)
  return target;
}

size_t CUserMessageShakeDir::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageShakeDir)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CUserMessageShake shake = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *shake_);
    }

    // optional .proto.dota.CMsgVector direction = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *direction_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageShakeDir::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageShakeDir)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageShakeDir* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageShakeDir>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageShakeDir)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageShakeDir)
    MergeFrom(*source);
  }
}

void CUserMessageShakeDir::MergeFrom(const CUserMessageShakeDir& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageShakeDir)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_shake()->::proto::dota::CUserMessageShake::MergeFrom(from.shake());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_direction()->::proto::dota::CMsgVector::MergeFrom(from.direction());
    }
  }
}

void CUserMessageShakeDir::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageShakeDir)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageShakeDir::CopyFrom(const CUserMessageShakeDir& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageShakeDir)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageShakeDir::IsInitialized() const {
  return true;
}

void CUserMessageShakeDir::Swap(CUserMessageShakeDir* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageShakeDir::InternalSwap(CUserMessageShakeDir* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(shake_, other->shake_);
  swap(direction_, other->direction_);
}

::google::protobuf::Metadata CUserMessageShakeDir::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageScreenTilt::InitAsDefaultInstance() {
  ::proto::dota::_CUserMessageScreenTilt_default_instance_._instance.get_mutable()->angle_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
}
class CUserMessageScreenTilt::HasBitSetters {
 public:
  static void set_has_command(CUserMessageScreenTilt* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_ease_in_out(CUserMessageScreenTilt* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::proto::dota::CMsgVector& angle(const CUserMessageScreenTilt* msg);
  static void set_has_angle(CUserMessageScreenTilt* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_duration(CUserMessageScreenTilt* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_time(CUserMessageScreenTilt* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

const ::proto::dota::CMsgVector&
CUserMessageScreenTilt::HasBitSetters::angle(const CUserMessageScreenTilt* msg) {
  return *msg->angle_;
}
void CUserMessageScreenTilt::clear_angle() {
  if (angle_ != nullptr) angle_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageScreenTilt::kCommandFieldNumber;
const int CUserMessageScreenTilt::kEaseInOutFieldNumber;
const int CUserMessageScreenTilt::kAngleFieldNumber;
const int CUserMessageScreenTilt::kDurationFieldNumber;
const int CUserMessageScreenTilt::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageScreenTilt::CUserMessageScreenTilt()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageScreenTilt)
}
CUserMessageScreenTilt::CUserMessageScreenTilt(const CUserMessageScreenTilt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_angle()) {
    angle_ = new ::proto::dota::CMsgVector(*from.angle_);
  } else {
    angle_ = nullptr;
  }
  ::memcpy(&command_, &from.command_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_) -
    reinterpret_cast<char*>(&command_)) + sizeof(time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageScreenTilt)
}

void CUserMessageScreenTilt::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMessageScreenTilt_usermessages_2eproto.base);
  ::memset(&angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_) -
      reinterpret_cast<char*>(&angle_)) + sizeof(time_));
}

CUserMessageScreenTilt::~CUserMessageScreenTilt() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageScreenTilt)
  SharedDtor();
}

void CUserMessageScreenTilt::SharedDtor() {
  if (this != internal_default_instance()) delete angle_;
}

void CUserMessageScreenTilt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageScreenTilt& CUserMessageScreenTilt::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageScreenTilt_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageScreenTilt::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageScreenTilt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(angle_ != nullptr);
    angle_->Clear();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&command_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&time_) -
        reinterpret_cast<char*>(&command_)) + sizeof(time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageScreenTilt::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageScreenTilt*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 command = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_command(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool ease_in_out = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_ease_in_out(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgVector angle = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgVector::_InternalParse;
        object = msg->mutable_angle();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional float duration = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_duration(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float time = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_time(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageScreenTilt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageScreenTilt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 command = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_command(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &command_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ease_in_out = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_ease_in_out(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ease_in_out_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector angle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageScreenTilt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageScreenTilt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageScreenTilt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageScreenTilt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 command = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->command(), output);
  }

  // optional bool ease_in_out = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ease_in_out(), output);
  }

  // optional .proto.dota.CMsgVector angle = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::angle(this), output);
  }

  // optional float duration = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->duration(), output);
  }

  // optional float time = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageScreenTilt)
}

::google::protobuf::uint8* CUserMessageScreenTilt::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageScreenTilt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 command = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->command(), target);
  }

  // optional bool ease_in_out = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ease_in_out(), target);
  }

  // optional .proto.dota.CMsgVector angle = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::angle(this), target);
  }

  // optional float duration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->duration(), target);
  }

  // optional float time = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageScreenTilt)
  return target;
}

size_t CUserMessageScreenTilt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageScreenTilt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .proto.dota.CMsgVector angle = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *angle_);
    }

    // optional uint32 command = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->command());
    }

    // optional bool ease_in_out = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional float duration = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float time = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageScreenTilt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageScreenTilt)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageScreenTilt* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageScreenTilt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageScreenTilt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageScreenTilt)
    MergeFrom(*source);
  }
}

void CUserMessageScreenTilt::MergeFrom(const CUserMessageScreenTilt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageScreenTilt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_angle()->::proto::dota::CMsgVector::MergeFrom(from.angle());
    }
    if (cached_has_bits & 0x00000002u) {
      command_ = from.command_;
    }
    if (cached_has_bits & 0x00000004u) {
      ease_in_out_ = from.ease_in_out_;
    }
    if (cached_has_bits & 0x00000008u) {
      duration_ = from.duration_;
    }
    if (cached_has_bits & 0x00000010u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageScreenTilt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageScreenTilt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageScreenTilt::CopyFrom(const CUserMessageScreenTilt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageScreenTilt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageScreenTilt::IsInitialized() const {
  return true;
}

void CUserMessageScreenTilt::Swap(CUserMessageScreenTilt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageScreenTilt::InternalSwap(CUserMessageScreenTilt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(angle_, other->angle_);
  swap(command_, other->command_);
  swap(ease_in_out_, other->ease_in_out_);
  swap(duration_, other->duration_);
  swap(time_, other->time_);
}

::google::protobuf::Metadata CUserMessageScreenTilt::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageSayText::InitAsDefaultInstance() {
}
class CUserMessageSayText::HasBitSetters {
 public:
  static void set_has_playerindex(CUserMessageSayText* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_text(CUserMessageSayText* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_chat(CUserMessageSayText* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageSayText::kPlayerindexFieldNumber;
const int CUserMessageSayText::kTextFieldNumber;
const int CUserMessageSayText::kChatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageSayText::CUserMessageSayText()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageSayText)
}
CUserMessageSayText::CUserMessageSayText(const CUserMessageSayText& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&playerindex_, &from.playerindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_) -
    reinterpret_cast<char*>(&playerindex_)) + sizeof(chat_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageSayText)
}

void CUserMessageSayText::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMessageSayText_usermessages_2eproto.base);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&playerindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_) -
      reinterpret_cast<char*>(&playerindex_)) + sizeof(chat_));
}

CUserMessageSayText::~CUserMessageSayText() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageSayText)
  SharedDtor();
}

void CUserMessageSayText::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageSayText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageSayText& CUserMessageSayText::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageSayText_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageSayText::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageSayText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&playerindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_) -
        reinterpret_cast<char*>(&playerindex_)) + sizeof(chat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageSayText::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageSayText*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 playerindex = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_playerindex(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string text = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CUserMessageSayText.text");
        object = msg->mutable_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool chat = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_chat(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageSayText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageSayText)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 playerindex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_playerindex(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageSayText.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool chat = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_chat(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageSayText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageSayText)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageSayText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageSayText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 playerindex = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerindex(), output);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayText.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // optional bool chat = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->chat(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageSayText)
}

::google::protobuf::uint8* CUserMessageSayText::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageSayText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 playerindex = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerindex(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayText.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // optional bool chat = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->chat(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageSayText)
  return target;
}

size_t CUserMessageSayText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageSayText)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint32 playerindex = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerindex());
    }

    // optional bool chat = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageSayText::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageSayText)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageSayText* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageSayText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageSayText)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageSayText)
    MergeFrom(*source);
  }
}

void CUserMessageSayText::MergeFrom(const CUserMessageSayText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageSayText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      playerindex_ = from.playerindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      chat_ = from.chat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageSayText::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageSayText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageSayText::CopyFrom(const CUserMessageSayText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageSayText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageSayText::IsInitialized() const {
  return true;
}

void CUserMessageSayText::Swap(CUserMessageSayText* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageSayText::InternalSwap(CUserMessageSayText* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(playerindex_, other->playerindex_);
  swap(chat_, other->chat_);
}

::google::protobuf::Metadata CUserMessageSayText::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageSayText2::InitAsDefaultInstance() {
}
class CUserMessageSayText2::HasBitSetters {
 public:
  static void set_has_entityindex(CUserMessageSayText2* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_chat(CUserMessageSayText2* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_messagename(CUserMessageSayText2* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_param1(CUserMessageSayText2* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_param2(CUserMessageSayText2* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_param3(CUserMessageSayText2* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_param4(CUserMessageSayText2* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageSayText2::kEntityindexFieldNumber;
const int CUserMessageSayText2::kChatFieldNumber;
const int CUserMessageSayText2::kMessagenameFieldNumber;
const int CUserMessageSayText2::kParam1FieldNumber;
const int CUserMessageSayText2::kParam2FieldNumber;
const int CUserMessageSayText2::kParam3FieldNumber;
const int CUserMessageSayText2::kParam4FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageSayText2::CUserMessageSayText2()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageSayText2)
}
CUserMessageSayText2::CUserMessageSayText2(const CUserMessageSayText2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  messagename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_messagename()) {
    messagename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messagename_);
  }
  param1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_param1()) {
    param1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param1_);
  }
  param2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_param2()) {
    param2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param2_);
  }
  param3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_param3()) {
    param3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param3_);
  }
  param4_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_param4()) {
    param4_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param4_);
  }
  ::memcpy(&entityindex_, &from.entityindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_) -
    reinterpret_cast<char*>(&entityindex_)) + sizeof(chat_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageSayText2)
}

void CUserMessageSayText2::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMessageSayText2_usermessages_2eproto.base);
  messagename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param4_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&entityindex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_) -
      reinterpret_cast<char*>(&entityindex_)) + sizeof(chat_));
}

CUserMessageSayText2::~CUserMessageSayText2() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageSayText2)
  SharedDtor();
}

void CUserMessageSayText2::SharedDtor() {
  messagename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param3_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  param4_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageSayText2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageSayText2& CUserMessageSayText2::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageSayText2_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageSayText2::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageSayText2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      messagename_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      param1_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      param2_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      param3_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      param4_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000060u) {
    ::memset(&entityindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&chat_) -
        reinterpret_cast<char*>(&entityindex_)) + sizeof(chat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageSayText2::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageSayText2*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 entityindex = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_entityindex(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool chat = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_chat(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string messagename = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CUserMessageSayText2.messagename");
        object = msg->mutable_messagename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string param1 = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CUserMessageSayText2.param1");
        object = msg->mutable_param1();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string param2 = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CUserMessageSayText2.param2");
        object = msg->mutable_param2();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string param3 = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CUserMessageSayText2.param3");
        object = msg->mutable_param3();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string param4 = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CUserMessageSayText2.param4");
        object = msg->mutable_param4();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageSayText2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageSayText2)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 entityindex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_entityindex(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entityindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool chat = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_chat(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &chat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string messagename = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messagename().data(), static_cast<int>(this->messagename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageSayText2.messagename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string param1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param1().data(), static_cast<int>(this->param1().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageSayText2.param1");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string param2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param2().data(), static_cast<int>(this->param2().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageSayText2.param2");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string param3 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param3().data(), static_cast<int>(this->param3().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageSayText2.param3");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string param4 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_param4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param4().data(), static_cast<int>(this->param4().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageSayText2.param4");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageSayText2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageSayText2)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageSayText2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageSayText2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 entityindex = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->entityindex(), output);
  }

  // optional bool chat = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->chat(), output);
  }

  // optional string messagename = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagename().data(), static_cast<int>(this->messagename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayText2.messagename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->messagename(), output);
  }

  // optional string param1 = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param1().data(), static_cast<int>(this->param1().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayText2.param1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->param1(), output);
  }

  // optional string param2 = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param2().data(), static_cast<int>(this->param2().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayText2.param2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->param2(), output);
  }

  // optional string param3 = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param3().data(), static_cast<int>(this->param3().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayText2.param3");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->param3(), output);
  }

  // optional string param4 = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param4().data(), static_cast<int>(this->param4().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayText2.param4");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->param4(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageSayText2)
}

::google::protobuf::uint8* CUserMessageSayText2::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageSayText2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 entityindex = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->entityindex(), target);
  }

  // optional bool chat = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->chat(), target);
  }

  // optional string messagename = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagename().data(), static_cast<int>(this->messagename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayText2.messagename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->messagename(), target);
  }

  // optional string param1 = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param1().data(), static_cast<int>(this->param1().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayText2.param1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->param1(), target);
  }

  // optional string param2 = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param2().data(), static_cast<int>(this->param2().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayText2.param2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->param2(), target);
  }

  // optional string param3 = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param3().data(), static_cast<int>(this->param3().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayText2.param3");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->param3(), target);
  }

  // optional string param4 = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param4().data(), static_cast<int>(this->param4().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayText2.param4");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->param4(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageSayText2)
  return target;
}

size_t CUserMessageSayText2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageSayText2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string messagename = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messagename());
    }

    // optional string param1 = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param1());
    }

    // optional string param2 = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param2());
    }

    // optional string param3 = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param3());
    }

    // optional string param4 = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->param4());
    }

    // optional uint32 entityindex = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entityindex());
    }

    // optional bool chat = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageSayText2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageSayText2)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageSayText2* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageSayText2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageSayText2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageSayText2)
    MergeFrom(*source);
  }
}

void CUserMessageSayText2::MergeFrom(const CUserMessageSayText2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageSayText2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      messagename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messagename_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      param1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param1_);
    }
    if (cached_has_bits & 0x00000004u) {
      _has_bits_[0] |= 0x00000004u;
      param2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param2_);
    }
    if (cached_has_bits & 0x00000008u) {
      _has_bits_[0] |= 0x00000008u;
      param3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param3_);
    }
    if (cached_has_bits & 0x00000010u) {
      _has_bits_[0] |= 0x00000010u;
      param4_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.param4_);
    }
    if (cached_has_bits & 0x00000020u) {
      entityindex_ = from.entityindex_;
    }
    if (cached_has_bits & 0x00000040u) {
      chat_ = from.chat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageSayText2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageSayText2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageSayText2::CopyFrom(const CUserMessageSayText2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageSayText2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageSayText2::IsInitialized() const {
  return true;
}

void CUserMessageSayText2::Swap(CUserMessageSayText2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageSayText2::InternalSwap(CUserMessageSayText2* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  messagename_.Swap(&other->messagename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  param1_.Swap(&other->param1_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  param2_.Swap(&other->param2_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  param3_.Swap(&other->param3_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  param4_.Swap(&other->param4_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(entityindex_, other->entityindex_);
  swap(chat_, other->chat_);
}

::google::protobuf::Metadata CUserMessageSayText2::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageHudMsg::InitAsDefaultInstance() {
}
class CUserMessageHudMsg::HasBitSetters {
 public:
  static void set_has_channel(CUserMessageHudMsg* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_x(CUserMessageHudMsg* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_y(CUserMessageHudMsg* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_color1(CUserMessageHudMsg* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_color2(CUserMessageHudMsg* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_effect(CUserMessageHudMsg* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static void set_has_fade_in_time(CUserMessageHudMsg* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static void set_has_fade_out_time(CUserMessageHudMsg* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static void set_has_hold_time(CUserMessageHudMsg* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static void set_has_fx_time(CUserMessageHudMsg* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static void set_has_message(CUserMessageHudMsg* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageHudMsg::kChannelFieldNumber;
const int CUserMessageHudMsg::kXFieldNumber;
const int CUserMessageHudMsg::kYFieldNumber;
const int CUserMessageHudMsg::kColor1FieldNumber;
const int CUserMessageHudMsg::kColor2FieldNumber;
const int CUserMessageHudMsg::kEffectFieldNumber;
const int CUserMessageHudMsg::kFadeInTimeFieldNumber;
const int CUserMessageHudMsg::kFadeOutTimeFieldNumber;
const int CUserMessageHudMsg::kHoldTimeFieldNumber;
const int CUserMessageHudMsg::kFxTimeFieldNumber;
const int CUserMessageHudMsg::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageHudMsg::CUserMessageHudMsg()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageHudMsg)
}
CUserMessageHudMsg::CUserMessageHudMsg(const CUserMessageHudMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  ::memcpy(&channel_, &from.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&fx_time_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(fx_time_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageHudMsg)
}

void CUserMessageHudMsg::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMessageHudMsg_usermessages_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fx_time_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(fx_time_));
}

CUserMessageHudMsg::~CUserMessageHudMsg() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageHudMsg)
  SharedDtor();
}

void CUserMessageHudMsg::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageHudMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageHudMsg& CUserMessageHudMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageHudMsg_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageHudMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageHudMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&channel_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fade_in_time_) -
        reinterpret_cast<char*>(&channel_)) + sizeof(fade_in_time_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&fade_out_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fx_time_) -
        reinterpret_cast<char*>(&fade_out_time_)) + sizeof(fx_time_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageHudMsg::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageHudMsg*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 channel = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_channel(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float x = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_x(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float y = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_y(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional fixed32 color1 = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_color1(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional fixed32 color2 = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 45) goto handle_unusual;
        msg->set_color2(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 effect = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_effect(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float fade_in_time = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_fade_in_time(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float fade_out_time = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 69) goto handle_unusual;
        msg->set_fade_out_time(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float hold_time = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 77) goto handle_unusual;
        msg->set_hold_time(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float fx_time = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 85) goto handle_unusual;
        msg->set_fx_time(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional string message = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CUserMessageHudMsg.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageHudMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageHudMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 channel = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_channel(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_x(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_y(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 color1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_color1(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &color1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 color2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (45 & 0xFF)) {
          HasBitSetters::set_has_color2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &color2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 effect = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_effect(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &effect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fade_in_time = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_fade_in_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fade_in_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fade_out_time = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (69 & 0xFF)) {
          HasBitSetters::set_has_fade_out_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fade_out_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float hold_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (77 & 0xFF)) {
          HasBitSetters::set_has_hold_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hold_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fx_time = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (85 & 0xFF)) {
          HasBitSetters::set_has_fx_time(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fx_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string message = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageHudMsg.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageHudMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageHudMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageHudMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageHudMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->channel(), output);
  }

  // optional float x = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // optional float y = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // optional fixed32 color1 = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->color1(), output);
  }

  // optional fixed32 color2 = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->color2(), output);
  }

  // optional uint32 effect = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->effect(), output);
  }

  // optional float fade_in_time = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fade_in_time(), output);
  }

  // optional float fade_out_time = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->fade_out_time(), output);
  }

  // optional float hold_time = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->hold_time(), output);
  }

  // optional float fx_time = 10;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->fx_time(), output);
  }

  // optional string message = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageHudMsg.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageHudMsg)
}

::google::protobuf::uint8* CUserMessageHudMsg::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageHudMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 channel = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->channel(), target);
  }

  // optional float x = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // optional float y = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // optional fixed32 color1 = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->color1(), target);
  }

  // optional fixed32 color2 = 5;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(5, this->color2(), target);
  }

  // optional uint32 effect = 6;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->effect(), target);
  }

  // optional float fade_in_time = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->fade_in_time(), target);
  }

  // optional float fade_out_time = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->fade_out_time(), target);
  }

  // optional float hold_time = 9;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->hold_time(), target);
  }

  // optional float fx_time = 10;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->fx_time(), target);
  }

  // optional string message = 11;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageHudMsg.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageHudMsg)
  return target;
}

size_t CUserMessageHudMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageHudMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string message = 11;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->message());
    }

    // optional uint32 channel = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->channel());
    }

    // optional float x = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float y = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional fixed32 color1 = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional fixed32 color2 = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 effect = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->effect());
    }

    // optional float fade_in_time = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional float fade_out_time = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float hold_time = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float fx_time = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageHudMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageHudMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageHudMsg* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageHudMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageHudMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageHudMsg)
    MergeFrom(*source);
  }
}

void CUserMessageHudMsg::MergeFrom(const CUserMessageHudMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageHudMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000002u) {
      channel_ = from.channel_;
    }
    if (cached_has_bits & 0x00000004u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000010u) {
      color1_ = from.color1_;
    }
    if (cached_has_bits & 0x00000020u) {
      color2_ = from.color2_;
    }
    if (cached_has_bits & 0x00000040u) {
      effect_ = from.effect_;
    }
    if (cached_has_bits & 0x00000080u) {
      fade_in_time_ = from.fade_in_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      fade_out_time_ = from.fade_out_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      hold_time_ = from.hold_time_;
    }
    if (cached_has_bits & 0x00000400u) {
      fx_time_ = from.fx_time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageHudMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageHudMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageHudMsg::CopyFrom(const CUserMessageHudMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageHudMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageHudMsg::IsInitialized() const {
  return true;
}

void CUserMessageHudMsg::Swap(CUserMessageHudMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageHudMsg::InternalSwap(CUserMessageHudMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(channel_, other->channel_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(color1_, other->color1_);
  swap(color2_, other->color2_);
  swap(effect_, other->effect_);
  swap(fade_in_time_, other->fade_in_time_);
  swap(fade_out_time_, other->fade_out_time_);
  swap(hold_time_, other->hold_time_);
  swap(fx_time_, other->fx_time_);
}

::google::protobuf::Metadata CUserMessageHudMsg::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageHudText::InitAsDefaultInstance() {
}
class CUserMessageHudText::HasBitSetters {
 public:
  static void set_has_message(CUserMessageHudText* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageHudText::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageHudText::CUserMessageHudText()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageHudText)
}
CUserMessageHudText::CUserMessageHudText(const CUserMessageHudText& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageHudText)
}

void CUserMessageHudText::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMessageHudText_usermessages_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CUserMessageHudText::~CUserMessageHudText() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageHudText)
  SharedDtor();
}

void CUserMessageHudText::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageHudText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageHudText& CUserMessageHudText::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageHudText_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageHudText::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageHudText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageHudText::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageHudText*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string message = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CUserMessageHudText.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageHudText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageHudText)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageHudText.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageHudText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageHudText)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageHudText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageHudText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageHudText.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageHudText)
}

::google::protobuf::uint8* CUserMessageHudText::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageHudText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageHudText.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageHudText)
  return target;
}

size_t CUserMessageHudText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageHudText)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageHudText::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageHudText)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageHudText* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageHudText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageHudText)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageHudText)
    MergeFrom(*source);
  }
}

void CUserMessageHudText::MergeFrom(const CUserMessageHudText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageHudText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message()) {
    _has_bits_[0] |= 0x00000001u;
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void CUserMessageHudText::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageHudText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageHudText::CopyFrom(const CUserMessageHudText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageHudText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageHudText::IsInitialized() const {
  return true;
}

void CUserMessageHudText::Swap(CUserMessageHudText* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageHudText::InternalSwap(CUserMessageHudText* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CUserMessageHudText::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageTextMsg::InitAsDefaultInstance() {
}
class CUserMessageTextMsg::HasBitSetters {
 public:
  static void set_has_dest(CUserMessageTextMsg* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageTextMsg::kDestFieldNumber;
const int CUserMessageTextMsg::kParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageTextMsg::CUserMessageTextMsg()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageTextMsg)
}
CUserMessageTextMsg::CUserMessageTextMsg(const CUserMessageTextMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      param_(from.param_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dest_ = from.dest_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageTextMsg)
}

void CUserMessageTextMsg::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMessageTextMsg_usermessages_2eproto.base);
  dest_ = 0u;
}

CUserMessageTextMsg::~CUserMessageTextMsg() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageTextMsg)
  SharedDtor();
}

void CUserMessageTextMsg::SharedDtor() {
}

void CUserMessageTextMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageTextMsg& CUserMessageTextMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageTextMsg_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageTextMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageTextMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  param_.Clear();
  dest_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageTextMsg::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageTextMsg*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 dest = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_dest(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated string param = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.dota.CUserMessageTextMsg.param");
          object = msg->add_param();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 18 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageTextMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageTextMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dest = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_dest(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dest_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string param = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_param()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->param(this->param_size() - 1).data(),
            static_cast<int>(this->param(this->param_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageTextMsg.param");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageTextMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageTextMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageTextMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageTextMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dest = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dest(), output);
  }

  // repeated string param = 2;
  for (int i = 0, n = this->param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param(i).data(), static_cast<int>(this->param(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageTextMsg.param");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->param(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageTextMsg)
}

::google::protobuf::uint8* CUserMessageTextMsg::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageTextMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 dest = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dest(), target);
  }

  // repeated string param = 2;
  for (int i = 0, n = this->param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->param(i).data(), static_cast<int>(this->param(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageTextMsg.param");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->param(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageTextMsg)
  return target;
}

size_t CUserMessageTextMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageTextMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string param = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->param_size());
  for (int i = 0, n = this->param_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->param(i));
  }

  // optional uint32 dest = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dest());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageTextMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageTextMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageTextMsg* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageTextMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageTextMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageTextMsg)
    MergeFrom(*source);
  }
}

void CUserMessageTextMsg::MergeFrom(const CUserMessageTextMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageTextMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  param_.MergeFrom(from.param_);
  if (from.has_dest()) {
    set_dest(from.dest());
  }
}

void CUserMessageTextMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageTextMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageTextMsg::CopyFrom(const CUserMessageTextMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageTextMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageTextMsg::IsInitialized() const {
  return true;
}

void CUserMessageTextMsg::Swap(CUserMessageTextMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageTextMsg::InternalSwap(CUserMessageTextMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  param_.InternalSwap(CastToBase(&other->param_));
  swap(dest_, other->dest_);
}

::google::protobuf::Metadata CUserMessageTextMsg::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageGameTitle::InitAsDefaultInstance() {
}
class CUserMessageGameTitle::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageGameTitle::CUserMessageGameTitle()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageGameTitle)
}
CUserMessageGameTitle::CUserMessageGameTitle(const CUserMessageGameTitle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageGameTitle)
}

void CUserMessageGameTitle::SharedCtor() {
}

CUserMessageGameTitle::~CUserMessageGameTitle() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageGameTitle)
  SharedDtor();
}

void CUserMessageGameTitle::SharedDtor() {
}

void CUserMessageGameTitle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageGameTitle& CUserMessageGameTitle::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageGameTitle_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageGameTitle::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageGameTitle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageGameTitle::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageGameTitle*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageGameTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageGameTitle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageGameTitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageGameTitle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageGameTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageGameTitle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageGameTitle)
}

::google::protobuf::uint8* CUserMessageGameTitle::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageGameTitle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageGameTitle)
  return target;
}

size_t CUserMessageGameTitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageGameTitle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageGameTitle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageGameTitle)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageGameTitle* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageGameTitle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageGameTitle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageGameTitle)
    MergeFrom(*source);
  }
}

void CUserMessageGameTitle::MergeFrom(const CUserMessageGameTitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageGameTitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CUserMessageGameTitle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageGameTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageGameTitle::CopyFrom(const CUserMessageGameTitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageGameTitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageGameTitle::IsInitialized() const {
  return true;
}

void CUserMessageGameTitle::Swap(CUserMessageGameTitle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageGameTitle::InternalSwap(CUserMessageGameTitle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CUserMessageGameTitle::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageResetHUD::InitAsDefaultInstance() {
}
class CUserMessageResetHUD::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageResetHUD::CUserMessageResetHUD()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageResetHUD)
}
CUserMessageResetHUD::CUserMessageResetHUD(const CUserMessageResetHUD& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageResetHUD)
}

void CUserMessageResetHUD::SharedCtor() {
}

CUserMessageResetHUD::~CUserMessageResetHUD() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageResetHUD)
  SharedDtor();
}

void CUserMessageResetHUD::SharedDtor() {
}

void CUserMessageResetHUD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageResetHUD& CUserMessageResetHUD::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageResetHUD_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageResetHUD::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageResetHUD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageResetHUD::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageResetHUD*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageResetHUD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageResetHUD)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageResetHUD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageResetHUD)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageResetHUD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageResetHUD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageResetHUD)
}

::google::protobuf::uint8* CUserMessageResetHUD::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageResetHUD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageResetHUD)
  return target;
}

size_t CUserMessageResetHUD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageResetHUD)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageResetHUD::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageResetHUD)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageResetHUD* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageResetHUD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageResetHUD)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageResetHUD)
    MergeFrom(*source);
  }
}

void CUserMessageResetHUD::MergeFrom(const CUserMessageResetHUD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageResetHUD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CUserMessageResetHUD::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageResetHUD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageResetHUD::CopyFrom(const CUserMessageResetHUD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageResetHUD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageResetHUD::IsInitialized() const {
  return true;
}

void CUserMessageResetHUD::Swap(CUserMessageResetHUD* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageResetHUD::InternalSwap(CUserMessageResetHUD* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CUserMessageResetHUD::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageSendAudio::InitAsDefaultInstance() {
}
class CUserMessageSendAudio::HasBitSetters {
 public:
  static void set_has_soundname(CUserMessageSendAudio* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_stop(CUserMessageSendAudio* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageSendAudio::kSoundnameFieldNumber;
const int CUserMessageSendAudio::kStopFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageSendAudio::CUserMessageSendAudio()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageSendAudio)
}
CUserMessageSendAudio::CUserMessageSendAudio(const CUserMessageSendAudio& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  soundname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_soundname()) {
    soundname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.soundname_);
  }
  stop_ = from.stop_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageSendAudio)
}

void CUserMessageSendAudio::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMessageSendAudio_usermessages_2eproto.base);
  soundname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stop_ = false;
}

CUserMessageSendAudio::~CUserMessageSendAudio() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageSendAudio)
  SharedDtor();
}

void CUserMessageSendAudio::SharedDtor() {
  soundname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageSendAudio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageSendAudio& CUserMessageSendAudio::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageSendAudio_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageSendAudio::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageSendAudio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    soundname_.ClearNonDefaultToEmptyNoArena();
  }
  stop_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageSendAudio::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageSendAudio*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string soundname = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CUserMessageSendAudio.soundname");
        object = msg->mutable_soundname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool stop = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_stop(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageSendAudio::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageSendAudio)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string soundname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_soundname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->soundname().data(), static_cast<int>(this->soundname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageSendAudio.soundname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool stop = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_stop(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageSendAudio)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageSendAudio)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageSendAudio::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageSendAudio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string soundname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->soundname().data(), static_cast<int>(this->soundname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSendAudio.soundname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->soundname(), output);
  }

  // optional bool stop = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->stop(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageSendAudio)
}

::google::protobuf::uint8* CUserMessageSendAudio::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageSendAudio)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string soundname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->soundname().data(), static_cast<int>(this->soundname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSendAudio.soundname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->soundname(), target);
  }

  // optional bool stop = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->stop(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageSendAudio)
  return target;
}

size_t CUserMessageSendAudio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageSendAudio)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string soundname = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->soundname());
    }

    // optional bool stop = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageSendAudio::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageSendAudio)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageSendAudio* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageSendAudio>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageSendAudio)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageSendAudio)
    MergeFrom(*source);
  }
}

void CUserMessageSendAudio::MergeFrom(const CUserMessageSendAudio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageSendAudio)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      soundname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.soundname_);
    }
    if (cached_has_bits & 0x00000002u) {
      stop_ = from.stop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageSendAudio::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageSendAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageSendAudio::CopyFrom(const CUserMessageSendAudio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageSendAudio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageSendAudio::IsInitialized() const {
  return true;
}

void CUserMessageSendAudio::Swap(CUserMessageSendAudio* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageSendAudio::InternalSwap(CUserMessageSendAudio* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  soundname_.Swap(&other->soundname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stop_, other->stop_);
}

::google::protobuf::Metadata CUserMessageSendAudio::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageAudioParameter::InitAsDefaultInstance() {
}
class CUserMessageAudioParameter::HasBitSetters {
 public:
  static void set_has_parameter_type(CUserMessageAudioParameter* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_name_hash_code(CUserMessageAudioParameter* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_value(CUserMessageAudioParameter* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_int_value(CUserMessageAudioParameter* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageAudioParameter::kParameterTypeFieldNumber;
const int CUserMessageAudioParameter::kNameHashCodeFieldNumber;
const int CUserMessageAudioParameter::kValueFieldNumber;
const int CUserMessageAudioParameter::kIntValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageAudioParameter::CUserMessageAudioParameter()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageAudioParameter)
}
CUserMessageAudioParameter::CUserMessageAudioParameter(const CUserMessageAudioParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&parameter_type_, &from.parameter_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&int_value_) -
    reinterpret_cast<char*>(&parameter_type_)) + sizeof(int_value_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageAudioParameter)
}

void CUserMessageAudioParameter::SharedCtor() {
  ::memset(&parameter_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&int_value_) -
      reinterpret_cast<char*>(&parameter_type_)) + sizeof(int_value_));
}

CUserMessageAudioParameter::~CUserMessageAudioParameter() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageAudioParameter)
  SharedDtor();
}

void CUserMessageAudioParameter::SharedDtor() {
}

void CUserMessageAudioParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageAudioParameter& CUserMessageAudioParameter::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageAudioParameter_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageAudioParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageAudioParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&parameter_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&int_value_) -
        reinterpret_cast<char*>(&parameter_type_)) + sizeof(int_value_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageAudioParameter::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageAudioParameter*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 parameter_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_parameter_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 name_hash_code = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_name_hash_code(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float value = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_value(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional uint32 int_value = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_int_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageAudioParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageAudioParameter)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 parameter_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_parameter_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parameter_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 name_hash_code = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_name_hash_code(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_hash_code_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 int_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_int_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &int_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageAudioParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageAudioParameter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageAudioParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageAudioParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 parameter_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->parameter_type(), output);
  }

  // optional uint32 name_hash_code = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->name_hash_code(), output);
  }

  // optional float value = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->value(), output);
  }

  // optional uint32 int_value = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->int_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageAudioParameter)
}

::google::protobuf::uint8* CUserMessageAudioParameter::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageAudioParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 parameter_type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->parameter_type(), target);
  }

  // optional uint32 name_hash_code = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->name_hash_code(), target);
  }

  // optional float value = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->value(), target);
  }

  // optional uint32 int_value = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->int_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageAudioParameter)
  return target;
}

size_t CUserMessageAudioParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageAudioParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional uint32 parameter_type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parameter_type());
    }

    // optional uint32 name_hash_code = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->name_hash_code());
    }

    // optional float value = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional uint32 int_value = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->int_value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageAudioParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageAudioParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageAudioParameter* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageAudioParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageAudioParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageAudioParameter)
    MergeFrom(*source);
  }
}

void CUserMessageAudioParameter::MergeFrom(const CUserMessageAudioParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageAudioParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      parameter_type_ = from.parameter_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      name_hash_code_ = from.name_hash_code_;
    }
    if (cached_has_bits & 0x00000004u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000008u) {
      int_value_ = from.int_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageAudioParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageAudioParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageAudioParameter::CopyFrom(const CUserMessageAudioParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageAudioParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageAudioParameter::IsInitialized() const {
  return true;
}

void CUserMessageAudioParameter::Swap(CUserMessageAudioParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageAudioParameter::InternalSwap(CUserMessageAudioParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(parameter_type_, other->parameter_type_);
  swap(name_hash_code_, other->name_hash_code_);
  swap(value_, other->value_);
  swap(int_value_, other->int_value_);
}

::google::protobuf::Metadata CUserMessageAudioParameter::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageVoiceMask::InitAsDefaultInstance() {
}
class CUserMessageVoiceMask::HasBitSetters {
 public:
  static void set_has_mod_enable(CUserMessageVoiceMask* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageVoiceMask::kGamerulesMasksFieldNumber;
const int CUserMessageVoiceMask::kBanMasksFieldNumber;
const int CUserMessageVoiceMask::kModEnableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageVoiceMask::CUserMessageVoiceMask()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageVoiceMask)
}
CUserMessageVoiceMask::CUserMessageVoiceMask(const CUserMessageVoiceMask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      gamerules_masks_(from.gamerules_masks_),
      ban_masks_(from.ban_masks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mod_enable_ = from.mod_enable_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageVoiceMask)
}

void CUserMessageVoiceMask::SharedCtor() {
  mod_enable_ = false;
}

CUserMessageVoiceMask::~CUserMessageVoiceMask() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageVoiceMask)
  SharedDtor();
}

void CUserMessageVoiceMask::SharedDtor() {
}

void CUserMessageVoiceMask::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageVoiceMask& CUserMessageVoiceMask::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageVoiceMask_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageVoiceMask::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageVoiceMask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gamerules_masks_.Clear();
  ban_masks_.Clear();
  mod_enable_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageVoiceMask::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageVoiceMask*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated uint32 gamerules_masks = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_gamerules_masks(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_gamerules_masks();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // repeated uint32 ban_masks = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_ban_masks(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedUInt32Parser;
        object = msg->mutable_ban_masks();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      // optional bool mod_enable = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_mod_enable(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageVoiceMask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageVoiceMask)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 gamerules_masks = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8u, input, this->mutable_gamerules_masks())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_gamerules_masks())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 ban_masks = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16u, input, this->mutable_ban_masks())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ban_masks())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool mod_enable = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_mod_enable(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mod_enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageVoiceMask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageVoiceMask)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageVoiceMask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageVoiceMask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 gamerules_masks = 1;
  for (int i = 0, n = this->gamerules_masks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->gamerules_masks(i), output);
  }

  // repeated uint32 ban_masks = 2;
  for (int i = 0, n = this->ban_masks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->ban_masks(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool mod_enable = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->mod_enable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageVoiceMask)
}

::google::protobuf::uint8* CUserMessageVoiceMask::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageVoiceMask)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 gamerules_masks = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(1, this->gamerules_masks_, target);

  // repeated uint32 ban_masks = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(2, this->ban_masks_, target);

  cached_has_bits = _has_bits_[0];
  // optional bool mod_enable = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->mod_enable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageVoiceMask)
  return target;
}

size_t CUserMessageVoiceMask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageVoiceMask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 gamerules_masks = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->gamerules_masks_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->gamerules_masks_size());
    total_size += data_size;
  }

  // repeated uint32 ban_masks = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->ban_masks_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ban_masks_size());
    total_size += data_size;
  }

  // optional bool mod_enable = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageVoiceMask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageVoiceMask)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageVoiceMask* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageVoiceMask>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageVoiceMask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageVoiceMask)
    MergeFrom(*source);
  }
}

void CUserMessageVoiceMask::MergeFrom(const CUserMessageVoiceMask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageVoiceMask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gamerules_masks_.MergeFrom(from.gamerules_masks_);
  ban_masks_.MergeFrom(from.ban_masks_);
  if (from.has_mod_enable()) {
    set_mod_enable(from.mod_enable());
  }
}

void CUserMessageVoiceMask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageVoiceMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageVoiceMask::CopyFrom(const CUserMessageVoiceMask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageVoiceMask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageVoiceMask::IsInitialized() const {
  return true;
}

void CUserMessageVoiceMask::Swap(CUserMessageVoiceMask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageVoiceMask::InternalSwap(CUserMessageVoiceMask* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  gamerules_masks_.InternalSwap(&other->gamerules_masks_);
  ban_masks_.InternalSwap(&other->ban_masks_);
  swap(mod_enable_, other->mod_enable_);
}

::google::protobuf::Metadata CUserMessageVoiceMask::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageRequestState::InitAsDefaultInstance() {
}
class CUserMessageRequestState::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageRequestState::CUserMessageRequestState()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageRequestState)
}
CUserMessageRequestState::CUserMessageRequestState(const CUserMessageRequestState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageRequestState)
}

void CUserMessageRequestState::SharedCtor() {
}

CUserMessageRequestState::~CUserMessageRequestState() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageRequestState)
  SharedDtor();
}

void CUserMessageRequestState::SharedDtor() {
}

void CUserMessageRequestState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageRequestState& CUserMessageRequestState::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageRequestState_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageRequestState::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageRequestState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageRequestState::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageRequestState*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageRequestState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageRequestState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageRequestState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageRequestState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageRequestState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageRequestState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageRequestState)
}

::google::protobuf::uint8* CUserMessageRequestState::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageRequestState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageRequestState)
  return target;
}

size_t CUserMessageRequestState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageRequestState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageRequestState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageRequestState)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageRequestState* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageRequestState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageRequestState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageRequestState)
    MergeFrom(*source);
  }
}

void CUserMessageRequestState::MergeFrom(const CUserMessageRequestState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageRequestState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CUserMessageRequestState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageRequestState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageRequestState::CopyFrom(const CUserMessageRequestState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageRequestState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageRequestState::IsInitialized() const {
  return true;
}

void CUserMessageRequestState::Swap(CUserMessageRequestState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageRequestState::InternalSwap(CUserMessageRequestState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CUserMessageRequestState::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageHintText::InitAsDefaultInstance() {
}
class CUserMessageHintText::HasBitSetters {
 public:
  static void set_has_message(CUserMessageHintText* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageHintText::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageHintText::CUserMessageHintText()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageHintText)
}
CUserMessageHintText::CUserMessageHintText(const CUserMessageHintText& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageHintText)
}

void CUserMessageHintText::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMessageHintText_usermessages_2eproto.base);
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CUserMessageHintText::~CUserMessageHintText() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageHintText)
  SharedDtor();
}

void CUserMessageHintText::SharedDtor() {
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageHintText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageHintText& CUserMessageHintText::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageHintText_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageHintText::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageHintText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageHintText::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageHintText*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string message = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CUserMessageHintText.message");
        object = msg->mutable_message();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageHintText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageHintText)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string message = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->message().data(), static_cast<int>(this->message().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageHintText.message");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageHintText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageHintText)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageHintText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageHintText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageHintText.message");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->message(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageHintText)
}

::google::protobuf::uint8* CUserMessageHintText::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageHintText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->message().data(), static_cast<int>(this->message().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageHintText.message");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->message(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageHintText)
  return target;
}

size_t CUserMessageHintText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageHintText)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string message = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageHintText::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageHintText)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageHintText* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageHintText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageHintText)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageHintText)
    MergeFrom(*source);
  }
}

void CUserMessageHintText::MergeFrom(const CUserMessageHintText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageHintText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message()) {
    _has_bits_[0] |= 0x00000001u;
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
}

void CUserMessageHintText::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageHintText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageHintText::CopyFrom(const CUserMessageHintText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageHintText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageHintText::IsInitialized() const {
  return true;
}

void CUserMessageHintText::Swap(CUserMessageHintText* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageHintText::InternalSwap(CUserMessageHintText* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CUserMessageHintText::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageKeyHintText::InitAsDefaultInstance() {
}
class CUserMessageKeyHintText::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageKeyHintText::kMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageKeyHintText::CUserMessageKeyHintText()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageKeyHintText)
}
CUserMessageKeyHintText::CUserMessageKeyHintText(const CUserMessageKeyHintText& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageKeyHintText)
}

void CUserMessageKeyHintText::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMessageKeyHintText_usermessages_2eproto.base);
}

CUserMessageKeyHintText::~CUserMessageKeyHintText() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageKeyHintText)
  SharedDtor();
}

void CUserMessageKeyHintText::SharedDtor() {
}

void CUserMessageKeyHintText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageKeyHintText& CUserMessageKeyHintText::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageKeyHintText_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageKeyHintText::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageKeyHintText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageKeyHintText::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageKeyHintText*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated string messages = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          ctx->extra_parse_data().SetFieldName("proto.dota.CUserMessageKeyHintText.messages");
          object = msg->add_messages();
          if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
            parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
            goto string_till_end;
          }
          GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
          ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
          ptr += size;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageKeyHintText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageKeyHintText)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string messages = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_messages()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messages(this->messages_size() - 1).data(),
            static_cast<int>(this->messages(this->messages_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageKeyHintText.messages");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageKeyHintText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageKeyHintText)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageKeyHintText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageKeyHintText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string messages = 1;
  for (int i = 0, n = this->messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messages(i).data(), static_cast<int>(this->messages(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageKeyHintText.messages");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->messages(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageKeyHintText)
}

::google::protobuf::uint8* CUserMessageKeyHintText::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageKeyHintText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string messages = 1;
  for (int i = 0, n = this->messages_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messages(i).data(), static_cast<int>(this->messages(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageKeyHintText.messages");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->messages(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageKeyHintText)
  return target;
}

size_t CUserMessageKeyHintText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageKeyHintText)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string messages = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->messages_size());
  for (int i = 0, n = this->messages_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->messages(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageKeyHintText::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageKeyHintText)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageKeyHintText* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageKeyHintText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageKeyHintText)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageKeyHintText)
    MergeFrom(*source);
  }
}

void CUserMessageKeyHintText::MergeFrom(const CUserMessageKeyHintText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageKeyHintText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
}

void CUserMessageKeyHintText::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageKeyHintText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageKeyHintText::CopyFrom(const CUserMessageKeyHintText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageKeyHintText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageKeyHintText::IsInitialized() const {
  return true;
}

void CUserMessageKeyHintText::Swap(CUserMessageKeyHintText* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageKeyHintText::InternalSwap(CUserMessageKeyHintText* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  messages_.InternalSwap(CastToBase(&other->messages_));
}

::google::protobuf::Metadata CUserMessageKeyHintText::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageVoiceSubtitle::InitAsDefaultInstance() {
}
class CUserMessageVoiceSubtitle::HasBitSetters {
 public:
  static void set_has_player(CUserMessageVoiceSubtitle* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_menu(CUserMessageVoiceSubtitle* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_item(CUserMessageVoiceSubtitle* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageVoiceSubtitle::kPlayerFieldNumber;
const int CUserMessageVoiceSubtitle::kMenuFieldNumber;
const int CUserMessageVoiceSubtitle::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageVoiceSubtitle::CUserMessageVoiceSubtitle()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageVoiceSubtitle)
}
CUserMessageVoiceSubtitle::CUserMessageVoiceSubtitle(const CUserMessageVoiceSubtitle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&player_, &from.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&item_) -
    reinterpret_cast<char*>(&player_)) + sizeof(item_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageVoiceSubtitle)
}

void CUserMessageVoiceSubtitle::SharedCtor() {
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&item_) -
      reinterpret_cast<char*>(&player_)) + sizeof(item_));
}

CUserMessageVoiceSubtitle::~CUserMessageVoiceSubtitle() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageVoiceSubtitle)
  SharedDtor();
}

void CUserMessageVoiceSubtitle::SharedDtor() {
}

void CUserMessageVoiceSubtitle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageVoiceSubtitle& CUserMessageVoiceSubtitle::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageVoiceSubtitle_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageVoiceSubtitle::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageVoiceSubtitle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&player_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&item_) -
        reinterpret_cast<char*>(&player_)) + sizeof(item_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageVoiceSubtitle::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageVoiceSubtitle*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 player = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_player(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 menu = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_menu(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 item = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_item(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageVoiceSubtitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageVoiceSubtitle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_player(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 menu = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_menu(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &menu_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 item = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_item(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &item_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageVoiceSubtitle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageVoiceSubtitle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageVoiceSubtitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageVoiceSubtitle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player(), output);
  }

  // optional int32 menu = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->menu(), output);
  }

  // optional int32 item = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->item(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageVoiceSubtitle)
}

::google::protobuf::uint8* CUserMessageVoiceSubtitle::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageVoiceSubtitle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player(), target);
  }

  // optional int32 menu = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->menu(), target);
  }

  // optional int32 item = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->item(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageVoiceSubtitle)
  return target;
}

size_t CUserMessageVoiceSubtitle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageVoiceSubtitle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 player = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player());
    }

    // optional int32 menu = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->menu());
    }

    // optional int32 item = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->item());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageVoiceSubtitle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageVoiceSubtitle)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageVoiceSubtitle* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageVoiceSubtitle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageVoiceSubtitle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageVoiceSubtitle)
    MergeFrom(*source);
  }
}

void CUserMessageVoiceSubtitle::MergeFrom(const CUserMessageVoiceSubtitle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageVoiceSubtitle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      player_ = from.player_;
    }
    if (cached_has_bits & 0x00000002u) {
      menu_ = from.menu_;
    }
    if (cached_has_bits & 0x00000004u) {
      item_ = from.item_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageVoiceSubtitle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageVoiceSubtitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageVoiceSubtitle::CopyFrom(const CUserMessageVoiceSubtitle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageVoiceSubtitle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageVoiceSubtitle::IsInitialized() const {
  return true;
}

void CUserMessageVoiceSubtitle::Swap(CUserMessageVoiceSubtitle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageVoiceSubtitle::InternalSwap(CUserMessageVoiceSubtitle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(player_, other->player_);
  swap(menu_, other->menu_);
  swap(item_, other->item_);
}

::google::protobuf::Metadata CUserMessageVoiceSubtitle::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageVGUIMenu_Keys::InitAsDefaultInstance() {
}
class CUserMessageVGUIMenu_Keys::HasBitSetters {
 public:
  static void set_has_name(CUserMessageVGUIMenu_Keys* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_value(CUserMessageVGUIMenu_Keys* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageVGUIMenu_Keys::kNameFieldNumber;
const int CUserMessageVGUIMenu_Keys::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageVGUIMenu_Keys::CUserMessageVGUIMenu_Keys()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageVGUIMenu.Keys)
}
CUserMessageVGUIMenu_Keys::CUserMessageVGUIMenu_Keys(const CUserMessageVGUIMenu_Keys& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageVGUIMenu.Keys)
}

void CUserMessageVGUIMenu_Keys::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMessageVGUIMenu_Keys_usermessages_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CUserMessageVGUIMenu_Keys::~CUserMessageVGUIMenu_Keys() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageVGUIMenu.Keys)
  SharedDtor();
}

void CUserMessageVGUIMenu_Keys::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageVGUIMenu_Keys::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageVGUIMenu_Keys& CUserMessageVGUIMenu_Keys::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageVGUIMenu_Keys_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageVGUIMenu_Keys::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageVGUIMenu.Keys)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageVGUIMenu_Keys::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageVGUIMenu_Keys*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CUserMessageVGUIMenu.Keys.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional string value = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CUserMessageVGUIMenu.Keys.value");
        object = msg->mutable_value();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageVGUIMenu_Keys::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageVGUIMenu.Keys)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageVGUIMenu.Keys.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageVGUIMenu.Keys.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageVGUIMenu.Keys)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageVGUIMenu.Keys)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageVGUIMenu_Keys::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageVGUIMenu.Keys)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageVGUIMenu.Keys.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageVGUIMenu.Keys.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageVGUIMenu.Keys)
}

::google::protobuf::uint8* CUserMessageVGUIMenu_Keys::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageVGUIMenu.Keys)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageVGUIMenu.Keys.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageVGUIMenu.Keys.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageVGUIMenu.Keys)
  return target;
}

size_t CUserMessageVGUIMenu_Keys::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageVGUIMenu.Keys)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string value = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageVGUIMenu_Keys::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageVGUIMenu.Keys)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageVGUIMenu_Keys* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageVGUIMenu_Keys>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageVGUIMenu.Keys)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageVGUIMenu.Keys)
    MergeFrom(*source);
  }
}

void CUserMessageVGUIMenu_Keys::MergeFrom(const CUserMessageVGUIMenu_Keys& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageVGUIMenu.Keys)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void CUserMessageVGUIMenu_Keys::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageVGUIMenu.Keys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageVGUIMenu_Keys::CopyFrom(const CUserMessageVGUIMenu_Keys& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageVGUIMenu.Keys)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageVGUIMenu_Keys::IsInitialized() const {
  return true;
}

void CUserMessageVGUIMenu_Keys::Swap(CUserMessageVGUIMenu_Keys* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageVGUIMenu_Keys::InternalSwap(CUserMessageVGUIMenu_Keys* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CUserMessageVGUIMenu_Keys::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageVGUIMenu::InitAsDefaultInstance() {
}
class CUserMessageVGUIMenu::HasBitSetters {
 public:
  static void set_has_name(CUserMessageVGUIMenu* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_show(CUserMessageVGUIMenu* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageVGUIMenu::kNameFieldNumber;
const int CUserMessageVGUIMenu::kShowFieldNumber;
const int CUserMessageVGUIMenu::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageVGUIMenu::CUserMessageVGUIMenu()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageVGUIMenu)
}
CUserMessageVGUIMenu::CUserMessageVGUIMenu(const CUserMessageVGUIMenu& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      keys_(from.keys_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  show_ = from.show_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageVGUIMenu)
}

void CUserMessageVGUIMenu::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMessageVGUIMenu_usermessages_2eproto.base);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  show_ = false;
}

CUserMessageVGUIMenu::~CUserMessageVGUIMenu() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageVGUIMenu)
  SharedDtor();
}

void CUserMessageVGUIMenu::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageVGUIMenu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageVGUIMenu& CUserMessageVGUIMenu::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageVGUIMenu_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageVGUIMenu::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageVGUIMenu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  show_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageVGUIMenu::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageVGUIMenu*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CUserMessageVGUIMenu.name");
        object = msg->mutable_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool show = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_show(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated .proto.dota.CUserMessageVGUIMenu.Keys keys = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::proto::dota::CUserMessageVGUIMenu_Keys::_InternalParse;
          object = msg->add_keys();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageVGUIMenu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageVGUIMenu)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageVGUIMenu.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool show = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_show(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.dota.CUserMessageVGUIMenu.Keys keys = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageVGUIMenu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageVGUIMenu)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageVGUIMenu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageVGUIMenu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageVGUIMenu.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional bool show = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->show(), output);
  }

  // repeated .proto.dota.CUserMessageVGUIMenu.Keys keys = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->keys(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageVGUIMenu)
}

::google::protobuf::uint8* CUserMessageVGUIMenu::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageVGUIMenu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageVGUIMenu.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional bool show = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->show(), target);
  }

  // repeated .proto.dota.CUserMessageVGUIMenu.Keys keys = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->keys(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageVGUIMenu)
  return target;
}

size_t CUserMessageVGUIMenu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageVGUIMenu)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .proto.dota.CUserMessageVGUIMenu.Keys keys = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->keys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->keys(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool show = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageVGUIMenu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageVGUIMenu)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageVGUIMenu* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageVGUIMenu>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageVGUIMenu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageVGUIMenu)
    MergeFrom(*source);
  }
}

void CUserMessageVGUIMenu::MergeFrom(const CUserMessageVGUIMenu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageVGUIMenu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      show_ = from.show_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageVGUIMenu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageVGUIMenu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageVGUIMenu::CopyFrom(const CUserMessageVGUIMenu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageVGUIMenu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageVGUIMenu::IsInitialized() const {
  return true;
}

void CUserMessageVGUIMenu::Swap(CUserMessageVGUIMenu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageVGUIMenu::InternalSwap(CUserMessageVGUIMenu* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&keys_)->InternalSwap(CastToBase(&other->keys_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(show_, other->show_);
}

::google::protobuf::Metadata CUserMessageVGUIMenu::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageRumble::InitAsDefaultInstance() {
}
class CUserMessageRumble::HasBitSetters {
 public:
  static void set_has_index(CUserMessageRumble* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_data(CUserMessageRumble* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_flags(CUserMessageRumble* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageRumble::kIndexFieldNumber;
const int CUserMessageRumble::kDataFieldNumber;
const int CUserMessageRumble::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageRumble::CUserMessageRumble()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageRumble)
}
CUserMessageRumble::CUserMessageRumble(const CUserMessageRumble& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&index_, &from.index_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&index_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageRumble)
}

void CUserMessageRumble::SharedCtor() {
  ::memset(&index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&index_)) + sizeof(flags_));
}

CUserMessageRumble::~CUserMessageRumble() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageRumble)
  SharedDtor();
}

void CUserMessageRumble::SharedDtor() {
}

void CUserMessageRumble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageRumble& CUserMessageRumble::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageRumble_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageRumble::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageRumble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&index_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageRumble::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageRumble*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_data(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 flags = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_flags(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageRumble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageRumble)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_data(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flags = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_flags(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageRumble)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageRumble)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageRumble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageRumble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->data(), output);
  }

  // optional int32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->flags(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageRumble)
}

::google::protobuf::uint8* CUserMessageRumble::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageRumble)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 data = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->data(), target);
  }

  // optional int32 flags = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->flags(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageRumble)
  return target;
}

size_t CUserMessageRumble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageRumble)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data());
    }

    // optional int32 flags = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageRumble::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageRumble)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageRumble* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageRumble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageRumble)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageRumble)
    MergeFrom(*source);
  }
}

void CUserMessageRumble::MergeFrom(const CUserMessageRumble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageRumble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      index_ = from.index_;
    }
    if (cached_has_bits & 0x00000002u) {
      data_ = from.data_;
    }
    if (cached_has_bits & 0x00000004u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageRumble::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageRumble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageRumble::CopyFrom(const CUserMessageRumble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageRumble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageRumble::IsInitialized() const {
  return true;
}

void CUserMessageRumble::Swap(CUserMessageRumble* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageRumble::InternalSwap(CUserMessageRumble* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(index_, other->index_);
  swap(data_, other->data_);
  swap(flags_, other->flags_);
}

::google::protobuf::Metadata CUserMessageRumble::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageTrain::InitAsDefaultInstance() {
}
class CUserMessageTrain::HasBitSetters {
 public:
  static void set_has_position(CUserMessageTrain* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageTrain::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageTrain::CUserMessageTrain()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageTrain)
}
CUserMessageTrain::CUserMessageTrain(const CUserMessageTrain& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  position_ = from.position_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageTrain)
}

void CUserMessageTrain::SharedCtor() {
  position_ = 0u;
}

CUserMessageTrain::~CUserMessageTrain() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageTrain)
  SharedDtor();
}

void CUserMessageTrain::SharedDtor() {
}

void CUserMessageTrain::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageTrain& CUserMessageTrain::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageTrain_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageTrain::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageTrain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  position_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageTrain::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageTrain*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 position = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_position(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageTrain::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageTrain)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 position = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_position(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageTrain)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageTrain)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageTrain::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageTrain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 position = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->position(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageTrain)
}

::google::protobuf::uint8* CUserMessageTrain::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageTrain)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 position = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->position(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageTrain)
  return target;
}

size_t CUserMessageTrain::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageTrain)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 position = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->position());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageTrain::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageTrain)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageTrain* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageTrain>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageTrain)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageTrain)
    MergeFrom(*source);
  }
}

void CUserMessageTrain::MergeFrom(const CUserMessageTrain& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageTrain)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    set_position(from.position());
  }
}

void CUserMessageTrain::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageTrain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageTrain::CopyFrom(const CUserMessageTrain& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageTrain)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageTrain::IsInitialized() const {
  return true;
}

void CUserMessageTrain::Swap(CUserMessageTrain* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageTrain::InternalSwap(CUserMessageTrain* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(position_, other->position_);
}

::google::protobuf::Metadata CUserMessageTrain::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageSayTextChannel::InitAsDefaultInstance() {
}
class CUserMessageSayTextChannel::HasBitSetters {
 public:
  static void set_has_player(CUserMessageSayTextChannel* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_channel(CUserMessageSayTextChannel* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_text(CUserMessageSayTextChannel* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageSayTextChannel::kPlayerFieldNumber;
const int CUserMessageSayTextChannel::kChannelFieldNumber;
const int CUserMessageSayTextChannel::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageSayTextChannel::CUserMessageSayTextChannel()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageSayTextChannel)
}
CUserMessageSayTextChannel::CUserMessageSayTextChannel(const CUserMessageSayTextChannel& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&player_, &from.player_,
    static_cast<size_t>(reinterpret_cast<char*>(&channel_) -
    reinterpret_cast<char*>(&player_)) + sizeof(channel_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageSayTextChannel)
}

void CUserMessageSayTextChannel::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMessageSayTextChannel_usermessages_2eproto.base);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&player_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&channel_) -
      reinterpret_cast<char*>(&player_)) + sizeof(channel_));
}

CUserMessageSayTextChannel::~CUserMessageSayTextChannel() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageSayTextChannel)
  SharedDtor();
}

void CUserMessageSayTextChannel::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageSayTextChannel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageSayTextChannel& CUserMessageSayTextChannel::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageSayTextChannel_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageSayTextChannel::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageSayTextChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&player_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&channel_) -
        reinterpret_cast<char*>(&player_)) + sizeof(channel_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageSayTextChannel::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageSayTextChannel*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 player = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_player(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 channel = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_channel(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string text = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CUserMessageSayTextChannel.text");
        object = msg->mutable_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageSayTextChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageSayTextChannel)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 player = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_player(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &player_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 channel = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_channel(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageSayTextChannel.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageSayTextChannel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageSayTextChannel)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageSayTextChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageSayTextChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->player(), output);
  }

  // optional int32 channel = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->channel(), output);
  }

  // optional string text = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayTextChannel.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageSayTextChannel)
}

::google::protobuf::uint8* CUserMessageSayTextChannel::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageSayTextChannel)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 player = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->player(), target);
  }

  // optional int32 channel = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->channel(), target);
  }

  // optional string text = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageSayTextChannel.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageSayTextChannel)
  return target;
}

size_t CUserMessageSayTextChannel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageSayTextChannel)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string text = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional int32 player = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->player());
    }

    // optional int32 channel = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->channel());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageSayTextChannel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageSayTextChannel)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageSayTextChannel* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageSayTextChannel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageSayTextChannel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageSayTextChannel)
    MergeFrom(*source);
  }
}

void CUserMessageSayTextChannel::MergeFrom(const CUserMessageSayTextChannel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageSayTextChannel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      player_ = from.player_;
    }
    if (cached_has_bits & 0x00000004u) {
      channel_ = from.channel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageSayTextChannel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageSayTextChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageSayTextChannel::CopyFrom(const CUserMessageSayTextChannel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageSayTextChannel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageSayTextChannel::IsInitialized() const {
  return true;
}

void CUserMessageSayTextChannel::Swap(CUserMessageSayTextChannel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageSayTextChannel::InternalSwap(CUserMessageSayTextChannel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(player_, other->player_);
  swap(channel_, other->channel_);
}

::google::protobuf::Metadata CUserMessageSayTextChannel::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageColoredText::InitAsDefaultInstance() {
}
class CUserMessageColoredText::HasBitSetters {
 public:
  static void set_has_color(CUserMessageColoredText* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_text(CUserMessageColoredText* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_reset(CUserMessageColoredText* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_context_player_id(CUserMessageColoredText* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_context_value(CUserMessageColoredText* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_context_team_id(CUserMessageColoredText* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageColoredText::kColorFieldNumber;
const int CUserMessageColoredText::kTextFieldNumber;
const int CUserMessageColoredText::kResetFieldNumber;
const int CUserMessageColoredText::kContextPlayerIdFieldNumber;
const int CUserMessageColoredText::kContextValueFieldNumber;
const int CUserMessageColoredText::kContextTeamIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageColoredText::CUserMessageColoredText()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageColoredText)
}
CUserMessageColoredText::CUserMessageColoredText(const CUserMessageColoredText& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  ::memcpy(&color_, &from.color_,
    static_cast<size_t>(reinterpret_cast<char*>(&context_team_id_) -
    reinterpret_cast<char*>(&color_)) + sizeof(context_team_id_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageColoredText)
}

void CUserMessageColoredText::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMessageColoredText_usermessages_2eproto.base);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&color_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&context_team_id_) -
      reinterpret_cast<char*>(&color_)) + sizeof(context_team_id_));
}

CUserMessageColoredText::~CUserMessageColoredText() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageColoredText)
  SharedDtor();
}

void CUserMessageColoredText::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageColoredText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageColoredText& CUserMessageColoredText::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageColoredText_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageColoredText::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageColoredText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&color_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&context_team_id_) -
        reinterpret_cast<char*>(&color_)) + sizeof(context_team_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageColoredText::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageColoredText*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 color = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_color(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string text = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CUserMessageColoredText.text");
        object = msg->mutable_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bool reset = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_reset(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 context_player_id = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_context_player_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 context_value = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_context_value(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 context_team_id = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_context_team_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageColoredText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageColoredText)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 color = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_color(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageColoredText.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_reset(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 context_player_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_context_player_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &context_player_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 context_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_context_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &context_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 context_team_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_context_team_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &context_team_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageColoredText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageColoredText)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageColoredText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageColoredText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 color = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->color(), output);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageColoredText.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  // optional bool reset = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->reset(), output);
  }

  // optional int32 context_player_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->context_player_id(), output);
  }

  // optional int32 context_value = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->context_value(), output);
  }

  // optional int32 context_team_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->context_team_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageColoredText)
}

::google::protobuf::uint8* CUserMessageColoredText::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageColoredText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 color = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->color(), target);
  }

  // optional string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageColoredText.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  // optional bool reset = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->reset(), target);
  }

  // optional int32 context_player_id = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->context_player_id(), target);
  }

  // optional int32 context_value = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->context_value(), target);
  }

  // optional int32 context_team_id = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->context_team_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageColoredText)
  return target;
}

size_t CUserMessageColoredText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageColoredText)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string text = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional uint32 color = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->color());
    }

    // optional bool reset = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

    // optional int32 context_player_id = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->context_player_id());
    }

    // optional int32 context_value = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->context_value());
    }

    // optional int32 context_team_id = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->context_team_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageColoredText::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageColoredText)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageColoredText* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageColoredText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageColoredText)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageColoredText)
    MergeFrom(*source);
  }
}

void CUserMessageColoredText::MergeFrom(const CUserMessageColoredText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageColoredText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000004u) {
      reset_ = from.reset_;
    }
    if (cached_has_bits & 0x00000008u) {
      context_player_id_ = from.context_player_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      context_value_ = from.context_value_;
    }
    if (cached_has_bits & 0x00000020u) {
      context_team_id_ = from.context_team_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageColoredText::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageColoredText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageColoredText::CopyFrom(const CUserMessageColoredText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageColoredText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageColoredText::IsInitialized() const {
  return true;
}

void CUserMessageColoredText::Swap(CUserMessageColoredText* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageColoredText::InternalSwap(CUserMessageColoredText* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(color_, other->color_);
  swap(reset_, other->reset_);
  swap(context_player_id_, other->context_player_id_);
  swap(context_value_, other->context_value_);
  swap(context_team_id_, other->context_team_id_);
}

::google::protobuf::Metadata CUserMessageColoredText::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageItemPickup::InitAsDefaultInstance() {
}
class CUserMessageItemPickup::HasBitSetters {
 public:
  static void set_has_itemname(CUserMessageItemPickup* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageItemPickup::kItemnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageItemPickup::CUserMessageItemPickup()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageItemPickup)
}
CUserMessageItemPickup::CUserMessageItemPickup(const CUserMessageItemPickup& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  itemname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_itemname()) {
    itemname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.itemname_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageItemPickup)
}

void CUserMessageItemPickup::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMessageItemPickup_usermessages_2eproto.base);
  itemname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CUserMessageItemPickup::~CUserMessageItemPickup() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageItemPickup)
  SharedDtor();
}

void CUserMessageItemPickup::SharedDtor() {
  itemname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageItemPickup::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageItemPickup& CUserMessageItemPickup::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageItemPickup_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageItemPickup::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageItemPickup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    itemname_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageItemPickup::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageItemPickup*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string itemname = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CUserMessageItemPickup.itemname");
        object = msg->mutable_itemname();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageItemPickup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageItemPickup)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string itemname = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_itemname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->itemname().data(), static_cast<int>(this->itemname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageItemPickup.itemname");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageItemPickup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageItemPickup)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageItemPickup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageItemPickup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string itemname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), static_cast<int>(this->itemname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageItemPickup.itemname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->itemname(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageItemPickup)
}

::google::protobuf::uint8* CUserMessageItemPickup::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageItemPickup)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string itemname = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->itemname().data(), static_cast<int>(this->itemname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageItemPickup.itemname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->itemname(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageItemPickup)
  return target;
}

size_t CUserMessageItemPickup::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageItemPickup)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string itemname = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->itemname());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageItemPickup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageItemPickup)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageItemPickup* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageItemPickup>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageItemPickup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageItemPickup)
    MergeFrom(*source);
  }
}

void CUserMessageItemPickup::MergeFrom(const CUserMessageItemPickup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageItemPickup)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_itemname()) {
    _has_bits_[0] |= 0x00000001u;
    itemname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.itemname_);
  }
}

void CUserMessageItemPickup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageItemPickup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageItemPickup::CopyFrom(const CUserMessageItemPickup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageItemPickup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageItemPickup::IsInitialized() const {
  return true;
}

void CUserMessageItemPickup::Swap(CUserMessageItemPickup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageItemPickup::InternalSwap(CUserMessageItemPickup* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  itemname_.Swap(&other->itemname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CUserMessageItemPickup::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageAmmoDenied::InitAsDefaultInstance() {
}
class CUserMessageAmmoDenied::HasBitSetters {
 public:
  static void set_has_ammo_id(CUserMessageAmmoDenied* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageAmmoDenied::kAmmoIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageAmmoDenied::CUserMessageAmmoDenied()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageAmmoDenied)
}
CUserMessageAmmoDenied::CUserMessageAmmoDenied(const CUserMessageAmmoDenied& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ammo_id_ = from.ammo_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageAmmoDenied)
}

void CUserMessageAmmoDenied::SharedCtor() {
  ammo_id_ = 0u;
}

CUserMessageAmmoDenied::~CUserMessageAmmoDenied() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageAmmoDenied)
  SharedDtor();
}

void CUserMessageAmmoDenied::SharedDtor() {
}

void CUserMessageAmmoDenied::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageAmmoDenied& CUserMessageAmmoDenied::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageAmmoDenied_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageAmmoDenied::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageAmmoDenied)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ammo_id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageAmmoDenied::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageAmmoDenied*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 ammo_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_ammo_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageAmmoDenied::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageAmmoDenied)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ammo_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_ammo_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ammo_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageAmmoDenied)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageAmmoDenied)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageAmmoDenied::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageAmmoDenied)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ammo_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ammo_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageAmmoDenied)
}

::google::protobuf::uint8* CUserMessageAmmoDenied::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageAmmoDenied)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 ammo_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ammo_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageAmmoDenied)
  return target;
}

size_t CUserMessageAmmoDenied::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageAmmoDenied)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 ammo_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ammo_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageAmmoDenied::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageAmmoDenied)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageAmmoDenied* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageAmmoDenied>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageAmmoDenied)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageAmmoDenied)
    MergeFrom(*source);
  }
}

void CUserMessageAmmoDenied::MergeFrom(const CUserMessageAmmoDenied& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageAmmoDenied)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ammo_id()) {
    set_ammo_id(from.ammo_id());
  }
}

void CUserMessageAmmoDenied::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageAmmoDenied)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageAmmoDenied::CopyFrom(const CUserMessageAmmoDenied& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageAmmoDenied)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageAmmoDenied::IsInitialized() const {
  return true;
}

void CUserMessageAmmoDenied::Swap(CUserMessageAmmoDenied* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageAmmoDenied::InternalSwap(CUserMessageAmmoDenied* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ammo_id_, other->ammo_id_);
}

::google::protobuf::Metadata CUserMessageAmmoDenied::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageCrosshairAngle::InitAsDefaultInstance() {
  ::proto::dota::_CUserMessageCrosshairAngle_default_instance_._instance.get_mutable()->angcrosshair_ = const_cast< ::proto::dota::CMsgQAngle*>(
      ::proto::dota::CMsgQAngle::internal_default_instance());
}
class CUserMessageCrosshairAngle::HasBitSetters {
 public:
  static const ::proto::dota::CMsgQAngle& angcrosshair(const CUserMessageCrosshairAngle* msg);
  static void set_has_angcrosshair(CUserMessageCrosshairAngle* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgQAngle&
CUserMessageCrosshairAngle::HasBitSetters::angcrosshair(const CUserMessageCrosshairAngle* msg) {
  return *msg->angcrosshair_;
}
void CUserMessageCrosshairAngle::clear_angcrosshair() {
  if (angcrosshair_ != nullptr) angcrosshair_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageCrosshairAngle::kAngcrosshairFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageCrosshairAngle::CUserMessageCrosshairAngle()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageCrosshairAngle)
}
CUserMessageCrosshairAngle::CUserMessageCrosshairAngle(const CUserMessageCrosshairAngle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_angcrosshair()) {
    angcrosshair_ = new ::proto::dota::CMsgQAngle(*from.angcrosshair_);
  } else {
    angcrosshair_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageCrosshairAngle)
}

void CUserMessageCrosshairAngle::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMessageCrosshairAngle_usermessages_2eproto.base);
  angcrosshair_ = nullptr;
}

CUserMessageCrosshairAngle::~CUserMessageCrosshairAngle() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageCrosshairAngle)
  SharedDtor();
}

void CUserMessageCrosshairAngle::SharedDtor() {
  if (this != internal_default_instance()) delete angcrosshair_;
}

void CUserMessageCrosshairAngle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageCrosshairAngle& CUserMessageCrosshairAngle::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageCrosshairAngle_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageCrosshairAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageCrosshairAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(angcrosshair_ != nullptr);
    angcrosshair_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageCrosshairAngle::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageCrosshairAngle*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgQAngle angcrosshair = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgQAngle::_InternalParse;
        object = msg->mutable_angcrosshair();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageCrosshairAngle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageCrosshairAngle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgQAngle angcrosshair = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angcrosshair()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageCrosshairAngle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageCrosshairAngle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageCrosshairAngle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageCrosshairAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgQAngle angcrosshair = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::angcrosshair(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageCrosshairAngle)
}

::google::protobuf::uint8* CUserMessageCrosshairAngle::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageCrosshairAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgQAngle angcrosshair = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::angcrosshair(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageCrosshairAngle)
  return target;
}

size_t CUserMessageCrosshairAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageCrosshairAngle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgQAngle angcrosshair = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *angcrosshair_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageCrosshairAngle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageCrosshairAngle)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageCrosshairAngle* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageCrosshairAngle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageCrosshairAngle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageCrosshairAngle)
    MergeFrom(*source);
  }
}

void CUserMessageCrosshairAngle::MergeFrom(const CUserMessageCrosshairAngle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageCrosshairAngle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_angcrosshair()) {
    mutable_angcrosshair()->::proto::dota::CMsgQAngle::MergeFrom(from.angcrosshair());
  }
}

void CUserMessageCrosshairAngle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageCrosshairAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCrosshairAngle::CopyFrom(const CUserMessageCrosshairAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageCrosshairAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCrosshairAngle::IsInitialized() const {
  return true;
}

void CUserMessageCrosshairAngle::Swap(CUserMessageCrosshairAngle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageCrosshairAngle::InternalSwap(CUserMessageCrosshairAngle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(angcrosshair_, other->angcrosshair_);
}

::google::protobuf::Metadata CUserMessageCrosshairAngle::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageShowMenu::InitAsDefaultInstance() {
}
class CUserMessageShowMenu::HasBitSetters {
 public:
  static void set_has_validslots(CUserMessageShowMenu* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_displaytime(CUserMessageShowMenu* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_needmore(CUserMessageShowMenu* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_menustring(CUserMessageShowMenu* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageShowMenu::kValidslotsFieldNumber;
const int CUserMessageShowMenu::kDisplaytimeFieldNumber;
const int CUserMessageShowMenu::kNeedmoreFieldNumber;
const int CUserMessageShowMenu::kMenustringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageShowMenu::CUserMessageShowMenu()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageShowMenu)
}
CUserMessageShowMenu::CUserMessageShowMenu(const CUserMessageShowMenu& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  menustring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_menustring()) {
    menustring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.menustring_);
  }
  ::memcpy(&validslots_, &from.validslots_,
    static_cast<size_t>(reinterpret_cast<char*>(&needmore_) -
    reinterpret_cast<char*>(&validslots_)) + sizeof(needmore_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageShowMenu)
}

void CUserMessageShowMenu::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMessageShowMenu_usermessages_2eproto.base);
  menustring_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&validslots_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&needmore_) -
      reinterpret_cast<char*>(&validslots_)) + sizeof(needmore_));
}

CUserMessageShowMenu::~CUserMessageShowMenu() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageShowMenu)
  SharedDtor();
}

void CUserMessageShowMenu::SharedDtor() {
  menustring_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageShowMenu::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageShowMenu& CUserMessageShowMenu::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageShowMenu_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageShowMenu::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageShowMenu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    menustring_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&validslots_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&needmore_) -
        reinterpret_cast<char*>(&validslots_)) + sizeof(needmore_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageShowMenu::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageShowMenu*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 validslots = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_validslots(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional uint32 displaytime = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_displaytime(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bool needmore = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_needmore(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional string menustring = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CUserMessageShowMenu.menustring");
        object = msg->mutable_menustring();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageShowMenu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageShowMenu)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 validslots = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_validslots(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &validslots_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 displaytime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_displaytime(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &displaytime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool needmore = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_needmore(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &needmore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string menustring = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_menustring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->menustring().data(), static_cast<int>(this->menustring().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageShowMenu.menustring");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageShowMenu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageShowMenu)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageShowMenu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageShowMenu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 validslots = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->validslots(), output);
  }

  // optional uint32 displaytime = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->displaytime(), output);
  }

  // optional bool needmore = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->needmore(), output);
  }

  // optional string menustring = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->menustring().data(), static_cast<int>(this->menustring().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageShowMenu.menustring");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->menustring(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageShowMenu)
}

::google::protobuf::uint8* CUserMessageShowMenu::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageShowMenu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 validslots = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->validslots(), target);
  }

  // optional uint32 displaytime = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->displaytime(), target);
  }

  // optional bool needmore = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->needmore(), target);
  }

  // optional string menustring = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->menustring().data(), static_cast<int>(this->menustring().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageShowMenu.menustring");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->menustring(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageShowMenu)
  return target;
}

size_t CUserMessageShowMenu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageShowMenu)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string menustring = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->menustring());
    }

    // optional uint32 validslots = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->validslots());
    }

    // optional uint32 displaytime = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->displaytime());
    }

    // optional bool needmore = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageShowMenu::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageShowMenu)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageShowMenu* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageShowMenu>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageShowMenu)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageShowMenu)
    MergeFrom(*source);
  }
}

void CUserMessageShowMenu::MergeFrom(const CUserMessageShowMenu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageShowMenu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      menustring_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.menustring_);
    }
    if (cached_has_bits & 0x00000002u) {
      validslots_ = from.validslots_;
    }
    if (cached_has_bits & 0x00000004u) {
      displaytime_ = from.displaytime_;
    }
    if (cached_has_bits & 0x00000008u) {
      needmore_ = from.needmore_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageShowMenu::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageShowMenu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageShowMenu::CopyFrom(const CUserMessageShowMenu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageShowMenu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageShowMenu::IsInitialized() const {
  return true;
}

void CUserMessageShowMenu::Swap(CUserMessageShowMenu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageShowMenu::InternalSwap(CUserMessageShowMenu* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  menustring_.Swap(&other->menustring_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(validslots_, other->validslots_);
  swap(displaytime_, other->displaytime_);
  swap(needmore_, other->needmore_);
}

::google::protobuf::Metadata CUserMessageShowMenu::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageCreditsMsg::InitAsDefaultInstance() {
}
class CUserMessageCreditsMsg::HasBitSetters {
 public:
  static void set_has_rolltype(CUserMessageCreditsMsg* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_logo_length(CUserMessageCreditsMsg* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageCreditsMsg::kRolltypeFieldNumber;
const int CUserMessageCreditsMsg::kLogoLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageCreditsMsg::CUserMessageCreditsMsg()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageCreditsMsg)
}
CUserMessageCreditsMsg::CUserMessageCreditsMsg(const CUserMessageCreditsMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&logo_length_, &from.logo_length_,
    static_cast<size_t>(reinterpret_cast<char*>(&rolltype_) -
    reinterpret_cast<char*>(&logo_length_)) + sizeof(rolltype_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageCreditsMsg)
}

void CUserMessageCreditsMsg::SharedCtor() {
  logo_length_ = 0;
  rolltype_ = -1;
}

CUserMessageCreditsMsg::~CUserMessageCreditsMsg() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageCreditsMsg)
  SharedDtor();
}

void CUserMessageCreditsMsg::SharedDtor() {
}

void CUserMessageCreditsMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageCreditsMsg& CUserMessageCreditsMsg::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageCreditsMsg_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageCreditsMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageCreditsMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    logo_length_ = 0;
    rolltype_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageCreditsMsg::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageCreditsMsg*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.eRollType rolltype = 1 [default = ROLL_NONE];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::eRollType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_rolltype(static_cast<::proto::dota::eRollType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float logo_length = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_logo_length(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageCreditsMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageCreditsMsg)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.eRollType rolltype = 1 [default = ROLL_NONE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::eRollType_IsValid(value)) {
            set_rolltype(static_cast< ::proto::dota::eRollType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float logo_length = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_logo_length(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &logo_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageCreditsMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageCreditsMsg)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageCreditsMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageCreditsMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.eRollType rolltype = 1 [default = ROLL_NONE];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->rolltype(), output);
  }

  // optional float logo_length = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->logo_length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageCreditsMsg)
}

::google::protobuf::uint8* CUserMessageCreditsMsg::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageCreditsMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.eRollType rolltype = 1 [default = ROLL_NONE];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->rolltype(), target);
  }

  // optional float logo_length = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->logo_length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageCreditsMsg)
  return target;
}

size_t CUserMessageCreditsMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageCreditsMsg)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float logo_length = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional .proto.dota.eRollType rolltype = 1 [default = ROLL_NONE];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->rolltype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageCreditsMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageCreditsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageCreditsMsg* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageCreditsMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageCreditsMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageCreditsMsg)
    MergeFrom(*source);
  }
}

void CUserMessageCreditsMsg::MergeFrom(const CUserMessageCreditsMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageCreditsMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      logo_length_ = from.logo_length_;
    }
    if (cached_has_bits & 0x00000002u) {
      rolltype_ = from.rolltype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageCreditsMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageCreditsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCreditsMsg::CopyFrom(const CUserMessageCreditsMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageCreditsMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCreditsMsg::IsInitialized() const {
  return true;
}

void CUserMessageCreditsMsg::Swap(CUserMessageCreditsMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageCreditsMsg::InternalSwap(CUserMessageCreditsMsg* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(logo_length_, other->logo_length_);
  swap(rolltype_, other->rolltype_);
}

::google::protobuf::Metadata CUserMessageCreditsMsg::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CEntityMessagePlayJingle::InitAsDefaultInstance() {
}
class CEntityMessagePlayJingle::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CEntityMessagePlayJingle::CEntityMessagePlayJingle()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CEntityMessagePlayJingle)
}
CEntityMessagePlayJingle::CEntityMessagePlayJingle(const CEntityMessagePlayJingle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CEntityMessagePlayJingle)
}

void CEntityMessagePlayJingle::SharedCtor() {
}

CEntityMessagePlayJingle::~CEntityMessagePlayJingle() {
  // @@protoc_insertion_point(destructor:proto.dota.CEntityMessagePlayJingle)
  SharedDtor();
}

void CEntityMessagePlayJingle::SharedDtor() {
}

void CEntityMessagePlayJingle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CEntityMessagePlayJingle& CEntityMessagePlayJingle::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CEntityMessagePlayJingle_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CEntityMessagePlayJingle::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CEntityMessagePlayJingle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CEntityMessagePlayJingle::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CEntityMessagePlayJingle*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CEntityMessagePlayJingle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CEntityMessagePlayJingle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CEntityMessagePlayJingle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CEntityMessagePlayJingle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CEntityMessagePlayJingle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CEntityMessagePlayJingle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CEntityMessagePlayJingle)
}

::google::protobuf::uint8* CEntityMessagePlayJingle::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CEntityMessagePlayJingle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CEntityMessagePlayJingle)
  return target;
}

size_t CEntityMessagePlayJingle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CEntityMessagePlayJingle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEntityMessagePlayJingle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CEntityMessagePlayJingle)
  GOOGLE_DCHECK_NE(&from, this);
  const CEntityMessagePlayJingle* source =
      ::google::protobuf::DynamicCastToGenerated<CEntityMessagePlayJingle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CEntityMessagePlayJingle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CEntityMessagePlayJingle)
    MergeFrom(*source);
  }
}

void CEntityMessagePlayJingle::MergeFrom(const CEntityMessagePlayJingle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CEntityMessagePlayJingle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CEntityMessagePlayJingle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CEntityMessagePlayJingle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEntityMessagePlayJingle::CopyFrom(const CEntityMessagePlayJingle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CEntityMessagePlayJingle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEntityMessagePlayJingle::IsInitialized() const {
  return true;
}

void CEntityMessagePlayJingle::Swap(CEntityMessagePlayJingle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CEntityMessagePlayJingle::InternalSwap(CEntityMessagePlayJingle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CEntityMessagePlayJingle::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CEntityMessageScreenOverlay::InitAsDefaultInstance() {
}
class CEntityMessageScreenOverlay::HasBitSetters {
 public:
  static void set_has_start_effect(CEntityMessageScreenOverlay* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CEntityMessageScreenOverlay::kStartEffectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CEntityMessageScreenOverlay::CEntityMessageScreenOverlay()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CEntityMessageScreenOverlay)
}
CEntityMessageScreenOverlay::CEntityMessageScreenOverlay(const CEntityMessageScreenOverlay& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  start_effect_ = from.start_effect_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CEntityMessageScreenOverlay)
}

void CEntityMessageScreenOverlay::SharedCtor() {
  start_effect_ = false;
}

CEntityMessageScreenOverlay::~CEntityMessageScreenOverlay() {
  // @@protoc_insertion_point(destructor:proto.dota.CEntityMessageScreenOverlay)
  SharedDtor();
}

void CEntityMessageScreenOverlay::SharedDtor() {
}

void CEntityMessageScreenOverlay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CEntityMessageScreenOverlay& CEntityMessageScreenOverlay::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CEntityMessageScreenOverlay_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CEntityMessageScreenOverlay::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CEntityMessageScreenOverlay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  start_effect_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CEntityMessageScreenOverlay::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CEntityMessageScreenOverlay*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool start_effect = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_start_effect(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CEntityMessageScreenOverlay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CEntityMessageScreenOverlay)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool start_effect = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_start_effect(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &start_effect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CEntityMessageScreenOverlay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CEntityMessageScreenOverlay)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CEntityMessageScreenOverlay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CEntityMessageScreenOverlay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool start_effect = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->start_effect(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CEntityMessageScreenOverlay)
}

::google::protobuf::uint8* CEntityMessageScreenOverlay::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CEntityMessageScreenOverlay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool start_effect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->start_effect(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CEntityMessageScreenOverlay)
  return target;
}

size_t CEntityMessageScreenOverlay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CEntityMessageScreenOverlay)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool start_effect = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEntityMessageScreenOverlay::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CEntityMessageScreenOverlay)
  GOOGLE_DCHECK_NE(&from, this);
  const CEntityMessageScreenOverlay* source =
      ::google::protobuf::DynamicCastToGenerated<CEntityMessageScreenOverlay>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CEntityMessageScreenOverlay)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CEntityMessageScreenOverlay)
    MergeFrom(*source);
  }
}

void CEntityMessageScreenOverlay::MergeFrom(const CEntityMessageScreenOverlay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CEntityMessageScreenOverlay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start_effect()) {
    set_start_effect(from.start_effect());
  }
}

void CEntityMessageScreenOverlay::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CEntityMessageScreenOverlay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEntityMessageScreenOverlay::CopyFrom(const CEntityMessageScreenOverlay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CEntityMessageScreenOverlay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEntityMessageScreenOverlay::IsInitialized() const {
  return true;
}

void CEntityMessageScreenOverlay::Swap(CEntityMessageScreenOverlay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CEntityMessageScreenOverlay::InternalSwap(CEntityMessageScreenOverlay* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(start_effect_, other->start_effect_);
}

::google::protobuf::Metadata CEntityMessageScreenOverlay::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CEntityMessageRemoveAllDecals::InitAsDefaultInstance() {
}
class CEntityMessageRemoveAllDecals::HasBitSetters {
 public:
  static void set_has_remove_decals(CEntityMessageRemoveAllDecals* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CEntityMessageRemoveAllDecals::kRemoveDecalsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CEntityMessageRemoveAllDecals::CEntityMessageRemoveAllDecals()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CEntityMessageRemoveAllDecals)
}
CEntityMessageRemoveAllDecals::CEntityMessageRemoveAllDecals(const CEntityMessageRemoveAllDecals& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remove_decals_ = from.remove_decals_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CEntityMessageRemoveAllDecals)
}

void CEntityMessageRemoveAllDecals::SharedCtor() {
  remove_decals_ = false;
}

CEntityMessageRemoveAllDecals::~CEntityMessageRemoveAllDecals() {
  // @@protoc_insertion_point(destructor:proto.dota.CEntityMessageRemoveAllDecals)
  SharedDtor();
}

void CEntityMessageRemoveAllDecals::SharedDtor() {
}

void CEntityMessageRemoveAllDecals::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CEntityMessageRemoveAllDecals& CEntityMessageRemoveAllDecals::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CEntityMessageRemoveAllDecals_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CEntityMessageRemoveAllDecals::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CEntityMessageRemoveAllDecals)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remove_decals_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CEntityMessageRemoveAllDecals::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CEntityMessageRemoveAllDecals*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool remove_decals = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_remove_decals(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CEntityMessageRemoveAllDecals::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CEntityMessageRemoveAllDecals)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool remove_decals = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_remove_decals(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &remove_decals_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CEntityMessageRemoveAllDecals)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CEntityMessageRemoveAllDecals)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CEntityMessageRemoveAllDecals::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CEntityMessageRemoveAllDecals)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool remove_decals = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->remove_decals(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CEntityMessageRemoveAllDecals)
}

::google::protobuf::uint8* CEntityMessageRemoveAllDecals::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CEntityMessageRemoveAllDecals)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool remove_decals = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->remove_decals(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CEntityMessageRemoveAllDecals)
  return target;
}

size_t CEntityMessageRemoveAllDecals::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CEntityMessageRemoveAllDecals)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool remove_decals = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEntityMessageRemoveAllDecals::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CEntityMessageRemoveAllDecals)
  GOOGLE_DCHECK_NE(&from, this);
  const CEntityMessageRemoveAllDecals* source =
      ::google::protobuf::DynamicCastToGenerated<CEntityMessageRemoveAllDecals>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CEntityMessageRemoveAllDecals)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CEntityMessageRemoveAllDecals)
    MergeFrom(*source);
  }
}

void CEntityMessageRemoveAllDecals::MergeFrom(const CEntityMessageRemoveAllDecals& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CEntityMessageRemoveAllDecals)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_remove_decals()) {
    set_remove_decals(from.remove_decals());
  }
}

void CEntityMessageRemoveAllDecals::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CEntityMessageRemoveAllDecals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEntityMessageRemoveAllDecals::CopyFrom(const CEntityMessageRemoveAllDecals& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CEntityMessageRemoveAllDecals)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEntityMessageRemoveAllDecals::IsInitialized() const {
  return true;
}

void CEntityMessageRemoveAllDecals::Swap(CEntityMessageRemoveAllDecals* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CEntityMessageRemoveAllDecals::InternalSwap(CEntityMessageRemoveAllDecals* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(remove_decals_, other->remove_decals_);
}

::google::protobuf::Metadata CEntityMessageRemoveAllDecals::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CEntityMessagePropagateForce::InitAsDefaultInstance() {
  ::proto::dota::_CEntityMessagePropagateForce_default_instance_._instance.get_mutable()->impulse_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
}
class CEntityMessagePropagateForce::HasBitSetters {
 public:
  static const ::proto::dota::CMsgVector& impulse(const CEntityMessagePropagateForce* msg);
  static void set_has_impulse(CEntityMessagePropagateForce* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgVector&
CEntityMessagePropagateForce::HasBitSetters::impulse(const CEntityMessagePropagateForce* msg) {
  return *msg->impulse_;
}
void CEntityMessagePropagateForce::clear_impulse() {
  if (impulse_ != nullptr) impulse_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CEntityMessagePropagateForce::kImpulseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CEntityMessagePropagateForce::CEntityMessagePropagateForce()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CEntityMessagePropagateForce)
}
CEntityMessagePropagateForce::CEntityMessagePropagateForce(const CEntityMessagePropagateForce& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_impulse()) {
    impulse_ = new ::proto::dota::CMsgVector(*from.impulse_);
  } else {
    impulse_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CEntityMessagePropagateForce)
}

void CEntityMessagePropagateForce::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CEntityMessagePropagateForce_usermessages_2eproto.base);
  impulse_ = nullptr;
}

CEntityMessagePropagateForce::~CEntityMessagePropagateForce() {
  // @@protoc_insertion_point(destructor:proto.dota.CEntityMessagePropagateForce)
  SharedDtor();
}

void CEntityMessagePropagateForce::SharedDtor() {
  if (this != internal_default_instance()) delete impulse_;
}

void CEntityMessagePropagateForce::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CEntityMessagePropagateForce& CEntityMessagePropagateForce::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CEntityMessagePropagateForce_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CEntityMessagePropagateForce::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CEntityMessagePropagateForce)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(impulse_ != nullptr);
    impulse_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CEntityMessagePropagateForce::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CEntityMessagePropagateForce*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgVector impulse = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgVector::_InternalParse;
        object = msg->mutable_impulse();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CEntityMessagePropagateForce::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CEntityMessagePropagateForce)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector impulse = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_impulse()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CEntityMessagePropagateForce)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CEntityMessagePropagateForce)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CEntityMessagePropagateForce::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CEntityMessagePropagateForce)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector impulse = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::impulse(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CEntityMessagePropagateForce)
}

::google::protobuf::uint8* CEntityMessagePropagateForce::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CEntityMessagePropagateForce)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector impulse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::impulse(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CEntityMessagePropagateForce)
  return target;
}

size_t CEntityMessagePropagateForce::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CEntityMessagePropagateForce)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .proto.dota.CMsgVector impulse = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *impulse_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEntityMessagePropagateForce::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CEntityMessagePropagateForce)
  GOOGLE_DCHECK_NE(&from, this);
  const CEntityMessagePropagateForce* source =
      ::google::protobuf::DynamicCastToGenerated<CEntityMessagePropagateForce>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CEntityMessagePropagateForce)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CEntityMessagePropagateForce)
    MergeFrom(*source);
  }
}

void CEntityMessagePropagateForce::MergeFrom(const CEntityMessagePropagateForce& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CEntityMessagePropagateForce)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_impulse()) {
    mutable_impulse()->::proto::dota::CMsgVector::MergeFrom(from.impulse());
  }
}

void CEntityMessagePropagateForce::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CEntityMessagePropagateForce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEntityMessagePropagateForce::CopyFrom(const CEntityMessagePropagateForce& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CEntityMessagePropagateForce)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEntityMessagePropagateForce::IsInitialized() const {
  return true;
}

void CEntityMessagePropagateForce::Swap(CEntityMessagePropagateForce* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CEntityMessagePropagateForce::InternalSwap(CEntityMessagePropagateForce* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(impulse_, other->impulse_);
}

::google::protobuf::Metadata CEntityMessagePropagateForce::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CEntityMessageDoSpark::InitAsDefaultInstance() {
  ::proto::dota::_CEntityMessageDoSpark_default_instance_._instance.get_mutable()->origin_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
}
class CEntityMessageDoSpark::HasBitSetters {
 public:
  static const ::proto::dota::CMsgVector& origin(const CEntityMessageDoSpark* msg);
  static void set_has_origin(CEntityMessageDoSpark* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_entityindex(CEntityMessageDoSpark* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_radius(CEntityMessageDoSpark* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_color(CEntityMessageDoSpark* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_beams(CEntityMessageDoSpark* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static void set_has_thick(CEntityMessageDoSpark* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static void set_has_duration(CEntityMessageDoSpark* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
};

const ::proto::dota::CMsgVector&
CEntityMessageDoSpark::HasBitSetters::origin(const CEntityMessageDoSpark* msg) {
  return *msg->origin_;
}
void CEntityMessageDoSpark::clear_origin() {
  if (origin_ != nullptr) origin_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CEntityMessageDoSpark::kOriginFieldNumber;
const int CEntityMessageDoSpark::kEntityindexFieldNumber;
const int CEntityMessageDoSpark::kRadiusFieldNumber;
const int CEntityMessageDoSpark::kColorFieldNumber;
const int CEntityMessageDoSpark::kBeamsFieldNumber;
const int CEntityMessageDoSpark::kThickFieldNumber;
const int CEntityMessageDoSpark::kDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CEntityMessageDoSpark::CEntityMessageDoSpark()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CEntityMessageDoSpark)
}
CEntityMessageDoSpark::CEntityMessageDoSpark(const CEntityMessageDoSpark& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin()) {
    origin_ = new ::proto::dota::CMsgVector(*from.origin_);
  } else {
    origin_ = nullptr;
  }
  ::memcpy(&entityindex_, &from.entityindex_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&entityindex_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CEntityMessageDoSpark)
}

void CEntityMessageDoSpark::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CEntityMessageDoSpark_usermessages_2eproto.base);
  ::memset(&origin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&origin_)) + sizeof(duration_));
}

CEntityMessageDoSpark::~CEntityMessageDoSpark() {
  // @@protoc_insertion_point(destructor:proto.dota.CEntityMessageDoSpark)
  SharedDtor();
}

void CEntityMessageDoSpark::SharedDtor() {
  if (this != internal_default_instance()) delete origin_;
}

void CEntityMessageDoSpark::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CEntityMessageDoSpark& CEntityMessageDoSpark::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CEntityMessageDoSpark_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CEntityMessageDoSpark::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CEntityMessageDoSpark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(origin_ != nullptr);
    origin_->Clear();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&entityindex_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&entityindex_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CEntityMessageDoSpark::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CEntityMessageDoSpark*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .proto.dota.CMsgVector origin = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgVector::_InternalParse;
        object = msg->mutable_origin();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional uint32 entityindex = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_entityindex(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float radius = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_radius(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional fixed32 color = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 37) goto handle_unusual;
        msg->set_color(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint32>(ptr));
        ptr += sizeof(::google::protobuf::uint32);
        break;
      }
      // optional uint32 beams = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 40) goto handle_unusual;
        msg->set_beams(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float thick = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 53) goto handle_unusual;
        msg->set_thick(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float duration = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 61) goto handle_unusual;
        msg->set_duration(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CEntityMessageDoSpark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CEntityMessageDoSpark)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .proto.dota.CMsgVector origin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_origin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 entityindex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_entityindex(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &entityindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float radius = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_radius(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 color = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (37 & 0xFF)) {
          HasBitSetters::set_has_color(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 beams = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (40 & 0xFF)) {
          HasBitSetters::set_has_beams(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beams_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float thick = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (53 & 0xFF)) {
          HasBitSetters::set_has_thick(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &thick_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (61 & 0xFF)) {
          HasBitSetters::set_has_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CEntityMessageDoSpark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CEntityMessageDoSpark)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CEntityMessageDoSpark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CEntityMessageDoSpark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::origin(this), output);
  }

  // optional uint32 entityindex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->entityindex(), output);
  }

  // optional float radius = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->radius(), output);
  }

  // optional fixed32 color = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->color(), output);
  }

  // optional uint32 beams = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->beams(), output);
  }

  // optional float thick = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->thick(), output);
  }

  // optional float duration = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CEntityMessageDoSpark)
}

::google::protobuf::uint8* CEntityMessageDoSpark::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CEntityMessageDoSpark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .proto.dota.CMsgVector origin = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::origin(this), target);
  }

  // optional uint32 entityindex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->entityindex(), target);
  }

  // optional float radius = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->radius(), target);
  }

  // optional fixed32 color = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(4, this->color(), target);
  }

  // optional uint32 beams = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->beams(), target);
  }

  // optional float thick = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->thick(), target);
  }

  // optional float duration = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CEntityMessageDoSpark)
  return target;
}

size_t CEntityMessageDoSpark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CEntityMessageDoSpark)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .proto.dota.CMsgVector origin = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *origin_);
    }

    // optional uint32 entityindex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->entityindex());
    }

    // optional float radius = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional fixed32 color = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional uint32 beams = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beams());
    }

    // optional float thick = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional float duration = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEntityMessageDoSpark::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CEntityMessageDoSpark)
  GOOGLE_DCHECK_NE(&from, this);
  const CEntityMessageDoSpark* source =
      ::google::protobuf::DynamicCastToGenerated<CEntityMessageDoSpark>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CEntityMessageDoSpark)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CEntityMessageDoSpark)
    MergeFrom(*source);
  }
}

void CEntityMessageDoSpark::MergeFrom(const CEntityMessageDoSpark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CEntityMessageDoSpark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin()->::proto::dota::CMsgVector::MergeFrom(from.origin());
    }
    if (cached_has_bits & 0x00000002u) {
      entityindex_ = from.entityindex_;
    }
    if (cached_has_bits & 0x00000004u) {
      radius_ = from.radius_;
    }
    if (cached_has_bits & 0x00000008u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000010u) {
      beams_ = from.beams_;
    }
    if (cached_has_bits & 0x00000020u) {
      thick_ = from.thick_;
    }
    if (cached_has_bits & 0x00000040u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CEntityMessageDoSpark::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CEntityMessageDoSpark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEntityMessageDoSpark::CopyFrom(const CEntityMessageDoSpark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CEntityMessageDoSpark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEntityMessageDoSpark::IsInitialized() const {
  return true;
}

void CEntityMessageDoSpark::Swap(CEntityMessageDoSpark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CEntityMessageDoSpark::InternalSwap(CEntityMessageDoSpark* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(origin_, other->origin_);
  swap(entityindex_, other->entityindex_);
  swap(radius_, other->radius_);
  swap(color_, other->color_);
  swap(beams_, other->beams_);
  swap(thick_, other->thick_);
  swap(duration_, other->duration_);
}

::google::protobuf::Metadata CEntityMessageDoSpark::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CEntityMessageFixAngle::InitAsDefaultInstance() {
  ::proto::dota::_CEntityMessageFixAngle_default_instance_._instance.get_mutable()->angle_ = const_cast< ::proto::dota::CMsgQAngle*>(
      ::proto::dota::CMsgQAngle::internal_default_instance());
}
class CEntityMessageFixAngle::HasBitSetters {
 public:
  static void set_has_relative(CEntityMessageFixAngle* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CMsgQAngle& angle(const CEntityMessageFixAngle* msg);
  static void set_has_angle(CEntityMessageFixAngle* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgQAngle&
CEntityMessageFixAngle::HasBitSetters::angle(const CEntityMessageFixAngle* msg) {
  return *msg->angle_;
}
void CEntityMessageFixAngle::clear_angle() {
  if (angle_ != nullptr) angle_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CEntityMessageFixAngle::kRelativeFieldNumber;
const int CEntityMessageFixAngle::kAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CEntityMessageFixAngle::CEntityMessageFixAngle()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CEntityMessageFixAngle)
}
CEntityMessageFixAngle::CEntityMessageFixAngle(const CEntityMessageFixAngle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_angle()) {
    angle_ = new ::proto::dota::CMsgQAngle(*from.angle_);
  } else {
    angle_ = nullptr;
  }
  relative_ = from.relative_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CEntityMessageFixAngle)
}

void CEntityMessageFixAngle::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CEntityMessageFixAngle_usermessages_2eproto.base);
  ::memset(&angle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relative_) -
      reinterpret_cast<char*>(&angle_)) + sizeof(relative_));
}

CEntityMessageFixAngle::~CEntityMessageFixAngle() {
  // @@protoc_insertion_point(destructor:proto.dota.CEntityMessageFixAngle)
  SharedDtor();
}

void CEntityMessageFixAngle::SharedDtor() {
  if (this != internal_default_instance()) delete angle_;
}

void CEntityMessageFixAngle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CEntityMessageFixAngle& CEntityMessageFixAngle::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CEntityMessageFixAngle_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CEntityMessageFixAngle::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CEntityMessageFixAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(angle_ != nullptr);
    angle_->Clear();
  }
  relative_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CEntityMessageFixAngle::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CEntityMessageFixAngle*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool relative = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_relative(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgQAngle angle = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgQAngle::_InternalParse;
        object = msg->mutable_angle();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CEntityMessageFixAngle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CEntityMessageFixAngle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool relative = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_relative(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &relative_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgQAngle angle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CEntityMessageFixAngle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CEntityMessageFixAngle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CEntityMessageFixAngle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CEntityMessageFixAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool relative = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->relative(), output);
  }

  // optional .proto.dota.CMsgQAngle angle = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::angle(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CEntityMessageFixAngle)
}

::google::protobuf::uint8* CEntityMessageFixAngle::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CEntityMessageFixAngle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool relative = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->relative(), target);
  }

  // optional .proto.dota.CMsgQAngle angle = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::angle(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CEntityMessageFixAngle)
  return target;
}

size_t CEntityMessageFixAngle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CEntityMessageFixAngle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CMsgQAngle angle = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *angle_);
    }

    // optional bool relative = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CEntityMessageFixAngle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CEntityMessageFixAngle)
  GOOGLE_DCHECK_NE(&from, this);
  const CEntityMessageFixAngle* source =
      ::google::protobuf::DynamicCastToGenerated<CEntityMessageFixAngle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CEntityMessageFixAngle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CEntityMessageFixAngle)
    MergeFrom(*source);
  }
}

void CEntityMessageFixAngle::MergeFrom(const CEntityMessageFixAngle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CEntityMessageFixAngle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_angle()->::proto::dota::CMsgQAngle::MergeFrom(from.angle());
    }
    if (cached_has_bits & 0x00000002u) {
      relative_ = from.relative_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CEntityMessageFixAngle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CEntityMessageFixAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CEntityMessageFixAngle::CopyFrom(const CEntityMessageFixAngle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CEntityMessageFixAngle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CEntityMessageFixAngle::IsInitialized() const {
  return true;
}

void CEntityMessageFixAngle::Swap(CEntityMessageFixAngle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CEntityMessageFixAngle::InternalSwap(CEntityMessageFixAngle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(angle_, other->angle_);
  swap(relative_, other->relative_);
}

::google::protobuf::Metadata CEntityMessageFixAngle::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageCameraTransition_Transition_DataDriven::InitAsDefaultInstance() {
}
class CUserMessageCameraTransition_Transition_DataDriven::HasBitSetters {
 public:
  static void set_has_filename(CUserMessageCameraTransition_Transition_DataDriven* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_attach_ent_index(CUserMessageCameraTransition_Transition_DataDriven* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageCameraTransition_Transition_DataDriven::kFilenameFieldNumber;
const int CUserMessageCameraTransition_Transition_DataDriven::kAttachEntIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageCameraTransition_Transition_DataDriven::CUserMessageCameraTransition_Transition_DataDriven()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
}
CUserMessageCameraTransition_Transition_DataDriven::CUserMessageCameraTransition_Transition_DataDriven(const CUserMessageCameraTransition_Transition_DataDriven& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_filename()) {
    filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  attach_ent_index_ = from.attach_ent_index_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
}

void CUserMessageCameraTransition_Transition_DataDriven::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMessageCameraTransition_Transition_DataDriven_usermessages_2eproto.base);
  filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  attach_ent_index_ = 0;
}

CUserMessageCameraTransition_Transition_DataDriven::~CUserMessageCameraTransition_Transition_DataDriven() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
  SharedDtor();
}

void CUserMessageCameraTransition_Transition_DataDriven::SharedDtor() {
  filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageCameraTransition_Transition_DataDriven::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageCameraTransition_Transition_DataDriven& CUserMessageCameraTransition_Transition_DataDriven::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageCameraTransition_Transition_DataDriven_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageCameraTransition_Transition_DataDriven::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    filename_.ClearNonDefaultToEmptyNoArena();
  }
  attach_ent_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageCameraTransition_Transition_DataDriven::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageCameraTransition_Transition_DataDriven*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string filename = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CUserMessageCameraTransition.Transition_DataDriven.filename");
        object = msg->mutable_filename();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional int32 attach_ent_index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_attach_ent_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageCameraTransition_Transition_DataDriven::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string filename = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_filename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->filename().data(), static_cast<int>(this->filename().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMessageCameraTransition.Transition_DataDriven.filename");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 attach_ent_index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_attach_ent_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_ent_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageCameraTransition_Transition_DataDriven::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageCameraTransition.Transition_DataDriven.filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->filename(), output);
  }

  // optional int32 attach_ent_index = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attach_ent_index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
}

::google::protobuf::uint8* CUserMessageCameraTransition_Transition_DataDriven::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string filename = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->filename().data(), static_cast<int>(this->filename().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMessageCameraTransition.Transition_DataDriven.filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->filename(), target);
  }

  // optional int32 attach_ent_index = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attach_ent_index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
  return target;
}

size_t CUserMessageCameraTransition_Transition_DataDriven::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string filename = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->filename());
    }

    // optional int32 attach_ent_index = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach_ent_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageCameraTransition_Transition_DataDriven::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageCameraTransition_Transition_DataDriven* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageCameraTransition_Transition_DataDriven>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
    MergeFrom(*source);
  }
}

void CUserMessageCameraTransition_Transition_DataDriven::MergeFrom(const CUserMessageCameraTransition_Transition_DataDriven& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.filename_);
    }
    if (cached_has_bits & 0x00000002u) {
      attach_ent_index_ = from.attach_ent_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageCameraTransition_Transition_DataDriven::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCameraTransition_Transition_DataDriven::CopyFrom(const CUserMessageCameraTransition_Transition_DataDriven& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageCameraTransition.Transition_DataDriven)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCameraTransition_Transition_DataDriven::IsInitialized() const {
  return true;
}

void CUserMessageCameraTransition_Transition_DataDriven::Swap(CUserMessageCameraTransition_Transition_DataDriven* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageCameraTransition_Transition_DataDriven::InternalSwap(CUserMessageCameraTransition_Transition_DataDriven* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  filename_.Swap(&other->filename_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(attach_ent_index_, other->attach_ent_index_);
}

::google::protobuf::Metadata CUserMessageCameraTransition_Transition_DataDriven::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageCameraTransition::InitAsDefaultInstance() {
  ::proto::dota::_CUserMessageCameraTransition_default_instance_._instance.get_mutable()->params_data_driven_ = const_cast< ::proto::dota::CUserMessageCameraTransition_Transition_DataDriven*>(
      ::proto::dota::CUserMessageCameraTransition_Transition_DataDriven::internal_default_instance());
}
class CUserMessageCameraTransition::HasBitSetters {
 public:
  static void set_has_camera_type(CUserMessageCameraTransition* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_duration(CUserMessageCameraTransition* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::proto::dota::CUserMessageCameraTransition_Transition_DataDriven& params_data_driven(const CUserMessageCameraTransition* msg);
  static void set_has_params_data_driven(CUserMessageCameraTransition* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CUserMessageCameraTransition_Transition_DataDriven&
CUserMessageCameraTransition::HasBitSetters::params_data_driven(const CUserMessageCameraTransition* msg) {
  return *msg->params_data_driven_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageCameraTransition::kCameraTypeFieldNumber;
const int CUserMessageCameraTransition::kDurationFieldNumber;
const int CUserMessageCameraTransition::kParamsDataDrivenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageCameraTransition::CUserMessageCameraTransition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageCameraTransition)
}
CUserMessageCameraTransition::CUserMessageCameraTransition(const CUserMessageCameraTransition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_params_data_driven()) {
    params_data_driven_ = new ::proto::dota::CUserMessageCameraTransition_Transition_DataDriven(*from.params_data_driven_);
  } else {
    params_data_driven_ = nullptr;
  }
  ::memcpy(&camera_type_, &from.camera_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&camera_type_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageCameraTransition)
}

void CUserMessageCameraTransition::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMessageCameraTransition_usermessages_2eproto.base);
  ::memset(&params_data_driven_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&params_data_driven_)) + sizeof(duration_));
}

CUserMessageCameraTransition::~CUserMessageCameraTransition() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageCameraTransition)
  SharedDtor();
}

void CUserMessageCameraTransition::SharedDtor() {
  if (this != internal_default_instance()) delete params_data_driven_;
}

void CUserMessageCameraTransition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageCameraTransition& CUserMessageCameraTransition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageCameraTransition_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageCameraTransition::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageCameraTransition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(params_data_driven_ != nullptr);
    params_data_driven_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&camera_type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&duration_) -
        reinterpret_cast<char*>(&camera_type_)) + sizeof(duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageCameraTransition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageCameraTransition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional uint32 camera_type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_camera_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float duration = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_duration(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional .proto.dota.CUserMessageCameraTransition.Transition_DataDriven params_data_driven = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CUserMessageCameraTransition_Transition_DataDriven::_InternalParse;
        object = msg->mutable_params_data_driven();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageCameraTransition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageCameraTransition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 camera_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_camera_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &camera_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMessageCameraTransition.Transition_DataDriven params_data_driven = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_params_data_driven()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageCameraTransition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageCameraTransition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageCameraTransition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageCameraTransition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 camera_type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->camera_type(), output);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->duration(), output);
  }

  // optional .proto.dota.CUserMessageCameraTransition.Transition_DataDriven params_data_driven = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::params_data_driven(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageCameraTransition)
}

::google::protobuf::uint8* CUserMessageCameraTransition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageCameraTransition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 camera_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->camera_type(), target);
  }

  // optional float duration = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->duration(), target);
  }

  // optional .proto.dota.CUserMessageCameraTransition.Transition_DataDriven params_data_driven = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::params_data_driven(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageCameraTransition)
  return target;
}

size_t CUserMessageCameraTransition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageCameraTransition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.dota.CUserMessageCameraTransition.Transition_DataDriven params_data_driven = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *params_data_driven_);
    }

    // optional uint32 camera_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->camera_type());
    }

    // optional float duration = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageCameraTransition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageCameraTransition)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageCameraTransition* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageCameraTransition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageCameraTransition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageCameraTransition)
    MergeFrom(*source);
  }
}

void CUserMessageCameraTransition::MergeFrom(const CUserMessageCameraTransition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageCameraTransition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_params_data_driven()->::proto::dota::CUserMessageCameraTransition_Transition_DataDriven::MergeFrom(from.params_data_driven());
    }
    if (cached_has_bits & 0x00000002u) {
      camera_type_ = from.camera_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      duration_ = from.duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageCameraTransition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageCameraTransition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageCameraTransition::CopyFrom(const CUserMessageCameraTransition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageCameraTransition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageCameraTransition::IsInitialized() const {
  return true;
}

void CUserMessageCameraTransition::Swap(CUserMessageCameraTransition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageCameraTransition::InternalSwap(CUserMessageCameraTransition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(params_data_driven_, other->params_data_driven_);
  swap(camera_type_, other->camera_type_);
  swap(duration_, other->duration_);
}

::google::protobuf::Metadata CUserMessageCameraTransition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMsg_ParticleManager_ReleaseParticleIndex::InitAsDefaultInstance() {
}
class CUserMsg_ParticleManager_ReleaseParticleIndex::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_ReleaseParticleIndex::CUserMsg_ParticleManager_ReleaseParticleIndex()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
}
CUserMsg_ParticleManager_ReleaseParticleIndex::CUserMsg_ParticleManager_ReleaseParticleIndex(const CUserMsg_ParticleManager_ReleaseParticleIndex& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::SharedCtor() {
}

CUserMsg_ParticleManager_ReleaseParticleIndex::~CUserMsg_ParticleManager_ReleaseParticleIndex() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
  SharedDtor();
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::SharedDtor() {
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMsg_ParticleManager_ReleaseParticleIndex& CUserMsg_ParticleManager_ReleaseParticleIndex::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMsg_ParticleManager_ReleaseParticleIndex_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMsg_ParticleManager_ReleaseParticleIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMsg_ParticleManager_ReleaseParticleIndex::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMsg_ParticleManager_ReleaseParticleIndex*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMsg_ParticleManager_ReleaseParticleIndex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMsg_ParticleManager_ReleaseParticleIndex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_ReleaseParticleIndex::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
  return target;
}

size_t CUserMsg_ParticleManager_ReleaseParticleIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_ReleaseParticleIndex* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMsg_ParticleManager_ReleaseParticleIndex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::MergeFrom(const CUserMsg_ParticleManager_ReleaseParticleIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CUserMsg_ParticleManager_ReleaseParticleIndex::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::CopyFrom(const CUserMsg_ParticleManager_ReleaseParticleIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_ReleaseParticleIndex::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_ReleaseParticleIndex::Swap(CUserMsg_ParticleManager_ReleaseParticleIndex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_ReleaseParticleIndex::InternalSwap(CUserMsg_ParticleManager_ReleaseParticleIndex* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_ReleaseParticleIndex::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMsg_ParticleManager_CreateParticle::InitAsDefaultInstance() {
}
class CUserMsg_ParticleManager_CreateParticle::HasBitSetters {
 public:
  static void set_has_particle_name_index(CUserMsg_ParticleManager_CreateParticle* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_attach_type(CUserMsg_ParticleManager_CreateParticle* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_entity_handle(CUserMsg_ParticleManager_CreateParticle* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_entity_handle_for_modifiers(CUserMsg_ParticleManager_CreateParticle* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_CreateParticle::kParticleNameIndexFieldNumber;
const int CUserMsg_ParticleManager_CreateParticle::kAttachTypeFieldNumber;
const int CUserMsg_ParticleManager_CreateParticle::kEntityHandleFieldNumber;
const int CUserMsg_ParticleManager_CreateParticle::kEntityHandleForModifiersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_CreateParticle::CUserMsg_ParticleManager_CreateParticle()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.CreateParticle)
}
CUserMsg_ParticleManager_CreateParticle::CUserMsg_ParticleManager_CreateParticle(const CUserMsg_ParticleManager_CreateParticle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&particle_name_index_, &from.particle_name_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&entity_handle_for_modifiers_) -
    reinterpret_cast<char*>(&particle_name_index_)) + sizeof(entity_handle_for_modifiers_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.CreateParticle)
}

void CUserMsg_ParticleManager_CreateParticle::SharedCtor() {
  ::memset(&particle_name_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entity_handle_for_modifiers_) -
      reinterpret_cast<char*>(&particle_name_index_)) + sizeof(entity_handle_for_modifiers_));
}

CUserMsg_ParticleManager_CreateParticle::~CUserMsg_ParticleManager_CreateParticle() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.CreateParticle)
  SharedDtor();
}

void CUserMsg_ParticleManager_CreateParticle::SharedDtor() {
}

void CUserMsg_ParticleManager_CreateParticle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMsg_ParticleManager_CreateParticle& CUserMsg_ParticleManager_CreateParticle::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMsg_ParticleManager_CreateParticle_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMsg_ParticleManager_CreateParticle::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.CreateParticle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&particle_name_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&entity_handle_for_modifiers_) -
        reinterpret_cast<char*>(&particle_name_index_)) + sizeof(entity_handle_for_modifiers_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMsg_ParticleManager_CreateParticle::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMsg_ParticleManager_CreateParticle*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional fixed64 particle_name_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 9) goto handle_unusual;
        msg->set_particle_name_index(::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr));
        ptr += sizeof(::google::protobuf::uint64);
        break;
      }
      // optional int32 attach_type = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_attach_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 entity_handle = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_entity_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 entity_handle_for_modifiers = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_entity_handle_for_modifiers(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMsg_ParticleManager_CreateParticle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.CreateParticle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional fixed64 particle_name_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (9 & 0xFF)) {
          HasBitSetters::set_has_particle_name_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &particle_name_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 attach_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_attach_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 entity_handle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_entity_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 entity_handle_for_modifiers = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_entity_handle_for_modifiers(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_for_modifiers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.CreateParticle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.CreateParticle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMsg_ParticleManager_CreateParticle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.CreateParticle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 particle_name_index = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->particle_name_index(), output);
  }

  // optional int32 attach_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attach_type(), output);
  }

  // optional int32 entity_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->entity_handle(), output);
  }

  // optional int32 entity_handle_for_modifiers = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->entity_handle_for_modifiers(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.CreateParticle)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_CreateParticle::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.CreateParticle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional fixed64 particle_name_index = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->particle_name_index(), target);
  }

  // optional int32 attach_type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attach_type(), target);
  }

  // optional int32 entity_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->entity_handle(), target);
  }

  // optional int32 entity_handle_for_modifiers = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->entity_handle_for_modifiers(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.CreateParticle)
  return target;
}

size_t CUserMsg_ParticleManager_CreateParticle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.CreateParticle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional fixed64 particle_name_index = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 8;
    }

    // optional int32 attach_type = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach_type());
    }

    // optional int32 entity_handle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }

    // optional int32 entity_handle_for_modifiers = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle_for_modifiers());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_CreateParticle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.CreateParticle)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_CreateParticle* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMsg_ParticleManager_CreateParticle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.CreateParticle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.CreateParticle)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_CreateParticle::MergeFrom(const CUserMsg_ParticleManager_CreateParticle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.CreateParticle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      particle_name_index_ = from.particle_name_index_;
    }
    if (cached_has_bits & 0x00000002u) {
      attach_type_ = from.attach_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      entity_handle_ = from.entity_handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      entity_handle_for_modifiers_ = from.entity_handle_for_modifiers_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_CreateParticle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.CreateParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_CreateParticle::CopyFrom(const CUserMsg_ParticleManager_CreateParticle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.CreateParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_CreateParticle::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_CreateParticle::Swap(CUserMsg_ParticleManager_CreateParticle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_CreateParticle::InternalSwap(CUserMsg_ParticleManager_CreateParticle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(particle_name_index_, other->particle_name_index_);
  swap(attach_type_, other->attach_type_);
  swap(entity_handle_, other->entity_handle_);
  swap(entity_handle_for_modifiers_, other->entity_handle_for_modifiers_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_CreateParticle::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMsg_ParticleManager_DestroyParticle::InitAsDefaultInstance() {
}
class CUserMsg_ParticleManager_DestroyParticle::HasBitSetters {
 public:
  static void set_has_destroy_immediately(CUserMsg_ParticleManager_DestroyParticle* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_DestroyParticle::kDestroyImmediatelyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_DestroyParticle::CUserMsg_ParticleManager_DestroyParticle()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
}
CUserMsg_ParticleManager_DestroyParticle::CUserMsg_ParticleManager_DestroyParticle(const CUserMsg_ParticleManager_DestroyParticle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  destroy_immediately_ = from.destroy_immediately_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
}

void CUserMsg_ParticleManager_DestroyParticle::SharedCtor() {
  destroy_immediately_ = false;
}

CUserMsg_ParticleManager_DestroyParticle::~CUserMsg_ParticleManager_DestroyParticle() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
  SharedDtor();
}

void CUserMsg_ParticleManager_DestroyParticle::SharedDtor() {
}

void CUserMsg_ParticleManager_DestroyParticle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMsg_ParticleManager_DestroyParticle& CUserMsg_ParticleManager_DestroyParticle::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMsg_ParticleManager_DestroyParticle_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMsg_ParticleManager_DestroyParticle::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  destroy_immediately_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMsg_ParticleManager_DestroyParticle::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMsg_ParticleManager_DestroyParticle*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool destroy_immediately = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_destroy_immediately(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMsg_ParticleManager_DestroyParticle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool destroy_immediately = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_destroy_immediately(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destroy_immediately_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMsg_ParticleManager_DestroyParticle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool destroy_immediately = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->destroy_immediately(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_DestroyParticle::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool destroy_immediately = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->destroy_immediately(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
  return target;
}

size_t CUserMsg_ParticleManager_DestroyParticle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool destroy_immediately = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_DestroyParticle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_DestroyParticle* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMsg_ParticleManager_DestroyParticle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_DestroyParticle::MergeFrom(const CUserMsg_ParticleManager_DestroyParticle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_destroy_immediately()) {
    set_destroy_immediately(from.destroy_immediately());
  }
}

void CUserMsg_ParticleManager_DestroyParticle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_DestroyParticle::CopyFrom(const CUserMsg_ParticleManager_DestroyParticle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.DestroyParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_DestroyParticle::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_DestroyParticle::Swap(CUserMsg_ParticleManager_DestroyParticle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_DestroyParticle::InternalSwap(CUserMsg_ParticleManager_DestroyParticle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(destroy_immediately_, other->destroy_immediately_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_DestroyParticle::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMsg_ParticleManager_DestroyParticleInvolving::InitAsDefaultInstance() {
}
class CUserMsg_ParticleManager_DestroyParticleInvolving::HasBitSetters {
 public:
  static void set_has_destroy_immediately(CUserMsg_ParticleManager_DestroyParticleInvolving* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_entity_handle(CUserMsg_ParticleManager_DestroyParticleInvolving* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_DestroyParticleInvolving::kDestroyImmediatelyFieldNumber;
const int CUserMsg_ParticleManager_DestroyParticleInvolving::kEntityHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_DestroyParticleInvolving::CUserMsg_ParticleManager_DestroyParticleInvolving()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
}
CUserMsg_ParticleManager_DestroyParticleInvolving::CUserMsg_ParticleManager_DestroyParticleInvolving(const CUserMsg_ParticleManager_DestroyParticleInvolving& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&destroy_immediately_, &from.destroy_immediately_,
    static_cast<size_t>(reinterpret_cast<char*>(&entity_handle_) -
    reinterpret_cast<char*>(&destroy_immediately_)) + sizeof(entity_handle_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::SharedCtor() {
  ::memset(&destroy_immediately_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entity_handle_) -
      reinterpret_cast<char*>(&destroy_immediately_)) + sizeof(entity_handle_));
}

CUserMsg_ParticleManager_DestroyParticleInvolving::~CUserMsg_ParticleManager_DestroyParticleInvolving() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
  SharedDtor();
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::SharedDtor() {
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMsg_ParticleManager_DestroyParticleInvolving& CUserMsg_ParticleManager_DestroyParticleInvolving::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMsg_ParticleManager_DestroyParticleInvolving_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMsg_ParticleManager_DestroyParticleInvolving::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&destroy_immediately_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&entity_handle_) -
        reinterpret_cast<char*>(&destroy_immediately_)) + sizeof(entity_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMsg_ParticleManager_DestroyParticleInvolving::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMsg_ParticleManager_DestroyParticleInvolving*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool destroy_immediately = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_destroy_immediately(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 entity_handle = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_entity_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMsg_ParticleManager_DestroyParticleInvolving::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool destroy_immediately = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_destroy_immediately(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &destroy_immediately_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 entity_handle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_entity_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMsg_ParticleManager_DestroyParticleInvolving::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool destroy_immediately = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->destroy_immediately(), output);
  }

  // optional int32 entity_handle = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->entity_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_DestroyParticleInvolving::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool destroy_immediately = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->destroy_immediately(), target);
  }

  // optional int32 entity_handle = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->entity_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
  return target;
}

size_t CUserMsg_ParticleManager_DestroyParticleInvolving::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bool destroy_immediately = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 1;
    }

    // optional int32 entity_handle = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_DestroyParticleInvolving* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMsg_ParticleManager_DestroyParticleInvolving>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::MergeFrom(const CUserMsg_ParticleManager_DestroyParticleInvolving& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      destroy_immediately_ = from.destroy_immediately_;
    }
    if (cached_has_bits & 0x00000002u) {
      entity_handle_ = from.entity_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::CopyFrom(const CUserMsg_ParticleManager_DestroyParticleInvolving& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_DestroyParticleInvolving::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_DestroyParticleInvolving::Swap(CUserMsg_ParticleManager_DestroyParticleInvolving* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_DestroyParticleInvolving::InternalSwap(CUserMsg_ParticleManager_DestroyParticleInvolving* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(destroy_immediately_, other->destroy_immediately_);
  swap(entity_handle_, other->entity_handle_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_DestroyParticleInvolving::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMsg_ParticleManager_UpdateParticle::InitAsDefaultInstance() {
  ::proto::dota::_CUserMsg_ParticleManager_UpdateParticle_default_instance_._instance.get_mutable()->position_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
}
class CUserMsg_ParticleManager_UpdateParticle::HasBitSetters {
 public:
  static void set_has_control_point(CUserMsg_ParticleManager_UpdateParticle* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CMsgVector& position(const CUserMsg_ParticleManager_UpdateParticle* msg);
  static void set_has_position(CUserMsg_ParticleManager_UpdateParticle* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgVector&
CUserMsg_ParticleManager_UpdateParticle::HasBitSetters::position(const CUserMsg_ParticleManager_UpdateParticle* msg) {
  return *msg->position_;
}
void CUserMsg_ParticleManager_UpdateParticle::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_UpdateParticle::kControlPointFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticle::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_UpdateParticle::CUserMsg_ParticleManager_UpdateParticle()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
}
CUserMsg_ParticleManager_UpdateParticle::CUserMsg_ParticleManager_UpdateParticle(const CUserMsg_ParticleManager_UpdateParticle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::proto::dota::CMsgVector(*from.position_);
  } else {
    position_ = nullptr;
  }
  control_point_ = from.control_point_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
}

void CUserMsg_ParticleManager_UpdateParticle::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMsg_ParticleManager_UpdateParticle_usermessages_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&control_point_) -
      reinterpret_cast<char*>(&position_)) + sizeof(control_point_));
}

CUserMsg_ParticleManager_UpdateParticle::~CUserMsg_ParticleManager_UpdateParticle() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
  SharedDtor();
}

void CUserMsg_ParticleManager_UpdateParticle::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void CUserMsg_ParticleManager_UpdateParticle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMsg_ParticleManager_UpdateParticle& CUserMsg_ParticleManager_UpdateParticle::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMsg_ParticleManager_UpdateParticle_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMsg_ParticleManager_UpdateParticle::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(position_ != nullptr);
    position_->Clear();
  }
  control_point_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMsg_ParticleManager_UpdateParticle::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMsg_ParticleManager_UpdateParticle*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 control_point = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_control_point(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgVector position = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgVector::_InternalParse;
        object = msg->mutable_position();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMsg_ParticleManager_UpdateParticle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_control_point(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMsg_ParticleManager_UpdateParticle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional .proto.dota.CMsgVector position = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::position(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_UpdateParticle::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional .proto.dota.CMsgVector position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::position(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
  return target;
}

size_t CUserMsg_ParticleManager_UpdateParticle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CMsgVector position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional int32 control_point = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticle* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMsg_ParticleManager_UpdateParticle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticle::MergeFrom(const CUserMsg_ParticleManager_UpdateParticle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::proto::dota::CMsgVector::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      control_point_ = from.control_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_UpdateParticle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticle::CopyFrom(const CUserMsg_ParticleManager_UpdateParticle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticle::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_UpdateParticle::Swap(CUserMsg_ParticleManager_UpdateParticle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_UpdateParticle::InternalSwap(CUserMsg_ParticleManager_UpdateParticle* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(position_, other->position_);
  swap(control_point_, other->control_point_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_UpdateParticle::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMsg_ParticleManager_UpdateParticleFwd::InitAsDefaultInstance() {
  ::proto::dota::_CUserMsg_ParticleManager_UpdateParticleFwd_default_instance_._instance.get_mutable()->forward_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
}
class CUserMsg_ParticleManager_UpdateParticleFwd::HasBitSetters {
 public:
  static void set_has_control_point(CUserMsg_ParticleManager_UpdateParticleFwd* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CMsgVector& forward(const CUserMsg_ParticleManager_UpdateParticleFwd* msg);
  static void set_has_forward(CUserMsg_ParticleManager_UpdateParticleFwd* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgVector&
CUserMsg_ParticleManager_UpdateParticleFwd::HasBitSetters::forward(const CUserMsg_ParticleManager_UpdateParticleFwd* msg) {
  return *msg->forward_;
}
void CUserMsg_ParticleManager_UpdateParticleFwd::clear_forward() {
  if (forward_ != nullptr) forward_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_UpdateParticleFwd::kControlPointFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleFwd::kForwardFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_UpdateParticleFwd::CUserMsg_ParticleManager_UpdateParticleFwd()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
}
CUserMsg_ParticleManager_UpdateParticleFwd::CUserMsg_ParticleManager_UpdateParticleFwd(const CUserMsg_ParticleManager_UpdateParticleFwd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_forward()) {
    forward_ = new ::proto::dota::CMsgVector(*from.forward_);
  } else {
    forward_ = nullptr;
  }
  control_point_ = from.control_point_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
}

void CUserMsg_ParticleManager_UpdateParticleFwd::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMsg_ParticleManager_UpdateParticleFwd_usermessages_2eproto.base);
  ::memset(&forward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&control_point_) -
      reinterpret_cast<char*>(&forward_)) + sizeof(control_point_));
}

CUserMsg_ParticleManager_UpdateParticleFwd::~CUserMsg_ParticleManager_UpdateParticleFwd() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
  SharedDtor();
}

void CUserMsg_ParticleManager_UpdateParticleFwd::SharedDtor() {
  if (this != internal_default_instance()) delete forward_;
}

void CUserMsg_ParticleManager_UpdateParticleFwd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMsg_ParticleManager_UpdateParticleFwd& CUserMsg_ParticleManager_UpdateParticleFwd::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMsg_ParticleManager_UpdateParticleFwd_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMsg_ParticleManager_UpdateParticleFwd::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(forward_ != nullptr);
    forward_->Clear();
  }
  control_point_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMsg_ParticleManager_UpdateParticleFwd::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMsg_ParticleManager_UpdateParticleFwd*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 control_point = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_control_point(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgVector forward = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgVector::_InternalParse;
        object = msg->mutable_forward();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMsg_ParticleManager_UpdateParticleFwd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_control_point(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector forward = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_forward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMsg_ParticleManager_UpdateParticleFwd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional .proto.dota.CMsgVector forward = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::forward(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_UpdateParticleFwd::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional .proto.dota.CMsgVector forward = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::forward(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
  return target;
}

size_t CUserMsg_ParticleManager_UpdateParticleFwd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CMsgVector forward = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *forward_);
    }

    // optional int32 control_point = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleFwd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleFwd* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMsg_ParticleManager_UpdateParticleFwd>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleFwd::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleFwd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_forward()->::proto::dota::CMsgVector::MergeFrom(from.forward());
    }
    if (cached_has_bits & 0x00000002u) {
      control_point_ = from.control_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_UpdateParticleFwd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleFwd::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleFwd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleFwd::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_UpdateParticleFwd::Swap(CUserMsg_ParticleManager_UpdateParticleFwd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_UpdateParticleFwd::InternalSwap(CUserMsg_ParticleManager_UpdateParticleFwd* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(forward_, other->forward_);
  swap(control_point_, other->control_point_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_UpdateParticleFwd::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMsg_ParticleManager_UpdateParticleOrient::InitAsDefaultInstance() {
  ::proto::dota::_CUserMsg_ParticleManager_UpdateParticleOrient_default_instance_._instance.get_mutable()->forward_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  ::proto::dota::_CUserMsg_ParticleManager_UpdateParticleOrient_default_instance_._instance.get_mutable()->right_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  ::proto::dota::_CUserMsg_ParticleManager_UpdateParticleOrient_default_instance_._instance.get_mutable()->up_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  ::proto::dota::_CUserMsg_ParticleManager_UpdateParticleOrient_default_instance_._instance.get_mutable()->left_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
}
class CUserMsg_ParticleManager_UpdateParticleOrient::HasBitSetters {
 public:
  static void set_has_control_point(CUserMsg_ParticleManager_UpdateParticleOrient* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::proto::dota::CMsgVector& forward(const CUserMsg_ParticleManager_UpdateParticleOrient* msg);
  static void set_has_forward(CUserMsg_ParticleManager_UpdateParticleOrient* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::dota::CMsgVector& right(const CUserMsg_ParticleManager_UpdateParticleOrient* msg);
  static void set_has_right(CUserMsg_ParticleManager_UpdateParticleOrient* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CMsgVector& up(const CUserMsg_ParticleManager_UpdateParticleOrient* msg);
  static void set_has_up(CUserMsg_ParticleManager_UpdateParticleOrient* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::proto::dota::CMsgVector& left(const CUserMsg_ParticleManager_UpdateParticleOrient* msg);
  static void set_has_left(CUserMsg_ParticleManager_UpdateParticleOrient* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
};

const ::proto::dota::CMsgVector&
CUserMsg_ParticleManager_UpdateParticleOrient::HasBitSetters::forward(const CUserMsg_ParticleManager_UpdateParticleOrient* msg) {
  return *msg->forward_;
}
const ::proto::dota::CMsgVector&
CUserMsg_ParticleManager_UpdateParticleOrient::HasBitSetters::right(const CUserMsg_ParticleManager_UpdateParticleOrient* msg) {
  return *msg->right_;
}
const ::proto::dota::CMsgVector&
CUserMsg_ParticleManager_UpdateParticleOrient::HasBitSetters::up(const CUserMsg_ParticleManager_UpdateParticleOrient* msg) {
  return *msg->up_;
}
const ::proto::dota::CMsgVector&
CUserMsg_ParticleManager_UpdateParticleOrient::HasBitSetters::left(const CUserMsg_ParticleManager_UpdateParticleOrient* msg) {
  return *msg->left_;
}
void CUserMsg_ParticleManager_UpdateParticleOrient::clear_forward() {
  if (forward_ != nullptr) forward_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMsg_ParticleManager_UpdateParticleOrient::clear_right() {
  if (right_ != nullptr) right_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CUserMsg_ParticleManager_UpdateParticleOrient::clear_up() {
  if (up_ != nullptr) up_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CUserMsg_ParticleManager_UpdateParticleOrient::clear_left() {
  if (left_ != nullptr) left_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_UpdateParticleOrient::kControlPointFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleOrient::kForwardFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleOrient::kRightFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleOrient::kUpFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleOrient::kLeftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_UpdateParticleOrient::CUserMsg_ParticleManager_UpdateParticleOrient()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
}
CUserMsg_ParticleManager_UpdateParticleOrient::CUserMsg_ParticleManager_UpdateParticleOrient(const CUserMsg_ParticleManager_UpdateParticleOrient& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_forward()) {
    forward_ = new ::proto::dota::CMsgVector(*from.forward_);
  } else {
    forward_ = nullptr;
  }
  if (from.has_right()) {
    right_ = new ::proto::dota::CMsgVector(*from.right_);
  } else {
    right_ = nullptr;
  }
  if (from.has_up()) {
    up_ = new ::proto::dota::CMsgVector(*from.up_);
  } else {
    up_ = nullptr;
  }
  if (from.has_left()) {
    left_ = new ::proto::dota::CMsgVector(*from.left_);
  } else {
    left_ = nullptr;
  }
  control_point_ = from.control_point_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
}

void CUserMsg_ParticleManager_UpdateParticleOrient::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMsg_ParticleManager_UpdateParticleOrient_usermessages_2eproto.base);
  ::memset(&forward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&control_point_) -
      reinterpret_cast<char*>(&forward_)) + sizeof(control_point_));
}

CUserMsg_ParticleManager_UpdateParticleOrient::~CUserMsg_ParticleManager_UpdateParticleOrient() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
  SharedDtor();
}

void CUserMsg_ParticleManager_UpdateParticleOrient::SharedDtor() {
  if (this != internal_default_instance()) delete forward_;
  if (this != internal_default_instance()) delete right_;
  if (this != internal_default_instance()) delete up_;
  if (this != internal_default_instance()) delete left_;
}

void CUserMsg_ParticleManager_UpdateParticleOrient::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMsg_ParticleManager_UpdateParticleOrient& CUserMsg_ParticleManager_UpdateParticleOrient::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMsg_ParticleManager_UpdateParticleOrient_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMsg_ParticleManager_UpdateParticleOrient::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(forward_ != nullptr);
      forward_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(right_ != nullptr);
      right_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(up_ != nullptr);
      up_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(left_ != nullptr);
      left_->Clear();
    }
  }
  control_point_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMsg_ParticleManager_UpdateParticleOrient::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMsg_ParticleManager_UpdateParticleOrient*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 control_point = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_control_point(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgVector forward = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgVector::_InternalParse;
        object = msg->mutable_forward();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgVector right = 3 [deprecated = true];
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgVector::_InternalParse;
        object = msg->mutable_right();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgVector up = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgVector::_InternalParse;
        object = msg->mutable_up();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgVector left = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgVector::_InternalParse;
        object = msg->mutable_left();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMsg_ParticleManager_UpdateParticleOrient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_control_point(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector forward = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_forward()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector right = 3 [deprecated = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_right()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector up = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_up()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector left = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_left()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMsg_ParticleManager_UpdateParticleOrient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional .proto.dota.CMsgVector forward = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::forward(this), output);
  }

  // optional .proto.dota.CMsgVector right = 3 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::right(this), output);
  }

  // optional .proto.dota.CMsgVector up = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::up(this), output);
  }

  // optional .proto.dota.CMsgVector left = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::left(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_UpdateParticleOrient::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional .proto.dota.CMsgVector forward = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::forward(this), target);
  }

  // optional .proto.dota.CMsgVector right = 3 [deprecated = true];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::right(this), target);
  }

  // optional .proto.dota.CMsgVector up = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::up(this), target);
  }

  // optional .proto.dota.CMsgVector left = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::left(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
  return target;
}

size_t CUserMsg_ParticleManager_UpdateParticleOrient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .proto.dota.CMsgVector forward = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *forward_);
    }

    // optional .proto.dota.CMsgVector right = 3 [deprecated = true];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *right_);
    }

    // optional .proto.dota.CMsgVector up = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *up_);
    }

    // optional .proto.dota.CMsgVector left = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *left_);
    }

    // optional int32 control_point = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleOrient::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleOrient* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMsg_ParticleManager_UpdateParticleOrient>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleOrient::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleOrient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_forward()->::proto::dota::CMsgVector::MergeFrom(from.forward());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_right()->::proto::dota::CMsgVector::MergeFrom(from.right());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_up()->::proto::dota::CMsgVector::MergeFrom(from.up());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_left()->::proto::dota::CMsgVector::MergeFrom(from.left());
    }
    if (cached_has_bits & 0x00000010u) {
      control_point_ = from.control_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_UpdateParticleOrient::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleOrient::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleOrient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleOrient::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_UpdateParticleOrient::Swap(CUserMsg_ParticleManager_UpdateParticleOrient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_UpdateParticleOrient::InternalSwap(CUserMsg_ParticleManager_UpdateParticleOrient* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(forward_, other->forward_);
  swap(right_, other->right_);
  swap(up_, other->up_);
  swap(left_, other->left_);
  swap(control_point_, other->control_point_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_UpdateParticleOrient::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMsg_ParticleManager_UpdateParticleFallback::InitAsDefaultInstance() {
  ::proto::dota::_CUserMsg_ParticleManager_UpdateParticleFallback_default_instance_._instance.get_mutable()->position_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
}
class CUserMsg_ParticleManager_UpdateParticleFallback::HasBitSetters {
 public:
  static void set_has_control_point(CUserMsg_ParticleManager_UpdateParticleFallback* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CMsgVector& position(const CUserMsg_ParticleManager_UpdateParticleFallback* msg);
  static void set_has_position(CUserMsg_ParticleManager_UpdateParticleFallback* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgVector&
CUserMsg_ParticleManager_UpdateParticleFallback::HasBitSetters::position(const CUserMsg_ParticleManager_UpdateParticleFallback* msg) {
  return *msg->position_;
}
void CUserMsg_ParticleManager_UpdateParticleFallback::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_UpdateParticleFallback::kControlPointFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleFallback::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_UpdateParticleFallback::CUserMsg_ParticleManager_UpdateParticleFallback()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
}
CUserMsg_ParticleManager_UpdateParticleFallback::CUserMsg_ParticleManager_UpdateParticleFallback(const CUserMsg_ParticleManager_UpdateParticleFallback& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::proto::dota::CMsgVector(*from.position_);
  } else {
    position_ = nullptr;
  }
  control_point_ = from.control_point_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
}

void CUserMsg_ParticleManager_UpdateParticleFallback::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMsg_ParticleManager_UpdateParticleFallback_usermessages_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&control_point_) -
      reinterpret_cast<char*>(&position_)) + sizeof(control_point_));
}

CUserMsg_ParticleManager_UpdateParticleFallback::~CUserMsg_ParticleManager_UpdateParticleFallback() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
  SharedDtor();
}

void CUserMsg_ParticleManager_UpdateParticleFallback::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void CUserMsg_ParticleManager_UpdateParticleFallback::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMsg_ParticleManager_UpdateParticleFallback& CUserMsg_ParticleManager_UpdateParticleFallback::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMsg_ParticleManager_UpdateParticleFallback_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMsg_ParticleManager_UpdateParticleFallback::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(position_ != nullptr);
    position_->Clear();
  }
  control_point_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMsg_ParticleManager_UpdateParticleFallback::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMsg_ParticleManager_UpdateParticleFallback*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 control_point = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_control_point(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgVector position = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgVector::_InternalParse;
        object = msg->mutable_position();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMsg_ParticleManager_UpdateParticleFallback::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_control_point(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMsg_ParticleManager_UpdateParticleFallback::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional .proto.dota.CMsgVector position = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::position(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_UpdateParticleFallback::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional .proto.dota.CMsgVector position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::position(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
  return target;
}

size_t CUserMsg_ParticleManager_UpdateParticleFallback::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CMsgVector position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional int32 control_point = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleFallback::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleFallback* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMsg_ParticleManager_UpdateParticleFallback>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleFallback::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleFallback& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::proto::dota::CMsgVector::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      control_point_ = from.control_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_UpdateParticleFallback::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleFallback::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleFallback& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleFallback::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_UpdateParticleFallback::Swap(CUserMsg_ParticleManager_UpdateParticleFallback* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_UpdateParticleFallback::InternalSwap(CUserMsg_ParticleManager_UpdateParticleFallback* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(position_, other->position_);
  swap(control_point_, other->control_point_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_UpdateParticleFallback::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMsg_ParticleManager_UpdateParticleOffset::InitAsDefaultInstance() {
  ::proto::dota::_CUserMsg_ParticleManager_UpdateParticleOffset_default_instance_._instance.get_mutable()->origin_offset_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
  ::proto::dota::_CUserMsg_ParticleManager_UpdateParticleOffset_default_instance_._instance.get_mutable()->angle_offset_ = const_cast< ::proto::dota::CMsgQAngle*>(
      ::proto::dota::CMsgQAngle::internal_default_instance());
}
class CUserMsg_ParticleManager_UpdateParticleOffset::HasBitSetters {
 public:
  static void set_has_control_point(CUserMsg_ParticleManager_UpdateParticleOffset* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::proto::dota::CMsgVector& origin_offset(const CUserMsg_ParticleManager_UpdateParticleOffset* msg);
  static void set_has_origin_offset(CUserMsg_ParticleManager_UpdateParticleOffset* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::dota::CMsgQAngle& angle_offset(const CUserMsg_ParticleManager_UpdateParticleOffset* msg);
  static void set_has_angle_offset(CUserMsg_ParticleManager_UpdateParticleOffset* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::proto::dota::CMsgVector&
CUserMsg_ParticleManager_UpdateParticleOffset::HasBitSetters::origin_offset(const CUserMsg_ParticleManager_UpdateParticleOffset* msg) {
  return *msg->origin_offset_;
}
const ::proto::dota::CMsgQAngle&
CUserMsg_ParticleManager_UpdateParticleOffset::HasBitSetters::angle_offset(const CUserMsg_ParticleManager_UpdateParticleOffset* msg) {
  return *msg->angle_offset_;
}
void CUserMsg_ParticleManager_UpdateParticleOffset::clear_origin_offset() {
  if (origin_offset_ != nullptr) origin_offset_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CUserMsg_ParticleManager_UpdateParticleOffset::clear_angle_offset() {
  if (angle_offset_ != nullptr) angle_offset_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_UpdateParticleOffset::kControlPointFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleOffset::kOriginOffsetFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleOffset::kAngleOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_UpdateParticleOffset::CUserMsg_ParticleManager_UpdateParticleOffset()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
}
CUserMsg_ParticleManager_UpdateParticleOffset::CUserMsg_ParticleManager_UpdateParticleOffset(const CUserMsg_ParticleManager_UpdateParticleOffset& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_origin_offset()) {
    origin_offset_ = new ::proto::dota::CMsgVector(*from.origin_offset_);
  } else {
    origin_offset_ = nullptr;
  }
  if (from.has_angle_offset()) {
    angle_offset_ = new ::proto::dota::CMsgQAngle(*from.angle_offset_);
  } else {
    angle_offset_ = nullptr;
  }
  control_point_ = from.control_point_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
}

void CUserMsg_ParticleManager_UpdateParticleOffset::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMsg_ParticleManager_UpdateParticleOffset_usermessages_2eproto.base);
  ::memset(&origin_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&control_point_) -
      reinterpret_cast<char*>(&origin_offset_)) + sizeof(control_point_));
}

CUserMsg_ParticleManager_UpdateParticleOffset::~CUserMsg_ParticleManager_UpdateParticleOffset() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
  SharedDtor();
}

void CUserMsg_ParticleManager_UpdateParticleOffset::SharedDtor() {
  if (this != internal_default_instance()) delete origin_offset_;
  if (this != internal_default_instance()) delete angle_offset_;
}

void CUserMsg_ParticleManager_UpdateParticleOffset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMsg_ParticleManager_UpdateParticleOffset& CUserMsg_ParticleManager_UpdateParticleOffset::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMsg_ParticleManager_UpdateParticleOffset_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMsg_ParticleManager_UpdateParticleOffset::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(origin_offset_ != nullptr);
      origin_offset_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(angle_offset_ != nullptr);
      angle_offset_->Clear();
    }
  }
  control_point_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMsg_ParticleManager_UpdateParticleOffset::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMsg_ParticleManager_UpdateParticleOffset*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 control_point = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_control_point(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgVector origin_offset = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgVector::_InternalParse;
        object = msg->mutable_origin_offset();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CMsgQAngle angle_offset = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgQAngle::_InternalParse;
        object = msg->mutable_angle_offset();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMsg_ParticleManager_UpdateParticleOffset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_control_point(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector origin_offset = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_origin_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgQAngle angle_offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_angle_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMsg_ParticleManager_UpdateParticleOffset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional .proto.dota.CMsgVector origin_offset = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::origin_offset(this), output);
  }

  // optional .proto.dota.CMsgQAngle angle_offset = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::angle_offset(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_UpdateParticleOffset::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional .proto.dota.CMsgVector origin_offset = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::origin_offset(this), target);
  }

  // optional .proto.dota.CMsgQAngle angle_offset = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::angle_offset(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
  return target;
}

size_t CUserMsg_ParticleManager_UpdateParticleOffset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .proto.dota.CMsgVector origin_offset = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *origin_offset_);
    }

    // optional .proto.dota.CMsgQAngle angle_offset = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *angle_offset_);
    }

    // optional int32 control_point = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleOffset::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleOffset* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMsg_ParticleManager_UpdateParticleOffset>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleOffset::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleOffset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_origin_offset()->::proto::dota::CMsgVector::MergeFrom(from.origin_offset());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_angle_offset()->::proto::dota::CMsgQAngle::MergeFrom(from.angle_offset());
    }
    if (cached_has_bits & 0x00000004u) {
      control_point_ = from.control_point_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_UpdateParticleOffset::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleOffset::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleOffset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleOffset::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_UpdateParticleOffset::Swap(CUserMsg_ParticleManager_UpdateParticleOffset* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_UpdateParticleOffset::InternalSwap(CUserMsg_ParticleManager_UpdateParticleOffset* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(origin_offset_, other->origin_offset_);
  swap(angle_offset_, other->angle_offset_);
  swap(control_point_, other->control_point_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_UpdateParticleOffset::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMsg_ParticleManager_UpdateParticleEnt::InitAsDefaultInstance() {
  ::proto::dota::_CUserMsg_ParticleManager_UpdateParticleEnt_default_instance_._instance.get_mutable()->fallback_position_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
}
class CUserMsg_ParticleManager_UpdateParticleEnt::HasBitSetters {
 public:
  static void set_has_control_point(CUserMsg_ParticleManager_UpdateParticleEnt* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_entity_handle(CUserMsg_ParticleManager_UpdateParticleEnt* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static void set_has_attach_type(CUserMsg_ParticleManager_UpdateParticleEnt* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static void set_has_attachment(CUserMsg_ParticleManager_UpdateParticleEnt* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::proto::dota::CMsgVector& fallback_position(const CUserMsg_ParticleManager_UpdateParticleEnt* msg);
  static void set_has_fallback_position(CUserMsg_ParticleManager_UpdateParticleEnt* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_include_wearables(CUserMsg_ParticleManager_UpdateParticleEnt* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
};

const ::proto::dota::CMsgVector&
CUserMsg_ParticleManager_UpdateParticleEnt::HasBitSetters::fallback_position(const CUserMsg_ParticleManager_UpdateParticleEnt* msg) {
  return *msg->fallback_position_;
}
void CUserMsg_ParticleManager_UpdateParticleEnt::clear_fallback_position() {
  if (fallback_position_ != nullptr) fallback_position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_UpdateParticleEnt::kControlPointFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleEnt::kEntityHandleFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleEnt::kAttachTypeFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleEnt::kAttachmentFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleEnt::kFallbackPositionFieldNumber;
const int CUserMsg_ParticleManager_UpdateParticleEnt::kIncludeWearablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_UpdateParticleEnt::CUserMsg_ParticleManager_UpdateParticleEnt()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
}
CUserMsg_ParticleManager_UpdateParticleEnt::CUserMsg_ParticleManager_UpdateParticleEnt(const CUserMsg_ParticleManager_UpdateParticleEnt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fallback_position()) {
    fallback_position_ = new ::proto::dota::CMsgVector(*from.fallback_position_);
  } else {
    fallback_position_ = nullptr;
  }
  ::memcpy(&control_point_, &from.control_point_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_wearables_) -
    reinterpret_cast<char*>(&control_point_)) + sizeof(include_wearables_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
}

void CUserMsg_ParticleManager_UpdateParticleEnt::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMsg_ParticleManager_UpdateParticleEnt_usermessages_2eproto.base);
  ::memset(&fallback_position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_wearables_) -
      reinterpret_cast<char*>(&fallback_position_)) + sizeof(include_wearables_));
}

CUserMsg_ParticleManager_UpdateParticleEnt::~CUserMsg_ParticleManager_UpdateParticleEnt() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
  SharedDtor();
}

void CUserMsg_ParticleManager_UpdateParticleEnt::SharedDtor() {
  if (this != internal_default_instance()) delete fallback_position_;
}

void CUserMsg_ParticleManager_UpdateParticleEnt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMsg_ParticleManager_UpdateParticleEnt& CUserMsg_ParticleManager_UpdateParticleEnt::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMsg_ParticleManager_UpdateParticleEnt_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMsg_ParticleManager_UpdateParticleEnt::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(fallback_position_ != nullptr);
    fallback_position_->Clear();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&control_point_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&include_wearables_) -
        reinterpret_cast<char*>(&control_point_)) + sizeof(include_wearables_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMsg_ParticleManager_UpdateParticleEnt::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMsg_ParticleManager_UpdateParticleEnt*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 control_point = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_control_point(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 entity_handle = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_entity_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 attach_type = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_attach_type(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 attachment = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 32) goto handle_unusual;
        msg->set_attachment(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgVector fallback_position = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgVector::_InternalParse;
        object = msg->mutable_fallback_position();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional bool include_wearables = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 48) goto handle_unusual;
        msg->set_include_wearables(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMsg_ParticleManager_UpdateParticleEnt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 control_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_control_point(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &control_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 entity_handle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_entity_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 attach_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_attach_type(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attach_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 attachment = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (32 & 0xFF)) {
          HasBitSetters::set_has_attachment(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attachment_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector fallback_position = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fallback_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool include_wearables = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (48 & 0xFF)) {
          HasBitSetters::set_has_include_wearables(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &include_wearables_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMsg_ParticleManager_UpdateParticleEnt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->control_point(), output);
  }

  // optional int32 entity_handle = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->entity_handle(), output);
  }

  // optional int32 attach_type = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->attach_type(), output);
  }

  // optional int32 attachment = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->attachment(), output);
  }

  // optional .proto.dota.CMsgVector fallback_position = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::fallback_position(this), output);
  }

  // optional bool include_wearables = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->include_wearables(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_UpdateParticleEnt::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 control_point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->control_point(), target);
  }

  // optional int32 entity_handle = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->entity_handle(), target);
  }

  // optional int32 attach_type = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->attach_type(), target);
  }

  // optional int32 attachment = 4;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->attachment(), target);
  }

  // optional .proto.dota.CMsgVector fallback_position = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::fallback_position(this), target);
  }

  // optional bool include_wearables = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->include_wearables(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
  return target;
}

size_t CUserMsg_ParticleManager_UpdateParticleEnt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .proto.dota.CMsgVector fallback_position = 5;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *fallback_position_);
    }

    // optional int32 control_point = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->control_point());
    }

    // optional int32 entity_handle = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }

    // optional int32 attach_type = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attach_type());
    }

    // optional int32 attachment = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attachment());
    }

    // optional bool include_wearables = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleEnt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleEnt* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMsg_ParticleManager_UpdateParticleEnt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleEnt::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleEnt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fallback_position()->::proto::dota::CMsgVector::MergeFrom(from.fallback_position());
    }
    if (cached_has_bits & 0x00000002u) {
      control_point_ = from.control_point_;
    }
    if (cached_has_bits & 0x00000004u) {
      entity_handle_ = from.entity_handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      attach_type_ = from.attach_type_;
    }
    if (cached_has_bits & 0x00000010u) {
      attachment_ = from.attachment_;
    }
    if (cached_has_bits & 0x00000020u) {
      include_wearables_ = from.include_wearables_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_UpdateParticleEnt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleEnt::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleEnt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleEnt::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_UpdateParticleEnt::Swap(CUserMsg_ParticleManager_UpdateParticleEnt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_UpdateParticleEnt::InternalSwap(CUserMsg_ParticleManager_UpdateParticleEnt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fallback_position_, other->fallback_position_);
  swap(control_point_, other->control_point_);
  swap(entity_handle_, other->entity_handle_);
  swap(attach_type_, other->attach_type_);
  swap(attachment_, other->attachment_);
  swap(include_wearables_, other->include_wearables_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_UpdateParticleEnt::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::InitAsDefaultInstance() {
}
class CUserMsg_ParticleManager_UpdateParticleSetFrozen::HasBitSetters {
 public:
  static void set_has_set_frozen(CUserMsg_ParticleManager_UpdateParticleSetFrozen* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_UpdateParticleSetFrozen::kSetFrozenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_UpdateParticleSetFrozen::CUserMsg_ParticleManager_UpdateParticleSetFrozen()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
}
CUserMsg_ParticleManager_UpdateParticleSetFrozen::CUserMsg_ParticleManager_UpdateParticleSetFrozen(const CUserMsg_ParticleManager_UpdateParticleSetFrozen& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  set_frozen_ = from.set_frozen_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::SharedCtor() {
  set_frozen_ = false;
}

CUserMsg_ParticleManager_UpdateParticleSetFrozen::~CUserMsg_ParticleManager_UpdateParticleSetFrozen() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  SharedDtor();
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::SharedDtor() {
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMsg_ParticleManager_UpdateParticleSetFrozen& CUserMsg_ParticleManager_UpdateParticleSetFrozen::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMsg_ParticleManager_UpdateParticleSetFrozen_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMsg_ParticleManager_UpdateParticleSetFrozen::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  set_frozen_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMsg_ParticleManager_UpdateParticleSetFrozen::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMsg_ParticleManager_UpdateParticleSetFrozen*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool set_frozen = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_set_frozen(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMsg_ParticleManager_UpdateParticleSetFrozen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool set_frozen = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_set_frozen(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &set_frozen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool set_frozen = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->set_frozen(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_UpdateParticleSetFrozen::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool set_frozen = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->set_frozen(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  return target;
}

size_t CUserMsg_ParticleManager_UpdateParticleSetFrozen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool set_frozen = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleSetFrozen* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMsg_ParticleManager_UpdateParticleSetFrozen>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleSetFrozen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_set_frozen()) {
    set_set_frozen(from.set_frozen());
  }
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleSetFrozen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleSetFrozen::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_UpdateParticleSetFrozen::Swap(CUserMsg_ParticleManager_UpdateParticleSetFrozen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_UpdateParticleSetFrozen::InternalSwap(CUserMsg_ParticleManager_UpdateParticleSetFrozen* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(set_frozen_, other->set_frozen_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_UpdateParticleSetFrozen::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::InitAsDefaultInstance() {
}
class CUserMsg_ParticleManager_UpdateParticleShouldDraw::HasBitSetters {
 public:
  static void set_has_should_draw(CUserMsg_ParticleManager_UpdateParticleShouldDraw* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_UpdateParticleShouldDraw::kShouldDrawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_UpdateParticleShouldDraw::CUserMsg_ParticleManager_UpdateParticleShouldDraw()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
}
CUserMsg_ParticleManager_UpdateParticleShouldDraw::CUserMsg_ParticleManager_UpdateParticleShouldDraw(const CUserMsg_ParticleManager_UpdateParticleShouldDraw& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  should_draw_ = from.should_draw_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::SharedCtor() {
  should_draw_ = false;
}

CUserMsg_ParticleManager_UpdateParticleShouldDraw::~CUserMsg_ParticleManager_UpdateParticleShouldDraw() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  SharedDtor();
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::SharedDtor() {
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMsg_ParticleManager_UpdateParticleShouldDraw& CUserMsg_ParticleManager_UpdateParticleShouldDraw::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMsg_ParticleManager_UpdateParticleShouldDraw_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMsg_ParticleManager_UpdateParticleShouldDraw::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  should_draw_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMsg_ParticleManager_UpdateParticleShouldDraw::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMsg_ParticleManager_UpdateParticleShouldDraw*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool should_draw = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_should_draw(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMsg_ParticleManager_UpdateParticleShouldDraw::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool should_draw = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_should_draw(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_draw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool should_draw = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->should_draw(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_UpdateParticleShouldDraw::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool should_draw = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->should_draw(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  return target;
}

size_t CUserMsg_ParticleManager_UpdateParticleShouldDraw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool should_draw = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateParticleShouldDraw* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMsg_ParticleManager_UpdateParticleShouldDraw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::MergeFrom(const CUserMsg_ParticleManager_UpdateParticleShouldDraw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_should_draw()) {
    set_should_draw(from.should_draw());
  }
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::CopyFrom(const CUserMsg_ParticleManager_UpdateParticleShouldDraw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateParticleShouldDraw::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_UpdateParticleShouldDraw::Swap(CUserMsg_ParticleManager_UpdateParticleShouldDraw* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_UpdateParticleShouldDraw::InternalSwap(CUserMsg_ParticleManager_UpdateParticleShouldDraw* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(should_draw_, other->should_draw_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_UpdateParticleShouldDraw::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMsg_ParticleManager_ChangeControlPointAttachment::InitAsDefaultInstance() {
}
class CUserMsg_ParticleManager_ChangeControlPointAttachment::HasBitSetters {
 public:
  static void set_has_attachment_old(CUserMsg_ParticleManager_ChangeControlPointAttachment* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_attachment_new(CUserMsg_ParticleManager_ChangeControlPointAttachment* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_entity_handle(CUserMsg_ParticleManager_ChangeControlPointAttachment* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_ChangeControlPointAttachment::kAttachmentOldFieldNumber;
const int CUserMsg_ParticleManager_ChangeControlPointAttachment::kAttachmentNewFieldNumber;
const int CUserMsg_ParticleManager_ChangeControlPointAttachment::kEntityHandleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_ChangeControlPointAttachment::CUserMsg_ParticleManager_ChangeControlPointAttachment()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
}
CUserMsg_ParticleManager_ChangeControlPointAttachment::CUserMsg_ParticleManager_ChangeControlPointAttachment(const CUserMsg_ParticleManager_ChangeControlPointAttachment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&attachment_old_, &from.attachment_old_,
    static_cast<size_t>(reinterpret_cast<char*>(&entity_handle_) -
    reinterpret_cast<char*>(&attachment_old_)) + sizeof(entity_handle_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::SharedCtor() {
  ::memset(&attachment_old_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entity_handle_) -
      reinterpret_cast<char*>(&attachment_old_)) + sizeof(entity_handle_));
}

CUserMsg_ParticleManager_ChangeControlPointAttachment::~CUserMsg_ParticleManager_ChangeControlPointAttachment() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
  SharedDtor();
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::SharedDtor() {
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMsg_ParticleManager_ChangeControlPointAttachment& CUserMsg_ParticleManager_ChangeControlPointAttachment::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMsg_ParticleManager_ChangeControlPointAttachment_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMsg_ParticleManager_ChangeControlPointAttachment::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&attachment_old_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&entity_handle_) -
        reinterpret_cast<char*>(&attachment_old_)) + sizeof(entity_handle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMsg_ParticleManager_ChangeControlPointAttachment::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMsg_ParticleManager_ChangeControlPointAttachment*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 attachment_old = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_attachment_old(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 attachment_new = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_attachment_new(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 entity_handle = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 24) goto handle_unusual;
        msg->set_entity_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMsg_ParticleManager_ChangeControlPointAttachment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 attachment_old = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_attachment_old(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attachment_old_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 attachment_new = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_attachment_new(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attachment_new_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 entity_handle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (24 & 0xFF)) {
          HasBitSetters::set_has_entity_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMsg_ParticleManager_ChangeControlPointAttachment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 attachment_old = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->attachment_old(), output);
  }

  // optional int32 attachment_new = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attachment_new(), output);
  }

  // optional int32 entity_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->entity_handle(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_ChangeControlPointAttachment::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 attachment_old = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->attachment_old(), target);
  }

  // optional int32 attachment_new = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attachment_new(), target);
  }

  // optional int32 entity_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->entity_handle(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
  return target;
}

size_t CUserMsg_ParticleManager_ChangeControlPointAttachment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 attachment_old = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attachment_old());
    }

    // optional int32 attachment_new = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attachment_new());
    }

    // optional int32 entity_handle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_ChangeControlPointAttachment* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMsg_ParticleManager_ChangeControlPointAttachment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::MergeFrom(const CUserMsg_ParticleManager_ChangeControlPointAttachment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      attachment_old_ = from.attachment_old_;
    }
    if (cached_has_bits & 0x00000002u) {
      attachment_new_ = from.attachment_new_;
    }
    if (cached_has_bits & 0x00000004u) {
      entity_handle_ = from.entity_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::CopyFrom(const CUserMsg_ParticleManager_ChangeControlPointAttachment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_ChangeControlPointAttachment::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_ChangeControlPointAttachment::Swap(CUserMsg_ParticleManager_ChangeControlPointAttachment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_ChangeControlPointAttachment::InternalSwap(CUserMsg_ParticleManager_ChangeControlPointAttachment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(attachment_old_, other->attachment_old_);
  swap(attachment_new_, other->attachment_new_);
  swap(entity_handle_, other->entity_handle_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_ChangeControlPointAttachment::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMsg_ParticleManager_UpdateEntityPosition::InitAsDefaultInstance() {
  ::proto::dota::_CUserMsg_ParticleManager_UpdateEntityPosition_default_instance_._instance.get_mutable()->position_ = const_cast< ::proto::dota::CMsgVector*>(
      ::proto::dota::CMsgVector::internal_default_instance());
}
class CUserMsg_ParticleManager_UpdateEntityPosition::HasBitSetters {
 public:
  static void set_has_entity_handle(CUserMsg_ParticleManager_UpdateEntityPosition* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CMsgVector& position(const CUserMsg_ParticleManager_UpdateEntityPosition* msg);
  static void set_has_position(CUserMsg_ParticleManager_UpdateEntityPosition* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::proto::dota::CMsgVector&
CUserMsg_ParticleManager_UpdateEntityPosition::HasBitSetters::position(const CUserMsg_ParticleManager_UpdateEntityPosition* msg) {
  return *msg->position_;
}
void CUserMsg_ParticleManager_UpdateEntityPosition::clear_position() {
  if (position_ != nullptr) position_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_UpdateEntityPosition::kEntityHandleFieldNumber;
const int CUserMsg_ParticleManager_UpdateEntityPosition::kPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_UpdateEntityPosition::CUserMsg_ParticleManager_UpdateEntityPosition()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.UpdateEntityPosition)
}
CUserMsg_ParticleManager_UpdateEntityPosition::CUserMsg_ParticleManager_UpdateEntityPosition(const CUserMsg_ParticleManager_UpdateEntityPosition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::proto::dota::CMsgVector(*from.position_);
  } else {
    position_ = nullptr;
  }
  entity_handle_ = from.entity_handle_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.UpdateEntityPosition)
}

void CUserMsg_ParticleManager_UpdateEntityPosition::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMsg_ParticleManager_UpdateEntityPosition_usermessages_2eproto.base);
  ::memset(&position_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&entity_handle_) -
      reinterpret_cast<char*>(&position_)) + sizeof(entity_handle_));
}

CUserMsg_ParticleManager_UpdateEntityPosition::~CUserMsg_ParticleManager_UpdateEntityPosition() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.UpdateEntityPosition)
  SharedDtor();
}

void CUserMsg_ParticleManager_UpdateEntityPosition::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
}

void CUserMsg_ParticleManager_UpdateEntityPosition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMsg_ParticleManager_UpdateEntityPosition& CUserMsg_ParticleManager_UpdateEntityPosition::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMsg_ParticleManager_UpdateEntityPosition_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMsg_ParticleManager_UpdateEntityPosition::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.UpdateEntityPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(position_ != nullptr);
    position_->Clear();
  }
  entity_handle_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMsg_ParticleManager_UpdateEntityPosition::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMsg_ParticleManager_UpdateEntityPosition*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 entity_handle = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_entity_handle(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CMsgVector position = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CMsgVector::_InternalParse;
        object = msg->mutable_position();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMsg_ParticleManager_UpdateEntityPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.UpdateEntityPosition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entity_handle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_entity_handle(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_handle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CMsgVector position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.UpdateEntityPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.UpdateEntityPosition)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMsg_ParticleManager_UpdateEntityPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.UpdateEntityPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entity_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entity_handle(), output);
  }

  // optional .proto.dota.CMsgVector position = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::position(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.UpdateEntityPosition)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_UpdateEntityPosition::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.UpdateEntityPosition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entity_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entity_handle(), target);
  }

  // optional .proto.dota.CMsgVector position = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::position(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.UpdateEntityPosition)
  return target;
}

size_t CUserMsg_ParticleManager_UpdateEntityPosition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.UpdateEntityPosition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .proto.dota.CMsgVector position = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *position_);
    }

    // optional int32 entity_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_handle());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_UpdateEntityPosition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateEntityPosition)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_UpdateEntityPosition* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMsg_ParticleManager_UpdateEntityPosition>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.UpdateEntityPosition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.UpdateEntityPosition)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_UpdateEntityPosition::MergeFrom(const CUserMsg_ParticleManager_UpdateEntityPosition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.UpdateEntityPosition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::proto::dota::CMsgVector::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      entity_handle_ = from.entity_handle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_UpdateEntityPosition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateEntityPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_UpdateEntityPosition::CopyFrom(const CUserMsg_ParticleManager_UpdateEntityPosition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.UpdateEntityPosition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_UpdateEntityPosition::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_UpdateEntityPosition::Swap(CUserMsg_ParticleManager_UpdateEntityPosition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_UpdateEntityPosition::InternalSwap(CUserMsg_ParticleManager_UpdateEntityPosition* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(position_, other->position_);
  swap(entity_handle_, other->entity_handle_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_UpdateEntityPosition::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMsg_ParticleManager_SetParticleFoWProperties::InitAsDefaultInstance() {
}
class CUserMsg_ParticleManager_SetParticleFoWProperties::HasBitSetters {
 public:
  static void set_has_fow_control_point(CUserMsg_ParticleManager_SetParticleFoWProperties* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_fow_control_point2(CUserMsg_ParticleManager_SetParticleFoWProperties* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_fow_radius(CUserMsg_ParticleManager_SetParticleFoWProperties* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_SetParticleFoWProperties::kFowControlPointFieldNumber;
const int CUserMsg_ParticleManager_SetParticleFoWProperties::kFowControlPoint2FieldNumber;
const int CUserMsg_ParticleManager_SetParticleFoWProperties::kFowRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_SetParticleFoWProperties::CUserMsg_ParticleManager_SetParticleFoWProperties()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.SetParticleFoWProperties)
}
CUserMsg_ParticleManager_SetParticleFoWProperties::CUserMsg_ParticleManager_SetParticleFoWProperties(const CUserMsg_ParticleManager_SetParticleFoWProperties& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fow_control_point_, &from.fow_control_point_,
    static_cast<size_t>(reinterpret_cast<char*>(&fow_radius_) -
    reinterpret_cast<char*>(&fow_control_point_)) + sizeof(fow_radius_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.SetParticleFoWProperties)
}

void CUserMsg_ParticleManager_SetParticleFoWProperties::SharedCtor() {
  ::memset(&fow_control_point_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fow_radius_) -
      reinterpret_cast<char*>(&fow_control_point_)) + sizeof(fow_radius_));
}

CUserMsg_ParticleManager_SetParticleFoWProperties::~CUserMsg_ParticleManager_SetParticleFoWProperties() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.SetParticleFoWProperties)
  SharedDtor();
}

void CUserMsg_ParticleManager_SetParticleFoWProperties::SharedDtor() {
}

void CUserMsg_ParticleManager_SetParticleFoWProperties::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMsg_ParticleManager_SetParticleFoWProperties& CUserMsg_ParticleManager_SetParticleFoWProperties::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMsg_ParticleManager_SetParticleFoWProperties_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMsg_ParticleManager_SetParticleFoWProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.SetParticleFoWProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&fow_control_point_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fow_radius_) -
        reinterpret_cast<char*>(&fow_control_point_)) + sizeof(fow_radius_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMsg_ParticleManager_SetParticleFoWProperties::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMsg_ParticleManager_SetParticleFoWProperties*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 fow_control_point = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_fow_control_point(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 fow_control_point2 = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_fow_control_point2(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float fow_radius = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 29) goto handle_unusual;
        msg->set_fow_radius(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMsg_ParticleManager_SetParticleFoWProperties::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.SetParticleFoWProperties)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fow_control_point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_fow_control_point(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fow_control_point_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fow_control_point2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_fow_control_point2(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fow_control_point2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fow_radius = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (29 & 0xFF)) {
          HasBitSetters::set_has_fow_radius(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fow_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.SetParticleFoWProperties)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.SetParticleFoWProperties)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMsg_ParticleManager_SetParticleFoWProperties::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.SetParticleFoWProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 fow_control_point = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fow_control_point(), output);
  }

  // optional int32 fow_control_point2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fow_control_point2(), output);
  }

  // optional float fow_radius = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->fow_radius(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.SetParticleFoWProperties)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_SetParticleFoWProperties::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.SetParticleFoWProperties)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 fow_control_point = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fow_control_point(), target);
  }

  // optional int32 fow_control_point2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fow_control_point2(), target);
  }

  // optional float fow_radius = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->fow_radius(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.SetParticleFoWProperties)
  return target;
}

size_t CUserMsg_ParticleManager_SetParticleFoWProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.SetParticleFoWProperties)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 fow_control_point = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fow_control_point());
    }

    // optional int32 fow_control_point2 = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fow_control_point2());
    }

    // optional float fow_radius = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_SetParticleFoWProperties::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.SetParticleFoWProperties)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_SetParticleFoWProperties* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMsg_ParticleManager_SetParticleFoWProperties>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.SetParticleFoWProperties)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.SetParticleFoWProperties)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_SetParticleFoWProperties::MergeFrom(const CUserMsg_ParticleManager_SetParticleFoWProperties& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.SetParticleFoWProperties)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      fow_control_point_ = from.fow_control_point_;
    }
    if (cached_has_bits & 0x00000002u) {
      fow_control_point2_ = from.fow_control_point2_;
    }
    if (cached_has_bits & 0x00000004u) {
      fow_radius_ = from.fow_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager_SetParticleFoWProperties::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.SetParticleFoWProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_SetParticleFoWProperties::CopyFrom(const CUserMsg_ParticleManager_SetParticleFoWProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.SetParticleFoWProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_SetParticleFoWProperties::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_SetParticleFoWProperties::Swap(CUserMsg_ParticleManager_SetParticleFoWProperties* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_SetParticleFoWProperties::InternalSwap(CUserMsg_ParticleManager_SetParticleFoWProperties* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(fow_control_point_, other->fow_control_point_);
  swap(fow_control_point2_, other->fow_control_point2_);
  swap(fow_radius_, other->fow_radius_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_SetParticleFoWProperties::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMsg_ParticleManager_SetParticleShouldCheckFoW::InitAsDefaultInstance() {
}
class CUserMsg_ParticleManager_SetParticleShouldCheckFoW::HasBitSetters {
 public:
  static void set_has_check_fow(CUserMsg_ParticleManager_SetParticleShouldCheckFoW* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_SetParticleShouldCheckFoW::kCheckFowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_SetParticleShouldCheckFoW::CUserMsg_ParticleManager_SetParticleShouldCheckFoW()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
}
CUserMsg_ParticleManager_SetParticleShouldCheckFoW::CUserMsg_ParticleManager_SetParticleShouldCheckFoW(const CUserMsg_ParticleManager_SetParticleShouldCheckFoW& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  check_fow_ = from.check_fow_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
}

void CUserMsg_ParticleManager_SetParticleShouldCheckFoW::SharedCtor() {
  check_fow_ = false;
}

CUserMsg_ParticleManager_SetParticleShouldCheckFoW::~CUserMsg_ParticleManager_SetParticleShouldCheckFoW() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
  SharedDtor();
}

void CUserMsg_ParticleManager_SetParticleShouldCheckFoW::SharedDtor() {
}

void CUserMsg_ParticleManager_SetParticleShouldCheckFoW::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMsg_ParticleManager_SetParticleShouldCheckFoW& CUserMsg_ParticleManager_SetParticleShouldCheckFoW::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMsg_ParticleManager_SetParticleShouldCheckFoW_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMsg_ParticleManager_SetParticleShouldCheckFoW::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  check_fow_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMsg_ParticleManager_SetParticleShouldCheckFoW::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMsg_ParticleManager_SetParticleShouldCheckFoW*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional bool check_fow = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_check_fow(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMsg_ParticleManager_SetParticleShouldCheckFoW::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool check_fow = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_check_fow(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &check_fow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMsg_ParticleManager_SetParticleShouldCheckFoW::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool check_fow = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->check_fow(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_SetParticleShouldCheckFoW::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool check_fow = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->check_fow(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
  return target;
}

size_t CUserMsg_ParticleManager_SetParticleShouldCheckFoW::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool check_fow = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_SetParticleShouldCheckFoW::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_SetParticleShouldCheckFoW* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMsg_ParticleManager_SetParticleShouldCheckFoW>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_SetParticleShouldCheckFoW::MergeFrom(const CUserMsg_ParticleManager_SetParticleShouldCheckFoW& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_check_fow()) {
    set_check_fow(from.check_fow());
  }
}

void CUserMsg_ParticleManager_SetParticleShouldCheckFoW::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_SetParticleShouldCheckFoW::CopyFrom(const CUserMsg_ParticleManager_SetParticleShouldCheckFoW& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.SetParticleShouldCheckFoW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_SetParticleShouldCheckFoW::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_SetParticleShouldCheckFoW::Swap(CUserMsg_ParticleManager_SetParticleShouldCheckFoW* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_SetParticleShouldCheckFoW::InternalSwap(CUserMsg_ParticleManager_SetParticleShouldCheckFoW* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(check_fow_, other->check_fow_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager_SetParticleShouldCheckFoW::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMsg_ParticleManager_SetParticleText::InitAsDefaultInstance() {
}
class CUserMsg_ParticleManager_SetParticleText::HasBitSetters {
 public:
  static void set_has_text(CUserMsg_ParticleManager_SetParticleText* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager_SetParticleText::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager_SetParticleText::CUserMsg_ParticleManager_SetParticleText()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager.SetParticleText)
}
CUserMsg_ParticleManager_SetParticleText::CUserMsg_ParticleManager_SetParticleText(const CUserMsg_ParticleManager_SetParticleText& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager.SetParticleText)
}

void CUserMsg_ParticleManager_SetParticleText::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMsg_ParticleManager_SetParticleText_usermessages_2eproto.base);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CUserMsg_ParticleManager_SetParticleText::~CUserMsg_ParticleManager_SetParticleText() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager.SetParticleText)
  SharedDtor();
}

void CUserMsg_ParticleManager_SetParticleText::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMsg_ParticleManager_SetParticleText::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMsg_ParticleManager_SetParticleText& CUserMsg_ParticleManager_SetParticleText::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMsg_ParticleManager_SetParticleText_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMsg_ParticleManager_SetParticleText::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager.SetParticleText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    text_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMsg_ParticleManager_SetParticleText::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMsg_ParticleManager_SetParticleText*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string text = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CUserMsg_ParticleManager.SetParticleText.text");
        object = msg->mutable_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMsg_ParticleManager_SetParticleText::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager.SetParticleText)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string text = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMsg_ParticleManager.SetParticleText.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager.SetParticleText)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager.SetParticleText)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMsg_ParticleManager_SetParticleText::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager.SetParticleText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMsg_ParticleManager.SetParticleText.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager.SetParticleText)
}

::google::protobuf::uint8* CUserMsg_ParticleManager_SetParticleText::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager.SetParticleText)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string text = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMsg_ParticleManager.SetParticleText.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager.SetParticleText)
  return target;
}

size_t CUserMsg_ParticleManager_SetParticleText::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager.SetParticleText)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string text = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager_SetParticleText::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager.SetParticleText)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager_SetParticleText* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMsg_ParticleManager_SetParticleText>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager.SetParticleText)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager.SetParticleText)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager_SetParticleText::MergeFrom(const CUserMsg_ParticleManager_SetParticleText& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager.SetParticleText)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_text()) {
    _has_bits_[0] |= 0x00000001u;
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
}

void CUserMsg_ParticleManager_SetParticleText::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager.SetParticleText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager_SetParticleText::CopyFrom(const CUserMsg_ParticleManager_SetParticleText& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager.SetParticleText)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager_SetParticleText::IsInitialized() const {
  return true;
}

void CUserMsg_ParticleManager_SetParticleText::Swap(CUserMsg_ParticleManager_SetParticleText* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager_SetParticleText::InternalSwap(CUserMsg_ParticleManager_SetParticleText* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CUserMsg_ParticleManager_SetParticleText::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMsg_ParticleManager::InitAsDefaultInstance() {
  ::proto::dota::_CUserMsg_ParticleManager_default_instance_._instance.get_mutable()->release_particle_index_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex*>(
      ::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex::internal_default_instance());
  ::proto::dota::_CUserMsg_ParticleManager_default_instance_._instance.get_mutable()->create_particle_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_CreateParticle*>(
      ::proto::dota::CUserMsg_ParticleManager_CreateParticle::internal_default_instance());
  ::proto::dota::_CUserMsg_ParticleManager_default_instance_._instance.get_mutable()->destroy_particle_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_DestroyParticle*>(
      ::proto::dota::CUserMsg_ParticleManager_DestroyParticle::internal_default_instance());
  ::proto::dota::_CUserMsg_ParticleManager_default_instance_._instance.get_mutable()->destroy_particle_involving_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving*>(
      ::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving::internal_default_instance());
  ::proto::dota::_CUserMsg_ParticleManager_default_instance_._instance.get_mutable()->update_particle_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_UpdateParticle*>(
      ::proto::dota::CUserMsg_ParticleManager_UpdateParticle::internal_default_instance());
  ::proto::dota::_CUserMsg_ParticleManager_default_instance_._instance.get_mutable()->update_particle_fwd_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd*>(
      ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd::internal_default_instance());
  ::proto::dota::_CUserMsg_ParticleManager_default_instance_._instance.get_mutable()->update_particle_orient_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient*>(
      ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient::internal_default_instance());
  ::proto::dota::_CUserMsg_ParticleManager_default_instance_._instance.get_mutable()->update_particle_fallback_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback*>(
      ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback::internal_default_instance());
  ::proto::dota::_CUserMsg_ParticleManager_default_instance_._instance.get_mutable()->update_particle_offset_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset*>(
      ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset::internal_default_instance());
  ::proto::dota::_CUserMsg_ParticleManager_default_instance_._instance.get_mutable()->update_particle_ent_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt*>(
      ::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt::internal_default_instance());
  ::proto::dota::_CUserMsg_ParticleManager_default_instance_._instance.get_mutable()->update_particle_should_draw_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw*>(
      ::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw::internal_default_instance());
  ::proto::dota::_CUserMsg_ParticleManager_default_instance_._instance.get_mutable()->update_particle_set_frozen_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen*>(
      ::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen::internal_default_instance());
  ::proto::dota::_CUserMsg_ParticleManager_default_instance_._instance.get_mutable()->change_control_point_attachment_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment*>(
      ::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment::internal_default_instance());
  ::proto::dota::_CUserMsg_ParticleManager_default_instance_._instance.get_mutable()->update_entity_position_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_UpdateEntityPosition*>(
      ::proto::dota::CUserMsg_ParticleManager_UpdateEntityPosition::internal_default_instance());
  ::proto::dota::_CUserMsg_ParticleManager_default_instance_._instance.get_mutable()->set_particle_fow_properties_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_SetParticleFoWProperties*>(
      ::proto::dota::CUserMsg_ParticleManager_SetParticleFoWProperties::internal_default_instance());
  ::proto::dota::_CUserMsg_ParticleManager_default_instance_._instance.get_mutable()->set_particle_text_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_SetParticleText*>(
      ::proto::dota::CUserMsg_ParticleManager_SetParticleText::internal_default_instance());
  ::proto::dota::_CUserMsg_ParticleManager_default_instance_._instance.get_mutable()->set_particle_should_check_fow_ = const_cast< ::proto::dota::CUserMsg_ParticleManager_SetParticleShouldCheckFoW*>(
      ::proto::dota::CUserMsg_ParticleManager_SetParticleShouldCheckFoW::internal_default_instance());
}
class CUserMsg_ParticleManager::HasBitSetters {
 public:
  static void set_has_type(CUserMsg_ParticleManager* msg) {
    msg->_has_bits_[0] |= 0x00020000u;
  }
  static void set_has_index(CUserMsg_ParticleManager* msg) {
    msg->_has_bits_[0] |= 0x00040000u;
  }
  static const ::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex& release_particle_index(const CUserMsg_ParticleManager* msg);
  static void set_has_release_particle_index(CUserMsg_ParticleManager* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::proto::dota::CUserMsg_ParticleManager_CreateParticle& create_particle(const CUserMsg_ParticleManager* msg);
  static void set_has_create_particle(CUserMsg_ParticleManager* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static const ::proto::dota::CUserMsg_ParticleManager_DestroyParticle& destroy_particle(const CUserMsg_ParticleManager* msg);
  static void set_has_destroy_particle(CUserMsg_ParticleManager* msg) {
    msg->_has_bits_[0] |= 0x00000004u;
  }
  static const ::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving& destroy_particle_involving(const CUserMsg_ParticleManager* msg);
  static void set_has_destroy_particle_involving(CUserMsg_ParticleManager* msg) {
    msg->_has_bits_[0] |= 0x00000008u;
  }
  static const ::proto::dota::CUserMsg_ParticleManager_UpdateParticle& update_particle(const CUserMsg_ParticleManager* msg);
  static void set_has_update_particle(CUserMsg_ParticleManager* msg) {
    msg->_has_bits_[0] |= 0x00000010u;
  }
  static const ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd& update_particle_fwd(const CUserMsg_ParticleManager* msg);
  static void set_has_update_particle_fwd(CUserMsg_ParticleManager* msg) {
    msg->_has_bits_[0] |= 0x00000020u;
  }
  static const ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient& update_particle_orient(const CUserMsg_ParticleManager* msg);
  static void set_has_update_particle_orient(CUserMsg_ParticleManager* msg) {
    msg->_has_bits_[0] |= 0x00000040u;
  }
  static const ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback& update_particle_fallback(const CUserMsg_ParticleManager* msg);
  static void set_has_update_particle_fallback(CUserMsg_ParticleManager* msg) {
    msg->_has_bits_[0] |= 0x00000080u;
  }
  static const ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset& update_particle_offset(const CUserMsg_ParticleManager* msg);
  static void set_has_update_particle_offset(CUserMsg_ParticleManager* msg) {
    msg->_has_bits_[0] |= 0x00000100u;
  }
  static const ::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt& update_particle_ent(const CUserMsg_ParticleManager* msg);
  static void set_has_update_particle_ent(CUserMsg_ParticleManager* msg) {
    msg->_has_bits_[0] |= 0x00000200u;
  }
  static const ::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw& update_particle_should_draw(const CUserMsg_ParticleManager* msg);
  static void set_has_update_particle_should_draw(CUserMsg_ParticleManager* msg) {
    msg->_has_bits_[0] |= 0x00000400u;
  }
  static const ::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen& update_particle_set_frozen(const CUserMsg_ParticleManager* msg);
  static void set_has_update_particle_set_frozen(CUserMsg_ParticleManager* msg) {
    msg->_has_bits_[0] |= 0x00000800u;
  }
  static const ::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment& change_control_point_attachment(const CUserMsg_ParticleManager* msg);
  static void set_has_change_control_point_attachment(CUserMsg_ParticleManager* msg) {
    msg->_has_bits_[0] |= 0x00001000u;
  }
  static const ::proto::dota::CUserMsg_ParticleManager_UpdateEntityPosition& update_entity_position(const CUserMsg_ParticleManager* msg);
  static void set_has_update_entity_position(CUserMsg_ParticleManager* msg) {
    msg->_has_bits_[0] |= 0x00002000u;
  }
  static const ::proto::dota::CUserMsg_ParticleManager_SetParticleFoWProperties& set_particle_fow_properties(const CUserMsg_ParticleManager* msg);
  static void set_has_set_particle_fow_properties(CUserMsg_ParticleManager* msg) {
    msg->_has_bits_[0] |= 0x00004000u;
  }
  static const ::proto::dota::CUserMsg_ParticleManager_SetParticleText& set_particle_text(const CUserMsg_ParticleManager* msg);
  static void set_has_set_particle_text(CUserMsg_ParticleManager* msg) {
    msg->_has_bits_[0] |= 0x00008000u;
  }
  static const ::proto::dota::CUserMsg_ParticleManager_SetParticleShouldCheckFoW& set_particle_should_check_fow(const CUserMsg_ParticleManager* msg);
  static void set_has_set_particle_should_check_fow(CUserMsg_ParticleManager* msg) {
    msg->_has_bits_[0] |= 0x00010000u;
  }
};

const ::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex&
CUserMsg_ParticleManager::HasBitSetters::release_particle_index(const CUserMsg_ParticleManager* msg) {
  return *msg->release_particle_index_;
}
const ::proto::dota::CUserMsg_ParticleManager_CreateParticle&
CUserMsg_ParticleManager::HasBitSetters::create_particle(const CUserMsg_ParticleManager* msg) {
  return *msg->create_particle_;
}
const ::proto::dota::CUserMsg_ParticleManager_DestroyParticle&
CUserMsg_ParticleManager::HasBitSetters::destroy_particle(const CUserMsg_ParticleManager* msg) {
  return *msg->destroy_particle_;
}
const ::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving&
CUserMsg_ParticleManager::HasBitSetters::destroy_particle_involving(const CUserMsg_ParticleManager* msg) {
  return *msg->destroy_particle_involving_;
}
const ::proto::dota::CUserMsg_ParticleManager_UpdateParticle&
CUserMsg_ParticleManager::HasBitSetters::update_particle(const CUserMsg_ParticleManager* msg) {
  return *msg->update_particle_;
}
const ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd&
CUserMsg_ParticleManager::HasBitSetters::update_particle_fwd(const CUserMsg_ParticleManager* msg) {
  return *msg->update_particle_fwd_;
}
const ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient&
CUserMsg_ParticleManager::HasBitSetters::update_particle_orient(const CUserMsg_ParticleManager* msg) {
  return *msg->update_particle_orient_;
}
const ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback&
CUserMsg_ParticleManager::HasBitSetters::update_particle_fallback(const CUserMsg_ParticleManager* msg) {
  return *msg->update_particle_fallback_;
}
const ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset&
CUserMsg_ParticleManager::HasBitSetters::update_particle_offset(const CUserMsg_ParticleManager* msg) {
  return *msg->update_particle_offset_;
}
const ::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt&
CUserMsg_ParticleManager::HasBitSetters::update_particle_ent(const CUserMsg_ParticleManager* msg) {
  return *msg->update_particle_ent_;
}
const ::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw&
CUserMsg_ParticleManager::HasBitSetters::update_particle_should_draw(const CUserMsg_ParticleManager* msg) {
  return *msg->update_particle_should_draw_;
}
const ::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen&
CUserMsg_ParticleManager::HasBitSetters::update_particle_set_frozen(const CUserMsg_ParticleManager* msg) {
  return *msg->update_particle_set_frozen_;
}
const ::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment&
CUserMsg_ParticleManager::HasBitSetters::change_control_point_attachment(const CUserMsg_ParticleManager* msg) {
  return *msg->change_control_point_attachment_;
}
const ::proto::dota::CUserMsg_ParticleManager_UpdateEntityPosition&
CUserMsg_ParticleManager::HasBitSetters::update_entity_position(const CUserMsg_ParticleManager* msg) {
  return *msg->update_entity_position_;
}
const ::proto::dota::CUserMsg_ParticleManager_SetParticleFoWProperties&
CUserMsg_ParticleManager::HasBitSetters::set_particle_fow_properties(const CUserMsg_ParticleManager* msg) {
  return *msg->set_particle_fow_properties_;
}
const ::proto::dota::CUserMsg_ParticleManager_SetParticleText&
CUserMsg_ParticleManager::HasBitSetters::set_particle_text(const CUserMsg_ParticleManager* msg) {
  return *msg->set_particle_text_;
}
const ::proto::dota::CUserMsg_ParticleManager_SetParticleShouldCheckFoW&
CUserMsg_ParticleManager::HasBitSetters::set_particle_should_check_fow(const CUserMsg_ParticleManager* msg) {
  return *msg->set_particle_should_check_fow_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_ParticleManager::kTypeFieldNumber;
const int CUserMsg_ParticleManager::kIndexFieldNumber;
const int CUserMsg_ParticleManager::kReleaseParticleIndexFieldNumber;
const int CUserMsg_ParticleManager::kCreateParticleFieldNumber;
const int CUserMsg_ParticleManager::kDestroyParticleFieldNumber;
const int CUserMsg_ParticleManager::kDestroyParticleInvolvingFieldNumber;
const int CUserMsg_ParticleManager::kUpdateParticleFieldNumber;
const int CUserMsg_ParticleManager::kUpdateParticleFwdFieldNumber;
const int CUserMsg_ParticleManager::kUpdateParticleOrientFieldNumber;
const int CUserMsg_ParticleManager::kUpdateParticleFallbackFieldNumber;
const int CUserMsg_ParticleManager::kUpdateParticleOffsetFieldNumber;
const int CUserMsg_ParticleManager::kUpdateParticleEntFieldNumber;
const int CUserMsg_ParticleManager::kUpdateParticleShouldDrawFieldNumber;
const int CUserMsg_ParticleManager::kUpdateParticleSetFrozenFieldNumber;
const int CUserMsg_ParticleManager::kChangeControlPointAttachmentFieldNumber;
const int CUserMsg_ParticleManager::kUpdateEntityPositionFieldNumber;
const int CUserMsg_ParticleManager::kSetParticleFowPropertiesFieldNumber;
const int CUserMsg_ParticleManager::kSetParticleTextFieldNumber;
const int CUserMsg_ParticleManager::kSetParticleShouldCheckFowFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_ParticleManager::CUserMsg_ParticleManager()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_ParticleManager)
}
CUserMsg_ParticleManager::CUserMsg_ParticleManager(const CUserMsg_ParticleManager& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_release_particle_index()) {
    release_particle_index_ = new ::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex(*from.release_particle_index_);
  } else {
    release_particle_index_ = nullptr;
  }
  if (from.has_create_particle()) {
    create_particle_ = new ::proto::dota::CUserMsg_ParticleManager_CreateParticle(*from.create_particle_);
  } else {
    create_particle_ = nullptr;
  }
  if (from.has_destroy_particle()) {
    destroy_particle_ = new ::proto::dota::CUserMsg_ParticleManager_DestroyParticle(*from.destroy_particle_);
  } else {
    destroy_particle_ = nullptr;
  }
  if (from.has_destroy_particle_involving()) {
    destroy_particle_involving_ = new ::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving(*from.destroy_particle_involving_);
  } else {
    destroy_particle_involving_ = nullptr;
  }
  if (from.has_update_particle()) {
    update_particle_ = new ::proto::dota::CUserMsg_ParticleManager_UpdateParticle(*from.update_particle_);
  } else {
    update_particle_ = nullptr;
  }
  if (from.has_update_particle_fwd()) {
    update_particle_fwd_ = new ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd(*from.update_particle_fwd_);
  } else {
    update_particle_fwd_ = nullptr;
  }
  if (from.has_update_particle_orient()) {
    update_particle_orient_ = new ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient(*from.update_particle_orient_);
  } else {
    update_particle_orient_ = nullptr;
  }
  if (from.has_update_particle_fallback()) {
    update_particle_fallback_ = new ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback(*from.update_particle_fallback_);
  } else {
    update_particle_fallback_ = nullptr;
  }
  if (from.has_update_particle_offset()) {
    update_particle_offset_ = new ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset(*from.update_particle_offset_);
  } else {
    update_particle_offset_ = nullptr;
  }
  if (from.has_update_particle_ent()) {
    update_particle_ent_ = new ::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt(*from.update_particle_ent_);
  } else {
    update_particle_ent_ = nullptr;
  }
  if (from.has_update_particle_should_draw()) {
    update_particle_should_draw_ = new ::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw(*from.update_particle_should_draw_);
  } else {
    update_particle_should_draw_ = nullptr;
  }
  if (from.has_update_particle_set_frozen()) {
    update_particle_set_frozen_ = new ::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen(*from.update_particle_set_frozen_);
  } else {
    update_particle_set_frozen_ = nullptr;
  }
  if (from.has_change_control_point_attachment()) {
    change_control_point_attachment_ = new ::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment(*from.change_control_point_attachment_);
  } else {
    change_control_point_attachment_ = nullptr;
  }
  if (from.has_update_entity_position()) {
    update_entity_position_ = new ::proto::dota::CUserMsg_ParticleManager_UpdateEntityPosition(*from.update_entity_position_);
  } else {
    update_entity_position_ = nullptr;
  }
  if (from.has_set_particle_fow_properties()) {
    set_particle_fow_properties_ = new ::proto::dota::CUserMsg_ParticleManager_SetParticleFoWProperties(*from.set_particle_fow_properties_);
  } else {
    set_particle_fow_properties_ = nullptr;
  }
  if (from.has_set_particle_text()) {
    set_particle_text_ = new ::proto::dota::CUserMsg_ParticleManager_SetParticleText(*from.set_particle_text_);
  } else {
    set_particle_text_ = nullptr;
  }
  if (from.has_set_particle_should_check_fow()) {
    set_particle_should_check_fow_ = new ::proto::dota::CUserMsg_ParticleManager_SetParticleShouldCheckFoW(*from.set_particle_should_check_fow_);
  } else {
    set_particle_should_check_fow_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&type_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_ParticleManager)
}

void CUserMsg_ParticleManager::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMsg_ParticleManager_usermessages_2eproto.base);
  ::memset(&release_particle_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&release_particle_index_)) + sizeof(index_));
}

CUserMsg_ParticleManager::~CUserMsg_ParticleManager() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_ParticleManager)
  SharedDtor();
}

void CUserMsg_ParticleManager::SharedDtor() {
  if (this != internal_default_instance()) delete release_particle_index_;
  if (this != internal_default_instance()) delete create_particle_;
  if (this != internal_default_instance()) delete destroy_particle_;
  if (this != internal_default_instance()) delete destroy_particle_involving_;
  if (this != internal_default_instance()) delete update_particle_;
  if (this != internal_default_instance()) delete update_particle_fwd_;
  if (this != internal_default_instance()) delete update_particle_orient_;
  if (this != internal_default_instance()) delete update_particle_fallback_;
  if (this != internal_default_instance()) delete update_particle_offset_;
  if (this != internal_default_instance()) delete update_particle_ent_;
  if (this != internal_default_instance()) delete update_particle_should_draw_;
  if (this != internal_default_instance()) delete update_particle_set_frozen_;
  if (this != internal_default_instance()) delete change_control_point_attachment_;
  if (this != internal_default_instance()) delete update_entity_position_;
  if (this != internal_default_instance()) delete set_particle_fow_properties_;
  if (this != internal_default_instance()) delete set_particle_text_;
  if (this != internal_default_instance()) delete set_particle_should_check_fow_;
}

void CUserMsg_ParticleManager::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMsg_ParticleManager& CUserMsg_ParticleManager::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMsg_ParticleManager_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMsg_ParticleManager::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_ParticleManager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(release_particle_index_ != nullptr);
      release_particle_index_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(create_particle_ != nullptr);
      create_particle_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(destroy_particle_ != nullptr);
      destroy_particle_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(destroy_particle_involving_ != nullptr);
      destroy_particle_involving_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(update_particle_ != nullptr);
      update_particle_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(update_particle_fwd_ != nullptr);
      update_particle_fwd_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(update_particle_orient_ != nullptr);
      update_particle_orient_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(update_particle_fallback_ != nullptr);
      update_particle_fallback_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(update_particle_offset_ != nullptr);
      update_particle_offset_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(update_particle_ent_ != nullptr);
      update_particle_ent_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(update_particle_should_draw_ != nullptr);
      update_particle_should_draw_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      GOOGLE_DCHECK(update_particle_set_frozen_ != nullptr);
      update_particle_set_frozen_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      GOOGLE_DCHECK(change_control_point_attachment_ != nullptr);
      change_control_point_attachment_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      GOOGLE_DCHECK(update_entity_position_ != nullptr);
      update_entity_position_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      GOOGLE_DCHECK(set_particle_fow_properties_ != nullptr);
      set_particle_fow_properties_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      GOOGLE_DCHECK(set_particle_text_ != nullptr);
      set_particle_text_->Clear();
    }
  }
  if (cached_has_bits & 0x00010000u) {
    GOOGLE_DCHECK(set_particle_should_check_fow_ != nullptr);
    set_particle_should_check_fow_->Clear();
  }
  if (cached_has_bits & 0x00060000u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&index_) -
        reinterpret_cast<char*>(&type_)) + sizeof(index_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMsg_ParticleManager::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMsg_ParticleManager*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required .proto.dota.PARTICLE_MESSAGE type = 1 [default = GAME_PARTICLE_MANAGER_EVENT_CREATE];
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::PARTICLE_MESSAGE_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_type(static_cast<::proto::dota::PARTICLE_MESSAGE>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // required uint32 index = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex::_InternalParse;
        object = msg->mutable_release_particle_index();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CUserMsg_ParticleManager.CreateParticle create_particle = 4;
      case 4: {
        if (static_cast<::google::protobuf::uint8>(tag) != 34) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CUserMsg_ParticleManager_CreateParticle::_InternalParse;
        object = msg->mutable_create_particle();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
      case 5: {
        if (static_cast<::google::protobuf::uint8>(tag) != 42) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CUserMsg_ParticleManager_DestroyParticle::_InternalParse;
        object = msg->mutable_destroy_particle();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
      case 6: {
        if (static_cast<::google::protobuf::uint8>(tag) != 50) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving::_InternalParse;
        object = msg->mutable_destroy_particle_involving();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticle update_particle = 7;
      case 7: {
        if (static_cast<::google::protobuf::uint8>(tag) != 58) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CUserMsg_ParticleManager_UpdateParticle::_InternalParse;
        object = msg->mutable_update_particle();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
      case 8: {
        if (static_cast<::google::protobuf::uint8>(tag) != 66) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd::_InternalParse;
        object = msg->mutable_update_particle_fwd();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
      case 9: {
        if (static_cast<::google::protobuf::uint8>(tag) != 74) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient::_InternalParse;
        object = msg->mutable_update_particle_orient();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
      case 10: {
        if (static_cast<::google::protobuf::uint8>(tag) != 82) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback::_InternalParse;
        object = msg->mutable_update_particle_fallback();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
      case 11: {
        if (static_cast<::google::protobuf::uint8>(tag) != 90) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset::_InternalParse;
        object = msg->mutable_update_particle_offset();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
      case 12: {
        if (static_cast<::google::protobuf::uint8>(tag) != 98) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt::_InternalParse;
        object = msg->mutable_update_particle_ent();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
      case 14: {
        if (static_cast<::google::protobuf::uint8>(tag) != 114) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw::_InternalParse;
        object = msg->mutable_update_particle_should_draw();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
      case 15: {
        if (static_cast<::google::protobuf::uint8>(tag) != 122) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen::_InternalParse;
        object = msg->mutable_update_particle_set_frozen();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment change_control_point_attachment = 16;
      case 16: {
        if (static_cast<::google::protobuf::uint8>(tag) != 130) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment::_InternalParse;
        object = msg->mutable_change_control_point_attachment();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CUserMsg_ParticleManager.UpdateEntityPosition update_entity_position = 17;
      case 17: {
        if (static_cast<::google::protobuf::uint8>(tag) != 138) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CUserMsg_ParticleManager_UpdateEntityPosition::_InternalParse;
        object = msg->mutable_update_entity_position();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CUserMsg_ParticleManager.SetParticleFoWProperties set_particle_fow_properties = 18;
      case 18: {
        if (static_cast<::google::protobuf::uint8>(tag) != 146) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CUserMsg_ParticleManager_SetParticleFoWProperties::_InternalParse;
        object = msg->mutable_set_particle_fow_properties();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CUserMsg_ParticleManager.SetParticleText set_particle_text = 19;
      case 19: {
        if (static_cast<::google::protobuf::uint8>(tag) != 154) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CUserMsg_ParticleManager_SetParticleText::_InternalParse;
        object = msg->mutable_set_particle_text();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .proto.dota.CUserMsg_ParticleManager.SetParticleShouldCheckFoW set_particle_should_check_fow = 20;
      case 20: {
        if (static_cast<::google::protobuf::uint8>(tag) != 162) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::proto::dota::CUserMsg_ParticleManager_SetParticleShouldCheckFoW::_InternalParse;
        object = msg->mutable_set_particle_should_check_fow();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMsg_ParticleManager::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_ParticleManager)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.dota.PARTICLE_MESSAGE type = 1 [default = GAME_PARTICLE_MANAGER_EVENT_CREATE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::PARTICLE_MESSAGE_IsValid(value)) {
            set_type(static_cast< ::proto::dota::PARTICLE_MESSAGE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 index = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_release_particle_index()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.CreateParticle create_particle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (34 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_create_particle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (42 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destroy_particle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (50 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_destroy_particle_involving()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticle update_particle = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (58 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_particle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (66 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_particle_fwd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (74 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_particle_orient()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (82 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_particle_fallback()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (90 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_particle_offset()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (98 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_particle_ent()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (114 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_particle_should_draw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (122 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_particle_set_frozen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment change_control_point_attachment = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (130 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_change_control_point_attachment()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.UpdateEntityPosition update_entity_position = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (138 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_entity_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.SetParticleFoWProperties set_particle_fow_properties = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (146 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_particle_fow_properties()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.SetParticleText set_particle_text = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (154 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_particle_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.CUserMsg_ParticleManager.SetParticleShouldCheckFoW set_particle_should_check_fow = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (162 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_set_particle_should_check_fow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_ParticleManager)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_ParticleManager)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMsg_ParticleManager::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_ParticleManager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .proto.dota.PARTICLE_MESSAGE type = 1 [default = GAME_PARTICLE_MANAGER_EVENT_CREATE];
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required uint32 index = 2;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->index(), output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, HasBitSetters::release_particle_index(this), output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.CreateParticle create_particle = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, HasBitSetters::create_particle(this), output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, HasBitSetters::destroy_particle(this), output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, HasBitSetters::destroy_particle_involving(this), output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticle update_particle = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, HasBitSetters::update_particle(this), output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, HasBitSetters::update_particle_fwd(this), output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, HasBitSetters::update_particle_orient(this), output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, HasBitSetters::update_particle_fallback(this), output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, HasBitSetters::update_particle_offset(this), output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, HasBitSetters::update_particle_ent(this), output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, HasBitSetters::update_particle_should_draw(this), output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, HasBitSetters::update_particle_set_frozen(this), output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment change_control_point_attachment = 16;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, HasBitSetters::change_control_point_attachment(this), output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateEntityPosition update_entity_position = 17;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, HasBitSetters::update_entity_position(this), output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.SetParticleFoWProperties set_particle_fow_properties = 18;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, HasBitSetters::set_particle_fow_properties(this), output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.SetParticleText set_particle_text = 19;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, HasBitSetters::set_particle_text(this), output);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.SetParticleShouldCheckFoW set_particle_should_check_fow = 20;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, HasBitSetters::set_particle_should_check_fow(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_ParticleManager)
}

::google::protobuf::uint8* CUserMsg_ParticleManager::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_ParticleManager)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .proto.dota.PARTICLE_MESSAGE type = 1 [default = GAME_PARTICLE_MANAGER_EVENT_CREATE];
  if (cached_has_bits & 0x00020000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required uint32 index = 2;
  if (cached_has_bits & 0x00040000u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->index(), target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, HasBitSetters::release_particle_index(this), target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.CreateParticle create_particle = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, HasBitSetters::create_particle(this), target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, HasBitSetters::destroy_particle(this), target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, HasBitSetters::destroy_particle_involving(this), target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticle update_particle = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, HasBitSetters::update_particle(this), target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, HasBitSetters::update_particle_fwd(this), target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, HasBitSetters::update_particle_orient(this), target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, HasBitSetters::update_particle_fallback(this), target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, HasBitSetters::update_particle_offset(this), target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, HasBitSetters::update_particle_ent(this), target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, HasBitSetters::update_particle_should_draw(this), target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, HasBitSetters::update_particle_set_frozen(this), target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment change_control_point_attachment = 16;
  if (cached_has_bits & 0x00001000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, HasBitSetters::change_control_point_attachment(this), target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.UpdateEntityPosition update_entity_position = 17;
  if (cached_has_bits & 0x00002000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, HasBitSetters::update_entity_position(this), target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.SetParticleFoWProperties set_particle_fow_properties = 18;
  if (cached_has_bits & 0x00004000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, HasBitSetters::set_particle_fow_properties(this), target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.SetParticleText set_particle_text = 19;
  if (cached_has_bits & 0x00008000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, HasBitSetters::set_particle_text(this), target);
  }

  // optional .proto.dota.CUserMsg_ParticleManager.SetParticleShouldCheckFoW set_particle_should_check_fow = 20;
  if (cached_has_bits & 0x00010000u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        20, HasBitSetters::set_particle_should_check_fow(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_ParticleManager)
  return target;
}

size_t CUserMsg_ParticleManager::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:proto.dota.CUserMsg_ParticleManager)
  size_t total_size = 0;

  if (has_type()) {
    // required .proto.dota.PARTICLE_MESSAGE type = 1 [default = GAME_PARTICLE_MANAGER_EVENT_CREATE];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (has_index()) {
    // required uint32 index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  return total_size;
}
size_t CUserMsg_ParticleManager::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_ParticleManager)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00060000) ^ 0x00060000) == 0) {  // All required fields are present.
    // required .proto.dota.PARTICLE_MESSAGE type = 1 [default = GAME_PARTICLE_MANAGER_EVENT_CREATE];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

    // required uint32 index = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .proto.dota.CUserMsg_ParticleManager.ReleaseParticleIndex release_particle_index = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *release_particle_index_);
    }

    // optional .proto.dota.CUserMsg_ParticleManager.CreateParticle create_particle = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *create_particle_);
    }

    // optional .proto.dota.CUserMsg_ParticleManager.DestroyParticle destroy_particle = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *destroy_particle_);
    }

    // optional .proto.dota.CUserMsg_ParticleManager.DestroyParticleInvolving destroy_particle_involving = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *destroy_particle_involving_);
    }

    // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticle update_particle = 7;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *update_particle_);
    }

    // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleFwd update_particle_fwd = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *update_particle_fwd_);
    }

    // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleOrient update_particle_orient = 9;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *update_particle_orient_);
    }

    // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleFallback update_particle_fallback = 10;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *update_particle_fallback_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleOffset update_particle_offset = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *update_particle_offset_);
    }

    // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleEnt update_particle_ent = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *update_particle_ent_);
    }

    // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleShouldDraw update_particle_should_draw = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *update_particle_should_draw_);
    }

    // optional .proto.dota.CUserMsg_ParticleManager.UpdateParticleSetFrozen update_particle_set_frozen = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *update_particle_set_frozen_);
    }

    // optional .proto.dota.CUserMsg_ParticleManager.ChangeControlPointAttachment change_control_point_attachment = 16;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *change_control_point_attachment_);
    }

    // optional .proto.dota.CUserMsg_ParticleManager.UpdateEntityPosition update_entity_position = 17;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *update_entity_position_);
    }

    // optional .proto.dota.CUserMsg_ParticleManager.SetParticleFoWProperties set_particle_fow_properties = 18;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *set_particle_fow_properties_);
    }

    // optional .proto.dota.CUserMsg_ParticleManager.SetParticleText set_particle_text = 19;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *set_particle_text_);
    }

  }
  // optional .proto.dota.CUserMsg_ParticleManager.SetParticleShouldCheckFoW set_particle_should_check_fow = 20;
  if (cached_has_bits & 0x00010000u) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *set_particle_should_check_fow_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_ParticleManager::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_ParticleManager)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_ParticleManager* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMsg_ParticleManager>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_ParticleManager)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_ParticleManager)
    MergeFrom(*source);
  }
}

void CUserMsg_ParticleManager::MergeFrom(const CUserMsg_ParticleManager& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_ParticleManager)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      mutable_release_particle_index()->::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex::MergeFrom(from.release_particle_index());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_create_particle()->::proto::dota::CUserMsg_ParticleManager_CreateParticle::MergeFrom(from.create_particle());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_destroy_particle()->::proto::dota::CUserMsg_ParticleManager_DestroyParticle::MergeFrom(from.destroy_particle());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_destroy_particle_involving()->::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving::MergeFrom(from.destroy_particle_involving());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_update_particle()->::proto::dota::CUserMsg_ParticleManager_UpdateParticle::MergeFrom(from.update_particle());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_update_particle_fwd()->::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd::MergeFrom(from.update_particle_fwd());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_update_particle_orient()->::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient::MergeFrom(from.update_particle_orient());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_update_particle_fallback()->::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback::MergeFrom(from.update_particle_fallback());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_update_particle_offset()->::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset::MergeFrom(from.update_particle_offset());
    }
    if (cached_has_bits & 0x00000200u) {
      mutable_update_particle_ent()->::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt::MergeFrom(from.update_particle_ent());
    }
    if (cached_has_bits & 0x00000400u) {
      mutable_update_particle_should_draw()->::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw::MergeFrom(from.update_particle_should_draw());
    }
    if (cached_has_bits & 0x00000800u) {
      mutable_update_particle_set_frozen()->::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen::MergeFrom(from.update_particle_set_frozen());
    }
    if (cached_has_bits & 0x00001000u) {
      mutable_change_control_point_attachment()->::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment::MergeFrom(from.change_control_point_attachment());
    }
    if (cached_has_bits & 0x00002000u) {
      mutable_update_entity_position()->::proto::dota::CUserMsg_ParticleManager_UpdateEntityPosition::MergeFrom(from.update_entity_position());
    }
    if (cached_has_bits & 0x00004000u) {
      mutable_set_particle_fow_properties()->::proto::dota::CUserMsg_ParticleManager_SetParticleFoWProperties::MergeFrom(from.set_particle_fow_properties());
    }
    if (cached_has_bits & 0x00008000u) {
      mutable_set_particle_text()->::proto::dota::CUserMsg_ParticleManager_SetParticleText::MergeFrom(from.set_particle_text());
    }
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      mutable_set_particle_should_check_fow()->::proto::dota::CUserMsg_ParticleManager_SetParticleShouldCheckFoW::MergeFrom(from.set_particle_should_check_fow());
    }
    if (cached_has_bits & 0x00020000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00040000u) {
      index_ = from.index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMsg_ParticleManager::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_ParticleManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_ParticleManager::CopyFrom(const CUserMsg_ParticleManager& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_ParticleManager)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_ParticleManager::IsInitialized() const {
  if ((_has_bits_[0] & 0x00060000) != 0x00060000) return false;
  return true;
}

void CUserMsg_ParticleManager::Swap(CUserMsg_ParticleManager* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_ParticleManager::InternalSwap(CUserMsg_ParticleManager* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(release_particle_index_, other->release_particle_index_);
  swap(create_particle_, other->create_particle_);
  swap(destroy_particle_, other->destroy_particle_);
  swap(destroy_particle_involving_, other->destroy_particle_involving_);
  swap(update_particle_, other->update_particle_);
  swap(update_particle_fwd_, other->update_particle_fwd_);
  swap(update_particle_orient_, other->update_particle_orient_);
  swap(update_particle_fallback_, other->update_particle_fallback_);
  swap(update_particle_offset_, other->update_particle_offset_);
  swap(update_particle_ent_, other->update_particle_ent_);
  swap(update_particle_should_draw_, other->update_particle_should_draw_);
  swap(update_particle_set_frozen_, other->update_particle_set_frozen_);
  swap(change_control_point_attachment_, other->change_control_point_attachment_);
  swap(update_entity_position_, other->update_entity_position_);
  swap(set_particle_fow_properties_, other->set_particle_fow_properties_);
  swap(set_particle_text_, other->set_particle_text_);
  swap(set_particle_should_check_fow_, other->set_particle_should_check_fow_);
  swap(type_, other->type_);
  swap(index_, other->index_);
}

::google::protobuf::Metadata CUserMsg_ParticleManager::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMsg_HudError::InitAsDefaultInstance() {
}
class CUserMsg_HudError::HasBitSetters {
 public:
  static void set_has_order_id(CUserMsg_HudError* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_HudError::kOrderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_HudError::CUserMsg_HudError()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_HudError)
}
CUserMsg_HudError::CUserMsg_HudError(const CUserMsg_HudError& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  order_id_ = from.order_id_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_HudError)
}

void CUserMsg_HudError::SharedCtor() {
  order_id_ = 0;
}

CUserMsg_HudError::~CUserMsg_HudError() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_HudError)
  SharedDtor();
}

void CUserMsg_HudError::SharedDtor() {
}

void CUserMsg_HudError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMsg_HudError& CUserMsg_HudError::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMsg_HudError_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMsg_HudError::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_HudError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  order_id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMsg_HudError::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMsg_HudError*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 order_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_order_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMsg_HudError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_HudError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 order_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_order_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &order_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_HudError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_HudError)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMsg_HudError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_HudError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 order_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->order_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_HudError)
}

::google::protobuf::uint8* CUserMsg_HudError::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_HudError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 order_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->order_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_HudError)
  return target;
}

size_t CUserMsg_HudError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_HudError)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 order_id = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->order_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_HudError::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_HudError)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_HudError* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMsg_HudError>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_HudError)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_HudError)
    MergeFrom(*source);
  }
}

void CUserMsg_HudError::MergeFrom(const CUserMsg_HudError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_HudError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_order_id()) {
    set_order_id(from.order_id());
  }
}

void CUserMsg_HudError::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_HudError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_HudError::CopyFrom(const CUserMsg_HudError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_HudError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_HudError::IsInitialized() const {
  return true;
}

void CUserMsg_HudError::Swap(CUserMsg_HudError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_HudError::InternalSwap(CUserMsg_HudError* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(order_id_, other->order_id_);
}

::google::protobuf::Metadata CUserMsg_HudError::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMsg_CustomGameEvent::InitAsDefaultInstance() {
}
class CUserMsg_CustomGameEvent::HasBitSetters {
 public:
  static void set_has_event_name(CUserMsg_CustomGameEvent* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_data(CUserMsg_CustomGameEvent* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMsg_CustomGameEvent::kEventNameFieldNumber;
const int CUserMsg_CustomGameEvent::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMsg_CustomGameEvent::CUserMsg_CustomGameEvent()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMsg_CustomGameEvent)
}
CUserMsg_CustomGameEvent::CUserMsg_CustomGameEvent(const CUserMsg_CustomGameEvent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_event_name()) {
    event_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_name_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMsg_CustomGameEvent)
}

void CUserMsg_CustomGameEvent::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMsg_CustomGameEvent_usermessages_2eproto.base);
  event_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

CUserMsg_CustomGameEvent::~CUserMsg_CustomGameEvent() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMsg_CustomGameEvent)
  SharedDtor();
}

void CUserMsg_CustomGameEvent::SharedDtor() {
  event_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMsg_CustomGameEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMsg_CustomGameEvent& CUserMsg_CustomGameEvent::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMsg_CustomGameEvent_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMsg_CustomGameEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMsg_CustomGameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      event_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      data_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMsg_CustomGameEvent::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMsg_CustomGameEvent*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional string event_name = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("proto.dota.CUserMsg_CustomGameEvent.event_name");
        object = msg->mutable_event_name();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      // optional bytes data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMsg_CustomGameEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMsg_CustomGameEvent)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string event_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_event_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->event_name().data(), static_cast<int>(this->event_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "proto.dota.CUserMsg_CustomGameEvent.event_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMsg_CustomGameEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMsg_CustomGameEvent)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMsg_CustomGameEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMsg_CustomGameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string event_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), static_cast<int>(this->event_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMsg_CustomGameEvent.event_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->event_name(), output);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMsg_CustomGameEvent)
}

::google::protobuf::uint8* CUserMsg_CustomGameEvent::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMsg_CustomGameEvent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string event_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->event_name().data(), static_cast<int>(this->event_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "proto.dota.CUserMsg_CustomGameEvent.event_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->event_name(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000002u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMsg_CustomGameEvent)
  return target;
}

size_t CUserMsg_CustomGameEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMsg_CustomGameEvent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string event_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->event_name());
    }

    // optional bytes data = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMsg_CustomGameEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMsg_CustomGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMsg_CustomGameEvent* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMsg_CustomGameEvent>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMsg_CustomGameEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMsg_CustomGameEvent)
    MergeFrom(*source);
  }
}

void CUserMsg_CustomGameEvent::MergeFrom(const CUserMsg_CustomGameEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMsg_CustomGameEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      event_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.event_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
}

void CUserMsg_CustomGameEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMsg_CustomGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMsg_CustomGameEvent::CopyFrom(const CUserMsg_CustomGameEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMsg_CustomGameEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMsg_CustomGameEvent::IsInitialized() const {
  return true;
}

void CUserMsg_CustomGameEvent::Swap(CUserMsg_CustomGameEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMsg_CustomGameEvent::InternalSwap(CUserMsg_CustomGameEvent* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  event_name_.Swap(&other->event_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata CUserMsg_CustomGameEvent::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageHapticPulse::InitAsDefaultInstance() {
}
class CUserMessageHapticPulse::HasBitSetters {
 public:
  static void set_has_hand_id(CUserMessageHapticPulse* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_pulse_type(CUserMessageHapticPulse* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageHapticPulse::kHandIdFieldNumber;
const int CUserMessageHapticPulse::kPulseTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageHapticPulse::CUserMessageHapticPulse()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageHapticPulse)
}
CUserMessageHapticPulse::CUserMessageHapticPulse(const CUserMessageHapticPulse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hand_id_, &from.hand_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pulse_type_) -
    reinterpret_cast<char*>(&hand_id_)) + sizeof(pulse_type_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageHapticPulse)
}

void CUserMessageHapticPulse::SharedCtor() {
  ::memset(&hand_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulse_type_) -
      reinterpret_cast<char*>(&hand_id_)) + sizeof(pulse_type_));
}

CUserMessageHapticPulse::~CUserMessageHapticPulse() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageHapticPulse)
  SharedDtor();
}

void CUserMessageHapticPulse::SharedDtor() {
}

void CUserMessageHapticPulse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageHapticPulse& CUserMessageHapticPulse::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageHapticPulse_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageHapticPulse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageHapticPulse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&hand_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pulse_type_) -
        reinterpret_cast<char*>(&hand_id_)) + sizeof(pulse_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageHapticPulse::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageHapticPulse*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 hand_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_hand_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional .proto.dota.EHapticPulseType pulse_type = 2 [default = VR_HAND_HAPTIC_PULSE_LIGHT];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::proto::dota::EHapticPulseType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(2, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_pulse_type(static_cast<::proto::dota::EHapticPulseType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageHapticPulse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageHapticPulse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hand_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_hand_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hand_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .proto.dota.EHapticPulseType pulse_type = 2 [default = VR_HAND_HAPTIC_PULSE_LIGHT];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::proto::dota::EHapticPulseType_IsValid(value)) {
            set_pulse_type(static_cast< ::proto::dota::EHapticPulseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageHapticPulse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageHapticPulse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageHapticPulse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageHapticPulse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 hand_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hand_id(), output);
  }

  // optional .proto.dota.EHapticPulseType pulse_type = 2 [default = VR_HAND_HAPTIC_PULSE_LIGHT];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->pulse_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageHapticPulse)
}

::google::protobuf::uint8* CUserMessageHapticPulse::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageHapticPulse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 hand_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hand_id(), target);
  }

  // optional .proto.dota.EHapticPulseType pulse_type = 2 [default = VR_HAND_HAPTIC_PULSE_LIGHT];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->pulse_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageHapticPulse)
  return target;
}

size_t CUserMessageHapticPulse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageHapticPulse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 hand_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hand_id());
    }

    // optional .proto.dota.EHapticPulseType pulse_type = 2 [default = VR_HAND_HAPTIC_PULSE_LIGHT];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->pulse_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageHapticPulse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageHapticPulse)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageHapticPulse* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageHapticPulse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageHapticPulse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageHapticPulse)
    MergeFrom(*source);
  }
}

void CUserMessageHapticPulse::MergeFrom(const CUserMessageHapticPulse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageHapticPulse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hand_id_ = from.hand_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      pulse_type_ = from.pulse_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageHapticPulse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageHapticPulse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageHapticPulse::CopyFrom(const CUserMessageHapticPulse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageHapticPulse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageHapticPulse::IsInitialized() const {
  return true;
}

void CUserMessageHapticPulse::Swap(CUserMessageHapticPulse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageHapticPulse::InternalSwap(CUserMessageHapticPulse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hand_id_, other->hand_id_);
  swap(pulse_type_, other->pulse_type_);
}

::google::protobuf::Metadata CUserMessageHapticPulse::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageHapticPulsePrecise::InitAsDefaultInstance() {
}
class CUserMessageHapticPulsePrecise::HasBitSetters {
 public:
  static void set_has_hand_id(CUserMessageHapticPulsePrecise* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_pulse_duration(CUserMessageHapticPulsePrecise* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageHapticPulsePrecise::kHandIdFieldNumber;
const int CUserMessageHapticPulsePrecise::kPulseDurationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageHapticPulsePrecise::CUserMessageHapticPulsePrecise()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageHapticPulsePrecise)
}
CUserMessageHapticPulsePrecise::CUserMessageHapticPulsePrecise(const CUserMessageHapticPulsePrecise& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&hand_id_, &from.hand_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&pulse_duration_) -
    reinterpret_cast<char*>(&hand_id_)) + sizeof(pulse_duration_));
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageHapticPulsePrecise)
}

void CUserMessageHapticPulsePrecise::SharedCtor() {
  ::memset(&hand_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pulse_duration_) -
      reinterpret_cast<char*>(&hand_id_)) + sizeof(pulse_duration_));
}

CUserMessageHapticPulsePrecise::~CUserMessageHapticPulsePrecise() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageHapticPulsePrecise)
  SharedDtor();
}

void CUserMessageHapticPulsePrecise::SharedDtor() {
}

void CUserMessageHapticPulsePrecise::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageHapticPulsePrecise& CUserMessageHapticPulsePrecise::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageHapticPulsePrecise_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageHapticPulsePrecise::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageHapticPulsePrecise)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&hand_id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pulse_duration_) -
        reinterpret_cast<char*>(&hand_id_)) + sizeof(pulse_duration_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageHapticPulsePrecise::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageHapticPulsePrecise*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 hand_id = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_hand_id(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional int32 pulse_duration = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 16) goto handle_unusual;
        msg->set_pulse_duration(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageHapticPulsePrecise::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageHapticPulsePrecise)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hand_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_hand_id(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hand_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pulse_duration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          HasBitSetters::set_has_pulse_duration(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pulse_duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageHapticPulsePrecise)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageHapticPulsePrecise)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageHapticPulsePrecise::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageHapticPulsePrecise)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 hand_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hand_id(), output);
  }

  // optional int32 pulse_duration = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pulse_duration(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageHapticPulsePrecise)
}

::google::protobuf::uint8* CUserMessageHapticPulsePrecise::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageHapticPulsePrecise)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 hand_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hand_id(), target);
  }

  // optional int32 pulse_duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pulse_duration(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageHapticPulsePrecise)
  return target;
}

size_t CUserMessageHapticPulsePrecise::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageHapticPulsePrecise)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 hand_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hand_id());
    }

    // optional int32 pulse_duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pulse_duration());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageHapticPulsePrecise::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageHapticPulsePrecise)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageHapticPulsePrecise* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageHapticPulsePrecise>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageHapticPulsePrecise)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageHapticPulsePrecise)
    MergeFrom(*source);
  }
}

void CUserMessageHapticPulsePrecise::MergeFrom(const CUserMessageHapticPulsePrecise& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageHapticPulsePrecise)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      hand_id_ = from.hand_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      pulse_duration_ = from.pulse_duration_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageHapticPulsePrecise::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageHapticPulsePrecise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageHapticPulsePrecise::CopyFrom(const CUserMessageHapticPulsePrecise& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageHapticPulsePrecise)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageHapticPulsePrecise::IsInitialized() const {
  return true;
}

void CUserMessageHapticPulsePrecise::Swap(CUserMessageHapticPulsePrecise* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageHapticPulsePrecise::InternalSwap(CUserMessageHapticPulsePrecise* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(hand_id_, other->hand_id_);
  swap(pulse_duration_, other->pulse_duration_);
}

::google::protobuf::Metadata CUserMessageHapticPulsePrecise::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CUserMessageAnimStateGraphState::InitAsDefaultInstance() {
}
class CUserMessageAnimStateGraphState::HasBitSetters {
 public:
  static void set_has_entity_index(CUserMessageAnimStateGraphState* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
  static void set_has_data(CUserMessageAnimStateGraphState* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CUserMessageAnimStateGraphState::kEntityIndexFieldNumber;
const int CUserMessageAnimStateGraphState::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CUserMessageAnimStateGraphState::CUserMessageAnimStateGraphState()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.dota.CUserMessageAnimStateGraphState)
}
CUserMessageAnimStateGraphState::CUserMessageAnimStateGraphState(const CUserMessageAnimStateGraphState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_data()) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  entity_index_ = from.entity_index_;
  // @@protoc_insertion_point(copy_constructor:proto.dota.CUserMessageAnimStateGraphState)
}

void CUserMessageAnimStateGraphState::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CUserMessageAnimStateGraphState_usermessages_2eproto.base);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  entity_index_ = 0;
}

CUserMessageAnimStateGraphState::~CUserMessageAnimStateGraphState() {
  // @@protoc_insertion_point(destructor:proto.dota.CUserMessageAnimStateGraphState)
  SharedDtor();
}

void CUserMessageAnimStateGraphState::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CUserMessageAnimStateGraphState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CUserMessageAnimStateGraphState& CUserMessageAnimStateGraphState::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CUserMessageAnimStateGraphState_usermessages_2eproto.base);
  return *internal_default_instance();
}


void CUserMessageAnimStateGraphState::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.dota.CUserMessageAnimStateGraphState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    data_.ClearNonDefaultToEmptyNoArena();
  }
  entity_index_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CUserMessageAnimStateGraphState::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CUserMessageAnimStateGraphState*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 entity_index = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_entity_index(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional bytes data = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        object = msg->mutable_data();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParser;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheck(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CUserMessageAnimStateGraphState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.dota.CUserMessageAnimStateGraphState)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 entity_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_entity_index(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &entity_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.dota.CUserMessageAnimStateGraphState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.dota.CUserMessageAnimStateGraphState)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CUserMessageAnimStateGraphState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.dota.CUserMessageAnimStateGraphState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entity_index = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->entity_index(), output);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:proto.dota.CUserMessageAnimStateGraphState)
}

::google::protobuf::uint8* CUserMessageAnimStateGraphState::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:proto.dota.CUserMessageAnimStateGraphState)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 entity_index = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->entity_index(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:proto.dota.CUserMessageAnimStateGraphState)
  return target;
}

size_t CUserMessageAnimStateGraphState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.dota.CUserMessageAnimStateGraphState)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional int32 entity_index = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->entity_index());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CUserMessageAnimStateGraphState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:proto.dota.CUserMessageAnimStateGraphState)
  GOOGLE_DCHECK_NE(&from, this);
  const CUserMessageAnimStateGraphState* source =
      ::google::protobuf::DynamicCastToGenerated<CUserMessageAnimStateGraphState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:proto.dota.CUserMessageAnimStateGraphState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:proto.dota.CUserMessageAnimStateGraphState)
    MergeFrom(*source);
  }
}

void CUserMessageAnimStateGraphState::MergeFrom(const CUserMessageAnimStateGraphState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.dota.CUserMessageAnimStateGraphState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (cached_has_bits & 0x00000002u) {
      entity_index_ = from.entity_index_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CUserMessageAnimStateGraphState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:proto.dota.CUserMessageAnimStateGraphState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CUserMessageAnimStateGraphState::CopyFrom(const CUserMessageAnimStateGraphState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.dota.CUserMessageAnimStateGraphState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CUserMessageAnimStateGraphState::IsInitialized() const {
  return true;
}

void CUserMessageAnimStateGraphState::Swap(CUserMessageAnimStateGraphState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CUserMessageAnimStateGraphState::InternalSwap(CUserMessageAnimStateGraphState* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(entity_index_, other->entity_index_);
}

::google::protobuf::Metadata CUserMessageAnimStateGraphState::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_usermessages_2eproto);
  return ::file_level_metadata_usermessages_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dota
}  // namespace proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageAchievementEvent* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageAchievementEvent >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageAchievementEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageCloseCaption* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageCloseCaption >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageCloseCaption >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageCloseCaptionDirect* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageCloseCaptionDirect >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageCloseCaptionDirect >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageCloseCaptionPlaceholder* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageCloseCaptionPlaceholder >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageCloseCaptionPlaceholder >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageCurrentTimescale* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageCurrentTimescale >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageCurrentTimescale >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageDesiredTimescale* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageDesiredTimescale >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageDesiredTimescale >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageFade* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageFade >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageFade >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageShake* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageShake >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageShake >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageShakeDir* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageShakeDir >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageShakeDir >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageScreenTilt* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageScreenTilt >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageScreenTilt >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageSayText* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageSayText >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageSayText >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageSayText2* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageSayText2 >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageSayText2 >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageHudMsg* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageHudMsg >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageHudMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageHudText* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageHudText >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageHudText >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageTextMsg* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageTextMsg >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageTextMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageGameTitle* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageGameTitle >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageGameTitle >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageResetHUD* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageResetHUD >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageResetHUD >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageSendAudio* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageSendAudio >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageSendAudio >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageAudioParameter* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageAudioParameter >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageAudioParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageVoiceMask* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageVoiceMask >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageVoiceMask >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageRequestState* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageRequestState >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageRequestState >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageHintText* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageHintText >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageHintText >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageKeyHintText* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageKeyHintText >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageKeyHintText >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageVoiceSubtitle* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageVoiceSubtitle >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageVoiceSubtitle >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageVGUIMenu_Keys* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageVGUIMenu_Keys >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageVGUIMenu_Keys >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageVGUIMenu* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageVGUIMenu >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageVGUIMenu >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageRumble* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageRumble >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageRumble >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageTrain* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageTrain >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageTrain >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageSayTextChannel* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageSayTextChannel >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageSayTextChannel >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageColoredText* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageColoredText >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageColoredText >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageItemPickup* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageItemPickup >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageItemPickup >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageAmmoDenied* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageAmmoDenied >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageAmmoDenied >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageCrosshairAngle* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageCrosshairAngle >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageCrosshairAngle >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageShowMenu* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageShowMenu >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageShowMenu >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageCreditsMsg* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageCreditsMsg >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageCreditsMsg >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CEntityMessagePlayJingle* Arena::CreateMaybeMessage< ::proto::dota::CEntityMessagePlayJingle >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CEntityMessagePlayJingle >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CEntityMessageScreenOverlay* Arena::CreateMaybeMessage< ::proto::dota::CEntityMessageScreenOverlay >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CEntityMessageScreenOverlay >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CEntityMessageRemoveAllDecals* Arena::CreateMaybeMessage< ::proto::dota::CEntityMessageRemoveAllDecals >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CEntityMessageRemoveAllDecals >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CEntityMessagePropagateForce* Arena::CreateMaybeMessage< ::proto::dota::CEntityMessagePropagateForce >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CEntityMessagePropagateForce >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CEntityMessageDoSpark* Arena::CreateMaybeMessage< ::proto::dota::CEntityMessageDoSpark >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CEntityMessageDoSpark >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CEntityMessageFixAngle* Arena::CreateMaybeMessage< ::proto::dota::CEntityMessageFixAngle >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CEntityMessageFixAngle >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageCameraTransition_Transition_DataDriven* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageCameraTransition_Transition_DataDriven >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageCameraTransition_Transition_DataDriven >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageCameraTransition* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageCameraTransition >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageCameraTransition >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex* Arena::CreateMaybeMessage< ::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMsg_ParticleManager_ReleaseParticleIndex >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMsg_ParticleManager_CreateParticle* Arena::CreateMaybeMessage< ::proto::dota::CUserMsg_ParticleManager_CreateParticle >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMsg_ParticleManager_CreateParticle >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMsg_ParticleManager_DestroyParticle* Arena::CreateMaybeMessage< ::proto::dota::CUserMsg_ParticleManager_DestroyParticle >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMsg_ParticleManager_DestroyParticle >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving* Arena::CreateMaybeMessage< ::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMsg_ParticleManager_DestroyParticleInvolving >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMsg_ParticleManager_UpdateParticle* Arena::CreateMaybeMessage< ::proto::dota::CUserMsg_ParticleManager_UpdateParticle >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMsg_ParticleManager_UpdateParticle >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd* Arena::CreateMaybeMessage< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFwd >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient* Arena::CreateMaybeMessage< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOrient >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback* Arena::CreateMaybeMessage< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleFallback >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset* Arena::CreateMaybeMessage< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleOffset >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt* Arena::CreateMaybeMessage< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleEnt >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen* Arena::CreateMaybeMessage< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleSetFrozen >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw* Arena::CreateMaybeMessage< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMsg_ParticleManager_UpdateParticleShouldDraw >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment* Arena::CreateMaybeMessage< ::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMsg_ParticleManager_ChangeControlPointAttachment >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMsg_ParticleManager_UpdateEntityPosition* Arena::CreateMaybeMessage< ::proto::dota::CUserMsg_ParticleManager_UpdateEntityPosition >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMsg_ParticleManager_UpdateEntityPosition >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMsg_ParticleManager_SetParticleFoWProperties* Arena::CreateMaybeMessage< ::proto::dota::CUserMsg_ParticleManager_SetParticleFoWProperties >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMsg_ParticleManager_SetParticleFoWProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMsg_ParticleManager_SetParticleShouldCheckFoW* Arena::CreateMaybeMessage< ::proto::dota::CUserMsg_ParticleManager_SetParticleShouldCheckFoW >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMsg_ParticleManager_SetParticleShouldCheckFoW >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMsg_ParticleManager_SetParticleText* Arena::CreateMaybeMessage< ::proto::dota::CUserMsg_ParticleManager_SetParticleText >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMsg_ParticleManager_SetParticleText >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMsg_ParticleManager* Arena::CreateMaybeMessage< ::proto::dota::CUserMsg_ParticleManager >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMsg_ParticleManager >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMsg_HudError* Arena::CreateMaybeMessage< ::proto::dota::CUserMsg_HudError >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMsg_HudError >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMsg_CustomGameEvent* Arena::CreateMaybeMessage< ::proto::dota::CUserMsg_CustomGameEvent >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMsg_CustomGameEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageHapticPulse* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageHapticPulse >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageHapticPulse >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageHapticPulsePrecise* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageHapticPulsePrecise >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageHapticPulsePrecise >(arena);
}
template<> PROTOBUF_NOINLINE ::proto::dota::CUserMessageAnimStateGraphState* Arena::CreateMaybeMessage< ::proto::dota::CUserMessageAnimStateGraphState >(Arena* arena) {
  return Arena::CreateInternal< ::proto::dota::CUserMessageAnimStateGraphState >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
